<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsvHelper</name>
    </assembly>
    <members>
        <member name="T:CsvHelper.CsvBadDataException">
            <summary>
            Represents errors that occur due to bad data.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvBadDataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvBadDataException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvBadDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvBadDataException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvBadDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvBadDataException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvBadDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvFactory">
            <summary>
            Creates CsvHelper classes.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvFactory.CreateParser(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="configuration">The configuration to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper.CsvFactory.CreateParser(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper.CsvFactory.CreateReader(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="configuration">The configuration to use for the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.CsvFactory.CreateReader(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.CsvFactory.CreateReader(CsvHelper.ICsvParser)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvReader"/>.
            </summary>
            <param name="parser">The parser used to create the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.CsvFactory.CreateWriter(System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="configuration">The configuration to use for the writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper.CsvFactory.CreateWriter(System.IO.TextWriter)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="T:CsvHelper.CsvHelperException">
            <summary>
            Represents errors that occur in CsvHelper.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvMissingFieldException">
            <summary>
            Represents an error caused because a field is missing
            in the header while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvMissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvMissingFieldException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvParser">
            <summary>
            Parses a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.CharPosition">
            <summary>
            Gets the character position that the parser is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.BytePosition">
            <summary>
            Gets the byte position that the parser is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.Row">
            <summary>
            Gets the row of the CSV file that the parser is currently on.
            This is the logical CSV row.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.RawRow">
            <summary>
            Gets the row of the CSV file that the parser is currently on.
            This is the actual file row.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.RawRecord">
            <summary>
            Gets the raw row for the current record that was parsed.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> with the CSV file data.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.TextReader"/>
            and <see cref="T:CsvHelper.Configuration.CsvConfiguration"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> with the CSV file data.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1" /> of fields for the record read.
            If there are no more records, null is returned.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:CsvHelper.CsvParser.AddFieldToRecord(System.Int32@,System.String,System.Boolean@)">
            <summary>
            Adds the field to the current record.
            </summary>
            <param name="recordPosition">The record position to add the field to.</param>
            <param name="field">The field to add.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.AppendField(System.String@,System.Int32,System.Int32)">
            <summary>
            Appends the current buffer data to the field.
            </summary>
            <param name="field">The field to append the current buffer to.</param>
            <param name="fieldStartPosition">The start position in the buffer that the .</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.UpdateBytePosition(System.Int32,System.Int32)">
            <summary>
            Updates the byte position using the data from the reader buffer.
            </summary>
            <param name="fieldStartPosition">The field start position.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.ReadLine">
            <summary>
            Reads the next line.
            </summary>
            <returns>The line separated into fields.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.GetChar(System.Char@,System.Int32@,System.Int32@,System.String@,System.Boolean@,System.Boolean,System.Int32@,System.Int32@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the current character from the buffer while
            advancing the buffer if it ran out.
            </summary>
            <param name="ch">The char that gets the read char set to.</param>
            <param name="fieldStartPosition">The start position of the current field.</param>
            <param name="rawFieldStartPosition">The start position of the raw field.</param>
            <param name="field">The field.</param>
            <param name="prevCharWasDelimiter">A value indicating if the previous char read was a delimiter.</param>
            <param name="recordPosition">The position in the record we are currently at.</param>
            <param name="fieldLength">The length of the field in the buffer.</param>
            <param name="inComment">A value indicating if the row is current a comment row.</param>
            <param name="isPeek">A value indicating if this call is a peek. If true and the end of the record was found
            no record handling will be done.</param>
            <returns>A value indicating if read a char was read. True if a char was read, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.ReadExcelSeparator">
            <summary>
            Reads the Excel seperator and sets it to the delimiter.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvParserException">
            <summary>
            Represents errors that occur while parsing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParserException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvReader">
            <summary>
            Reads data that was parsed from <see cref="T:CsvHelper.ICsvParser" />.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.FieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.CurrentRecord">
            <summary>
            Get the current record;
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.Row">
            <summary>
            Gets the current row.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader"/> and
            <see cref="T:CsvHelper.CsvParser"/> as the default parser.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader"/> and
            <see cref="T:CsvHelper.Configuration.CsvConfiguration"/> and <see cref="T:CsvHelper.CsvParser"/> as the default parser.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(CsvHelper.ICsvParser)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:CsvHelper.ICsvParser" />.
            </summary>
            <param name="parser">The <see cref="T:CsvHelper.ICsvParser" /> used to parse the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.ReadHeader">
            <summary>
            Reads the header field without reading the first row.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.Read">
            <summary>
            Advances the reader to the next record.
            If HasHeaderRecord is true (true by default), the first record of
            the CSV file will be automatically read in as the header record
            and the second record will be returned.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name and the index
            instance of that field. The index is used when there are
            multiple columns with the same header name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``2(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``2(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``2(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``2(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``2(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``2(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.IsRecordEmpty">
            <summary>
            Determines whether the current record is empty.
            A record is considered empty if all fields are empty.
            </summary>
            <returns>
              <c>true</c> if [is record empty]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:CsvHelper.CsvReader.CheckHasBeenRead">
            <summary>
            Checks if the reader has been read yet.
            </summary>
            <exception cref="T:CsvHelper.CsvReaderException" />
        </member>
        <member name="M:CsvHelper.CsvReader.IsRecordEmpty(System.Boolean)">
            <summary>
            Determines whether the current record is empty.
            A record is considered empty if all fields are empty.
            </summary>
            <param name="checkHasBeenRead">True to check if the record 
            has been read, otherwise false.</param>
            <returns>
              <c>true</c> if [is record empty]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetEmtpyStringMethod">
            <summary>
            Gets a function to test for an empty string.
            Will check <see cref="P:CsvHelper.Configuration.CsvConfiguration.TrimFields" /> when making its decision.
            </summary>
            <returns>The function to test for an empty string.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetFieldIndex(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the index of the field at name if found.
            </summary>
            <param name="name">The name of the field to get the index for.</param>
            <param name="index">The index of the field if there are multiple fields with the same name.</param>
            <param name="isTryGet">A value indicating if the call was initiated from a TryGet.</param>
            <returns>The index of the field if found, otherwise -1.</returns>
            <exception cref="T:CsvHelper.CsvReaderException">Thrown if there is no header record.</exception>
            <exception cref="T:CsvHelper.CsvMissingFieldException">Thrown if there isn't a field with name.</exception>
        </member>
        <member name="M:CsvHelper.CsvReader.GetFieldIndex(System.String[],System.Int32,System.Boolean)">
            <summary>
            Gets the index of the field at name if found.
            </summary>
            <param name="names">The possible names of the field to get the index for.</param>
            <param name="index">The index of the field if there are multiple fields with the same name.</param>
            <param name="isTryGet">A value indicating if the call was initiated from a TryGet.</param>
            <returns>The index of the field if found, otherwise -1.</returns>
            <exception cref="T:CsvHelper.CsvReaderException">Thrown if there is no header record.</exception>
            <exception cref="T:CsvHelper.CsvMissingFieldException">Thrown if there isn't a field with name.</exception>
        </member>
        <member name="M:CsvHelper.CsvReader.ParseNamedIndexes">
            <summary>
            Parses the named indexes from the header record.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReader.ShouldSkipRecord">
            <summary>
            Checks if the current record should be skipped or not.
            </summary>
            <returns><c>true</c> if the current record should be skipped, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:CsvHelper.CsvReaderException">
            <summary>
            Represents errors that occur while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvReaderException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.CsvSerializer">
            <summary>
            Defines methods used to serialize data into a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvSerializer.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvSerializer.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new serializer using the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the CSV file data to.</param>
        </member>
        <member name="M:CsvHelper.CsvSerializer.#ctor(System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates a new serializer using the given <see cref="T:System.IO.TextWriter"/>
            and <see cref="T:CsvHelper.Configuration.CsvConfiguration"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the CSV file data to.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.CsvSerializer.Write(System.String[])">
            <summary>
            Writes a record to the CSV file.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper.CsvSerializer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvSerializer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvSerializer.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="T:CsvHelper.CsvWriter">
            <summary>
            Used to write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvWriter.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.TextWriter" />,
            a default <see cref="T:CsvHelper.Configuration.CsvConfiguration"/> and <see cref="T:CsvHelper.CsvSerializer"/>
            as the default serializer.
            </summary>
            <param name="writer">The writer used to write the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.TextWriter"/>
            and <see cref="T:CsvHelper.Configuration.CsvConfiguration"/> and <see cref="T:CsvHelper.CsvSerializer"/>
            as the default serializer.
            </summary>
            <param name="writer">The <see cref="T:System.IO.StreamWriter"/> use to write the CSV file.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(CsvHelper.ICsvSerializer)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:CsvHelper.ICsvSerializer"/>.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file. The field
            may get quotes added to it.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.String,System.Boolean)">
            <summary>
            Writes the field to the CSV file. This will
            ignore any need to quote and ignore the
            <see cref="P:CsvHelper.Configuration.CsvConfiguration.QuoteAllFields"/>
            and just quote based on the shouldQuote
            parameter.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
            <param name="shouldQuote">True to quote the field, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``2(``0)">
            <summary>
            Writes the field to the CSV file
            using the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <typeparam name="TConverter">The type of the converter.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.Type,System.Object)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.Type,System.Object,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.NextRecord">
            <summary>
            Ends writing of the current record
            and starts a new record. This is used
            when manually writing records with WriteField.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteExcelSeparator">
            <summary>
            Write the Excel seperator record.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="T:CsvHelper.CsvWriterException">
            <summary>
            Represents errors that occur while writing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriterException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.ExceptionHelper">
            <summary>
            Common exception tasks.
            </summary>
        </member>
        <member name="M:CsvHelper.ExceptionHelper.AddExceptionDataMessage(System.Exception,CsvHelper.ICsvParser,System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Nullable{System.Int32},System.String[])">
            <summary>
            Adds CsvHelper specific information to <see cref="P:System.Exception.Data"/>.
            </summary>
            <param name="exception">The exception to add the info to.</param>
            <param name="parser">The parser.</param>
            <param name="type">The type of object that was being created in the <see cref="T:CsvHelper.CsvReader"/>.</param>
            <param name="namedIndexes">The named indexes in the <see cref="T:CsvHelper.CsvReader"/>.</param>
            <param name="currentIndex">The current index of the <see cref="T:CsvHelper.CsvReader"/>.</param>
            <param name="currentRecord">The current record of the <see cref="T:CsvHelper.CsvReader"/>.</param>
        </member>
        <member name="M:CsvHelper.ExceptionHelper.GetErrorMessage(CsvHelper.ICsvParser,System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Nullable{System.Int32},System.String[])">
            <summary>
            Gets CsvHelper information to be added to an exception.
            </summary>
            <param name="parser">The parser.</param>
            <param name="type">The type of object that was being created in the <see cref="T:CsvHelper.CsvReader"/>.</param>
            <param name="namedIndexes">The named indexes in the <see cref="T:CsvHelper.CsvReader"/>.</param>
            <param name="currentIndex">The current index of the <see cref="T:CsvHelper.CsvReader"/>.</param>
            <param name="currentRecord">The current record of the <see cref="T:CsvHelper.CsvReader"/>.</param>
            <returns>The CsvHelper information.</returns>
        </member>
        <member name="T:CsvHelper.ICsvFactory">
            <summary>
            Defines methods used to create
            CsvHelper classes.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvFactory.CreateParser(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="configuration">The configuration to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper.ICsvFactory.CreateParser(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper.ICsvFactory.CreateReader(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="configuration">The configuration to use for the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.ICsvFactory.CreateReader(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.ICsvFactory.CreateReader(CsvHelper.ICsvParser)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvReader"/>.
            </summary>
            <param name="parser">The parser used to create the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.ICsvFactory.CreateWriter(System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="configuration">The configuration to use for the writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper.ICsvFactory.CreateWriter(System.IO.TextWriter)">
            <summary>
            Creates an <see cref="T:CsvHelper.ICsvWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="T:CsvHelper.ICsvParser">
            <summary>
            Defines methods used the parse a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.CharPosition">
            <summary>
            Gets the character position that the parser is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.BytePosition">
            <summary>
            Gets the byte position that the parser is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.Row">
            <summary>
            Gets the row of the CSV file that the parser is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.RawRecord">
            <summary>
            Gets the raw row for the current record that was parsed.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:String[]" /> of fields for the record read.</returns>
        </member>
        <member name="T:CsvHelper.ICsvReader">
            <summary>
            Defines methods used to read parsed data
            from a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.FieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvReader.ReadHeader">
            <summary>
            Reads the header field without reading the first row.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.Read">
            <summary>
            Advances the reader to the next record. If the header hasn't been read
            yet, it'll automatically be read along with the first record.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="T:CsvHelper.ICsvReaderRow">
            <summary>
            Defines methods used to read parsed data
            from a CSV file row.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReaderRow.CurrentRecord">
            <summary>
            Get the current record;
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReaderRow.Row">
            <summary>
            Gets the current row.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReaderRow.Item(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.ICsvReaderRow.Item(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.ICsvReaderRow.Item(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name and the index
            instance of that field. The index is used when there are
            multiple columns with the same header name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.Type,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.Type,System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.Type,System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.Type,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.Type,System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField(System.Type,System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``1(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``2(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``2(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.GetField``2(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``1(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``2(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``2(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.TryGetField``2(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReaderRow.IsRecordEmpty">
            <summary>
            Determines whether the current record is empty.
            A record is considered empty if all fields are empty.
            </summary>
            <returns>
              <c>true</c> if [is record empty]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.ICsvSerializer">
            <summary>
            Defines methods used to serialize data into a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvSerializer.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvSerializer.Write(System.String[])">
            <summary>
            Writes a record to the CSV file.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="T:CsvHelper.ICsvWriter">
            <summary>
            Defines methods used to write to a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvWriter.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file. The field
            may get quotes added to it.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField(System.String,System.Boolean)">
            <summary>
            Writes the field to the CSV file. This will
            ignore any need to quote and ignore the
            <see cref="P:CsvHelper.Configuration.CsvConfiguration.QuoteAllFields"/>
            and just quote based on the shouldQuote
            parameter.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
            <param name="shouldQuote">True to quote the field, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField``1(``0,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField``2(``0)">
            <summary>
            Writes the field to the CSV file
            using the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <typeparam name="TConverter">The type of the converter.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField(System.Type,System.Object)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField(System.Type,System.Object,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.NextRecord">
            <summary>
            Ends writing of the current record
            and starts a new record. This is used
            when manually writing records with <see cref="M:CsvHelper.ICsvWriter.WriteField``1(``0)"/>
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteExcelSeparator">
            <summary>
            Write the Excel seperator record.
            </summary>
        </member>
        <member name="T:CsvHelper.ReflectionHelper">
            <summary>
            Common reflection tasks.
            </summary>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance of type T.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <param name="type">The type of instance to create.</param>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of the specified type.</returns>
        </member>
        <member name="T:CsvHelper.StringHelper">
            <summary>
            Common string tasks.
            </summary>
        </member>
        <member name="M:CsvHelper.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            Tests is a string is null or whitespace.
            </summary>
            <param name="s">The string to test.</param>
            <returns>True if the string is null or whitespace, otherwise false.</returns>
        </member>
        <member name="T:CsvHelper.Configuration.CsvConfiguration">
            <summary>
            Configuration used for reading and writing CSV data.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.PropertyBindingFlags">
            <summary>
            Gets or sets the property binding flags.
            This determines what properties on the custom
            class are used. Default is Public | Instance.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.HasHeaderRecord">
            <summary>
            Gets or sets a value indicating if the
            CSV file has a header record.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.HasExcelSeparator">
            <summary>
            Gets or sets a value indicating the if the CSV
            file contains the Excel "sep=delimeter" config
            option in the first row.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.WillThrowOnMissingField">
            <summary>
            Gets or sets a value indicating if an exception will be
            thrown if a field defined in a mapping is missing.
            True to throw an exception, otherwise false.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.DetectColumnCountChanges">
            <summary>
            Gets or sets a value indicating whether changes in the column
            count should be detected. If true, a <see cref="T:CsvHelper.CsvBadDataException"/>
            will be thrown if a different column count is detected.
            </summary>
            <value>
            <c>true</c> if [detect column count changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IsHeaderCaseSensitive">
            <summary>
            Gets or sets a value indicating whether matching header
            column names is case sensitive. True for case sensitive
            matching, otherwise false. Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IgnoreHeaderWhiteSpace">
            <summary>
            Gets or sets a value indicating whether matcher header
            column names will ignore white space. True to ignore
            white space, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IgnoreReferences">
            <summary>
            Gets or sets a value indicating whether references
            should be ignored when auto mapping. True to ignore
            references, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.TrimHeaders">
            <summary>
            Gets or sets a value indicating whether headers
            should be trimmed. True to trim headers,
            otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.TrimFields">
            <summary>
            Gets or sets a value indicating whether fields
            should be trimmed. True to trim fields,
            otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Delimiter">
            <summary>
            Gets or sets the delimiter used to separate fields.
            Default is ',';
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Quote">
            <summary>
            Gets or sets the character used to quote fields.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.QuoteString">
            <summary>
            Gets a string representation of the currently configured Quote character.
            </summary>
            <value>
            The new quote string.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.DoubleQuoteString">
            <summary>
            Gets a string representation of two of the currently configured Quote characters.
            </summary>
            <value>
            The new double quote string.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.QuoteRequiredChars">
            <summary>
            Gets an array characters that require
            the field to be quoted.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Comment">
            <summary>
            Gets or sets the character used to denote
            a line that is commented out. Default is '#'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.AllowComments">
            <summary>
            Gets or sets a value indicating if comments are allowed.
            True to allow commented out lines, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.BufferSize">
            <summary>
            Gets or sets the size of the buffer
            used for reading and writing CSV files.
            Default is 2048.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.QuoteAllFields">
            <summary>
            Gets or sets a value indicating whether all fields are quoted when writing,
            or just ones that have to be. <see cref="P:CsvHelper.Configuration.CsvConfiguration.QuoteAllFields"/> and
            <see cref="P:CsvHelper.Configuration.CsvConfiguration.QuoteNoFields"/> cannot be true at the same time. Turning one
            on will turn the other off.
            </summary>
            <value>
              <c>true</c> if all fields should be quoted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.QuoteNoFields">
            <summary>
            Gets or sets a value indicating whether no fields are quoted when writing.
            <see cref="P:CsvHelper.Configuration.CsvConfiguration.QuoteAllFields"/> and <see cref="P:CsvHelper.Configuration.CsvConfiguration.QuoteNoFields"/> cannot be true 
            at the same time. Turning one on will turn the other off.
            </summary>
            <value>
              <c>true</c> if [quote no fields]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.CountBytes">
            <summary>
            Gets or sets a value indicating whether the number of bytes should
            be counted while parsing. Default is false. This will slow down parsing
            because it needs to get the byte count of every char for the given encoding.
            The <see cref="P:CsvHelper.Configuration.CsvConfiguration.Encoding"/> needs to be set correctly for this to be accurate.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Encoding">
            <summary>
            Gets or sets the encoding used when counting bytes.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.CultureInfo">
            <summary>
            Gets or sets the culture info used to read an write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.SkipEmptyRecords">
            <summary>
            Gets or sets a value indicating whether empty rows should be skipped when reading.
            A record is considered empty if all fields are empty.
            </summary>
            <value>
              <c>true</c> if [skip empty rows]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ShouldSkipRecord">
            <summary>
            Gets or sets the callback that will be called to
            determine whether to skip the given record or not.
            This overrides the <see cref="P:CsvHelper.Configuration.CsvConfiguration.SkipEmptyRecords"/> setting.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IgnoreQuotes">
            <summary>
            Gets or sets a value indicating if quotes should be
            ingored when parsing and treated like any other character.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IgnorePrivateAccessor">
            <summary>
            Gets or sets a value indicating if private
            get and set property accessors should be
            ignored when reading and writing.
            True to ignore, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IgnoreBlankLines">
            <summary>
            Gets or sets a value indicating if blank lines
            should be ignored when reading.
            True to ignore, otherwise false. Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.UseExcelLeadingZerosFormatForNumerics">
            <summary>
            Gets or sets a value indicating if an Excel specific
            format should be used when writing fields containing
            numeric values. e.g. 00001 -> ="00001"
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.PrefixReferenceHeaders">
            <summary>
            Gets or sets a value indicating if headers of reference
            properties should get prefixed by the parent property name 
            when automapping.
            True to prefix, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ThrowOnBadData">
            <summary>
            Gets or sets a value indicating if an exception should
            be thrown when bad field data is detected.
            True to throw, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.BadDataCallback">
            <summary>
            Gets or sets a method that gets called when bad
            data is detected.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.#ctor">
            <summary>
            Creates a new CsvConfiguration.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.BuildRequiredQuoteChars">
            <summary>
            Builds the values for the RequiredQuoteChars property.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.CsvConfigurationException">
            <summary>
            Represents configuration errors that occur.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.CsvConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.CsvConfigurationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.CsvConfigurationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.CsvConfigurationException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.TypeConversion.BooleanConverter">
            <summary>
            Converts a Boolean to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.BooleanConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.BooleanConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.ByteConverter">
            <summary>
            Converts a Byte to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.ByteConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.ByteConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.CharConverter">
            <summary>
            Converts a Char to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.CharConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.CharConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.CsvTypeConverterException">
            <summary>
            Represents errors that occur while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.CsvTypeConverterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.CsvTypeConverterException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.CsvTypeConverterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.CsvTypeConverterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.CsvTypeConverterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.CsvTypeConverterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.CsvTypeConverterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.CsvTypeConverterException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CsvHelper.TypeConversion.DateTimeConverter">
            <summary>
            Converts a DateTime to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DateTimeConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DateTimeConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DateTimeOffsetConverter">
            <summary>
            Converts a DateTimeOffset to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DateTimeOffsetConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DateTimeOffsetConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DecimalConverter">
            <summary>
            Converts a Decimal to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DecimalConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DecimalConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DefaultTypeConverter">
            <summary>
            Converts an object to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DefaultTypeConverter.ConvertToString(CsvHelper.TypeConversion.TypeConverterOptions,System.Object)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="value">The object to convert to a string.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DefaultTypeConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DefaultTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DefaultTypeConverter.CanConvertTo(System.Type)">
            <summary>
            Determines whether this instance [can convert to] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert to] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DoubleConverter">
            <summary>
            Converts a Double to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DoubleConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>
            The object created from the string.
            </returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DoubleConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.EnumConverter">
            <summary>
            Converts an Enum to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverter.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:CsvHelper.TypeConversion.EnumConverter"/> for the given <see cref="T:System.Enum"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type of the Enum.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.EnumerableConverter">
            <summary>
            Throws an exception when used. This is here so that it's apparent
            that there is no support for IEnumerable type coversion. A custom
            converter will need to be created to have a field convert to and 
            from an IEnumerable.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumerableConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Throws an exception.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumerableConverter.ConvertToString(CsvHelper.TypeConversion.TypeConverterOptions,System.Object)">
            <summary>
            Throws an exception.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="value">The object to convert to a string.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumerableConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumerableConverter.CanConvertTo(System.Type)">
            <summary>
            Determines whether this instance [can convert to] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert to] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.GuidConverter">
            <summary>
            Converts a Guid to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.GuidConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.GuidConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.Int16Converter">
            <summary>
            Converts an Int16 to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int16Converter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int16Converter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.Int32Converter">
            <summary>
            Converts an Int32 to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int32Converter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int32Converter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.Int64Converter">
            <summary>
            Converts an Int64 to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int64Converter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int64Converter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.ITypeConverter">
            <summary>
            Converts objects to and from strings.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverter.ConvertToString(CsvHelper.TypeConversion.TypeConverterOptions,System.Object)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="value">The object to convert to a string.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverter.CanConvertTo(System.Type)">
            <summary>
            Determines whether this instance [can convert to] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert to] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.NullableConverter">
            <summary>
            Converts a Nullable to and from a string.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.NullableConverter.NullableType">
            <summary>
            Gets the type of the nullable.
            </summary>
            <value>
            The type of the nullable.
            </value>
        </member>
        <member name="P:CsvHelper.TypeConversion.NullableConverter.UnderlyingType">
            <summary>
            Gets the underlying type of the nullable.
            </summary>
            <value>
            The underlying type.
            </value>
        </member>
        <member name="P:CsvHelper.TypeConversion.NullableConverter.UnderlyingTypeConverter">
            <summary>
            Gets the type converter for the underlying type.
            </summary>
            <value>
            The type converter.
            </value>
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverter.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:CsvHelper.TypeConversion.NullableConverter"/> for the given <see cref="T:System.Nullable`1"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The nullable type.</param>
            <exception cref="T:System.ArgumentException">type is not a nullable type.</exception>
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverter.ConvertToString(CsvHelper.TypeConversion.TypeConverterOptions,System.Object)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="value">The object to convert to a string.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.SByteConverter">
            <summary>
            Converts a SByte to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.SByteConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.SByteConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.SingleConverter">
            <summary>
            Converts a Float to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.SingleConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.SingleConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.StringConverter">
            <summary>
            Converts a string to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.StringConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.StringConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TimeSpanConverter">
            <summary>
            Converts a TimeSpan to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TimeSpanConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.TimeSpanConverter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverterFactory">
            <summary>
            Creates <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>s.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterFactory.#cctor">
            <summary>
            Initializes the <see cref="T:CsvHelper.TypeConversion.TypeConverterFactory" /> class.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterFactory.AddConverter(System.Type,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the converter converts.</param>
            <param name="typeConverter">The type converter that converts the type.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterFactory.AddConverter``1(CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the converter converts.</typeparam>
            <param name="typeConverter">The type converter that converts the type.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterFactory.RemoveConverter(System.Type)">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to remove the converter for.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterFactory.RemoveConverter``1">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to remove the converter for.</typeparam>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterFactory.GetConverter(System.Type)">
            <summary>
            Gets the converter for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to get the converter for.</param>
            <returns>The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterFactory.GetConverter``1">
            <summary>
            Gets the converter for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to get the converter for.</typeparam>
            <returns>The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverterOptions">
            <summary>
            Options used when doing type conversion.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.CultureInfo">
            <summary>
            Gets or sets the culture info.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.DateTimeStyle">
            <summary>
            Gets or sets the date time style.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.NumberStyle">
            <summary>
            Gets or sets the number style.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.BooleanTrueValues">
            <summary>
            Gets the list of values that can be
            used to represent a boolean of true.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.BooleanFalseValues">
            <summary>
            Gets the list of values that can be
            used to represent a boolean of false.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.Format">
            <summary>
            Gets or sets the string format.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptions.Merge(CsvHelper.TypeConversion.TypeConverterOptions[])">
            <summary>
            Merges TypeConverterOptions by applying the values of sources in order to a
            new TypeConverterOptions instance.
            </summary>
            <param name="sources">The sources that will be applied.</param>
            <returns>A new instance of TypeConverterOptions with the source applied to it.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverterOptionsFactory">
            <summary>
            Creates <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsFactory.AddOptions(System.Type,CsvHelper.TypeConversion.TypeConverterOptions)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the options are for.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsFactory.AddOptions``1(CsvHelper.TypeConversion.TypeConverterOptions)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the options are for.</typeparam>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsFactory.RemoveOptions(System.Type)">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given type.
            </summary>
            <param name="type">The type to remove the options for.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsFactory.RemoveOptions``1">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given type.
            </summary>
            <typeparam name="T">The type to remove the options for.</typeparam>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsFactory.GetOptions(System.Type)">
            <summary>
            Get the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the options are for.</param>
            <returns>The options for the given type.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsFactory.GetOptions``1">
            <summary>
            Get the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the options are for.</typeparam>
            <returns>The options for the given type.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.UInt16Converter">
            <summary>
            Converts a UInt16 to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt16Converter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt16Converter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.UInt32Converter">
            <summary>
            Converts a UInt32 to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt32Converter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt32Converter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.UInt64Converter">
            <summary>
            Converts a UInt64 to and from a string.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt64Converter.ConvertFromString(CsvHelper.TypeConversion.TypeConverterOptions,System.String)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="options">The options to use when converting.</param>
            <param name="text">The string to convert to an object.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt64Converter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance [can convert from] the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this instance [can convert from] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.Func`2">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Used to have extension methods in C# 2.0.
            </summary>
        </member>
    </members>
</doc>
