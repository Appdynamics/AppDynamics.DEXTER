using AppDynamics.Dexter.DataObjects;
using AppDynamics.Dexter.Extensions;
using CsvHelper;
using Newtonsoft.Json.Linq;
using NLog;
using OfficeOpenXml;
using OfficeOpenXml.ConditionalFormatting;
using OfficeOpenXml.Drawing.Chart;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;
using OfficeOpenXml.Table.PivotTable;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;

namespace AppDynamics.Dexter
{
    public class ProcessJob
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();
        private static Logger loggerConsole = LogManager.GetLogger("AppDynamics.Dexter.Console");

        #region Constants for metric retrieval and mapping

        // Constants for metric naming
        private const string METRIC_ART_FULLNAME = "Average Response Time (ms)";
        private const string METRIC_CPM_FULLNAME = "Calls per Minute";
        private const string METRIC_EPM_FULLNAME = "Errors per Minute";
        private const string METRIC_EXCPM_FULLNAME = "Exceptions per Minute";
        private const string METRIC_HTTPEPM_FULLNAME = "HTTP Error Codes per Minute";

        // In EntityMetricExtractMapping.csv
        private const string RANGE_ROLLUP_TYPE_AVERAGE = "AVERAGE";
        private const string RANGE_ROLLUP_TYPE_SUM = "SUM";

        private const string METRIC_GRAPH_AXIS_PRIMARY = "PRIMARY";
        private const string METRIC_GRAPH_AXIS_SECONDARY = "SECONDARY";

        private const string TRANSACTIONS_METRICS_SET = "CallsAndResponse";

        #endregion

        #region Constants for the folder and file names of data extract

        private const string DATA_FOLDER_NAME = "Data";

        // Parent Folder names
        private const string ENTITIES_FOLDER_NAME = "ENT";
        private const string CONFIGURATION_FOLDER_NAME = "CFG";
        private const string METRICS_FOLDER_NAME = "METR";
        private const string SNAPSHOTS_FOLDER_NAME = "SNAP";
        private const string SNAPSHOT_FOLDER_NAME = "{0}.{1:yyyyMMddHHmmss}";
        private const string EVENTS_FOLDER_NAME = "EVT";
        private const string ACTIVITYGRID_FOLDER_NAME = "FLOW";

        // Metadata file names
        private const string EXTRACT_CONFIGURATION_APPLICATION_FILE_NAME = "configuration.xml";
        private const string EXTRACT_CONFIGURATION_CONTROLLER_FILE_NAME = "settings.json";
        private const string EXTRACT_CONTROLLER_VERSION_FILE_NAME = "controllerversion.xml";
        private const string EXTRACT_ENTITY_APPLICATIONS_FILE_NAME = "applications.json";
        private const string EXTRACT_ENTITY_APPLICATION_FILE_NAME = "application.json";
        private const string EXTRACT_ENTITY_TIERS_FILE_NAME = "tiers.json";
        private const string EXTRACT_ENTITY_NODES_FILE_NAME = "nodes.json";
        private const string EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME = "businesstransactions.json";
        private const string EXTRACT_ENTITY_BACKENDS_FILE_NAME = "backends.json";
        private const string EXTRACT_ENTITY_BACKENDS_DETAIL_FILE_NAME = "backendsdetail.json";
        private const string EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME = "serviceendpoints.json";
        private const string EXTRACT_ENTITY_SERVICE_ENDPOINTS_DETAIL_FILE_NAME = "serviceendpointsdetail.json";
        private const string EXTRACT_ENTITY_ERRORS_FILE_NAME = "errors.json";
        private const string EXTRACT_ENTITY_INFORMATION_POINTS_FILE_NAME = "informationpoints.json";
        private const string EXTRACT_ENTITY_INFORMATION_POINTS_DETAIL_FILE_NAME = "informationpointsdetail.json";

        // Metric data file names
        private const string EXTRACT_METRIC_FULL_FILE_NAME = "full.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";
        private const string EXTRACT_METRIC_HOUR_FILE_NAME = "hour.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";

        // Flowmap file names
        private const string EXTRACT_ENTITY_FLOWMAP_FILE_NAME = "flowmap.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";

        // List of Snapshots file names
        private const string EXTRACT_SNAPSHOTS_FILE_NAME = "snapshots.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";
        private const int SNAPSHOTS_QUERY_PAGE_SIZE = 600;

        // Snapshot file names
        private const string EXTRACT_SNAPSHOT_FLOWMAP_FILE_NAME = "flowmap.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_FILE_NAME = "segments.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME = "segment.{0}.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_CALLGRAPH_FILE_NAME = "callgraph.{0}.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_ERROR_FILE_NAME = "error.{0}.json";

        private const string SNAPSHOT_UX_NORMAL = "NORMAL";
        private const string SNAPSHOT_UX_SLOW = "SLOW";
        private const string SNAPSHOT_UX_VERY_SLOW = "VERY_SLOW";
        private const string SNAPSHOT_UX_STALL = "STALL";
        private const string SNAPSHOT_UX_ERROR = "ERROR";

        // Mapping for snapshot folder names
        private static Dictionary<string, string> userExperienceFolderNameMapping = new Dictionary<string, string>
        {
            {SNAPSHOT_UX_NORMAL, "NM"},
            {SNAPSHOT_UX_SLOW, "SL"},
            {SNAPSHOT_UX_VERY_SLOW, "VS"},
            {SNAPSHOT_UX_STALL, "ST"},
            {SNAPSHOT_UX_ERROR, "ER"}
        };

        // Snapshots file names
        private const string HEALTH_RULE_VIOLATIONS_FILE_NAME = "healthruleviolations.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";
        private const string EVENTS_FILE_NAME = "{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.json";

        // There are a bazillion types of events
        // Source C:\appdynamics\codebase\controller\controller-api\agent\src\main\java\com\singularity\ee\controller\api\constants\EventType.java
        // They are sort of documented here:
        //      https://docs.appdynamics.com/display/PRO42/Events+Reference
        //      https://docs.appdynamics.com/display/PRO43/Remediation+Scripts
        //      https://docs.appdynamics.com/display/PRO43/Build+a+Custom+Action
        // Choosing select few that I care about
        private static List<string> eventTypes = new List<string>
        {
            // Events UI: Application Changes
            // App Server Restart
            { "APP_SERVER_RESTART" },
            // Thrown when application parameters change, like JVM options, etc
            { "APPLICATION_CONFIG_CHANGE" },
            // This is injected by user / REST API.
            { "APPLICATION_DEPLOYMENT" },

            // Events UI: Code problems
            // Code deadlock detected by Agent
            { "DEADLOCK" },
            // This is thrown when any resource pool size is reached, thread pool, connection pool etc. fall into this category
            { "RESOURCE_POOL_LIMIT" },
                       
            // Events UI: Custom
            // Custom Events thrown by API calls using REST or machine agent API
            { "CUSTOM" },

            // Events UI: Server Crashes
            { "APPLICATION_CRASH" },
            // CLR Crash
            { "CLR_CRASH" },            

            // Events UI: Health Rule Violations
            // Health rules
            { "POLICY_OPEN_WARNING" },
            { "POLICY_OPEN_CRITICAL" },
            { "POLICY_CLOSE_WARNING" },
            { "POLICY_CLOSE_CRITICAL" },
            { "POLICY_UPGRADED" },
            { "POLICY_DOWNGRADED" },
            { "POLICY_CANCELED_WARNING" },
            { "POLICY_CANCELED_CRITICAL" },
            { "POLICY_CONTINUES_CRITICAL" },
            { "POLICY_CONTINUES_WARNING" },

            // Events UI: Error
            // This is thrown when the agent detects and error NOT during a BT (no BT id on thread)
            { "APPLICATION_ERROR" },

            // Events UI: Not possible - this is just a query here
            // Diagnostic session.  There are several subTypes for this.
            { "DIAGNOSTIC_SESSION" },

            // Registration limits for Agent
            { "AGENT_ADD_BLACKLIST_REG_LIMIT_REACHED" },
            { "AGENT_ASYNC_ADD_REG_LIMIT_REACHED" },
            { "AGENT_ERROR_ADD_REG_LIMIT_REACHED" },
            { "AGENT_METRIC_BLACKLIST_REG_LIMIT_REACHED" },
            { "AGENT_METRIC_REG_LIMIT_REACHED" },

            // Registration limits for Controller
            { "CONTROLLER_ASYNC_ADD_REG_LIMIT_REACHED" },
            { "CONTROLLER_ERROR_ADD_REG_LIMIT_REACHED" },
            { "CONTROLLER_EVENT_UPLOAD_LIMIT_REACHED" },
            { "CONTROLLER_METRIC_REG_LIMIT_REACHED" },
            { "CONTROLLER_RSD_UPLOAD_LIMIT_REACHED" },
            { "CONTROLLER_STACKTRACE_ADD_REG_LIMIT_REACHED" },
            { "CONTROLLER_METADATA_REGISTRATION_LIMIT_REACHED" },

            // Custom Actions
            { "CUSTOM_ACTION_STARTED" },
            { "CUSTOM_ACTION_FAILED" },
            { "CUSTOM_ACTION_END" },
            { "RUNBOOK_DIAGNOSTIC SESSION_STARTED" },
            { "RUNBOOK_DIAGNOSTIC SESSION_FAILED" },
            { "RUNBOOK_DIAGNOSTIC SESSION_END" },
            { "RUN_LOCAL_SCRIPT_ACTION_STARTED" },
            { "RUN_LOCAL_SCRIPT_ACTION_FAILED" },
            { "RUN_LOCAL_SCRIPT_ACTION_END" },
            { "THREAD_DUMP_ACTION_END" },
            { "THREAD_DUMP_ACTION_FAILED" },
            { "THREAD_DUMP_ACTION_STARTED" },
            { "WORKFLOW_ACTION_END" },
            { "WORKFLOW_ACTION_FAILED" },
            { "WORKFLOW_ACTION_STARTED" },

            // Notifications
            { "EMAIL_SENT" },
            { "SMS_SENT" },

            // Discovery
            { "MACHINE_DISCOVERED" },
            { "NODE_DISCOVERED" },
            { "SERVICE_ENDPOINT_DISCOVERED" },
            { "TIER_DISCOVERED" },
            { "TIER_DISCOVERED" },
            { "TIER_DISCOVERED" },
            { "TIER_DISCOVERED" },

            // Others
            { "CONTROLLER_AGENT_VERSION_INCOMPATIBILITY" },
            { "LICENSE" },
            { "DISK_SPACE" },
            { "AGENT_STATUS" },
            { "AGENT_DIAGNOSTICS" },
            { "AGENT_EVENT" }
        };

        private const string ENTITY_TYPE_FLOWMAP_APPLICATION = "APPLICATION";
        private const string ENTITY_TYPE_FLOWMAP_APPLICATION_MOBILE = "MOBILE_APPLICATION";
        private const string ENTITY_TYPE_FLOWMAP_TIER = "APPLICATION_COMPONENT";
        private const string ENTITY_TYPE_FLOWMAP_NODE = "APPLICATION_COMPONENT_NODE";
        private const string ENTITY_TYPE_FLOWMAP_MACHINE = "MACHINE_INSTANCE";
        private const string ENTITY_TYPE_FLOWMAP_BUSINESS_TRANSACTION = "BUSINESS_TRANSACTION";
        private const string ENTITY_TYPE_FLOWMAP_BACKEND = "BACKEND";
        private const string ENTITY_TYPE_FLOWMAP_HEALTH_RULE = "POLICY";

        // Mapping of long entity types to human readable ones
        private static Dictionary<string, string> entityTypeStringMapping = new Dictionary<string, string>
        {
            {ENTITY_TYPE_FLOWMAP_APPLICATION, EntityApplication.ENTITY_TYPE},
            {ENTITY_TYPE_FLOWMAP_APPLICATION_MOBILE, "Mobile App"},
            {ENTITY_TYPE_FLOWMAP_TIER, EntityTier.ENTITY_TYPE},
            {ENTITY_TYPE_FLOWMAP_NODE, EntityNode.ENTITY_TYPE},
            {ENTITY_TYPE_FLOWMAP_MACHINE, "Machine"},
            {ENTITY_TYPE_FLOWMAP_BUSINESS_TRANSACTION, EntityBusinessTransaction.ENTITY_TYPE},
            {ENTITY_TYPE_FLOWMAP_BACKEND, EntityBackend.ENTITY_TYPE },
            {ENTITY_TYPE_FLOWMAP_HEALTH_RULE, "Health Rule"}
        };

        #endregion

        #region Constants for the folder and file names of data index

        private const string INDEX_FOLDER_NAME = "Index";

        // Detected entity report conversion file names
        private const string CONVERT_ENTITY_CONTROLLER_FILE_NAME = "controller.csv";
        private const string CONVERT_ENTITY_CONTROLLERS_FILE_NAME = "controllers.csv";
        private const string CONVERT_ENTITY_APPLICATIONS_FILE_NAME = "applications.csv";
        private const string CONVERT_ENTITY_APPLICATION_FILE_NAME = "application.csv";
        private const string CONVERT_ENTITY_TIERS_FILE_NAME = "tiers.csv";
        private const string CONVERT_ENTITY_NODES_FILE_NAME = "nodes.csv";
        private const string CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME = "businesstransactions.csv";
        private const string CONVERT_ENTITY_BACKENDS_FILE_NAME = "backends.csv";
        private const string CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME = "serviceendpoints.csv";
        private const string CONVERT_ENTITY_ERRORS_FILE_NAME = "errors.csv";
        private const string CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME = "informationpoints.csv";

        // Metric report conversion file names
        private const string CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME = "entities.full.csv";
        private const string CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME = "entities.hour.csv";
        private const string CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME = "{0}.entities.full.csv";
        private const string CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME = "{0}.entities.hour.csv";
        private const string CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME = "{0}.metricvalues.csv";
        private const string CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME = "{0}.{1}.metricvalues.csv";
        private const string CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME = "metriclocations.csv";

        // Flow map to flow grid conversion file names
        private const string CONVERT_ACTIVITY_GRID_FILE_NAME = "activitygrid.full.csv";
        private const string CONVERT_ACTIVITY_GRIDS_FILE_NAME = "activitygrids.full.csv";
        private const string CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME = "{0}.activitygrids.full.csv";

        // Events list
        private const string CONVERT_APPLICATION_EVENTS_FILE_NAME = "application.events.csv";
        private const string CONVERT_EVENTS_FILE_NAME = "events.csv";
        private const string CONVERT_HEALTH_RULE_EVENTS_FILE_NAME = "hrviolationevents.csv";

        // Snapshots files
        private const string CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME = "application.snapshots.csv";
        private const string CONVERT_SNAPSHOTS_FILE_NAME = "snapshots.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME = "snapshots.segments.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME = "snapshots.exits.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME = "snapshots.serviceendpoints.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME = "snapshots.errors.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME = "snapshots.businessdata.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME = "snapshots.methodcalllines.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME = "snapshots.methodcalllinesoccurrences.csv";

        // Folded call stacks rollups
        private const string CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME = "snapshots.foldedcallstacks.csv";

        // Snapshot files
        private const string CONVERT_SNAPSHOT_FILE_NAME = "snapshot.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_FILE_NAME = "snapshot.segments.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_EXIT_CALLS_FILE_NAME = "snapshot.exits.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_SERVICE_ENDPOINT_CALLS_FILE_NAME = "snapshot.serviceendpoints.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_DETECTED_ERRORS_FILE_NAME = "snapshot.errors.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_BUSINESS_DATA_FILE_NAME = "snapshot.businessdata.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_FILE_NAME = "snapshot.methodcalllines.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME = "snapshot.methodcalllinesoccurrences.csv";

        // Folded call stacks for single snapshot
        private const string CONVERT_SNAPSHOT_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME = "snapshot.foldedcallstacks.csv";

        // Settings report list
        private const string CONTROLLER_SETTINGS_FILE_NAME = "controller.settings.csv";
        private const string APPLICATION_CONFIGURATION_FILE_NAME = "application.configuration.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME = "btdiscovery.rules.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME = "btdiscovery.rules.2.0.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME = "btentry.rules.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME = "btentry.rules.2.0.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME = "btentry.scopes.csv";
        private const string APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME = "backend.rules.csv";
        private const string APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME = "customexit.rules.csv";
        private const string APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME = "infopoints.csv";
        private const string APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME = "agent.properties.csv";
        private const string APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME = "datacollectors.midc.csv";
        private const string APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME = "datacollectors.http.csv";
        private const string APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME = "tiers.configuration.csv";
        private const string APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME = "bts.configuration.csv";
        private const string APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME = "callgraphs.configuration.csv";
        private const string APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME = "healthrules.csv";

        // Settings for method and call mapping
        private const string METHOD_CALL_LINES_TO_FRAMEWORK_TYPE_MAPPING_FILE_NAME = "MethodNamespaceTypeMapping.csv";

        // Settings for the metric extracts
        private const string ENTITY_METRICS_EXTRACT_MAPPING_FILE_NAME = "EntityMetricsExtractMapping.csv";

        private const string FLAME_GRAPH_TEMPLATE_FILE_NAME = "FlameGraphTemplate.svg";

        #endregion

        #region Constants for the folder and file names of data reports

        private const string REPORT_FOLDER_NAME = "Report";

        // Report file names
        private const string REPORT_DETECTED_ENTITIES_FILE_NAME = "DetectedEntities.{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.xlsx";
        private const string REPORT_METRICS_ALL_ENTITIES_FILE_NAME = "EntityMetrics.{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.xlsx";
        private const string REPORT_DETECTED_EVENTS_FILE_NAME = "Events.{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.xlsx";
        private const string REPORT_SNAPSHOTS_FILE_NAME = "Snapshots.{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.xlsx";
        private const string REPORT_SNAPSHOTS_METHOD_CALL_LINES_FILE_NAME = "Snapshots.MethodCallLines.{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.xlsx";
        private const string REPORT_CONFIGURATION_FILE_NAME = "Configuration.{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.xlsx";

        // Per entity report names
        private const string REPORT_ENTITY_DETAILS_APPLICATION_FILE_NAME = "EntityDetails.{0}.{1}.{2:yyyyMMddHHmm}-{3:yyyyMMddHHmm}.xlsx";
        private const string REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME = "EntityDetails.{0}.{1}.{2}.{3:yyyyMMddHHmm}-{4:yyyyMMddHHmm}.xlsx";
        private const string REPORT_METRICS_GRAPHS_FILE_NAME = "MetricGraphs.{0}.{1}.{2}.{3:yyyyMMddHHmm}-{4:yyyyMMddHHmm}.xlsx";

        // Per entity flame graph report name
        private const string REPORT_FLAME_GRAPH_APPLICATION_FILE_NAME = "Flame.Application.{0}.{1}.{2:yyyyMMddHHmm}-{3:yyyyMMddHHmm}.svg";
        private const string REPORT_FLAME_GRAPH_TIER_FILE_NAME = "Flame.Tier.{0}.{1}.{2}.{3:yyyyMMddHHmm}-{4:yyyyMMddHHmm}.svg";
        private const string REPORT_FLAME_GRAPH_NODE_FILE_NAME = "Flame.Node.{0}.{1}.{2}.{3:yyyyMMddHHmm}-{4:yyyyMMddHHmm}.svg";
        private const string REPORT_FLAME_GRAPH_BUSINESS_TRANSACTION_FILE_NAME = "Flame.BT.{0}.{1}.{2}.{3:yyyyMMddHHmm}-{4:yyyyMMddHHmm}.svg";
        private const string REPORT_FLAME_GRAPH_SNAPSHOT_FILE_NAME = "Flame.Snapshot.{0}.{1:yyyyMMddHHmmss}.{2}.svg";

        #endregion

        #region Constants for Common Reports sheets

        private const string REPORT_SHEET_PARAMETERS = "1.Parameters";
        private const string REPORT_SHEET_TOC = "2.Contents";

        private const string REPORT_TABLE_PARAMETERS_TARGETS = "t_InputTargets";

        #endregion

        #region Constants for Detected Entities Report contents

        private const string REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST = "4.Applications";
        private const string REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST = "5.Tiers";
        private const string REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT = "5.Tiers.Pivot";
        private const string REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST = "6.Nodes";
        private const string REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT = "6.Nodes.Type.AppAgent";
        private const string REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT = "6.Nodes.Type.MachineAgent";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST = "7.Backends";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT = "7.Backends.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT = "7.Backends.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST = "8.Business Transactions";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT = "8.BTs.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT = "8.BTs.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST = "9.SEPs";
        private const string REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT = "9.SEPs.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT = "9.SEPs.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST = "10.Errors";
        private const string REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT = "10.Errors.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION = "10.Errors.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST = "11.Information Points";
        private const string REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT = "11.Information Points.Type";

        private const string REPORT_DETECTED_ENTITIES_TABLE_TOC = "t_TOC";
        private const string REPORT_DETECTED_ENTITIES_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_DETECTED_ENTITIES_TABLE_APPLICATIONS = "t_Applications";
        private const string REPORT_DETECTED_ENTITIES_TABLE_TIERS = "t_Tiers";
        private const string REPORT_DETECTED_ENTITIES_TABLE_NODES = "t_Nodes";
        private const string REPORT_DETECTED_ENTITIES_TABLE_BACKENDS = "t_Backends";
        private const string REPORT_DETECTED_ENTITIES_TABLE_BUSINESS_TRANSACTIONS = "t_BusinessTransactions";
        private const string REPORT_DETECTED_ENTITIES_TABLE_SERVICE_ENDPOINTS = "t_ServiceEndpoints";
        private const string REPORT_DETECTED_ENTITIES_TABLE_ERRORS = "t_Errors";
        private const string REPORT_DETECTED_ENTITIES_TABLE_INFORMATION_POINTS = "t_InformationPoints";

        private const string REPORT_DETECTED_ENTITIES_PIVOT_TIERS = "p_Tiers";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT = "p_NodesTypeAppAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT = "p_NodesTypeMachineAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE = "p_BackendsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_LOCATION = "p_BackendsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE = "p_BusinessTransactionsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_LOCATION_SHEET = "p_BusinessTransactionsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE = "p_ServiceEndpointsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_LOCATION = "p_ServiceEndpointsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE = "p_ErrorsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_LOCATION = "p_ErrorsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE = "p_InformationPointsType";

        private const string REPORT_DETECTED_ENTITIES_PIVOT_TIERS_GRAPH = "g_Tiers";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT_GRAPH = "g_NodesTypeAppAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT_GRAPH = "g_NodesTypeMachineAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE_GRAPH = "g_BackendsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE_GRAPH = "g_BusinessTransactionsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE_GRAPH = "g_ServiceEndpointsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE_GRAPH = "g_ErrorsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE_GRAPH = "g_InformationPointsType";

        private const int REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT = 7;
        private const int REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Entity Metrics Report contents

        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL = "4.Applications";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY = "4.Applications.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_PIVOT = "4.Applications.Pivot";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL = "5.Tiers";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY = "5.Tiers.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_PIVOT = "5.Tiers.Pivot";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL = "6.Nodes";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY = "6.Nodes.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_PIVOT = "6.Nodes.Pivot";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL = "7.Backends";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY = "7.Backends.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_PIVOT = "7.Backends.Pivot";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL = "8.BTs";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY = "8.BTs.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_PIVOT = "8.BTs.Pivot";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL = "9.SEPs";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY = "9.SEPs.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_PIVOT = "9.SEPs.Pivot";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL = "10.Errors";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY = "10.Errors.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_PIVOT = "10.Errors.Pivot";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL = "11.Information Points";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY = "11.Information Points.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_PIVOT = "11.Information Points.Pivot";

        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_ACTIVITYFLOW = "4.Applications.Activity Flow";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_ACTIVITYFLOW = "5.Tiers.Activity Flow";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_ACTIVITYFLOW = "6.Nodes.Activity Flow";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_ACTIVITYFLOW = "7.Backends.Activity Flow";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_ACTIVITYFLOW = "8.BTs.Activity Flow";

        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_TOC = "t_TOC";

        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_FULL = "t_Applications_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_HOURLY = "t_Applications_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_FULL = "t_Tiers_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_HOURLY = "t_Tiers_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_FULL = "t_Nodes_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_HOURLY = "t_Nodes_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_FULL = "t_Backends_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_HOURLY = "t_Backends_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_FULL = "t_BusinessTransactions_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_HOURLY = "t_BusinessTransactions_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_FULL = "t_ServiceEndpoints_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_HOURLY = "t_ServiceEndpoints_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_FULL = "t_Errors_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_HOURLY = "t_Errors_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_FULL = "t_InformationPoints_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_HOURLY = "t_InformationPoints_Hourly";

        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_ACTIVITYFLOW = "t_Applications_ActivityFlow";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_ACTIVITYFLOW = "t_Tiers_ActivityFlow";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_ACTIVITYFLOW = "t_Nodes_ActivityFlow";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_ACTIVITYFLOW = "t_Backends_ActivityFlow";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_ACTIVITYFLOW = "t_BusinessTransactions_ActivityFlow";

        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_APPLICATIONS = "p_Applications";
        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_TIERS = "p_Tiers";
        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_NODES = "p_Nodes";
        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_BACKENDS = "p_Backends";
        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS = "p_BusinessTransactions";
        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_SERVICE_ENDPOINTS = "p_ServiceEndpoints";
        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_ERRORS = "p_Errors";
        private const string REPORT_METRICS_ALL_ENTITIES_PIVOT_INFORMATION_POINTS = "p_InformationPoints";

        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_APPLICATIONS_FULL = "g_Applications_Full_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_APPLICATIONS_HOURLY = "g_Applications_Hourly_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_TIERS_FULL = "g_Tiers_Full_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_TIERS_HOURLY = "g_Tiers_Hourly_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_NODES_FULL = "g_Nodes_Full_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_NODES_HOURLY = "g_Nodes_Hourly_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_BACKENDS_FULL = "g_Backends_Full_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_BACKENDS_HOURLY = "g_Backends_Hourly_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_BUSINESS_TRANSACTIONS_FULL = "g_BusinessTransactions_Full_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_BUSINESS_TRANSACTIONS_HOURLY = "g_BusinessTransactions_Hourly_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_SERVICE_ENDPOINTS_FULL = "g_ServiceEndpoints_Full_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_SERVICE_ENDPOINTS_HOURLY = "g_ServiceEndpoints_Hourly_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_INFORMATION_POINTS_FULL = "g_InformationPoints_Full_Scatter";
        private const string REPORT_METRICS_ALL_ENTITIES_GRAPH_INFORMATION_POINTS_HOURLY = "g_InformationPoints_Hourly_Scatter";

        private const int REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT = 17;
        private const int REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT = 7;

        #endregion

        #region Constants for Entity Metric Graphs Reports

        private const string REPORT_METRICS_GRAPHS_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_GRAPHS = "4.App.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_SCATTER = "4.App.Calls Scatter";
        private const string REPORT_METRICS_GRAPHS_SHEET_TIERS_GRAPHS = "5.Tiers.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_TIERS_SCATTER = "5.Tiers.Calls Scatter";
        private const string REPORT_METRICS_GRAPHS_SHEET_NODES_GRAPHS = "6.Nodes.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_NODES_SCATTER = "6.Nodes.Calls Scatter";
        private const string REPORT_METRICS_GRAPHS_SHEET_BACKENDS_GRAPHS = "7.Backends.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_BACKENDS_SCATTER = "7.Backends.Calls Scatter";
        private const string REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_GRAPHS = "8.BTs.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_SCATTER = "8.BTs.Calls Scatter";
        private const string REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_GRAPHS = "9.SEPs.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_SCATTER = "9.SEPs.Calls Scatter";
        private const string REPORT_METRICS_GRAPHS_SHEET_ERRORS_GRAPHS = "10.Errors.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_GRAPHS = "11.IPs.{0}";
        private const string REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_SCATTER = "11.IPs.Calls Scatter";

        private const string REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS = "Entity.Metrics";

        private const string REPORT_METRICS_GRAPHS_TABLE_TOC = "t_TOC";
        private const string REPORT_METRICS_GRAPHS_TABLE_CONTROLLERS = "t_Controllers";

        // Metric data tables from metric.values.csv
        private const string REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES = "t_Metric_Values_{0}_{1}";

        // Hourly graph data
        private const string REPORT_METRICS_GRAPHS_METRIC_GRAPH = "g_Metrics_{0}_{1:yyyyMMddHHss}_{2}";

        // Hourly scatter data
        private const string REPORT_METRICS_GRAPHS_METRIC_ARTCPMEPM_SCATTER = "g_ScatterARTCPMEPM_{0}_{1:yyyyMMddHHss}_{2}";

        private const string REPORT_METRICS_GRAPHS_TABLE_APPLICATIONS = "t_Applications_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_APPLICATIONS_SCATTER = "t_ApplicationsScatter";
        private const string REPORT_METRICS_GRAPHS_TABLE_TIERS = "t_Tiers_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_TIERS_SCATTER = "t_TiersScatter";
        private const string REPORT_METRICS_GRAPHS_TABLE_NODES = "t_Nodes_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_NODES_SCATTER = "t_NodesScatter";
        private const string REPORT_METRICS_GRAPHS_TABLE_BACKENDS = "t_Backends_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_BACKENDS_SCATTER = "t_BackendsScatter";
        private const string REPORT_METRICS_GRAPHS_TABLE_BUSINESS_TRANSACTIONS = "t_BusinessTransactions_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_BUSINESS_TRANSACTIONS_SCATTER = "t_BusinessTransactionsScatter";
        private const string REPORT_METRICS_GRAPHS_TABLE_SERVICE_ENDPOINTS = "t_ServiceEndpoints_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_SERVICE_ENDPOINTS_SCATTER = "t_ServiceEndpointsScatter";
        private const string REPORT_METRICS_GRAPHS_TABLE_ERRORS = "t_Errors_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_INFORMATION_POINTS = "t_InformationPoints_{0}";
        private const string REPORT_METRICS_GRAPHS_TABLE_INFORMATION_POINTS_SCATTER = "t_InformationPointsScatter";

        private const int REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_METRICS_GRAPHS_GRAPH_SHEET_START_TABLE_AT = 6;

        // 5 minutes out of 1440 minutes (24 hours) == 0.0034722222222222
        private const double FIVE_MINUTES = 0.0034722222222222;

        #endregion

        #region Constants for Detected Events and Health Rule Violations Report contents

        private const string REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS = "4.Applications";

        private const string REPORT_DETECTED_EVENTS_SHEET_EVENTS = "5.Events";
        private const string REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT = "5.Events.Type";
        private const string REPORT_DETECTED_EVENTS_SHEET_EVENTS_TIMELINE_PIVOT = "5.Events.Timeline";

        private const string REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS = "6.Health Rule Violations";
        private const string REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT = "6.Health Rule Violations.Type";

        private const string REPORT_DETECTED_EVENTS_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_DETECTED_EVENTS_TABLE_APPLICATIONS = "t_Applications";

        private const string REPORT_DETECTED_EVENTS_TABLE_TOC = "t_TOC";

        private const string REPORT_DETECTED_EVENTS_TABLE_EVENTS = "t_Events";
        private const string REPORT_DETECTED_EVENTS_TABLE_HEALTH_RULE_VIOLATION_EVENTS = "t_HealthRuleViolationEvents";

        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE = "p_EventsType";
        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TIMELINE = "p_EventsTimeline";
        private const string REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE = "p_HealthRuleViolationEventsType";

        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE_GRAPH = "g_EventsType";
        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TIMELINE_GRAPH = "g_EventsTimeline";
        private const string REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE_GRAPH = "g_HealthRuleViolationEventsType";

        private const int REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT = 7;
        private const int REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Entity Metric Details Report contents

        private const string REPORT_ENTITY_DETAILS_SHEET_CONTROLLERS = "3.Controllers";

        // Metric summaries full, hourly
        private const string REPORT_ENTITY_DETAILS_SHEET_SUMMARY = "4.Calls and Response";
        // Flowmap in grid view
        private const string REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID = "5.Activity Flow";
        // Graphs, snapshots and events all lined up in timeline
        private const string REPORT_ENTITY_DETAILS_SHEET_TIMELINE = "6.Timeline";
        // Event data 
        private const string REPORT_ENTITY_DETAILS_SHEET_EVENTS = "7.Events";
        // Snapshots
        private const string REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS = "8.Snapshots";
        // Raw metric data
        private const string REPORT_ENTITY_DETAILS_SHEET_METRICS = "9.Metric Detail";

        private const string REPORT_ENTITY_DETAILS_TABLE_TOC = "t_TOC";
        private const string REPORT_ENTITY_DETAILS_TABLE_CONTROLLERS = "t_Controllers";

        // Full and hourly metric data
        private const string REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL = "t_Metric_Summary_Full";
        private const string REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY = "t_Metric_Summary_Hourly";
        // Grid data
        private const string REPORT_ENTITY_DETAILS_ACTIVITY_GRID = "t_ActivityFlow";
        // Events from events.csv and hrviolationevents.csv
        private const string REPORT_ENTITY_DETAILS_TABLE_EVENTS = "t_Events";
        // Snapshot data
        private const string REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS = "t_Snapshots";
        private const string REPORT_ENTITY_DETAILS_TABLESINESS_DATA = "t_BusinessData";

        // Hourly graph data
        private const string REPORT_ENTITY_DETAILS_METRIC_GRAPH = "g_Metrics_{0}_{1:yyyyMMddHHss}";

        private const string REPORT_ENTITY_DETAILS_PIVOT_EVENTS = "p_Events";

        private const string REPORT_ENTITY_DETAILS_PIVOT_SNAPSHOTS = "p_Snapshots";

        private const int REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT = 15;
        private const int REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT = 7;

        private const string REPORT_ENTITY_DETAILS_TABLE_EVENTS_IN_TIMELINE = "t_EventsTimelineHeaders";
        private const string REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS_IN_TIMELINE = "t_SnapshotsTimelineHeaders";

        #endregion

        #region Constants for Snapshots Report contents

        private const string REPORT_SNAPSHOTS_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_SNAPSHOTS_SHEET_APPLICATIONS = "4.Applications";

        private const string REPORT_SNAPSHOTS_SHEET_SNAPSHOTS = "5.Snapshots";
        private const string REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TYPE_PIVOT = "5.Snapshots.Type";
        private const string REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TIMELINE_PIVOT = "5.Snapshots.Timeline";

        private const string REPORT_SNAPSHOTS_SHEET_SEGMENTS = "6.Segments";
        private const string REPORT_SNAPSHOTS_SHEET_SEGMENTS_TYPE_PIVOT = "6.Segments.Type";
        private const string REPORT_SNAPSHOTS_SHEET_SEGMENTS_TIMELINE_PIVOT = "6.Segments.Timeline";

        private const string REPORT_SNAPSHOTS_SHEET_EXIT_CALLS = "7.Exit Calls";
        private const string REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TYPE_PIVOT = "7.Exit Calls.Type";
        private const string REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TIMELINE_PIVOT = "7.Exit Calls.Timeline";

        private const string REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS = "8.SEP Calls";
        private const string REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TYPE_PIVOT = "8.SEP Calls.Type";
        private const string REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TIMELINE_PIVOT = "8.SEP.Timeline";

        private const string REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS = "9.Errors";
        private const string REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TYPE_PIVOT = "9.Errors.Type";
        private const string REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TIMELINE_PIVOT = "9.Errors.Timeline";

        private const string REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA = "10.Business Data";
        private const string REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TYPE_PIVOT = "10.Business Data.Type";
        private const string REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TIMELINE_PIVOT = "10.Business Data.Timeline";

        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES = "11.Method Calls";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_EXEC_AVERAGE_PIVOT = "11.Calls.Type";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_EXEC_AVERAGE_PIVOT = "11.Calls.Location";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TIMELINE_EXEC_AVERAGE_PIVOT = "11.Calls.Timeline";

        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES = "12.Call Occurrences";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT = "12.Call Occurrences.Type";

        private const string REPORT_SNAPSHOTS_TABLE_TOC = "t_TOC";

        private const string REPORT_SNAPSHOTS_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_SNAPSHOTS_TABLE_APPLICATIONS = "t_Applications";

        private const string REPORT_SNAPSHOTS_TABLE_SNAPSHOTS = "t_Snapshots";
        private const string REPORT_SNAPSHOTS_TABLE_SEGMENTS = "t_Segments";
        private const string REPORT_SNAPSHOTS_TABLE_EXIT_CALLS = "t_ExitCalls";
        private const string REPORT_SNAPSHOTS_TABLE_SERVICE_ENDPOINT_CALLS = "t_ServiceEndpointCalls";
        private const string REPORT_SNAPSHOTS_TABLE_DETECTED_ERRORS = "t_DetectedErrors";
        private const string REPORT_SNAPSHOTS_TABLE_BUSINESS_DATA = "t_BusinessData";
        private const string REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES = "t_MethodCallLines";
        private const string REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES_OCCURRENCES = "t_MethodCallLinesOccurrences";

        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS = "p_Snapshots";
        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_TIMELINE = "p_SnapshotsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS = "p_Segments";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS_TIMELINE = "p_SegmentsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS = "p_ServiceEndpointCalls";
        private const string REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS_TIMELINE = "p_ServiceEndpointCallsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS = "p_ExitCalls";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_TIMELINE = "p_ExitCallsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS = "p_DetectedErrors";
        private const string REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_TIMELINE = "p_DetectedErrorsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA = "p_BusinessData";
        private const string REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_TIMELINE = "p_BusinessDataTimeline";

        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_TYPE_EXEC_AVERAGE = "p_MethodCallLinesTypeAverage";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_LOCATION_EXEC_AVERAGE = "p_MethodCallLinesLocationAverage";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_TIMELINE_EXEC_AVERAGE = "p_MethodCallLinesTimelineAverage";

        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_TYPE = "p_MethodCallLinesOccurrencesType";

        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_GRAPH = "g_Snapshots";
        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_TIMELINE_GRAPH = "g_SnapshotsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS_GRAPH = "g_Segments";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS_TIMELINE_GRAPH = "g_SegmentsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS_GRAPH = "g_ServiceEndpointCalls";
        private const string REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS_TIMELINE_GRAPH = "g_ServiceEndpointCallsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_GRAPH = "g_ExitCalls";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_TIMELINE_GRAPH = "g_ExitCallsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_GRAPH = "g_DetectedErrors";
        private const string REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_TIMELINE_GRAPH = "g_DetectedErrorsTimeline";
        private const string REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_GRAPH = "g_BusinessData";
        private const string REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_TIMELINE_GRAPH = "g_BusinessDataTimeline";

        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_TYPE_EXEC_AVERAGE = "g_MethodCallLinesTypeAverage";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_LOCATION_EXEC_AVERAGE = "g_MethodCallLinesLocationAverage";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_TIMELINE_EXEC_AVERAGE = "g_MethodCallLinesTimelineAverage";

        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_GRAPH_TYPE = "g_MethodCallLinesOccurrencesType";

        private const int REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT = 8;
        private const int REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Configuration Report contents

        private const string REPORT_CONFIGURATION_SHEET_CONTROLLERS = "3.Controllers";

        private const string REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS = "4.Controller Settings";
        private const string REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION = "5.Application Configuration";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES = "6.BT Discovery Rules";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES = "7.BT Entry Rules";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE = "7.BT Entry Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION = "7.BT Entry Rules.Location";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES = "8.BT Scopes";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20 = "9.BT Discovery Rules 2.0";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20 = "9.BT Entry Rules 2.0";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE = "9.BT Entry Rules 2.0.Type";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION = "9.BT Entry Rules 2.0.Location";
        private const string REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES = "10.Backend Discovery Rules";
        private const string REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT = "10.Backend Discovery Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES = "11.Custom Exit Rules";
        private const string REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT = "11.Custom Exit Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_HEALTH_RULES = "12.Health Rules";
        private const string REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT = "12.Health Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_TIER_SETTINGS = "13.Tier Settings";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS = "14.BT Settings";
        private const string REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES = "15.Agent Properties";
        private const string REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT = "15.Agent Properties.Type";
        private const string REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES = "16.Information Points";
        private const string REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS = "17.MIDCs";
        private const string REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS = "18.HTTP DCs";
        private const string REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS = "19.Call Graph Settings";

        private const string REPORT_CONFIGURATION_DETAILS_TABLE_TOC = "t_TOC";
        private const string REPORT_CONFIGURATION_DETAILS_TABLE_CONTROLLERS = "t_Controllers";

        // Full and hourly metric data
        private const string REPORT_CONFIGURATION_TABLE_CONTROLLER_SETTINGS = "t_ControllerSettings";
        private const string REPORT_CONFIGURATION_TABLE_APPLICATION_CONFIGURATION = "t_ApplicationConfiguration";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES = "t_BTDiscoveryRules";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES = "t_BTEntryRules";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SCOPES = "t_BTScopes";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES_20 = "t_BTDiscoveryRules20";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES_20 = "t_BTEntryRules20";
        private const string REPORT_CONFIGURATION_TABLE_BACKEND_DISCOVERY_RULES = "t_BackendDiscoveryRules";
        private const string REPORT_CONFIGURATION_TABLE_CUSTOM_EXIT_RULES = "t_CustomExitRules";
        private const string REPORT_CONFIGURATION_TABLE_AGENT_CONFIGURATION_PROPERTIES = "t_AgentProperties";
        private const string REPORT_CONFIGURATION_TABLE_INFORMATION_POINT_RULES = "t_InformationPointRules";
        private const string REPORT_CONFIGURATION_TABLE_METHOD_INVOCATION_DATA_COLLECTORS = "t_MIDCs";
        private const string REPORT_CONFIGURATION_TABLE_HTTP_DATA_COLLECTORS = "t_HTTPDCs";
        private const string REPORT_CONFIGURATION_TABLE_HEALTH_RULES = "t_HealthRules";
        private const string REPORT_CONFIGURATION_TABLE_TIER_SETTINGS = "t_Tiers";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SETTINGS = "t_BusinessTransactions";
        private const string REPORT_CONFIGURATION_TABLE_AGENT_CALL_GRAPH_SETTINGS = "t_AgentCallGraphSettings";

        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE = "p_BTEntryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_LOCATION = "p_BTEntryRulesLocation";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE = "p_BTEntryRules20Type";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_20_LOCATION = "p_BTEntryRules20Location";
        private const string REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE = "p_BackendDiscoveryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE = "p_CustomExitRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE = "p_AgentPropertiesType";
        private const string REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE = "p_HealthRulesType";

        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE_GRAPH = "g_BTEntryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE_GRAPH = "g_BTEntryRules20Type";
        private const string REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE_GRAPH = "g_BackendDiscoveryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE_GRAPH = "g_CustomExitRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE_GRAPH = "g_AgentPropertiesType";
        private const string REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE_GRAPH = "g_HealthRulesType";

        private const int REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT = 7;
        private const int REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Step Timing report

        private const string TIMING_REPORT_FILE_NAME = "StepDurations.csv";

        #endregion

        #region Constants for various report colors

        private static string LEGEND_THICK_LINE = "\u25ac\u25ac\u25ac";

        // This color is from the default theme that seems to be associated with the blueish tables I've picked out
        private static Color colorLightBlueForDatabars = Color.FromArgb(0x63, 0x8E, 0xC6);
        private static Color colorRedForDatabars = Color.FromArgb(0xFF, 0x69, 0x69);

        private static Color colorGreenFor3ColorScales = Color.LightGreen;
        private static Color colorYellowFor3ColorScales = Color.LightYellow;
        private static Color colorRedFor3ColorScales = Color.FromArgb(0xFF, 0x69, 0x69);

        // Snapshot colors
        // This color is assigned to the Normal snapshots in the timeline view and list of Snapshots
        private static Color colorGreenForNormalSnapshots = Color.FromArgb(0x00, 0x99, 0x0);
        // This color is assigned to the Slow snapshots in the timeline view and list of Snapshots
        private static Color colorYellowForSlowSnapshots = Color.Yellow;
        // This color is assigned to the Slow snapshots in the timeline view and list of Snapshots. Similar to Color.Orange
        private static Color colorOrangeForVerySlowSnapshots = Color.FromArgb(0xFF, 0xC0, 0x0);
        // This color is assigned to the Stall snapshots in the timeline view and list of Snapshots. Similar to Color.Purple
        private static Color colorOrangeForStallSnapshots = Color.FromArgb(0x99, 0x33, 0xFF);
        // This color is assigned to the Error snapshots in the timeline view and list of Snapshots. Similar Color.IndianRed
        private static Color colorRedForErrorSnapshots = Color.FromArgb(0xFF, 0x69, 0x69);

        // Event colors
        // This color is close to Color.LightBlue
        private static Color colorLightBlueForInfoEvents = Color.FromArgb(0x0, 0x70, 0xC0);
        // This color is orange
        private static Color colorOrangeForWarnEvents = Color.FromArgb(0xFF, 0xC0, 0x0);
        // This color is close to Color.IndianRed
        private static Color colorRedForErrorEvents = Color.FromArgb(0xFF, 0x69, 0x69);

        // Hyperlink colors
        private static Color colorBlueForHyperlinks = Color.Blue;

        // Metric colors
        private static Color colorMetricART = Color.Green;
        private static Color colorMetricCPM = Color.Blue;
        private static Color colorMetricEPM = Color.Red;
        private static Color colorMetricEXCPM = Color.Orange;
        private static Color colorMetricHTTPEPM = Color.Pink;

        // Color for the invisible text on graphs report
        private static Color colorGrayForRepeatedText = Color.LightGray;

        // Colors for Flame Graphs
        // This color is kind of reddish orange
        private static Color colorFlameGraphStackStart = Color.FromArgb(0xFE, 0x58, 0x10);
        // This color is kind of egg yolk yellow
        private static Color colorFlameGraphStackEnd = Color.FromArgb(0xFA, 0xF4, 0x38);

        // This color is kind of grasshopper green
        private static Color colorFlameGraphStackNodeJSStart = Color.FromArgb(0x80, 0xE5, 0x00);
        // This color is kind of greenish olive yellow
        private static Color colorFlameGraphStackNodeJSEnd = Color.FromArgb(0xA0, 0xBF, 0x00);

        #endregion

        #region Constants for Deeplinks

        private const string DEEPLINK_CONTROLLER = @"{0}/controller/#/location=AD_HOME_OVERVIEW&timeRange={1}";
        private const string DEEPLINK_APPLICATION = @"{0}/controller/#/location=APP_DASHBOARD&timeRange={2}&application={1}&dashboardMode=force";
        private const string DEEPLINK_TIER = @"{0}/controller/#/location=APP_COMPONENT_MANAGER&timeRange={3}&application={1}&component={2}&dashboardMode=force";
        private const string DEEPLINK_NODE = @"{0}/controller/#/location=APP_NODE_MANAGER&timeRange={3}&application={1}&node={2}&dashboardMode=force";
        private const string DEEPLINK_BACKEND = @"{0}/controller/#/location=APP_BACKEND_DASHBOARD&timeRange={3}&application={1}&backendDashboard={2}&dashboardMode=force";
        private const string DEEPLINK_BUSINESS_TRANSACTION = @"{0}/controller/#/location=APP_BT_DETAIL&timeRange={3}&application={1}&businessTransaction={2}&dashboardMode=force";
        private const string DEEPLINK_SERVICE_ENDPOINT = @"{0}/controller/#/location=APP_SERVICE_ENDPOINT_DETAIL&timeRange={4}&application={1}&component={2}&serviceEndpoint={3}";
        private const string DEEPLINK_ERROR = @"{0}/controller/#/location=APP_ERROR_DASHBOARD&timeRange={3}&application={1}&error={2}";
        private const string DEEPLINK_INFORMATION_POINT = @"{0}/controller/#/location=APP_INFOPOINT_DASHBOARD&timeRange={3}&application={1}&infoPoint={2}";
        private const string DEEPLINK_APPLICATION_MOBILE = @"{0}/controller/#/location=EUM_MOBILE_MAIN_DASHBOARD&timeRange={3}&application={1}&mobileApp={2}";
        private const string DEEPLINK_HEALTH_RULE = @"{0}/controller/#/location=ALERT_RESPOND_HEALTH_RULES&timeRange={3}&application={1}";
        private const string DEEPLINK_INCIDENT = @"{0}/controller/#/location=APP_INCIDENT_DETAIL_MODAL&timeRange={4}&application={1}&incident={2}&incidentTime={3}";
        private const string DEEPLINK_SNAPSHOT_OVERVIEW = @"{0}/controller/#/location=APP_SNAPSHOT_VIEWER&rsdTime={3}&application={1}&requestGUID={2}&tab=overview&dashboardMode=force";
        private const string DEEPLINK_SNAPSHOT_SEGMENT = @"{0}/controller/#/location=APP_SNAPSHOT_VIEWER&rsdTime={4}&application={1}&requestGUID={2}&tab={3}&dashboardMode=force";

        private const string DEEPLINK_METRIC = @"{0}/controller/#/location=METRIC_BROWSER&timeRange={3}&application={1}&metrics={2}";
        private const string DEEPLINK_TIMERANGE_LAST_15_MINUTES = "last_15_minutes.BEFORE_NOW.-1.-1.15";
        private const string DEEPLINK_TIMERANGE_BETWEEN_TIMES = "Custom_Time_Range.BETWEEN_TIMES.{0}.{1}.{2}";
        private const string DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID = "APPLICATION.{0}.{1}";
        private const string DEEPLINK_METRIC_TIER_TARGET_METRIC_ID = "APPLICATION_COMPONENT.{0}.{1}";
        private const string DEEPLINK_METRIC_NODE_TARGET_METRIC_ID = "APPLICATION_COMPONENT_NODE.{0}.{1}";

        #endregion

        #region Constants for parallelization of processes

        private const int FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 20;
        private const int FLOWMAP_EXTRACT_NUMBER_OF_THREADS = 5;

        private const int EVENTS_EXTRACT_NUMBER_OF_THREADS = 5;

        private const int SNAPSHOTS_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 50;
        private const int SNAPSHOTS_EXTRACT_NUMBER_OF_THREADS = 8;

        private const int SNAPSHOTS_INDEX_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 100;
        private const int SNAPSHOTS_FLAMEGRAPH_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 1000;

        private const int METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 10;

        #endregion


        #region Job steps router

        internal static void startOrContinueJob(ProgramOptions programOptions)
        {
            JobConfiguration jobConfiguration = FileIOHelper.readJobConfigurationFromFile(programOptions.OutputJobFilePath);
            if (jobConfiguration == null)
            {
                loggerConsole.Error("Unable to load job input file {0}", programOptions.InputJobFilePath);

                return;
            }

            List<JobStatus> jobSteps = new List<JobStatus>
            {
                // Get data
                JobStatus.ExtractControllerApplicationsAndEntities,
                JobStatus.ExtractControllerAndApplicationConfiguration,
                JobStatus.ExtractApplicationAndEntityMetrics,
                JobStatus.ExtractApplicationAndEntityFlowmaps,
                JobStatus.ExtractEventsAndHealthRuleViolations,
                JobStatus.ExtractSnapshots,

                // Process data
                JobStatus.IndexControllersApplicationsAndEntities,
                JobStatus.IndexControllerAndApplicationConfiguration,
                JobStatus.IndexApplicationAndEntityMetrics,
                JobStatus.IndexApplicationAndEntityFlowmaps,
                JobStatus.IndexEventsAndHealthRuleViolations,
                JobStatus.IndexSnapshots,

                // Report data
                JobStatus.ReportControlerApplicationsAndEntities,
                JobStatus.ReportControllerAndApplicationConfiguration,
                JobStatus.ReportApplicationAndEntityMetrics,
                JobStatus.ReportApplicationAndEntityMetricGraphs,
                JobStatus.ReportEventsAndHealthRuleViolations,
                JobStatus.ReportSnapshots,
                JobStatus.ReportSnapshotsMethodCallLines,
                JobStatus.ReportIndividualApplicationAndEntityDetails,
                JobStatus.ReportFlameGraphs,

                // Done 
                JobStatus.Done,

                JobStatus.Error
            };
            LinkedList<JobStatus> jobStepsLinked = new LinkedList<JobStatus>(jobSteps);

            #region Output diagnostic parameters to log

            loggerConsole.Info("Job status {0}({0:d})", jobConfiguration.Status);
            logger.Info("Job status {0}({0:d})", jobConfiguration.Status);
            logger.Info("Job input: TimeRange.From='{0:o}', TimeRange.To='{1:o}', Time ranges='{2}', Flowmaps='{3}', Metrics='{4}', Snapshots='{5}', Configuration='{6}'", jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To, jobConfiguration.Input.HourlyTimeRanges.Count, jobConfiguration.Input.Flowmaps, jobConfiguration.Input.Metrics, jobConfiguration.Input.Snapshots, jobConfiguration.Input.Configuration);
            if (jobConfiguration.Input.SnapshotSelectionCriteria != null)
            {
                PropertyInfo[] pis = jobConfiguration.Input.SnapshotSelectionCriteria.TierType.GetType().GetProperties();
                StringBuilder sb = new StringBuilder(16 * pis.Length);
                foreach (PropertyInfo pi in pis)
                {
                    sb.AppendFormat("{0}={1}, ", pi.Name, pi.GetValue(jobConfiguration.Input.SnapshotSelectionCriteria.TierType));
                }
                logger.Info("Job input, SnapshotSelectionCriteria: Tiers='{0}', TierTypes='{1}'",
                    String.Join(",", jobConfiguration.Input.SnapshotSelectionCriteria.Tiers),
                    sb.ToString());

                pis = jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactionType.GetType().GetProperties();
                sb = new StringBuilder(16 * pis.Length);
                foreach (PropertyInfo pi in pis)
                {
                    sb.AppendFormat("{0}={1}, ", pi.Name, pi.GetValue(jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactionType));
                }
                logger.Info("Job input, SnapshotSelectionCriteria: BusinessTransactions='{0}', BusinessTransactionType='{1}'",
                    String.Join(",", jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactions),
                    sb.ToString());
                logger.Info("Job input, SnapshotSelectionCriteria: UserExperience.Normal='{0}', UserExperience.Slow='{1}', UserExperience.VerySlow='{2}', UserExperience.Stall='{3}', UserExperience.Error='{4}'",
                    jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Normal,
                    jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Slow,
                    jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.VerySlow,
                    jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Stall,
                    jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Error);
                logger.Info("Job input, SnapshotSelectionCriteria: SnapshotType.Full='{0}', SnapshotType.Partial='{1}', SnapshotType.None='{2}'",
                    jobConfiguration.Input.SnapshotSelectionCriteria.SnapshotType.Full,
                    jobConfiguration.Input.SnapshotSelectionCriteria.SnapshotType.Partial,
                    jobConfiguration.Input.SnapshotSelectionCriteria.SnapshotType.None);
            }

            logger.Info("Job output: DetectedEntities='{0}', EntityMetrics='{1}', EntityDetails='{2}', Snapshots='{3}', Configuration='{4}', Events='{5}'", jobConfiguration.Output.DetectedEntities, jobConfiguration.Output.EntityMetrics, jobConfiguration.Output.EntityDetails, jobConfiguration.Output.Snapshots, jobConfiguration.Output.Configuration, jobConfiguration.Output.Events);

            foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
            {
                logger.Info("Expanded time ranges: From='{0:o}', To='{1:o}'", jobTimeRange.From, jobTimeRange.To);
            }

            #endregion

            // Run the step and move to next until things are done
            while (jobConfiguration.Status != JobStatus.Done && jobConfiguration.Status != JobStatus.Error)
            {
                switch (jobConfiguration.Status)
                {
                    case JobStatus.ExtractControllerApplicationsAndEntities:
                        if (stepExtractControllerApplicationsAndEntities(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                        }
                        else
                        {
                            jobConfiguration.Status = JobStatus.Error;
                        }
                        break;

                    case JobStatus.ExtractControllerAndApplicationConfiguration:
                        if (jobConfiguration.Input.Configuration == true)
                        {
                            if (stepExtractControllerAndApplicationConfiguration(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of configuration");
                        }
                        break;

                    case JobStatus.ExtractApplicationAndEntityMetrics:
                        if (jobConfiguration.Input.Metrics == true)
                        {
                            if (stepExtractApplicationAndEntityMetrics(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of entity metrics");
                        }
                        break;

                    case JobStatus.ExtractApplicationAndEntityFlowmaps:
                        if (jobConfiguration.Input.Flowmaps == true)
                        {
                            if (stepExtractApplicationAndEntityFlowmaps(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of entity flowmaps");
                        }
                        break;

                    case JobStatus.ExtractSnapshots:
                        if (jobConfiguration.Input.Snapshots == true)
                        {
                            if (stepExtractSnapshots(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of snapshots");
                        }
                        break;

                    case JobStatus.ExtractEventsAndHealthRuleViolations:
                        if (jobConfiguration.Input.Events == true)
                        {
                            if (stepExtractEventsAndHealthRuleViolations(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of events");
                        }
                        break;

                    case JobStatus.IndexControllersApplicationsAndEntities:
                        if (stepIndexControllersApplicationsAndEntities(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                        }
                        else
                        {
                            jobConfiguration.Status = JobStatus.Error;
                        }
                        break;

                    case JobStatus.IndexControllerAndApplicationConfiguration:
                        if (jobConfiguration.Input.Configuration == true)
                        {
                            if (stepIndexControllerAndApplicationConfiguration(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of configuration");
                        }
                        break;

                    case JobStatus.IndexApplicationAndEntityMetrics:
                        if (jobConfiguration.Input.Metrics == true)
                        {
                            if (stepIndexApplicationAndEntityMetrics(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of entity metrics");
                        }
                        break;

                    case JobStatus.IndexApplicationAndEntityFlowmaps:
                        if (jobConfiguration.Input.Flowmaps == true)
                        {
                            if (stepIndexApplicationAndEntityFlowmaps(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of entity flowmaps");
                        }
                        break;

                    case JobStatus.IndexEventsAndHealthRuleViolations:
                        if (jobConfiguration.Input.Events == true)
                        {
                            if (stepIndexEventsAndHealthRuleViolations(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of events");
                        }
                        break;

                    case JobStatus.IndexSnapshots:
                        if (jobConfiguration.Input.Snapshots == true)
                        {
                            if (stepIndexSnapshots(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of snapshots");
                        }
                        break;

                    case JobStatus.ReportControlerApplicationsAndEntities:
                        if (jobConfiguration.Output.DetectedEntities == true)
                        {
                            if (stepReportControlerApplicationsAndEntities(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of detected entities");
                        }
                        break;

                    case JobStatus.ReportControllerAndApplicationConfiguration:
                        if (jobConfiguration.Input.Configuration == true && jobConfiguration.Output.Configuration == true)
                        {
                            if (stepReportControllerAndApplicationConfiguration(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of configuration");
                        }
                        break;

                    case JobStatus.ReportEventsAndHealthRuleViolations:
                        if (jobConfiguration.Input.Events == true && jobConfiguration.Output.Events == true)
                        {
                            if (stepReportEventsAndHealthRuleViolations(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of events and health rule violations");
                        }
                        break;

                    case JobStatus.ReportApplicationAndEntityMetrics:
                        if (jobConfiguration.Input.Metrics == true && jobConfiguration.Output.EntityMetrics == true)
                        {
                            if (stepReportApplicationAndEntityMetrics(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of entity metrics");
                        }
                        break;

                    case JobStatus.ReportApplicationAndEntityMetricGraphs:
                        if (jobConfiguration.Input.Metrics == true && jobConfiguration.Output.EntityMetricGraphs == true)
                        {
                            if (stepReportApplicationAndEntityMetricGraphs(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of entity metric graphs");
                        }
                        break;

                    case JobStatus.ReportSnapshots:
                        if (jobConfiguration.Input.Snapshots == true && jobConfiguration.Output.Snapshots == true)
                        {
                            if (stepReportSnapshots(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of snapshots");
                        }
                        break;

                    case JobStatus.ReportSnapshotsMethodCallLines:
                        if (jobConfiguration.Input.Snapshots == true && jobConfiguration.Output.Snapshots == true)
                        {
                            if (stepReportSnapshotsMethodCallLines(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of snapshot method call lines");
                        }
                        break;

                    case JobStatus.ReportIndividualApplicationAndEntityDetails:
                        if ((jobConfiguration.Input.Metrics == true ||
                            jobConfiguration.Input.Events == true ||
                            jobConfiguration.Input.Flowmaps == true ||
                            jobConfiguration.Input.Snapshots == true) && jobConfiguration.Output.EntityDetails == true)
                        {
                            if (stepReportIndividualEntityDetails(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of entity detail reports");
                        }
                        break;

                    case JobStatus.ReportFlameGraphs:
                        if (jobConfiguration.Input.Snapshots == true && jobConfiguration.Output.FlameGraphs == true)
                        {
                            if (stepReportFlameGraphs(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of flame graphs");
                        }
                        break;

                    default:
                        jobConfiguration.Status = JobStatus.Error;
                        break;
                }

                // Save the resulting JSON file to the job target folder
                if (FileIOHelper.writeJobConfigurationToFile(jobConfiguration, programOptions.OutputJobFilePath) == false)
                {
                    loggerConsole.Error("Unable to write job input file {0}", programOptions.OutputJobFilePath);

                    return;
                }
            }
        }

        #endregion


        #region Extract steps

        private static bool stepExtractControllerApplicationsAndEntities(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportDataFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    stepTimingTarget.NumEntities = 1;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);

                        // Entity files
                        string controllerVersionDataFilePath = Path.Combine(controllerDataFolderPath, EXTRACT_CONTROLLER_VERSION_FILE_NAME);
                        string applicationsDataFilePath = Path.Combine(controllerDataFolderPath, EXTRACT_ENTITY_APPLICATIONS_FILE_NAME);
                        string applicationDataFilePath = Path.Combine(applicationDataFolderPath, EXTRACT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string backendsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string backendsDetailDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BACKENDS_DETAIL_FILE_NAME);
                        string businessTransactionsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndPointsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string serviceEndPointsDetailDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_DETAIL_FILE_NAME);
                        string errorsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_FILE_NAME);
                        string informationPointsDetailDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_DETAIL_FILE_NAME);

                        #endregion

                        #region Controller

                        if (File.Exists(controllerVersionDataFilePath) != true)
                        {
                            loggerConsole.Info("Controller Version");

                            string controllerVersionXML = controllerApi.GetControllerVersion();
                            if (controllerVersionXML != String.Empty) FileIOHelper.saveFileToPath(controllerVersionXML, controllerVersionDataFilePath);
                        }

                        #endregion

                        #region Applications

                        // Only do it once per controller, if processing multiple applications
                        if (File.Exists(applicationsDataFilePath) != true)
                        {
                            loggerConsole.Info("List of Applications");

                            string applicationsJSON = controllerApi.GetListOfApplications();
                            if (applicationsJSON != String.Empty) FileIOHelper.saveFileToPath(applicationsJSON, applicationsDataFilePath);
                        }

                        #endregion

                        #region Application

                        loggerConsole.Info("This Application");

                        string applicationJSON = controllerApi.GetSingleApplication(jobTarget.ApplicationID);
                        if (applicationJSON != String.Empty) FileIOHelper.saveFileToPath(applicationJSON, applicationDataFilePath);

                        #endregion

                        #region Tiers

                        loggerConsole.Info("List of Tiers");

                        string tiersJSON = controllerApi.GetListOfTiers(jobTarget.ApplicationID);
                        if (tiersJSON != String.Empty) FileIOHelper.saveFileToPath(tiersJSON, tiersDataFilePath);

                        #endregion

                        #region Nodes

                        loggerConsole.Info("List of Nodes");

                        string nodesJSON = controllerApi.GetListOfNodes(jobTarget.ApplicationID);
                        if (nodesJSON != String.Empty) FileIOHelper.saveFileToPath(nodesJSON, nodesDataFilePath);

                        #endregion

                        #region Backends

                        loggerConsole.Info("List of Backends");

                        string backendsJSON = controllerApi.GetListOfBackends(jobTarget.ApplicationID);
                        if (backendsJSON != String.Empty) FileIOHelper.saveFileToPath(backendsJSON, backendsDataFilePath);

                        controllerApi.PrivateApiLogin();
                        backendsJSON = controllerApi.GetListOfBackendsAdditionalDetail(jobTarget.ApplicationID);
                        if (backendsJSON != String.Empty) FileIOHelper.saveFileToPath(backendsJSON, backendsDetailDataFilePath);

                        #endregion

                        #region Business Transactions

                        loggerConsole.Info("List of Business Transactions");

                        string businessTransactionsJSON = controllerApi.GetListOfBusinessTransactions(jobTarget.ApplicationID);
                        if (businessTransactionsJSON != String.Empty) FileIOHelper.saveFileToPath(businessTransactionsJSON, businessTransactionsDataFilePath);

                        #endregion

                        #region Service Endpoints

                        loggerConsole.Info("List of Service Endpoints");

                        string serviceEndPointsJSON = controllerApi.GetListOfServiceEndpoints(jobTarget.ApplicationID);
                        if (serviceEndPointsJSON != String.Empty) FileIOHelper.saveFileToPath(serviceEndPointsJSON, serviceEndPointsDataFilePath);

                        controllerApi.PrivateApiLogin();
                        serviceEndPointsJSON = controllerApi.GetListOfServiceEndpointsAdditionalDetail(jobTarget.ApplicationID);
                        if (serviceEndPointsJSON != String.Empty) FileIOHelper.saveFileToPath(serviceEndPointsJSON, serviceEndPointsDetailDataFilePath);

                        #endregion

                        #region Errors

                        loggerConsole.Info("List of Errors");

                        string errorsJSON = controllerApi.GetListOfErrors(jobTarget.ApplicationID);
                        if (errorsJSON != String.Empty) FileIOHelper.saveFileToPath(errorsJSON, errorsDataFilePath);

                        #endregion

                        #region Information Points

                        loggerConsole.Info("List of Information Points");

                        string informationPointsJSON = controllerApi.GetListOfInformationPoints(jobTarget.ApplicationID);
                        if (informationPointsJSON != String.Empty) FileIOHelper.saveFileToPath(informationPointsJSON, informationPointsDataFilePath);

                        controllerApi.PrivateApiLogin();
                        informationPointsJSON = controllerApi.GetListOfInformationPointsAdditionalDetail(jobTarget.ApplicationID);
                        if (informationPointsJSON != String.Empty) FileIOHelper.saveFileToPath(informationPointsJSON, informationPointsDetailDataFilePath);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportDataFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportDataFilePath, true);
            }
        }

        private static bool stepExtractControllerAndApplicationConfiguration(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    stepTimingTarget.NumEntities = 1;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string configDataFolderPath = Path.Combine(applicationDataFolderPath, CONFIGURATION_FOLDER_NAME);

                        // Entity files
                        string applicationsDataFilePath = Path.Combine(controllerDataFolderPath, EXTRACT_ENTITY_APPLICATIONS_FILE_NAME);
                        string applicationConfigDataFilePath = Path.Combine(configDataFolderPath, EXTRACT_CONFIGURATION_APPLICATION_FILE_NAME);
                        string controllerSettingsDataFilePath = Path.Combine(controllerDataFolderPath, EXTRACT_CONFIGURATION_CONTROLLER_FILE_NAME);

                        #endregion

                        #region Controller

                        if (File.Exists(controllerSettingsDataFilePath) != true)
                        {
                            loggerConsole.Info("Controller Settings");

                            string controllerSettingsJSON = controllerApi.GetControllerConfiguration();
                            if (controllerSettingsJSON != String.Empty) FileIOHelper.saveFileToPath(controllerSettingsJSON, controllerSettingsDataFilePath);
                        }

                        #endregion

                        #region Application

                        loggerConsole.Info("Application Configuration");

                        // Application configuration
                        string applicationConfigXml = controllerApi.GetApplicationConfiguration(jobTarget.ApplicationID);
                        if (applicationConfigXml != String.Empty) FileIOHelper.saveFileToPath(applicationConfigXml, applicationConfigDataFilePath);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractApplicationAndEntityMetrics(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            List<MetricExtractMapping> entityMetricExtractMappingList = getMetricsExtractMappingList(programOptions, jobConfiguration);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);
                        string metricsDataFolderPath = Path.Combine(applicationDataFolderPath, METRICS_FOLDER_NAME);

                        // Entity files
                        string tiersDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string backendsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndPointsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_ERRORS_FILE_NAME);

                        stepTimingTarget.NumEntities = entityMetricExtractMappingList.Count;

                        #endregion

                        loggerConsole.Info("Extract Metrics for All Entities ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                    () =>
                                    {
                                        #region Application

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityApplication.ENTITY_FOLDER, EntityApplication.ENTITY_TYPE);

                                        #endregion
                                    },
                                    () =>
                                    {
                                        #region Tiers

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityTier.ENTITY_FOLDER, EntityTier.ENTITY_TYPE);

                                        #endregion
                                    },
                                    () =>
                                    {
                                        #region Nodes

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityNode.ENTITY_FOLDER, EntityNode.ENTITY_TYPE);

                                        #endregion
                                    },
                                    () =>
                                    {
                                        #region Backends

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityBackend.ENTITY_FOLDER, EntityBackend.ENTITY_TYPE);

                                        #endregion
                                    },
                                    () =>
                                    {
                                        #region Business Transactions

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, EntityBusinessTransaction.ENTITY_TYPE);

                                        #endregion
                                    },
                                    () =>
                                    {
                                        #region Service Endpoints

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, EntityServiceEndpoint.ENTITY_TYPE);

                                        #endregion
                                    },
                                    () =>
                                    {
                                        #region Errors

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityError.ENTITY_FOLDER, EntityError.ENTITY_TYPE);

                                        #endregion
                                    },
                                    () =>
                                    {
                                        #region Information Points

                                        getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityInformationPoint.ENTITY_FOLDER, EntityInformationPoint.ENTITY_TYPE);

                                        #endregion
                                    }
                                );
                        }
                        else
                        {
                            #region Application

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityApplication.ENTITY_FOLDER, EntityApplication.ENTITY_TYPE);

                            #endregion

                            #region Tiers

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityTier.ENTITY_FOLDER, EntityTier.ENTITY_TYPE);

                            #endregion

                            #region Nodes

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityNode.ENTITY_FOLDER, EntityNode.ENTITY_TYPE);

                            #endregion

                            #region Backends

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityBackend.ENTITY_FOLDER, EntityBackend.ENTITY_TYPE);

                            #endregion

                            #region Business Transactions

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, EntityBusinessTransaction.ENTITY_TYPE);

                            #endregion

                            #region Service Endpoints

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, EntityServiceEndpoint.ENTITY_TYPE);

                            #endregion

                            #region Errors

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityError.ENTITY_FOLDER, EntityError.ENTITY_TYPE);

                            #endregion

                            #region Information Points

                            getMetricsForEntities(jobTarget, jobConfiguration, entityMetricExtractMappingList, metricsDataFolderPath, EntityInformationPoint.ENTITY_FOLDER, EntityInformationPoint.ENTITY_TYPE);

                            #endregion
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractApplicationAndEntityFlowmaps(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));
                        // Login into private API
                        controllerApi.PrivateApiLogin();

                        // Various folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);
                        string activityGridDataFolderPath = Path.Combine(applicationDataFolderPath, ACTIVITYGRID_FOLDER_NAME);

                        // Entity files
                        string tiersDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string backendsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndPointsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);

                        #endregion

                        #region Prepare time range

                        long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.From);
                        long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.To);
                        long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);

                        #endregion

                        #region Application

                        loggerConsole.Info("Extract Flowmap for Application");

                        stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + 1;

                        extractFlowmapsApplication(jobConfiguration, jobTarget, controllerApi, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes);

                        #endregion

                        #region Tiers

                        List<AppDRESTTier> tiersList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTTier>(tiersDataFilePath);
                        if (tiersList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Tiers ({0} entities)", tiersList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + tiersList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var tiersListChunks = tiersList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTTier>, int>(
                                    tiersListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (tiersListChunk, loop, subtotal) =>
                                    {
                                        // Set up controller access
                                        ControllerApi controllerApiParallel = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));
                                        // Login into private API
                                        controllerApiParallel.PrivateApiLogin();

                                        subtotal += extractFlowmapsTiers(jobConfiguration, jobTarget, controllerApiParallel, tiersListChunk, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            else
                            {
                                numEntities = extractFlowmapsTiers(jobConfiguration, jobTarget, controllerApi, tiersList, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion

                        #region Nodes

                        List<AppDRESTNode> nodesList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTNode>(nodesDataFilePath);
                        if (nodesList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Nodes ({0} entities)", nodesList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + nodesList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var nodesListChunks = nodesList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTNode>, int>(
                                    nodesListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (nodesListChunk, loop, subtotal) =>
                                    {
                                        // Set up controller access
                                        ControllerApi controllerApiParallel = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));
                                        // Login into private API
                                        controllerApiParallel.PrivateApiLogin();

                                        subtotal += extractFlowmapsNodes(jobConfiguration, jobTarget, controllerApiParallel, nodesListChunk, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            else
                            {
                                numEntities = extractFlowmapsNodes(jobConfiguration, jobTarget, controllerApi, nodesList, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion

                        #region Backends

                        List<AppDRESTBackend> backendsList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBackend>(backendsDataFilePath);
                        if (backendsList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Backends ({0} entities)", backendsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + backendsList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var backendsListChunks = backendsList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTBackend>, int>(
                                    backendsListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (backendsListChunk, loop, subtotal) =>
                                    {
                                        // Set up controller access
                                        ControllerApi controllerApiParallel = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));
                                        // Login into private API
                                        controllerApiParallel.PrivateApiLogin();

                                        subtotal += extractFlowmapsBackends(jobConfiguration, jobTarget, controllerApiParallel, backendsListChunk, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            else
                            {
                                numEntities = extractFlowmapsBackends(jobConfiguration, jobTarget, controllerApi, backendsList, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion

                        #region Business Transactions

                        List<AppDRESTBusinessTransaction> businessTransactionsList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBusinessTransaction>(businessTransactionsDataFilePath);
                        if (businessTransactionsList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Business Transactions ({0} entities)", businessTransactionsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + businessTransactionsList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var businessTransactionsListChunks = businessTransactionsList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTBusinessTransaction>, int>(
                                    businessTransactionsListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (businessTransactionsListChunk, loop, subtotal) =>
                                    {
                                        // Set up controller access
                                        ControllerApi controllerApiParallel = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));
                                        // Login into private API
                                        controllerApiParallel.PrivateApiLogin();

                                        subtotal += extractFlowmapsBusinessTransactions(jobConfiguration, jobTarget, controllerApiParallel, businessTransactionsListChunk, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            {
                                numEntities = extractFlowmapsBusinessTransactions(jobConfiguration, jobTarget, controllerApi, businessTransactionsList, activityGridDataFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractEventsAndHealthRuleViolations(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);
                        string eventsDataFolderPath = Path.Combine(applicationDataFolderPath, EVENTS_FOLDER_NAME);

                        #endregion

                        #region Health Rule violations

                        loggerConsole.Info("Extract List of Health Rule Violations ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count);

                        JArray listOfHealthRuleViolations = new JArray();
                        int totalHealthRuleViolationsFound = 0;
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                            long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);

                            string healthRuleViolationsJSON = controllerApi.GetHealthRuleViolations(jobTarget.ApplicationID, fromTimeUnix, toTimeUnix);
                            if (healthRuleViolationsJSON != String.Empty)
                            {
                                // Load health rule violations
                                JArray healthRuleViolationsInHour = JArray.Parse(healthRuleViolationsJSON);
                                foreach (JObject healthRuleViolation in healthRuleViolationsInHour)
                                {
                                    listOfHealthRuleViolations.Add(healthRuleViolation);
                                }
                                totalHealthRuleViolationsFound = totalHealthRuleViolationsFound + healthRuleViolationsInHour.Count;
                            }
                        }

                        if (listOfHealthRuleViolations.Count > 0)
                        {
                            string healthRuleViolationsDataFilePath = Path.Combine(
                                eventsDataFolderPath,
                                String.Format(HEALTH_RULE_VIOLATIONS_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                            FileIOHelper.writeJArrayToFile(listOfHealthRuleViolations, healthRuleViolationsDataFilePath);

                            logger.Info("{0} health rule violations from {1:o} to {2:o}", listOfHealthRuleViolations.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);
                            loggerConsole.Info("{0} health rule violations", listOfHealthRuleViolations.Count);
                        }

                        #endregion

                        #region Events

                        int numEventsTotal = 0;

                        if (programOptions.ProcessSequentially == false)
                        {
                            loggerConsole.Info("Extract {0} event types ({1} time ranges)", eventTypes.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                            Parallel.ForEach(
                                eventTypes,
                                new ParallelOptions { MaxDegreeOfParallelism = EVENTS_EXTRACT_NUMBER_OF_THREADS },
                                () => 0,
                                (eventType, loop, subtotal) =>
                                {
                                    ControllerApi controllerApiParallel = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                                    int numEventsInType = extractEvents(jobConfiguration, jobTarget, controllerApiParallel, eventsDataFolderPath, eventType, false);
                                    subtotal = subtotal + numEventsInType;
                                    return subtotal;
                                },
                                (finalResult) =>
                                {
                                    Interlocked.Add(ref numEventsTotal, finalResult);
                                    Console.Write("[{0}].", numEventsTotal);
                                }
                            );
                        }
                        else
                        {
                            foreach (string eventType in eventTypes)
                            {
                                int numEventsInType = extractEvents(jobConfiguration, jobTarget, controllerApi, eventsDataFolderPath, eventType, true);
                                numEventsTotal = numEventsTotal + numEventsInType;
                            }

                        }
                        loggerConsole.Info("{0} events total", numEventsTotal);

                        stepTimingTarget.NumEntities = numEventsTotal;

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractSnapshots(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));
                        // Login into private API
                        controllerApi.PrivateApiLogin();

                        // Various folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);
                        string snapshotsDataFolderPath = Path.Combine(applicationDataFolderPath, SNAPSHOTS_FOLDER_NAME);

                        // Entity files
                        string tiersDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string businessTransactionsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);

                        #endregion

                        #region Get list of Snapshots in time ranges

                        loggerConsole.Info("Extract List of Snapshots ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count);

                        // Get list of snapshots in each time range
                        int totalSnapshotsFound = 0;
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            logger.Info("Extract List of Snapshots from {0:o} to {1:o}", jobTimeRange.From, jobTimeRange.To);
                            loggerConsole.Info("Extract List of Snapshots from {0:G} to {1:G}", jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime());

                            string snapshotsDataFilePath = Path.Combine(snapshotsDataFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));

                            int differenceInMinutes = (int)(jobTimeRange.To - jobTimeRange.From).TotalMinutes;

                            if (File.Exists(snapshotsDataFilePath) == false)
                            {
                                JArray listOfSnapshots = new JArray();

                                // Extract snapshot list
                                long serverCursorId = 0;
                                string serverCursorIdType = String.Empty;
                                do
                                {
                                    string snapshotsJSON = String.Empty;
                                    if (serverCursorId == 0)
                                    {

                                        // Extract first page of snapshots
                                        snapshotsJSON = controllerApi.GetListOfSnapshotsFirstPage(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE);
                                    }
                                    else
                                    {
                                        // If there are more snapshots on the server, the server cursor would be non-0 
                                        switch (serverCursorIdType)
                                        {
                                            case "scrollId":
                                                // Sometimes - >4.3.3? the value of scroll is in scrollId, not rsdScrollId
                                                // "serverCursor" : {
                                                //    "scrollId" : 1509543646696
                                                //  }
                                                snapshotsJSON = controllerApi.GetListOfSnapshotsNextPage_Type_scrollId(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE, serverCursorId);

                                                break;

                                            case "rsdScrollId":
                                                // "serverCursor" : {
                                                //    "rsdScrollId" : 1509543646696
                                                //  }
                                                snapshotsJSON = controllerApi.GetListOfSnapshotsNextPage_Type_rsdScrollId(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE, serverCursorId);

                                                break;

                                            case "fetchMoreDataHandle":
                                                // Seen this on 4.2.3.0 Controller. Maybe that's how it used to be?
                                                // "fetchMoreDataHandle":1509626881987
                                                // Can't seem to make it load more than 600 items
                                                snapshotsJSON = controllerApi.GetListOfSnapshotsNextPage_Type_handle(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE, serverCursorId);

                                                break;

                                            default:
                                                logger.Warn("Unknown type of serverCursorIdType={0}, not going to retrieve any snapshots", serverCursorIdType);

                                                break;
                                        }
                                    }

                                    // Assume we have no more pages
                                    serverCursorId = 0;

                                    // Process retrieved snapshots and check if we actually have more pages
                                    if (snapshotsJSON != String.Empty)
                                    {
                                        Console.Write(".");

                                        // Load snapshots into array
                                        JObject snapshotsParsed = JObject.Parse(snapshotsJSON);
                                        JArray snapshots = (JArray)snapshotsParsed["requestSegmentDataListItems"];
                                        foreach (JObject snapshot in snapshots)
                                        {
                                            listOfSnapshots.Add(snapshot);
                                        }

                                        // Check whether we have more snapshots and if yes, get continuation type and cursor ID
                                        JToken fetchMoreDataHandleObj = snapshotsParsed["fetchMoreDataHandle"];
                                        JToken serverCursorObj = snapshotsParsed["serverCursor"];
                                        if (serverCursorObj != null)
                                        {
                                            JToken scrollIdObj = serverCursorObj["scrollId"];
                                            JToken rsdScrollIdObj = serverCursorObj["rsdScrollId"];

                                            if (scrollIdObj != null)
                                            {
                                                serverCursorIdType = "scrollId";
                                                // Parse the cursor ID 
                                                if (Int64.TryParse(scrollIdObj.ToString(), out serverCursorId) == false)
                                                {
                                                    // Nope, not going to go forward
                                                    serverCursorId = 0;
                                                }
                                            }
                                            else if (rsdScrollIdObj != null)
                                            {
                                                serverCursorIdType = "rsdScrollId";
                                                // Parse the cursor ID 
                                                if (Int64.TryParse(rsdScrollIdObj.ToString(), out serverCursorId) == false)
                                                {
                                                    // Nope, not going to go forward
                                                    serverCursorId = 0;
                                                }
                                            }
                                        }
                                        else if (fetchMoreDataHandleObj != null)
                                        {
                                            serverCursorIdType = "fetchMoreDataHandle";
                                            // Parse the cursor ID 
                                            if (Int64.TryParse(fetchMoreDataHandleObj.ToString(), out serverCursorId) == false)
                                            {
                                                // Nope, not going to go forward
                                                serverCursorId = 0;
                                            }
                                        }
                                        else
                                        {
                                            logger.Warn("Snapshot list retrival call unexpectedly did not have any evidence of continuation CursorId");
                                        }

                                        logger.Info("Retrieved snapshots from Controller {0}, Application {1}, From {2:o}, To {3:o}', number of snapshots {4}, continuation type {5}, continuation CursorId {6}", jobTarget.Controller, jobTarget.Application, jobTimeRange.From, jobTimeRange.To, snapshots.Count, serverCursorIdType, serverCursorId);

                                        // Move to next loop
                                        Console.Write("+{0}", listOfSnapshots.Count);
                                    }
                                }
                                while (serverCursorId > 0);

                                Console.WriteLine();

                                FileIOHelper.writeJArrayToFile(listOfSnapshots, snapshotsDataFilePath);

                                totalSnapshotsFound = totalSnapshotsFound + listOfSnapshots.Count;

                                logger.Info("{0} snapshots from {1:o} to {2:o}", listOfSnapshots.Count, jobTimeRange.From, jobTimeRange.To);
                                loggerConsole.Info("{0} snapshots from {1:G} to {2:G}", listOfSnapshots.Count, jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime());
                            }
                        }

                        logger.Info("{0} snapshots in all time ranges", totalSnapshotsFound);
                        loggerConsole.Info("{0} snapshots in all time ranges", totalSnapshotsFound);

                        #endregion

                        #region Get individual Snapshots

                        // Extract individual snapshots
                        loggerConsole.Info("Extract Individual Snapshots");

                        List<AppDRESTTier> tiersList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTTier>(tiersDataFilePath);
                        List<AppDRESTBusinessTransaction> businessTransactionsList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBusinessTransaction>(businessTransactionsDataFilePath);

                        // Identify Node.JS tiers that will extact call graph using a different call
                        List<AppDRESTTier> tiersNodeJSList = null;
                        if (tiersList != null)
                        {
                            tiersNodeJSList = tiersList.Where(t => t.agentType == "NODEJS_APP_AGENT").ToList();
                        }

                        // Process each hour at a time
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            string snapshotsDataFilePath = Path.Combine(snapshotsDataFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
                            JArray listOfSnapshotsInHour = FileIOHelper.loadJArrayFromFile(snapshotsDataFilePath);
                            if (listOfSnapshotsInHour != null && listOfSnapshotsInHour.Count > 0)
                            {
                                logger.Info("Filter Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHour.Count);
                                loggerConsole.Info("Filter Snapshots {0:G} to {1:G} ({2} snapshots)", jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime(), listOfSnapshotsInHour.Count);

                                // Filter the list of snapshots based on SnapshotSelectionCriteria
                                List<JToken> listOfSnapshotsInHourFiltered = new List<JToken>(listOfSnapshotsInHour.Count);
                                foreach (JToken snapshotToken in listOfSnapshotsInHour)
                                {
                                    logger.Trace("Considering filtering snapshot requestGUID={0}, firstInChain={1}, userExperience={2}, fullCallgraph={3}, delayedCallGraph={4}, applicationComponentName={5}, businessTransactionName={6}",
                                        snapshotToken["requestGUID"],
                                        snapshotToken["firstInChain"],
                                        snapshotToken["userExperience"],
                                        snapshotToken["fullCallgraph"],
                                        snapshotToken["delayedCallGraph"],
                                        snapshotToken["applicationComponentName"],
                                        snapshotToken["businessTransactionName"]);

                                    // Only grab first in chain snapshots
                                    if ((bool)snapshotToken["firstInChain"] == false) continue;

                                    // Filter user experience
                                    switch (snapshotToken["userExperience"].ToString())
                                    {
                                        case "NORMAL":
                                            if (jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Normal != true) continue;
                                            break;
                                        case "SLOW":
                                            if (jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Slow != true) continue;
                                            break;
                                        case "VERY_SLOW":
                                            if (jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.VerySlow != true) continue;
                                            break;
                                        case "STALL":
                                            if (jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Stall != true) continue;
                                            break;
                                        case "ERROR":
                                            if (jobConfiguration.Input.SnapshotSelectionCriteria.UserExperience.Error != true) continue;
                                            break;
                                        default:
                                            // Not sure what kind of beast it is
                                            continue;
                                    }

                                    // Filter call graph
                                    if ((bool)snapshotToken["fullCallgraph"] == true)
                                    {
                                        if (jobConfiguration.Input.SnapshotSelectionCriteria.SnapshotType.Full != true) continue;
                                    }
                                    else if ((bool)snapshotToken["delayedCallGraph"] == true)
                                    {
                                        if (jobConfiguration.Input.SnapshotSelectionCriteria.SnapshotType.Partial != true) continue;
                                    }
                                    else
                                    {
                                        if (jobConfiguration.Input.SnapshotSelectionCriteria.SnapshotType.None != true) continue;
                                    }

                                    // Filter Tier type
                                    if (jobConfiguration.Input.SnapshotSelectionCriteria.TierType.All != true)
                                    {
                                        if (tiersList != null)
                                        {
                                            AppDRESTTier tier = tiersList.Where(t => t.id == (long)snapshotToken["applicationComponentId"]).FirstOrDefault();
                                            if (tier != null)
                                            {
                                                PropertyInfo pi = jobConfiguration.Input.SnapshotSelectionCriteria.TierType.GetType().GetProperty(tier.agentType);
                                                if (pi != null)
                                                {
                                                    if ((bool)pi.GetValue(jobConfiguration.Input.SnapshotSelectionCriteria.TierType) == false) continue;
                                                }
                                            }
                                        }
                                    }

                                    // Filter BT type
                                    if (jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactionType.All != true)
                                    {
                                        if (businessTransactionsList != null)
                                        {
                                            AppDRESTBusinessTransaction businessTransaction = businessTransactionsList.Where(b => b.id == (long)snapshotToken["businessTransactionId"] && b.tierId == (long)snapshotToken["applicationComponentId"]).FirstOrDefault();
                                            if (businessTransaction != null)
                                            {
                                                PropertyInfo pi = jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactionType.GetType().GetProperty(businessTransaction.entryPointType);
                                                if (pi != null)
                                                {
                                                    if ((bool)pi.GetValue(jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactionType) == false) continue;
                                                }
                                            }
                                        }
                                    }

                                    // Filter Tier name
                                    bool tierNameMatch = false;
                                    if (jobConfiguration.Input.SnapshotSelectionCriteria.Tiers.Length == 0) tierNameMatch = true;
                                    foreach (string matchCriteria in jobConfiguration.Input.SnapshotSelectionCriteria.Tiers)
                                    {
                                        if (matchCriteria.Length > 0)
                                        {
                                            // Try straight up string compare first
                                            if (String.Compare(snapshotToken["applicationComponentName"].ToString(), matchCriteria, true) == 0)
                                            {
                                                tierNameMatch = true;
                                                break;
                                            }

                                            // Try regex compare second
                                            Regex regexQuery = new Regex(matchCriteria, RegexOptions.IgnoreCase);
                                            Match regexMatch = regexQuery.Match(snapshotToken["applicationComponentName"].ToString());
                                            if (regexMatch.Success == true && regexMatch.Index == 0)
                                            {
                                                tierNameMatch = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (tierNameMatch == false) continue;

                                    // Filter BT name
                                    bool businessTransactionNameMatch = false;
                                    if (jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactions.Length == 0) businessTransactionNameMatch = true;
                                    foreach (string matchCriteria in jobConfiguration.Input.SnapshotSelectionCriteria.BusinessTransactions)
                                    {
                                        if (matchCriteria.Length > 0)
                                        {
                                            // Try straight up string compare first
                                            if (String.Compare(snapshotToken["businessTransactionName"].ToString(), matchCriteria, true) == 0)
                                            {
                                                businessTransactionNameMatch = true;
                                                break;
                                            }

                                            // Try regex compare second
                                            Regex regexQuery = new Regex(matchCriteria, RegexOptions.IgnoreCase);
                                            Match regexMatch = regexQuery.Match(snapshotToken["businessTransactionName"].ToString());
                                            if (regexMatch.Success == true && regexMatch.Index == 0)
                                            {
                                                businessTransactionNameMatch = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (businessTransactionNameMatch == false) continue;

                                    // If we got here, then the snapshot passed the filter
                                    logger.Trace("Keeping snapshot requestGUID={0}, firstInChain={1}, userExperience={2}, fullCallgraph={3}, delayedCallGraph={4}, applicationComponentName={5}, businessTransactionName={6}",
                                        snapshotToken["requestGUID"],
                                        snapshotToken["firstInChain"],
                                        snapshotToken["userExperience"],
                                        snapshotToken["fullCallgraph"],
                                        snapshotToken["delayedCallGraph"],
                                        snapshotToken["applicationComponentName"],
                                        snapshotToken["businessTransactionName"]);

                                    listOfSnapshotsInHourFiltered.Add(snapshotToken);
                                }

                                logger.Info("Total Snapshots {0:o} to {1:o} is {2}, after filtered {3}", jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime(), listOfSnapshotsInHour.Count, listOfSnapshotsInHourFiltered.Count);

                                // Now extract things
                                logger.Info("Extract Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHourFiltered.Count);
                                loggerConsole.Info("Extract Snapshots {0:G} to {1:G} ({2} snapshots)", jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime(), listOfSnapshotsInHourFiltered.Count);

                                stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + listOfSnapshotsInHourFiltered.Count;

                                int numSnapshots = 0;

                                if (programOptions.ProcessSequentially == false)
                                {
                                    var listOfSnapshotsInHourChunks = listOfSnapshotsInHourFiltered.BreakListIntoChunks(SNAPSHOTS_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                    Parallel.ForEach<List<JToken>, int>(
                                        listOfSnapshotsInHourChunks,
                                        new ParallelOptions { MaxDegreeOfParallelism = SNAPSHOTS_EXTRACT_NUMBER_OF_THREADS },
                                        () => 0,
                                        (listOfSnapshotsInHourChunk, loop, subtotal) =>
                                        {
                                            // Set up controller access
                                            ControllerApi controllerApiParallel = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));
                                            // Login into private API
                                            controllerApiParallel.PrivateApiLogin();

                                            subtotal += extractSnapshots(jobConfiguration, jobTarget, controllerApiParallel, listOfSnapshotsInHourChunk, tiersNodeJSList, snapshotsDataFolderPath, false);
                                            return subtotal;
                                        },
                                        (finalResult) =>
                                        {
                                            Interlocked.Add(ref numSnapshots, finalResult);
                                            Console.Write("[{0}].", numSnapshots);
                                        }
                                    );
                                }
                                else
                                {
                                    numSnapshots = extractSnapshots(jobConfiguration, jobTarget, controllerApi, listOfSnapshotsInHourFiltered, tiersNodeJSList, snapshotsDataFolderPath, true);
                                }

                                loggerConsole.Info("{0} snapshots", numSnapshots);
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        #endregion

        #region Indexing steps

        private static bool stepIndexControllersApplicationsAndEntities(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);
                        string configDataFolderPath = Path.Combine(applicationDataFolderPath, CONFIGURATION_FOLDER_NAME);

                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);

                        string entitiesReportFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);

                        // Entity files
                        string applicationsDataFilePath = Path.Combine(controllerDataFolderPath, EXTRACT_ENTITY_APPLICATIONS_FILE_NAME);
                        string controllerVersionDataFilePath = Path.Combine(controllerDataFolderPath, EXTRACT_CONTROLLER_VERSION_FILE_NAME);
                        string tiersDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string businessTransactionsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string backendsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string backendsDetailDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_BACKENDS_DETAIL_FILE_NAME);
                        string serviceEndPointsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string serviceEndPointsDetailDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_DETAIL_FILE_NAME);
                        string errorsFileDataPath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_FILE_NAME);
                        string informationPointsDetailDataFilePath = Path.Combine(entitiesDataFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_DETAIL_FILE_NAME);

                        // Report files
                        string controllerIndexFilePath = Path.Combine(controllerIndexFolderPath, CONVERT_ENTITY_CONTROLLER_FILE_NAME);
                        string applicationsIndexFilePath = Path.Combine(controllerIndexFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);
                        string applicationIndexFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationIndexReportFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        // Report files for All
                        string controllersReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                        string applicationsReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsReportFilePath = Path.Combine(entitiesReportFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        #endregion

                        #region Controller

                        List<AppDRESTApplication> applicationsRESTList = null;

                        loggerConsole.Info("Index List of Controllers");

                        // Create this row 
                        EntityController controller = new EntityController();
                        controller.Controller = jobTarget.Controller;
                        controller.ControllerLink = String.Format(DEEPLINK_CONTROLLER, controller.Controller, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                        controller.UserName = jobTarget.UserName;

                        // Lookup number of applications
                        // Load JSON file from the file system in case we are continuing the step after stopping
                        applicationsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTApplication>(applicationsDataFilePath);
                        if (applicationsRESTList != null)
                        {
                            controller.NumApps = applicationsRESTList.Count;
                        }

                        // Lookup version
                        // Load the configuration.xml from the child to parse the version
                        XmlDocument configXml = FileIOHelper.loadXmlDocumentFromFile(controllerVersionDataFilePath);
                        if (configXml != null)
                        {
                            //<serverstatus version="1" vendorid="">
                            //    <available>true</available>
                            //    <serverid/>
                            //    <serverinfo>
                            //        <vendorname>AppDynamics</vendorname>
                            //        <productname>AppDynamics Application Performance Management</productname>
                            //        <serverversion>004-004-001-000</serverversion>
                            //        <implementationVersion>Controller v4.4.1.0 Build 164 Commit 6e1fd94d18dc87c1ecab2da573f98cea49d31c3a</implementationVersion>
                            //    </serverinfo>
                            //    <startupTimeInSeconds>19</startupTimeInSeconds>
                            //</serverstatus>
                            string controllerVersion = configXml.SelectSingleNode("serverstatus/serverinfo/serverversion").InnerText;
                            string[] controllerVersionArray = controllerVersion.Split('-');
                            int[] controllerVersionArrayNum = new int[controllerVersionArray.Length];
                            for (int j = 0; j < controllerVersionArray.Length; j++)
                            {
                                controllerVersionArrayNum[j] = Convert.ToInt32(controllerVersionArray[j]);
                            }
                            controllerVersion = String.Join(".", controllerVersionArrayNum);
                            controller.Version = controllerVersion;
                            controller.VersionDetail = configXml.SelectSingleNode("serverstatus/serverinfo/implementationVersion").InnerText;
                        }
                        else
                        {
                            controller.Version = "No config data";
                        }

                        // Output single controller report CSV
                        List<EntityController> controllerList = new List<EntityController>(1);
                        controllerList.Add(controller);

                        if (File.Exists(controllerIndexFilePath) == false)
                        {
                            FileIOHelper.writeListToCSVFile(controllerList, new ControllerEntityReportMap(), controllerIndexFilePath);
                        }

                        #endregion

                        #region Nodes

                        List<AppDRESTNode> nodesRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTNode>(nodesDataFilePath);
                        List<EntityNode> nodesList = null;
                        if (nodesRESTList != null)
                        {
                            loggerConsole.Info("Index List of Nodes ({0} entities)", nodesRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + nodesRESTList.Count;

                            nodesList = new List<EntityNode>(nodesRESTList.Count);

                            foreach (AppDRESTNode node in nodesRESTList)
                            {
                                EntityNode nodeRow = new EntityNode();
                                nodeRow.NodeID = node.id;
                                nodeRow.AgentPresent = node.appAgentPresent;
                                nodeRow.AgentType = node.agentType;
                                nodeRow.AgentVersion = node.appAgentVersion;
                                nodeRow.ApplicationName = jobTarget.Application;
                                nodeRow.ApplicationID = jobTarget.ApplicationID;
                                nodeRow.Controller = jobTarget.Controller;
                                nodeRow.MachineAgentPresent = node.machineAgentPresent;
                                nodeRow.MachineAgentVersion = node.machineAgentVersion;
                                nodeRow.MachineID = node.machineId;
                                nodeRow.MachineName = node.machineName;
                                nodeRow.MachineOSType = node.machineOSType;
                                nodeRow.NodeName = node.name;
                                nodeRow.TierID = node.tierId;
                                nodeRow.TierName = node.tierName;
                                nodeRow.MachineType = node.type;
                                if (nodeRow.AgentVersion != String.Empty)
                                {
                                    // Java agent looks like that
                                    //Server Agent v4.2.3.2 GA #12153 r13c5eb6a7acbfea4d6da465a3ae47412715e26fa 59-4.2.3.next-build
                                    //Server Agent v3.7.16.0 GA #2014-02-26_21-19-08 raf61d5f54753290c983f95173e74e6865f6ad123 130-3.7.16
                                    //Server Agent v4.2.7.1 GA #13005 rc04adaef4741dbb8f2e7c206bdb2a6614046798a 11-4.2.7.next-analytics
                                    //Server Agent v4.0.6.0 GA #2015-05-11_20-44-33 r7cb8945756a0779766bf1b4c32e49a96da7b8cfe 10-4.0.6.next
                                    //Server Agent v3.8.3.0 GA #2014-06-06_17-06-05 r34b2744775df248f79ffb2da2b4515b1f629aeb5 7-3.8.3.next
                                    //Server Agent v3.9.3.0 GA #2014-09-23_22-14-15 r05918cd8a4a8a63504a34f0f1c85511e207049b3 20-3.9.3.next
                                    //Server Agent v4.1.7.1 GA #9949 ra4a2721d52322207b626e8d4c88855c846741b3d 18-4.1.7.next-build
                                    //Server Agent v3.7.11.1 GA #2013-10-23_17-07-44 r41149afdb8ce39025051c25382b1cf77e2a7fed0 21
                                    //Server Agent v4.1.8.5 GA #10236 r8eca32e4695e8f6a5902d34a66bfc12da1e12241 45-4.1.8.next-controller

                                    // Apache agent looks like this
                                    // Proxy v4.2.5.1 GA SHA-1:.ad6c804882f518b3350f422489866ea2008cd664 #13146 35-4.2.5.next-build

                                    Regex regexVersion = new Regex(@"(?i).*v(\d*\.\d*\.\d*\.\d*).*", RegexOptions.IgnoreCase);
                                    Match match = regexVersion.Match(nodeRow.AgentVersion);
                                    if (match != null)
                                    {
                                        if (match.Groups.Count > 1)
                                        {
                                            nodeRow.AgentVersionRaw = nodeRow.AgentVersion;
                                            nodeRow.AgentVersion = match.Groups[1].Value;
                                        }
                                    }
                                }
                                if (nodeRow.MachineAgentVersion != String.Empty)
                                {
                                    // Machine agent looks like that 
                                    //Machine Agent v4.2.3.2 GA Build Date 2016 - 07 - 11 10:26:01
                                    //Machine Agent v3.7.16.0 GA Build Date 2014 - 02 - 26 21:20:29
                                    //Machine Agent v4.2.3.2 GA Build Date 2016 - 07 - 11 10:17:54
                                    //Machine Agent v4.0.6.0 GA Build Date 2015 - 05 - 11 20:56:44
                                    //Machine Agent v3.8.3.0 GA Build Date 2014 - 06 - 06 17:09:13
                                    //Machine Agent v4.1.7.1 GA Build Date 2015 - 11 - 24 20:49:24

                                    Regex regexVersion = new Regex(@"(?i).*Machine Agent.*v(\d*\.\d*\.\d*\.\d*).*", RegexOptions.IgnoreCase);
                                    Match match = regexVersion.Match(nodeRow.MachineAgentVersion);
                                    if (match != null)
                                    {
                                        if (match.Groups.Count > 1)
                                        {
                                            nodeRow.MachineAgentVersionRaw = nodeRow.MachineAgentVersion;
                                            nodeRow.MachineAgentVersion = match.Groups[1].Value;
                                        }
                                    }
                                }

                                updateEntityWithDeeplinks(nodeRow);
                                updateEntityWithReportDetailAndFlameGraphLinks(nodeRow, jobConfiguration, jobTarget, reportFolderPath);

                                nodesList.Add(nodeRow);
                            }

                            // Sort them
                            nodesList = nodesList.OrderBy(o => o.TierName).ThenBy(o => o.NodeName).ToList();

                            FileIOHelper.writeListToCSVFile(nodesList, new NodeEntityReportMap(), nodesIndexFilePath);
                        }

                        #endregion

                        #region Backends

                        List<AppDRESTBackend> backendsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBackend>(backendsDataFilePath);
                        List<AppDRESTTier> tiersRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTTier>(tiersDataFilePath);
                        List<EntityBackend> backendsList = null;
                        if (backendsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Backends ({0} entities)", backendsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + backendsRESTList.Count;

                            backendsList = new List<EntityBackend>(backendsRESTList.Count);

                            JObject backendsDetailsContainer = FileIOHelper.loadJObjectFromFile(backendsDetailDataFilePath);
                            JArray backendsDetails = null;
                            if (backendsDetailsContainer != null)
                            {
                                backendsDetails = (JArray)backendsDetailsContainer["backendListEntries"];
                            }

                            foreach (AppDRESTBackend backend in backendsRESTList)
                            {
                                EntityBackend backendRow = new EntityBackend();
                                backendRow.ApplicationName = jobTarget.Application;
                                backendRow.ApplicationID = jobTarget.ApplicationID;
                                backendRow.BackendID = backend.id;
                                backendRow.BackendName = backend.name;
                                backendRow.BackendType = backend.exitPointType;
                                backendRow.Controller = jobTarget.Controller;
                                backendRow.NumProps = backend.properties.Count;
                                if (backend.properties.Count >= 1)
                                {
                                    backendRow.Prop1Name = backend.properties[0].name;
                                    backendRow.Prop1Value = backend.properties[0].value;
                                }
                                if (backend.properties.Count >= 2)
                                {
                                    backendRow.Prop2Name = backend.properties[1].name;
                                    backendRow.Prop2Value = backend.properties[1].value;
                                }
                                if (backend.properties.Count >= 3)
                                {
                                    backendRow.Prop3Name = backend.properties[2].name;
                                    backendRow.Prop3Value = backend.properties[2].value;
                                }
                                if (backend.properties.Count >= 4)
                                {
                                    backendRow.Prop4Name = backend.properties[3].name;
                                    backendRow.Prop4Value = backend.properties[3].value;
                                }
                                if (backend.properties.Count >= 5)
                                {
                                    backendRow.Prop5Name = backend.properties[4].name;
                                    backendRow.Prop5Value = backend.properties[4].value;
                                }
                                if (backend.properties.Count >= 6)
                                {
                                    backendRow.Prop6Name = backend.properties[5].name;
                                    backendRow.Prop6Value = backend.properties[5].value;
                                }
                                if (backend.properties.Count >= 7)
                                {
                                    backendRow.Prop7Name = backend.properties[6].name;
                                    backendRow.Prop7Value = backend.properties[6].value;
                                }

                                // Look up the type in the callInfo\metaInfo
                                if (backendsDetails != null)
                                {
                                    JObject backendDetail = (JObject)backendsDetails.Where(b => (long)b["id"] == backendRow.BackendID).FirstOrDefault();
                                    if (backendDetail != null)
                                    {
                                        bool additionalInfoLookupSucceeded = false;

                                        JArray metaInfoArray = (JArray)backendDetail["callInfo"]["metaInfo"];
                                        JToken metaInfoExitPoint = metaInfoArray.Where(m => m["name"].ToString() == "exit-point-type").FirstOrDefault();
                                        if (metaInfoExitPoint != null)
                                        {
                                            string betterBackendType = metaInfoExitPoint["value"].ToString();
                                            if (betterBackendType.Length > 0 && betterBackendType != backendRow.BackendType)
                                            {
                                                backendRow.BackendType = betterBackendType;
                                                additionalInfoLookupSucceeded = true;
                                            }
                                        }

                                        if (additionalInfoLookupSucceeded == false)
                                        {
                                            JObject resolutionInfoObject = (JObject)backendDetail["callInfo"]["resolutionInfo"];
                                            string betterBackendType = resolutionInfoObject["exitPointSubtype"].ToString();
                                            if (betterBackendType.Length > 0 && betterBackendType != backendRow.BackendType)
                                            {
                                                backendRow.BackendType = betterBackendType;
                                                additionalInfoLookupSucceeded = true;
                                            }
                                        }
                                    }
                                }

                                updateEntityWithDeeplinks(backendRow);
                                updateEntityWithReportDetailAndFlameGraphLinks(backendRow, jobConfiguration, jobTarget, reportFolderPath);

                                backendsList.Add(backendRow);
                            }
                            // Sort them
                            backendsList = backendsList.OrderBy(o => o.BackendType).ThenBy(o => o.BackendName).ToList();

                            FileIOHelper.writeListToCSVFile(backendsList, new BackendEntityReportMap(), backendsIndexFilePath);
                        }

                        #endregion

                        #region Business Transactions

                        List<AppDRESTBusinessTransaction> businessTransactionsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBusinessTransaction>(businessTransactionsDataFilePath);
                        List<EntityBusinessTransaction> businessTransactionList = null;
                        if (businessTransactionsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Business Transactions ({0} entities)", businessTransactionsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + businessTransactionsRESTList.Count;

                            businessTransactionList = new List<EntityBusinessTransaction>(businessTransactionsRESTList.Count);

                            foreach (AppDRESTBusinessTransaction businessTransaction in businessTransactionsRESTList)
                            {
                                EntityBusinessTransaction businessTransactionRow = new EntityBusinessTransaction();
                                businessTransactionRow.ApplicationID = jobTarget.ApplicationID;
                                businessTransactionRow.ApplicationName = jobTarget.Application;
                                businessTransactionRow.BTID = businessTransaction.id;
                                businessTransactionRow.BTName = businessTransaction.name;
                                businessTransactionRow.BTNameOriginal = businessTransaction.internalName;
                                businessTransactionRow.IsRenamed = !(businessTransaction.name == businessTransaction.internalName);
                                if (businessTransactionRow.BTName == "_APPDYNAMICS_DEFAULT_TX_")
                                {
                                    businessTransactionRow.BTType = "OVERFLOW";
                                }
                                else
                                {
                                    businessTransactionRow.BTType = businessTransaction.entryPointType;
                                }
                                businessTransactionRow.Controller = jobTarget.Controller;
                                businessTransactionRow.TierID = businessTransaction.tierId;
                                businessTransactionRow.TierName = businessTransaction.tierName;

                                updateEntityWithDeeplinks(businessTransactionRow);
                                updateEntityWithReportDetailAndFlameGraphLinks(businessTransactionRow, jobConfiguration, jobTarget, reportFolderPath);

                                businessTransactionList.Add(businessTransactionRow);
                            }

                            // Sort them
                            businessTransactionList = businessTransactionList.OrderBy(o => o.TierName).ThenBy(o => o.BTName).ToList();

                            FileIOHelper.writeListToCSVFile(businessTransactionList, new BusinessTransactionEntityReportMap(), businessTransactionsIndexFilePath);
                        }

                        #endregion

                        #region Service Endpoints

                        List<AppDRESTMetric> serviceEndpointsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(serviceEndPointsDataFilePath);
                        List<EntityServiceEndpoint> serviceEndpointsList = null;
                        if (serviceEndpointsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Service Endpoints ({0} entities)", serviceEndpointsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + serviceEndpointsRESTList.Count;

                            serviceEndpointsList = new List<EntityServiceEndpoint>(serviceEndpointsRESTList.Count);

                            JObject serviceEndpointsDetailsContainer = FileIOHelper.loadJObjectFromFile(serviceEndPointsDetailDataFilePath);
                            JArray serviceEndpointsDetails = null;
                            if (serviceEndpointsDetailsContainer != null)
                            {
                                serviceEndpointsDetails = (JArray)serviceEndpointsDetailsContainer["serviceEndpointListEntries"];
                            }

                            foreach (AppDRESTMetric serviceEndpoint in serviceEndpointsRESTList)
                            {
                                EntityServiceEndpoint serviceEndpointRow = new EntityServiceEndpoint();
                                serviceEndpointRow.ApplicationID = jobTarget.ApplicationID;
                                serviceEndpointRow.ApplicationName = jobTarget.Application;
                                serviceEndpointRow.Controller = jobTarget.Controller;

                                // metricName
                                // BTM|Application Diagnostic Data|SEP:4855|Calls per Minute
                                //                                     ^^^^
                                //                                     ID
                                serviceEndpointRow.SEPID = Convert.ToInt32(serviceEndpoint.metricName.Split('|')[2].Split(':')[1]);

                                // metricPath
                                // Service Endpoints|ECommerce-Services|/appdynamicspilot/rest|Calls per Minute
                                //                                      ^^^^^^^^^^^^^^^^^^^^^^
                                //                                      SEP Name
                                serviceEndpointRow.SEPName = serviceEndpoint.metricPath.Split('|')[2];

                                serviceEndpointRow.TierName = serviceEndpoint.metricPath.Split('|')[1];
                                if (tiersRESTList != null)
                                {
                                    // metricPath
                                    // Service Endpoints|ECommerce-Services|/appdynamicspilot/rest|Calls per Minute
                                    //                   ^^^^^^^^^^^^^^^^^^
                                    //                   Tier
                                    AppDRESTTier tierForThisEntity = tiersRESTList.Where(tier => tier.name == serviceEndpointRow.TierName).FirstOrDefault();
                                    if (tierForThisEntity != null)
                                    {
                                        serviceEndpointRow.TierID = tierForThisEntity.id;
                                    }
                                }

                                JObject serviceEndpointDetail = (JObject)serviceEndpointsDetails.Where(s => (long)s["id"] == serviceEndpointRow.SEPID).FirstOrDefault();
                                if (serviceEndpointDetail != null)
                                {
                                    serviceEndpointRow.SEPType = serviceEndpointDetail["type"].ToString();
                                }

                                updateEntityWithDeeplinks(serviceEndpointRow);
                                updateEntityWithReportDetailAndFlameGraphLinks(serviceEndpointRow, jobConfiguration, jobTarget, reportFolderPath);

                                serviceEndpointsList.Add(serviceEndpointRow);
                            }

                            // Sort them
                            serviceEndpointsList = serviceEndpointsList.OrderBy(o => o.TierName).ThenBy(o => o.SEPName).ToList();

                            FileIOHelper.writeListToCSVFile(serviceEndpointsList, new ServiceEndpointEntityReportMap(), serviceEndpointsIndexFilePath);
                        }

                        #endregion

                        #region Errors

                        List<AppDRESTMetric> errorsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(errorsFileDataPath);
                        List<EntityError> errorList = null;
                        if (errorsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Errors ({0} entities)", errorsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + errorsRESTList.Count;

                            errorList = new List<EntityError>(errorsRESTList.Count);

                            foreach (AppDRESTMetric error in errorsRESTList)
                            {
                                EntityError errorRow = new EntityError();
                                errorRow.ApplicationID = jobTarget.ApplicationID;
                                errorRow.ApplicationName = jobTarget.Application;
                                errorRow.Controller = jobTarget.Controller;

                                // metricName
                                // BTM|Application Diagnostic Data|Error:11626|Errors per Minute
                                //                                       ^^^^^
                                //                                       ID
                                errorRow.ErrorID = Convert.ToInt32(error.metricName.Split('|')[2].Split(':')[1]);

                                // metricPath
                                // Errors|ECommerce-Services|CommunicationsException : EOFException|Errors per Minute
                                //                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                //                           Error Name
                                errorRow.ErrorName = error.metricPath.Split('|')[2];

                                errorRow.ErrorType = EntityError.ENTITY_TYPE;
                                // Do some analysis of the error type based on their name
                                if (errorRow.ErrorName.IndexOf("exception", 0, StringComparison.OrdinalIgnoreCase) >= 0)
                                {
                                    errorRow.ErrorType = "Exception";
                                }
                                // For things like 
                                // CommunicationException : IOException : CommunicationException : SocketException
                                // ServletException : RollbackException : DatabaseException : SQLNestedException : NoSuchElementException
                                string[] errorTokens = errorRow.ErrorName.Split(':');
                                for (int j = 0; j < errorTokens.Length; j++)
                                {
                                    errorTokens[j] = errorTokens[j].Trim();
                                }
                                if (errorTokens.Length >= 1)
                                {
                                    errorRow.ErrorLevel1 = errorTokens[0];
                                }
                                if (errorTokens.Length >= 2)
                                {
                                    errorRow.ErrorLevel2 = errorTokens[1];
                                }
                                if (errorTokens.Length >= 3)
                                {
                                    errorRow.ErrorLevel3 = errorTokens[2];
                                }
                                if (errorTokens.Length >= 4)
                                {
                                    errorRow.ErrorLevel4 = errorTokens[3];
                                }
                                if (errorTokens.Length >= 5)
                                {
                                    errorRow.ErrorLevel5 = errorTokens[4];
                                }
                                errorRow.ErrorDepth = errorTokens.Length;

                                // Check if last thing is a 3 digit number, then cast it and see what comes out
                                if (errorTokens[errorTokens.Length - 1].Length == 3)
                                {
                                    int httpCode = -1;
                                    if (Int32.TryParse(errorTokens[errorTokens.Length - 1], out httpCode) == true)
                                    {
                                        // Hmm, likely to be a HTTP code
                                        errorRow.ErrorType = "HTTP";
                                        errorRow.HttpCode = httpCode;
                                    }
                                }

                                errorRow.TierName = error.metricPath.Split('|')[1];
                                if (tiersRESTList != null)
                                {
                                    // metricPath
                                    // Errors|ECommerce-Services|CommunicationsException : EOFException|Errors per Minute
                                    //        ^^^^^^^^^^^^^^^^^^
                                    //        Tier
                                    AppDRESTTier tierForThisEntity = tiersRESTList.Where(tier => tier.name == errorRow.TierName).FirstOrDefault();
                                    if (tierForThisEntity != null)
                                    {
                                        errorRow.TierID = tierForThisEntity.id;
                                    }
                                }

                                updateEntityWithDeeplinks(errorRow);
                                updateEntityWithReportDetailAndFlameGraphLinks(errorRow, jobConfiguration, jobTarget, reportFolderPath);

                                errorList.Add(errorRow);
                            }

                            // Sort them
                            errorList = errorList.OrderBy(o => o.TierName).ThenBy(o => o.ErrorName).ToList();

                            FileIOHelper.writeListToCSVFile(errorList, new ErrorEntityReportMap(), errorsIndexFilePath);
                        }

                        #endregion

                        #region Information Points

                        List<AppDRESTMetric> informationPointsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(informationPointsDataFilePath);
                        List<EntityInformationPoint> informationPointsList = null;
                        if (informationPointsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Information points ({0} entities)", informationPointsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + informationPointsRESTList.Count;

                            informationPointsList = new List<EntityInformationPoint>(informationPointsRESTList.Count);

                            JObject informationPointsDetailsContainer = FileIOHelper.loadJObjectFromFile(informationPointsDetailDataFilePath);
                            JArray informationPointsDetails = null;
                            if (informationPointsDetailsContainer != null)
                            {
                                informationPointsDetails = (JArray)informationPointsDetailsContainer["informationPointsListViewEntries"];
                            }

                            foreach (AppDRESTMetric informationPoint in informationPointsRESTList)
                            {
                                EntityInformationPoint informationPointRow = new EntityInformationPoint();
                                informationPointRow.ApplicationID = jobTarget.ApplicationID;
                                informationPointRow.ApplicationName = jobTarget.Application;
                                informationPointRow.Controller = jobTarget.Controller;

                                if (informationPoint.metricName == "METRIC DATA NOT FOUND")
                                {
                                    informationPointRow.IPID = -1;
                                }
                                else
                                {
                                    // metricName
                                    // BTM|IPs|IP:5|Calls per Minute
                                    //            ^
                                    //            ID

                                    informationPointRow.IPID = Convert.ToInt32(informationPoint.metricName.Split('|')[2].Split(':')[1]);
                                }

                                // metricPath
                                // Information Points|Delete Cart|Calls per Minute
                                //                    ^^^^^^^^^^^
                                //                    IP Name
                                informationPointRow.IPName = informationPoint.metricPath.Split('|')[1];

                                if (informationPointRow.IPID != -1)
                                {
                                    JObject informationPointDetail = (JObject)informationPointsDetails.Where(e => (long)e["id"] == informationPointRow.IPID).FirstOrDefault();
                                    if (informationPointDetail != null)
                                    {
                                        informationPointRow.IPType = informationPointDetail["agentType"].ToString();
                                    }
                                }
                                else
                                {
                                    JObject informationPointDetail = (JObject)informationPointsDetails.Where(e => (string)e["name"] == informationPointRow.IPName).FirstOrDefault();
                                    if (informationPointDetail != null)
                                    {
                                        informationPointRow.IPType = informationPointDetail["agentType"].ToString();
                                        informationPointRow.IPID = (long)informationPointDetail["id"];
                                    }
                                }

                                updateEntityWithDeeplinks(informationPointRow);
                                updateEntityWithReportDetailAndFlameGraphLinks(informationPointRow, jobConfiguration, jobTarget, reportFolderPath);

                                informationPointsList.Add(informationPointRow);
                            }

                            // Sort them
                            informationPointsList = informationPointsList.OrderBy(o => o.IPName).ToList();

                            FileIOHelper.writeListToCSVFile(informationPointsList, new InformationPointEntityReportMap(), informationIndexReportFilePath);
                        }

                        #endregion

                        #region Tiers

                        List<EntityTier> tiersList = null;
                        if (tiersRESTList != null)
                        {
                            loggerConsole.Info("Index List of Tiers ({0} entities)", tiersRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + tiersRESTList.Count;

                            tiersList = new List<EntityTier>(tiersRESTList.Count);

                            foreach (AppDRESTTier tier in tiersRESTList)
                            {
                                EntityTier tierRow = new EntityTier();
                                tierRow.AgentType = tier.agentType;
                                tierRow.ApplicationID = jobTarget.ApplicationID;
                                tierRow.ApplicationName = jobTarget.Application;
                                tierRow.Description = tier.description;
                                tierRow.Controller = jobTarget.Controller;
                                tierRow.TierID = tier.id;
                                tierRow.TierName = tier.name;
                                tierRow.TierType = tier.type;
                                tierRow.NumNodes = tier.numberOfNodes;
                                if (businessTransactionsRESTList != null)
                                {
                                    tierRow.NumBTs = businessTransactionsRESTList.Where<AppDRESTBusinessTransaction>(b => b.tierId == tierRow.TierID).Count();
                                }
                                if (serviceEndpointsList != null)
                                {
                                    tierRow.NumSEPs = serviceEndpointsList.Where<EntityServiceEndpoint>(s => s.TierID == tierRow.TierID).Count();
                                }
                                if (errorList != null)
                                {
                                    tierRow.NumErrors = errorList.Where<EntityError>(s => s.TierID == tierRow.TierID).Count();
                                }

                                updateEntityWithDeeplinks(tierRow);
                                updateEntityWithReportDetailAndFlameGraphLinks(tierRow, jobConfiguration, jobTarget, reportFolderPath);

                                tiersList.Add(tierRow);
                            }

                            // Sort them
                            tiersList = tiersList.OrderBy(o => o.TierName).ToList();

                            FileIOHelper.writeListToCSVFile(tiersList, new TierEntityReportMap(), tiersIndexFilePath);
                        }

                        #endregion

                        #region Application

                        if (applicationsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Applications");

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + 1;

                            List<EntityApplication> applicationsList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationsIndexFilePath, new ApplicationEntityReportMap());

                            if (applicationsList == null || applicationsList.Count == 0)
                            {
                                // First time, let's output these rows
                                applicationsList = new List<EntityApplication>(applicationsRESTList.Count);
                                foreach (AppDRESTApplication application in applicationsRESTList)
                                {
                                    EntityApplication applicationsRow = new EntityApplication();
                                    applicationsRow.ApplicationName = application.name;
                                    applicationsRow.Description = application.description;
                                    applicationsRow.ApplicationID = application.id;
                                    applicationsRow.Controller = jobTarget.Controller;

                                    updateEntityWithDeeplinks(applicationsRow);
                                    updateEntityWithReportDetailAndFlameGraphLinks(applicationsRow, jobConfiguration, jobTarget, reportFolderPath);

                                    applicationsList.Add(applicationsRow);
                                }
                            }

                            // Update counts of entities for this application row
                            EntityApplication applicationRow = applicationsList.Where(a => a.ApplicationID == jobTarget.ApplicationID).FirstOrDefault();
                            if (applicationRow != null)
                            {
                                if (tiersList != null) applicationRow.NumTiers = tiersList.Count;
                                if (nodesList != null) applicationRow.NumNodes = nodesList.Count;
                                if (backendsList != null) applicationRow.NumBackends = backendsList.Count;
                                if (businessTransactionList != null) applicationRow.NumBTs = businessTransactionList.Count;
                                if (serviceEndpointsList != null) applicationRow.NumSEPs = serviceEndpointsList.Count;
                                if (errorList != null) applicationRow.NumErrors = errorList.Count;
                                if (informationPointsList != null) applicationRow.NumIPs = informationPointsList.Count;

                                List<EntityApplication> applicationRows = new List<EntityApplication>(1);
                                applicationRows.Add(applicationRow);

                                // Write just this row for this application
                                FileIOHelper.writeListToCSVFile(applicationRows, new ApplicationEntityReportMap(), applicationIndexFilePath);
                            }

                            // Sort them
                            applicationsList = applicationsList.OrderBy(o => o.Controller).ThenBy(o => o.ApplicationName).ToList();

                            FileIOHelper.writeListToCSVFile(applicationsList, new ApplicationEntityReportMap(), applicationsIndexFilePath);
                        }

                        #endregion

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(entitiesReportFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(entitiesReportFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(tiersReportFilePath, tiersIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(nodesReportFilePath, nodesIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendsReportFilePath, backendsIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionsReportFilePath, businessTransactionsIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(serviceEndpointsReportFilePath, serviceEndpointsIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(errorsReportFilePath, errorsIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(informationPointsReportFilePath, informationIndexReportFilePath);

                        // If it is the last one, let's append all Applications
                        if (i == jobConfiguration.Target.Count - 1)
                        {
                            var controllers = jobConfiguration.Target.GroupBy(t => t.Controller);
                            foreach (var controllerGroup in controllers)
                            {
                                controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(controllerGroup.Key).Host));

                                controllerIndexFilePath = Path.Combine(controllerIndexFolderPath, CONVERT_ENTITY_CONTROLLER_FILE_NAME);
                                applicationsIndexFilePath = Path.Combine(controllerIndexFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);

                                FileIOHelper.appendTwoCSVFiles(applicationsReportFilePath, applicationsIndexFilePath);
                                FileIOHelper.appendTwoCSVFiles(controllersReportFilePath, controllerIndexFilePath);
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexControllerAndApplicationConfiguration(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingIndexFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                List<string> listOfControllersAlreadyProcessed = new List<string>(jobConfiguration.Target.Count);

                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    stepTimingTarget.NumEntities = 1;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string configDataFolderPath = Path.Combine(applicationDataFolderPath, CONFIGURATION_FOLDER_NAME);

                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);
                        string configIndexFolderPath = Path.Combine(applicationIndexFolderPath, CONFIGURATION_FOLDER_NAME);

                        string configReportFolderPath = Path.Combine(reportFolderPath, CONFIGURATION_FOLDER_NAME);

                        // Entity files
                        string controllerSettingsDataFilePath = Path.Combine(controllerDataFolderPath, EXTRACT_CONFIGURATION_CONTROLLER_FILE_NAME);
                        string applicationDataConfigDataFilePath = Path.Combine(configDataFolderPath, EXTRACT_CONFIGURATION_APPLICATION_FILE_NAME);

                        // Report files from previous report
                        string tiersIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string businessTransactionsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string backendsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);

                        // Report files
                        string controllerSettingsIndexFilePath = Path.Combine(controllerIndexFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                        string applicationConfigurationIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_FILE_NAME);
                        string businessTransactionDiscoveryRulesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME);
                        string businessTransactionEntryRulesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME);

                        string businessTransactionEntryScopesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME);
                        string businessTransactionDiscoveryRules20IndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME);
                        string businessTransactionEntryRules20IndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME);

                        string backendDiscoveryRulesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME);
                        string customExitRulesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME);
                        string informationPointRulesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME);
                        string agentConfigurationPropertiesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME);
                        string methodInvocationDataCollectorsIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                        string httpDataCollectorsIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME);
                        string entityTierConfigurationsIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME);
                        string entityBusinessTransactionConfigurationsIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string agentCallGraphSettingsIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME);
                        string healthRulesIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME);

                        // Report files for All
                        string controllerSettingsReportFilePath = Path.Combine(configReportFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                        string applicationConfigurationReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_FILE_NAME);
                        string businessTransactionDiscoveryRulesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME);
                        string businessTransactionEntryRulesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME);
                        string businessTransactionEntryScopesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME);
                        string businessTransactionDiscoveryRules20ReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME);
                        string businessTransactionEntryRules20ReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME);
                        string backendDiscoveryRulesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME);
                        string customExitRulesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME);
                        string informationPointRulesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME);
                        string agentConfigurationPropertiesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME);
                        string methodInvocationDataCollectorsReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                        string httpDataCollectorsReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME);
                        string entityTierConfigurationsReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME);
                        string entityBusinessTransactionConfigurationsReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string agentCallGraphSettingsReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME);
                        string healthRulesReportFilePath = Path.Combine(configReportFolderPath, APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME);

                        #endregion

                        #region Controller Settings

                        // Only output this once per controller
                        if (listOfControllersAlreadyProcessed.Contains(jobTarget.Controller) == false)
                        {
                            listOfControllersAlreadyProcessed.Add(jobTarget.Controller);

                            loggerConsole.Info("Controller Settings");

                            List<ControllerSetting> controllerSettingsList = new List<ControllerSetting>();
                            List<AppDRESTControllerSetting> controllerSettingsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTControllerSetting>(controllerSettingsDataFilePath);
                            if (controllerSettingsRESTList != null)
                            {
                                foreach (AppDRESTControllerSetting controllerSetting in controllerSettingsRESTList)
                                {
                                    ControllerSetting controllerSettingRow = new ControllerSetting();

                                    controllerSettingRow.Controller = jobTarget.Controller;
                                    controllerSettingRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, controllerSettingRow.Controller, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                                    controllerSettingRow.Name = controllerSetting.name;
                                    controllerSettingRow.Description = controllerSetting.description;
                                    controllerSettingRow.Value = controllerSetting.value;
                                    controllerSettingRow.Updateable = controllerSetting.updateable;
                                    controllerSettingRow.Scope = controllerSetting.scope;

                                    controllerSettingsList.Add(controllerSettingRow);
                                }
                            }

                            controllerSettingsList = controllerSettingsList.OrderBy(c => c.Name).ToList();
                            FileIOHelper.writeListToCSVFile(controllerSettingsList, new ControllerSettingReportMap(), controllerSettingsIndexFilePath);
                        }

                        #endregion

                        #region Preload list of detected entities

                        // For later cross-reference
                        List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersIndexFilePath, new TierEntityReportMap());
                        List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsIndexFilePath, new BackendEntityReportMap());
                        List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsIndexFilePath, new BusinessTransactionEntityReportMap());

                        #endregion

                        #region Application Summary

                        loggerConsole.Info("Load Configuration file");

                        XmlDocument configXml = FileIOHelper.loadXmlDocumentFromFile(applicationDataConfigDataFilePath);
                        if (configXml == null)
                        {
                            logger.Warn("No application configuration in {0} file", applicationDataConfigDataFilePath);
                            continue;
                        }

                        EntityApplicationConfiguration applicationConfiguration = new EntityApplicationConfiguration();
                        applicationConfiguration.Controller = jobTarget.Controller;
                        applicationConfiguration.ControllerLink = String.Format(DEEPLINK_CONTROLLER, applicationConfiguration.Controller, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                        applicationConfiguration.ApplicationName = configXml.SelectSingleNode("application/name").InnerText;
                        applicationConfiguration.ApplicationID = jobTarget.ApplicationID;
                        applicationConfiguration.ApplicationLink = String.Format(DEEPLINK_APPLICATION, applicationConfiguration.Controller, applicationConfiguration.ApplicationID, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                        applicationConfiguration.ApplicationDescription = configXml.SelectSingleNode("application/description").InnerText;

                        XmlAttribute mdsEnabledAttribute = configXml.SelectSingleNode("application").Attributes["mds-config-enabled"];
                        if (mdsEnabledAttribute != null)
                        {
                            applicationConfiguration.IsBT20ConfigEnabled = Convert.ToBoolean(mdsEnabledAttribute.Value);
                        }

                        if (configXml.SelectSingleNode("application/configuration/application-instrumentation-level").InnerText != "PRODUCTION")
                        {
                            applicationConfiguration.IsDeveloperModeEnabled = true;
                        }

                        applicationConfiguration.SnapshotEvalInterval = getIntegerValueFromXmlNode(configXml.SelectSingleNode("application/configuration/snapshot-evaluation-interval"));
                        applicationConfiguration.SnapshotQuietTime = getIntegerValueFromXmlNode(configXml.SelectSingleNode("application/configuration/snapshot-quiet-time-post-sla-failure"));
                        applicationConfiguration.IsHREngineEnabled = getBoolValueFromXmlNode(configXml.SelectSingleNode("application/configuration/policy-engine-enabled"));
                        applicationConfiguration.IsBTLockdownEnabled = getBoolValueFromXmlNode(configXml.SelectSingleNode("application/configuration/bt-discovery-locked"));
                        applicationConfiguration.IsAsyncSupported = getBoolValueFromXmlNode(configXml.SelectSingleNode("application/configuration/async-activity-supported"));

                        applicationConfiguration.BTSLAConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/sla"));
                        applicationConfiguration.BTSnapshotCollectionConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/business-transaction-config/snapshot-collection-policy"));
                        applicationConfiguration.BTRequestThresholdConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/business-transaction-config/bt-request-thresholds"));
                        applicationConfiguration.BTBackgroundSnapshotCollectionConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/background-business-transaction-config/snapshot-collection-policy"));
                        applicationConfiguration.BTBackgroundRequestThresholdConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/background-business-transaction-config/bt-request-thresholds"));

                        applicationConfiguration.EUMConfigExclude = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/exclude-config"));
                        applicationConfiguration.EUMConfigPage = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/page-config"));
                        applicationConfiguration.EUMConfigMobilePage = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/mobile-page-config"));
                        applicationConfiguration.EUMConfigMobileAgent = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/eum-mobile-agent-config"));

                        applicationConfiguration.AnalyticsConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/analytics-dynamic-service-configurations"));
                        applicationConfiguration.WorkflowsConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/workflows"));
                        applicationConfiguration.TasksConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/tasks"));
                        applicationConfiguration.BTGroupsConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/business-transaction-groups"));

                        applicationConfiguration.MetricBaselinesConfig = makeXMLFormattedAndIndented(configXml.SelectNodes("application/metric-baselines/metric-baseline"));
                        applicationConfiguration.NumBaselines = configXml.SelectNodes("application/metric-baselines/metric-baseline").Count;

                        applicationConfiguration.ErrorAgentConfig = makeXMLFormattedAndIndented(configXml.SelectNodes("application/configuration/error-configuration"));
                        applicationConfiguration.NumErrorRules = configXml.SelectNodes("application/configuration/error-configuration").Count;

                        #endregion

                        #region Business Transaction Detection Rules

                        loggerConsole.Info("Business Transaction Detection Rules");

                        List<BusinessTransactionDiscoveryRule> businessTransactionDiscoveryRulesList = new List<BusinessTransactionDiscoveryRule>();

                        // Application level
                        // application
                        //      entry-match-point-configurations
                        //          entry-match-point-configuration[agentType=AGENT]
                        //              transaction-configurations
                        //                  configuration[transaction-entry-point-type=TYPE]
                        foreach (XmlNode entryMatchPointConfigurationNode in configXml.SelectNodes("application/entry-match-point-configurations/entry-match-point-configuration"))
                        {
                            foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                            {
                                BusinessTransactionDiscoveryRule businessTransactionDiscoveryRule = fillBusinessTransactionDiscoveryRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, applicationConfiguration, null);
                                businessTransactionDiscoveryRulesList.Add(businessTransactionDiscoveryRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              entry-match-point-configurations
                        //                  entry-match-point-configuration[agentType=AGENT]
                        //                      transaction-configurations
                        //                          configuration[transaction-entry-point-type=TYPE]
                        //                              override=true
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode entryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("entry-match-point-configurations/entry-match-point-configuration"))
                            {
                                foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                                {
                                    if (Convert.ToBoolean(entryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        BusinessTransactionDiscoveryRule businessTransactionDiscoveryRule = fillBusinessTransactionDiscoveryRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, applicationConfiguration, applicationComponentNode);
                                        businessTransactionDiscoveryRulesList.Add(businessTransactionDiscoveryRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBTDiscoveryRules = businessTransactionDiscoveryRulesList.Count;

                        businessTransactionDiscoveryRulesList = businessTransactionDiscoveryRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ToList();
                        FileIOHelper.writeListToCSVFile(businessTransactionDiscoveryRulesList, new BusinessTransactionDiscoveryRuleReportMap(), businessTransactionDiscoveryRulesIndexFilePath);

                        #endregion

                        #region Business Transaction Rules

                        loggerConsole.Info("Business Transaction Include and Exclude Rules");

                        List<BusinessTransactionEntryRule> businessTransactionEntryRulesList = new List<BusinessTransactionEntryRule>();

                        // Exclude rules first

                        // Application level
                        // application
                        //      entry-match-point-configurations
                        //          entry-match-point-configuration[agentType=AGENT]
                        //              transaction-configurations
                        //                  configuration[transaction-entry-point-type=TYPE]
                        //                      discovery-config
                        //                          excludes
                        foreach (XmlNode entryMatchPointConfigurationNode in configXml.SelectNodes("application/entry-match-point-configurations/entry-match-point-configuration"))
                        {
                            foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                            {
                                foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointTransactionConfigurationNode.SelectNodes("discovery-config/excludes/exclude"))
                                {
                                    BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionExcludeRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, null);
                                    businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                                }
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              entry-match-point-configurations
                        //                  entry-match-point-configuration[agentType=AGENT]
                        //                      transaction-configurations
                        //                          configuration[transaction-entry-point-type=TYPE]
                        //                              override=true
                        //                              discovery-config
                        //                                  excludes
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode entryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("entry-match-point-configurations/entry-match-point-configuration"))
                            {
                                foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                                {
                                    foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointTransactionConfigurationNode.SelectNodes("discovery-config/excludes/exclude"))
                                    {
                                        if (Convert.ToBoolean(entryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                        {
                                            BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionExcludeRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, applicationComponentNode);
                                            businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                                        }
                                    }
                                }
                            }
                        }

                        // Include rules

                        // Application level
                        // application
                        //      entry-match-point-configurations
                        //          entry-match-point-configuration[agentType=AGENT]
                        //              custom-match-point-definitions
                        //                  custom-match-point-definition[transaction-entry-point-type=TYPE]
                        //                      transaction-configurations
                        foreach (XmlNode entryMatchPointConfigurationNode in configXml.SelectNodes("application/entry-match-point-configurations/entry-match-point-configuration"))
                        {
                            foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("custom-match-point-definitions/custom-match-point-definition"))
                            {
                                BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionEntryRule(entryMatchPointConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, null, businessTransactionsList);
                                businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              entry-match-point-configurations
                        //                  entry-match-point-configuration[agentType=AGENT]
                        //                      custom-match-point-definitions
                        //                          custom-match-point-definition[transaction-entry-point-type=TYPE]
                        //                              transaction-configurations
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode entryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("entry-match-point-configurations/entry-match-point-configuration"))
                            {
                                foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("custom-match-point-definitions/custom-match-point-definition"))
                                {
                                    if (Convert.ToBoolean(entryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionEntryRule(entryMatchPointConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, applicationComponentNode, businessTransactionsList);
                                        businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBTEntryRules = businessTransactionEntryRulesList.Where(b => b.IsExclusion == false).Count();
                        applicationConfiguration.NumBTExcludeRules = businessTransactionEntryRulesList.Count - applicationConfiguration.NumBTEntryRules;

                        businessTransactionEntryRulesList = businessTransactionEntryRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(businessTransactionEntryRulesList, new BusinessTransactionEntryRuleReportMap(), businessTransactionEntryRulesIndexFilePath);

                        #endregion

                        #region MDS/Config 2.0 Scopes, BT Detection and BT Rules

                        if (applicationConfiguration.IsBT20ConfigEnabled == true)
                        {
                            loggerConsole.Info("Business Transaction Include and Exclude Rules - MDS 2.0");

                            List<BusinessTransactionEntryScope> businessTransactionEntryScopeList = new List<BusinessTransactionEntryScope>();

                            XmlNode scopeToRuleMappingConfigurationNode = configXml.SelectSingleNode("application/mds-data/mds-config-data/scope-rule-mapping-list");

                            foreach (XmlNode scopeConfigurationNode in configXml.SelectNodes("application/mds-data/mds-config-data/scope-list/scope"))
                            {
                                BusinessTransactionEntryScope businessTransactionEntryRuleScope = fillBusinessTransactionEntryScope(scopeConfigurationNode, scopeToRuleMappingConfigurationNode, applicationConfiguration);
                                businessTransactionEntryScopeList.Add(businessTransactionEntryRuleScope);
                            }

                            applicationConfiguration.NumBT20Scopes = businessTransactionEntryScopeList.Count;

                            businessTransactionEntryScopeList = businessTransactionEntryScopeList.OrderBy(b => b.ScopeType).ThenBy(b => b.ScopeName).ToList();
                            FileIOHelper.writeListToCSVFile(businessTransactionEntryScopeList, new BusinessTransactionEntryRuleScopeReportMap(), businessTransactionEntryScopesIndexFilePath);


                            List<BusinessTransactionEntryRule20> businessTransactionEntryRules20List = new List<BusinessTransactionEntryRule20>();

                            foreach (XmlNode ruleConfigurationNode in configXml.SelectNodes("application/mds-data/mds-config-data/rule-list/rule"))
                            {
                                BusinessTransactionEntryRule20 businessTransactionEntryRule = fillBusinessTransactionEntryRule20(ruleConfigurationNode, scopeToRuleMappingConfigurationNode, applicationConfiguration, businessTransactionsList);
                                if (businessTransactionEntryRule != null)
                                {
                                    businessTransactionEntryRules20List.Add(businessTransactionEntryRule);
                                }
                            }

                            applicationConfiguration.NumBT20EntryRules = businessTransactionEntryRules20List.Where(b => b.IsExclusion == false).Count();
                            applicationConfiguration.NumBT20ExcludeRules = businessTransactionEntryRules20List.Count - applicationConfiguration.NumBT20EntryRules;

                            businessTransactionEntryRules20List = businessTransactionEntryRules20List.OrderBy(b => b.ScopeName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ThenBy(b => b.RuleName).ToList();
                            FileIOHelper.writeListToCSVFile(businessTransactionEntryRules20List, new BusinessTransactionEntryRule20ReportMap(), businessTransactionEntryRules20IndexFilePath);


                            List<BusinessTransactionDiscoveryRule20> businessTransactionDiscoveryRule20List = new List<BusinessTransactionDiscoveryRule20>();

                            foreach (XmlNode ruleConfigurationNode in configXml.SelectNodes("application/mds-data/mds-config-data/rule-list/rule"))
                            {
                                List<BusinessTransactionDiscoveryRule20> businessTransactionDiscoveryRuleList = fillBusinessTransactionDiscoveryRule20(ruleConfigurationNode, scopeToRuleMappingConfigurationNode, applicationConfiguration, businessTransactionsList);
                                if (businessTransactionDiscoveryRuleList != null)
                                {
                                    businessTransactionDiscoveryRule20List.AddRange(businessTransactionDiscoveryRuleList);
                                }
                            }

                            applicationConfiguration.NumBT20DiscoveryRules = businessTransactionEntryRules20List.Count;

                            businessTransactionEntryRules20List = businessTransactionEntryRules20List.OrderBy(b => b.ScopeName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ThenBy(b => b.RuleName).ToList();
                            FileIOHelper.writeListToCSVFile(businessTransactionDiscoveryRule20List, new BusinessTransactionDiscoveryRule20ReportMap(), businessTransactionDiscoveryRules20IndexFilePath);
                        }

                        #endregion

                        #region Backend Rules 

                        loggerConsole.Info("Backend Detection Rules");

                        List<BackendDiscoveryRule> backendDiscoveryRulesList = new List<BackendDiscoveryRule>();

                        // Application level
                        // application
                        //      backend-match-point-configurations
                        //          backend-match-point-configuration[agentType=AGENT]
                        //              backend-discovery-configurations
                        //                  backend-discovery-configuration
                        foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in configXml.SelectNodes("application/backend-match-point-configurations/backend-match-point-configuration"))
                        {
                            foreach (XmlNode backendDiscoveryConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("backend-discovery-configurations/backend-discovery-configuration"))
                            {
                                BackendDiscoveryRule backendDiscoveryRule = fillBackendDiscoveryRule(backendDiscoveryMatchPointConfigurationNode, backendDiscoveryConfigurationNode, applicationConfiguration, null, backendsList);
                                backendDiscoveryRulesList.Add(backendDiscoveryRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              backend-match-point-configurations
                        //                  backend-match-point-configuration[agentType=AGENT]
                        //                      backend-discovery-configurations
                        //                          backend-discovery-configuration
                        //                              override=true
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("backend-match-point-configurations/backend-match-point-configuration"))
                            {
                                foreach (XmlNode backendDiscoveryConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("backend-discovery-configurations/backend-discovery-configuration"))
                                {
                                    if (Convert.ToBoolean(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        BackendDiscoveryRule backendDiscoveryRule = fillBackendDiscoveryRule(backendDiscoveryMatchPointConfigurationNode, backendDiscoveryConfigurationNode, applicationConfiguration, applicationComponentNode, backendsList);
                                        backendDiscoveryRulesList.Add(backendDiscoveryRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBackendRules = backendDiscoveryRulesList.Count;

                        backendDiscoveryRulesList = backendDiscoveryRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.ExitType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(backendDiscoveryRulesList, new BackendDiscoveryRuleReportMap(), backendDiscoveryRulesIndexFilePath);

                        #endregion

                        #region Custom Exit Rules 

                        loggerConsole.Info("Custom Exit Rules");

                        List<CustomExitRule> customExitRulesList = new List<CustomExitRule>();

                        // Application level
                        // application
                        //      backend-match-point-configurations
                        //          backend-match-point-configuration[agentType=AGENT]
                        //              custom-exit-point-definitions
                        //                  custom-exit-point-definition
                        foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in configXml.SelectNodes("application/backend-match-point-configurations/backend-match-point-configuration"))
                        {
                            foreach (XmlNode customExitConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("custom-exit-point-definitions/custom-exit-point-definition"))
                            {
                                CustomExitRule customExitRule = fillCustomExitRule(backendDiscoveryMatchPointConfigurationNode, customExitConfigurationNode, applicationConfiguration, null, backendsList);
                                customExitRulesList.Add(customExitRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              backend-match-point-configurations
                        //                  backend-match-point-configuration[agentType=AGENT]
                        //                      custom-exit-point-definition
                        //                          custom-exit-point-definition
                        //                              override=true
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("backend-match-point-configurations/backend-match-point-configuration"))
                            {
                                foreach (XmlNode customExitConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("custom-exit-point-definitions/custom-exit-point-definition"))
                                {
                                    if (Convert.ToBoolean(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        CustomExitRule customExitRule = fillCustomExitRule(backendDiscoveryMatchPointConfigurationNode, customExitConfigurationNode, applicationConfiguration, applicationComponentNode, backendsList);
                                        customExitRulesList.Add(customExitRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBackendRules = applicationConfiguration.NumBackendRules + customExitRulesList.Count;

                        customExitRulesList = customExitRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.ExitType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(customExitRulesList, new CustomExitRuleReportMap(), customExitRulesIndexFilePath);

                        #endregion

                        #region Agent Configuration Properties 

                        loggerConsole.Info("Agent Configuration Properties");

                        List<AgentConfigurationProperty> agentConfigurationPropertiesList = new List<AgentConfigurationProperty>();

                        // Application level
                        // application
                        //      agent-configurations
                        //          agent_configuration[agentType=AGENT]
                        //              property-definitions
                        //                  property-definition
                        //              properties
                        //                  property
                        foreach (XmlNode agentConfigurationNode in configXml.SelectNodes("application/agent-configurations/agent_configuration"))
                        {
                            foreach (XmlNode agentPropertyDefinitionConfigurationNode in agentConfigurationNode.SelectNodes("property-definitions/property-definition"))
                            {
                                XmlNode agentPropertyValueConfigurationNode = agentConfigurationNode.SelectSingleNode(String.Format(@"properties/property/property-definition[. = ""{0}""]", agentPropertyDefinitionConfigurationNode.SelectSingleNode("name").InnerText)).ParentNode;

                                AgentConfigurationProperty agentConfigurationProperty = fillAgentConfigurationProperty(agentConfigurationNode, agentPropertyDefinitionConfigurationNode, agentPropertyValueConfigurationNode, applicationConfiguration, null);
                                agentConfigurationPropertiesList.Add(agentConfigurationProperty);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              agent-configurations
                        //                  agent_configuration[agentType=AGENT]
                        //                      property-definitions
                        //                          property-definition
                        //                      properties
                        //                          property
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode agentConfigurationNode in applicationComponentNode.SelectNodes("agent-configurations/agent_configuration"))
                            {
                                foreach (XmlNode agentPropertyDefinitionConfigurationNode in agentConfigurationNode.SelectNodes("property-definitions/property-definition"))
                                {
                                    if (Convert.ToBoolean(agentConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        XmlNode agentPropertyValueConfigurationNode = agentConfigurationNode.SelectSingleNode(String.Format(@"properties/property/property-definition[. = ""{0}""]", agentPropertyDefinitionConfigurationNode.SelectSingleNode("name").InnerText)).ParentNode;

                                        AgentConfigurationProperty agentConfigurationProperty = fillAgentConfigurationProperty(agentConfigurationNode, agentPropertyDefinitionConfigurationNode, agentPropertyValueConfigurationNode, applicationConfiguration, applicationComponentNode);
                                        agentConfigurationPropertiesList.Add(agentConfigurationProperty);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumAgentProps = agentConfigurationPropertiesList.Count;

                        agentConfigurationPropertiesList = agentConfigurationPropertiesList.OrderBy(p => p.TierName).ThenBy(p => p.AgentType).ThenBy(p => p.PropertyName).ToList();
                        FileIOHelper.writeListToCSVFile(agentConfigurationPropertiesList, new AgentConfigurationPropertyReportMap(), agentConfigurationPropertiesIndexFilePath);

                        #endregion

                        #region Information Point Rules

                        List<InformationPointRule> informationPointRulesList = new List<InformationPointRule>();

                        // Application level
                        // application
                        //      info-point-gatherer-configs
                        //          info-point-gatherer-config
                        foreach (XmlNode informationPointConfigurationNode in configXml.SelectNodes("application/info-point-gatherer-configs/info-point-gatherer-config"))
                        {
                            InformationPointRule informationPointRule = fillInformationPointRule(informationPointConfigurationNode, applicationConfiguration);
                            informationPointRulesList.Add(informationPointRule);
                        }

                        applicationConfiguration.NumInfoPointRules = informationPointRulesList.Count;

                        informationPointRulesList = informationPointRulesList.OrderBy(b => b.AgentType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(informationPointRulesList, new InformationPointRuleReportMap(), informationPointRulesIndexFilePath);

                        #endregion

                        #region Detected Business Transaction and Assigned Data Collectors

                        loggerConsole.Info("Detected Business Transaction and Assigned Data Collectors");

                        List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList = new List<EntityBusinessTransactionConfiguration>();

                        // Tier settings
                        // application
                        //      application-components
                        //          application-component
                        //              business-transaction
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode businessTransactionConfigurationtNode in applicationComponentNode.SelectNodes("business-transactions/business-transaction"))
                            {
                                EntityBusinessTransactionConfiguration entityBusinessTransactionConfiguration = fillEntityBusinessTransactionConfiguration(applicationComponentNode, businessTransactionConfigurationtNode, applicationConfiguration, tiersList, businessTransactionsList);
                                entityBusinessTransactionConfigurationsList.Add(entityBusinessTransactionConfiguration);
                            }
                        }

                        applicationConfiguration.NumBTs = entityBusinessTransactionConfigurationsList.Count;

                        entityBusinessTransactionConfigurationsList = entityBusinessTransactionConfigurationsList.OrderBy(b => b.TierName).ThenBy(b => b.BTType).ThenBy(b => b.BTName).ToList();
                        FileIOHelper.writeListToCSVFile(entityBusinessTransactionConfigurationsList, new EntityBusinessTransactionConfigurationReportMap(), entityBusinessTransactionConfigurationsIndexFilePath);

                        #endregion

                        #region Tier Settings

                        loggerConsole.Info("Tier Settings");

                        List<EntityTierConfiguration> entityTierConfigurationsList = new List<EntityTierConfiguration>();

                        // Tier settings
                        // application
                        //      application-components
                        //          application-component
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            EntityTierConfiguration entityTierConfiguration = fillEntityTierConfiguration(applicationComponentNode, applicationConfiguration, tiersList, entityBusinessTransactionConfigurationsList);
                            entityTierConfigurationsList.Add(entityTierConfiguration);
                        }

                        applicationConfiguration.NumTiers = entityTierConfigurationsList.Count;

                        entityTierConfigurationsList = entityTierConfigurationsList.OrderBy(p => p.TierName).ToList();
                        FileIOHelper.writeListToCSVFile(entityTierConfigurationsList, new EntityTierConfigurationReportMap(), entityTierConfigurationsIndexFilePath);

                        #endregion

                        #region Data Collectors

                        loggerConsole.Info("Data Collectors");

                        // MIDCs
                        List<MethodInvocationDataCollector> methodInvocationDataCollectorsList = new List<MethodInvocationDataCollector>();

                        // Application level
                        // application
                        //      data-gatherer-configs
                        //          pojo-data-gatherer-config
                        foreach (XmlNode methodInvocationDataCollectorConfigurationNode in configXml.SelectNodes("application/data-gatherer-configs/pojo-data-gatherer-config"))
                        {
                            foreach (XmlNode dataGathererConfigurationNode in methodInvocationDataCollectorConfigurationNode.SelectNodes("method-invocation-data-gatherer-config"))
                            {
                                MethodInvocationDataCollector methodInvocationDataCollector = fillMethodInvocationDataCollector(methodInvocationDataCollectorConfigurationNode, dataGathererConfigurationNode, applicationConfiguration, entityBusinessTransactionConfigurationsList);
                                methodInvocationDataCollectorsList.Add(methodInvocationDataCollector);
                            }
                        }

                        applicationConfiguration.NumMIDCVariablesCollected = methodInvocationDataCollectorsList.Count;
                        applicationConfiguration.NumMIDCs = methodInvocationDataCollectorsList.GroupBy(m => m.CollectorName).Count();

                        methodInvocationDataCollectorsList = methodInvocationDataCollectorsList.OrderBy(b => b.CollectorName).ThenBy(b => b.DataGathererName).ToList();
                        FileIOHelper.writeListToCSVFile(methodInvocationDataCollectorsList, new MethodInvocationDataCollectorReportMap(), methodInvocationDataCollectorsIndexFilePath);

                        // HTTP DCs

                        // Application level
                        // application
                        //      data-gatherer-configs
                        //          http-data-gatherer-config
                        List<HTTPDataCollector> httpDataCollectorsList = new List<HTTPDataCollector>();

                        // Application level
                        // application
                        //      data-gatherer-configs
                        //          pojo-data-gatherer-config
                        foreach (XmlNode httpDataCollectorConfigurationNode in configXml.SelectNodes("application/data-gatherer-configs/http-data-gatherer-config"))
                        {
                            if (httpDataCollectorConfigurationNode.SelectNodes("parameters/parameter").Count > 0)
                            {
                                foreach (XmlNode dataGathererConfigurationNode in httpDataCollectorConfigurationNode.SelectNodes("parameters/parameter"))
                                {
                                    HTTPDataCollector httpDataCollector = fillHTTPDataCollector(httpDataCollectorConfigurationNode, dataGathererConfigurationNode, applicationConfiguration, entityBusinessTransactionConfigurationsList);
                                    httpDataCollectorsList.Add(httpDataCollector);
                                }
                            }
                            else
                            {
                                HTTPDataCollector httpDataCollector = fillHTTPDataCollector(httpDataCollectorConfigurationNode, null, applicationConfiguration, entityBusinessTransactionConfigurationsList);
                                httpDataCollectorsList.Add(httpDataCollector);
                            }
                        }

                        applicationConfiguration.NumHTTPDCVariablesCollected = httpDataCollectorsList.Count;
                        applicationConfiguration.NumHTTPDCs = httpDataCollectorsList.GroupBy(m => m.CollectorName).Count();

                        httpDataCollectorsList = httpDataCollectorsList.OrderBy(b => b.CollectorName).ThenBy(b => b.DataGathererName).ToList();
                        FileIOHelper.writeListToCSVFile(httpDataCollectorsList, new HTTPDataCollectorReportMap(), httpDataCollectorsIndexFilePath);

                        #endregion

                        #region Call Grapth Settings

                        loggerConsole.Info("Call Graph Settings");

                        // MIDCs
                        List<AgentCallGraphSetting> agentCallGraphSettingCollectorsList = new List<AgentCallGraphSetting>();

                        // Application level
                        // application
                        //      configuration
                        //          call-graph
                        foreach (XmlNode agentCallGraphSettingConfigurationNode in configXml.SelectNodes("application/configuration/call-graph"))
                        {
                            AgentCallGraphSetting agentCallGraphSetting = fillAgentCallGraphSetting(agentCallGraphSettingConfigurationNode, applicationConfiguration);
                            agentCallGraphSettingCollectorsList.Add(agentCallGraphSetting);
                        }

                        agentCallGraphSettingCollectorsList = agentCallGraphSettingCollectorsList.OrderBy(a => a.AgentType).ToList();
                        FileIOHelper.writeListToCSVFile(agentCallGraphSettingCollectorsList, new AgentCallGraphSettingReportMap(), agentCallGraphSettingsIndexFilePath);

                        #endregion

                        #region Health Rules

                        loggerConsole.Info("Health Rules");

                        List<HealthRule> healthRulesList = new List<HealthRule>();

                        // Application level
                        // application
                        //      configuration
                        //          call-graph
                        foreach (XmlNode healthRuleConfigurationNode in configXml.SelectNodes("application/health-rules/health-rule"))
                        {
                            HealthRule healthRule = fillHealthRule(healthRuleConfigurationNode, applicationConfiguration);
                            healthRulesList.Add(healthRule);
                        }

                        applicationConfiguration.NumHealthRules = healthRulesList.Count;

                        healthRulesList = healthRulesList.OrderBy(h => h.RuleType).ThenBy(h => h.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(healthRulesList, new HealthRuleReportMap(), healthRulesIndexFilePath);

                        #endregion

                        #region Application Settings

                        List<EntityApplicationConfiguration> applicationConfigurationsList = new List<EntityApplicationConfiguration>(1);
                        applicationConfigurationsList.Add(applicationConfiguration);
                        FileIOHelper.writeListToCSVFile(applicationConfigurationsList, new EntityApplicationConfigurationReportMap(), applicationConfigurationIndexFilePath);

                        #endregion

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(configReportFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(configReportFolderPath);
                        }

                        // Append all the individual application files into one
                        if (File.Exists(applicationConfigurationIndexFilePath) == true && new FileInfo(applicationConfigurationIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(applicationConfigurationReportFilePath, applicationConfigurationIndexFilePath);
                        }
                        if (File.Exists(businessTransactionDiscoveryRulesIndexFilePath) == true && new FileInfo(businessTransactionDiscoveryRulesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(businessTransactionDiscoveryRulesReportFilePath, businessTransactionDiscoveryRulesIndexFilePath);
                        }
                        if (File.Exists(businessTransactionEntryRulesIndexFilePath) == true && new FileInfo(businessTransactionEntryRulesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(businessTransactionEntryRulesReportFilePath, businessTransactionEntryRulesIndexFilePath);
                        }
                        if (File.Exists(businessTransactionEntryScopesIndexFilePath) == true && new FileInfo(businessTransactionEntryScopesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(businessTransactionEntryScopesReportFilePath, businessTransactionEntryScopesIndexFilePath);
                        }
                        if (File.Exists(businessTransactionDiscoveryRules20IndexFilePath) == true && new FileInfo(businessTransactionDiscoveryRules20IndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(businessTransactionDiscoveryRules20ReportFilePath, businessTransactionDiscoveryRules20IndexFilePath);
                        }
                        if (File.Exists(businessTransactionEntryRules20IndexFilePath) == true && new FileInfo(businessTransactionEntryRules20IndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(businessTransactionEntryRules20ReportFilePath, businessTransactionEntryRules20IndexFilePath);
                        }
                        if (File.Exists(backendDiscoveryRulesIndexFilePath) == true && new FileInfo(backendDiscoveryRulesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(backendDiscoveryRulesReportFilePath, backendDiscoveryRulesIndexFilePath);
                        }
                        if (File.Exists(customExitRulesIndexFilePath) == true && new FileInfo(customExitRulesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(customExitRulesReportFilePath, customExitRulesIndexFilePath);
                        }
                        if (File.Exists(informationPointRulesIndexFilePath) == true && new FileInfo(informationPointRulesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(informationPointRulesReportFilePath, informationPointRulesIndexFilePath);
                        }
                        if (File.Exists(agentConfigurationPropertiesIndexFilePath) == true && new FileInfo(agentConfigurationPropertiesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(agentConfigurationPropertiesReportFilePath, agentConfigurationPropertiesIndexFilePath);
                        }
                        if (File.Exists(methodInvocationDataCollectorsIndexFilePath) == true && new FileInfo(methodInvocationDataCollectorsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(methodInvocationDataCollectorsReportFilePath, methodInvocationDataCollectorsIndexFilePath);
                        }
                        if (File.Exists(httpDataCollectorsIndexFilePath) == true && new FileInfo(httpDataCollectorsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(httpDataCollectorsReportFilePath, httpDataCollectorsIndexFilePath);
                        }
                        if (File.Exists(entityTierConfigurationsIndexFilePath) == true && new FileInfo(entityTierConfigurationsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(entityTierConfigurationsReportFilePath, entityTierConfigurationsIndexFilePath);
                        }
                        if (File.Exists(entityBusinessTransactionConfigurationsIndexFilePath) == true && new FileInfo(entityBusinessTransactionConfigurationsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(entityBusinessTransactionConfigurationsReportFilePath, entityBusinessTransactionConfigurationsIndexFilePath);
                        }
                        if (File.Exists(agentCallGraphSettingsIndexFilePath) == true && new FileInfo(agentCallGraphSettingsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(agentCallGraphSettingsReportFilePath, agentCallGraphSettingsIndexFilePath);
                        }
                        if (File.Exists(healthRulesIndexFilePath) == true && new FileInfo(healthRulesIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(healthRulesReportFilePath, healthRulesIndexFilePath);
                        }

                        // If it is the last one, let's append all Controller settings
                        if (i == jobConfiguration.Target.Count - 1)
                        {
                            var controllers = jobConfiguration.Target.GroupBy(t => t.Controller);
                            foreach (var controllerGroup in controllers)
                            {
                                controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(controllerGroup.Key).Host));

                                controllerSettingsIndexFilePath = Path.Combine(controllerIndexFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                                FileIOHelper.appendTwoCSVFiles(controllerSettingsReportFilePath, controllerSettingsIndexFilePath);
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingIndexFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingIndexFilePath, true);
            }
        }

        private static bool stepIndexApplicationAndEntityMetrics(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingIndexFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            List<MetricExtractMapping> metricExtractMappingList = getMetricsExtractMappingList(programOptions, jobConfiguration);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string metricsDataFolderPath = Path.Combine(applicationDataFolderPath, METRICS_FOLDER_NAME);

                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string metricsIndexFolderPath = Path.Combine(applicationIndexFolderPath, METRICS_FOLDER_NAME);
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);

                        string metricsReportFolderPath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME);
                        string controllerReportFolderPath = Path.Combine(reportFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationReportFolderPath = Path.Combine(controllerReportFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));

                        // Report files from previous steps
                        string applicationsIndexFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        // Report files
                        string applicationsFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string applicationsHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
                        string tiersFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string tiersHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
                        string nodesFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string nodesHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
                        string backendsFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string backendsHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
                        string businessTransactionsFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string businessTransactionsHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
                        string serviceEndpointsFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string serviceEndpointsHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
                        string errorsFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityError.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string errorsHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityError.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
                        string informationPointsFullIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string informationPointsHourlyIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);

                        // Report files for All
                        string applicationsFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityApplication.ENTITY_FOLDER));
                        string applicationsHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityApplication.ENTITY_FOLDER));
                        string tiersFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityTier.ENTITY_FOLDER));
                        string tiersHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityTier.ENTITY_FOLDER));
                        string nodesFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityNode.ENTITY_FOLDER));
                        string nodesHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityNode.ENTITY_FOLDER));
                        string backendsFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityBackend.ENTITY_FOLDER));
                        string backendsHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityBackend.ENTITY_FOLDER));
                        string businessTransactionsFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER));
                        string businessTransactionsHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER));
                        string serviceEndpointsFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityServiceEndpoint.ENTITY_FOLDER));
                        string serviceEndpointsHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityServiceEndpoint.ENTITY_FOLDER));
                        string errorsFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityError.ENTITY_FOLDER));
                        string errorsHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityError.ENTITY_FOLDER));
                        string informationPointsFullReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityInformationPoint.ENTITY_FOLDER));
                        string informationPointsHourlyReportFilePath = Path.Combine(metricsReportFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityInformationPoint.ENTITY_FOLDER));

                        string fullRangeMetricDataFileName = String.Format(EXTRACT_METRIC_FULL_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                        int numEntitiesTotal = 0;

                        #endregion

                        Parallel.Invoke(
                            () =>
                            {
                                #region Application

                                List<EntityApplication> applicationsList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationsIndexFilePath, new ApplicationEntityReportMap());
                                if (applicationsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Applications ({0} entities, {1} timeranges)", applicationsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(applicationsFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = applicationsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, null, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityApplication.ENTITY_FOLDER, EntityApplication.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityApplication> applicationsFullList = entitiesFullDictionary.Values.OfType<EntityApplication>().ToList().OrderBy(o => o.ApplicationName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(applicationsFullList, new ApplicationMetricReportMap(), applicationsFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(applicationsHourlyIndexFilePath) == false)
                                    {
                                        List<EntityApplication> applicationsHourlyAllList = new List<EntityApplication>(applicationsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = applicationsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, null, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityApplication.ENTITY_FOLDER, EntityApplication.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityApplication> applicationsHourlyList = entitiesHourlyDictionary.Values.OfType<EntityApplication>().ToList();
                                            applicationsHourlyAllList.AddRange(applicationsHourlyList);
                                        }

                                        // Sort them
                                        applicationsHourlyAllList = applicationsHourlyAllList.OrderBy(o => o.ApplicationName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(applicationsHourlyAllList, new ApplicationMetricReportMap(), applicationsHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * applicationsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityApplication.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted,  jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Applications", applicationsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, applicationsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Tier

                                List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersIndexFilePath, new TierEntityReportMap());
                                if (tiersList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Tiers ({0} entities, {1} timeranges)", tiersList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(tiersFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = tiersList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));
                                        Dictionary<string, EntityBase> entitiesFullDictionaryByName = new Dictionary<string, EntityBase>(entitiesFullDictionary.Count);
                                        foreach (KeyValuePair<long, EntityBase> kvp in entitiesFullDictionary)
                                        {
                                            entitiesFullDictionaryByName.Add(kvp.Value.EntityName, kvp.Value);
                                        }

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, entitiesFullDictionaryByName, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityTier.ENTITY_FOLDER, EntityTier.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityTier> tiersFullList = entitiesFullDictionary.Values.OfType<EntityTier>().ToList().OrderBy(o => o.TierName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(tiersFullList, new TierMetricReportMap(), tiersFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(tiersHourlyIndexFilePath) == false)
                                    {
                                        List<EntityTier> tiersHourlyAllList = new List<EntityTier>(tiersList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = tiersList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));
                                            Dictionary<string, EntityBase> entitiesHourlyDictionaryByName = new Dictionary<string, EntityBase>(entitiesHourlyDictionary.Count);
                                            foreach (KeyValuePair<long, EntityBase> kvp in entitiesHourlyDictionary)
                                            {
                                                entitiesHourlyDictionaryByName.Add(kvp.Value.EntityName, kvp.Value);
                                            }

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, entitiesHourlyDictionaryByName, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityTier.ENTITY_FOLDER, EntityTier.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityTier> tiersHourlyList = entitiesHourlyDictionary.Values.OfType<EntityTier>().ToList();
                                            tiersHourlyAllList.AddRange(tiersHourlyList);
                                        }

                                        // Sort them
                                        tiersHourlyAllList = tiersHourlyAllList.OrderBy(o => o.TierName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(tiersHourlyAllList, new TierMetricReportMap(), tiersHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * tiersList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityTier.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted, new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted, new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted, jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Tiers", tiersList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, tiersList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Nodes

                                List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesIndexFilePath, new NodeEntityReportMap());
                                if (nodesList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Nodes ({0} entities, {1} timeranges)", nodesList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(nodesFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = nodesList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));
                                        Dictionary<string, EntityBase> entitiesFullDictionaryByName = new Dictionary<string, EntityBase>(entitiesFullDictionary.Count);
                                        foreach (KeyValuePair<long, EntityBase> kvp in entitiesFullDictionary)
                                        {
                                            try
                                            {
                                                entitiesFullDictionaryByName.Add(String.Format("{0}-{1}", ((EntityNode)(kvp.Value)).TierName, kvp.Value.EntityName), kvp.Value);
                                            }
                                            catch { }
                                        }

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, entitiesFullDictionaryByName, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityNode.ENTITY_FOLDER, EntityNode.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityNode> nodesFullList = entitiesFullDictionary.Values.OfType<EntityNode>().ToList().OrderBy(o => o.TierName).ThenBy(o => o.NodeName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(nodesFullList, new NodeMetricReportMap(), nodesFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(nodesHourlyIndexFilePath) == false)
                                    {
                                        List<EntityNode> nodesHourlyAllList = new List<EntityNode>(nodesList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = nodesList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));
                                            Dictionary<string, EntityBase> entitiesHourlyDictionaryByName = new Dictionary<string, EntityBase>(entitiesHourlyDictionary.Count);
                                            foreach (KeyValuePair<long, EntityBase> kvp in entitiesHourlyDictionary)
                                            {
                                                try
                                                {
                                                    entitiesHourlyDictionaryByName.Add(String.Format("{0}-{1}", ((EntityNode)(kvp.Value)).TierName, kvp.Value.EntityName), kvp.Value);
                                                }
                                                catch { }
                                            }

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, entitiesHourlyDictionaryByName, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityNode.ENTITY_FOLDER, EntityNode.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityNode> nodesHourlyList = entitiesHourlyDictionary.Values.OfType<EntityNode>().ToList();
                                            nodesHourlyAllList.AddRange(nodesHourlyList);
                                        }

                                        // Sort them
                                        nodesHourlyAllList = nodesHourlyAllList.OrderBy(o => o.TierName).ThenBy(o => o.NodeName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(nodesHourlyAllList, new NodeMetricReportMap(), nodesHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * nodesList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityNode.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted,  jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Nodes", nodesList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, nodesList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Backends

                                List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsIndexFilePath, new BackendEntityReportMap());
                                if (backendsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Backends ({0} entities, {1} timeranges)", backendsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(backendsFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = backendsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, null, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityBackend.ENTITY_FOLDER, EntityTier.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityBackend> backendsFullList = entitiesFullDictionary.Values.OfType<EntityBackend>().ToList().OrderBy(o => o.BackendType).OrderBy(o => o.BackendName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(backendsFullList, new BackendMetricReportMap(), backendsFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(backendsHourlyIndexFilePath) == false)
                                    {
                                        List<EntityBackend> backendsHourlyAllList = new List<EntityBackend>(backendsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = backendsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, null, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityBackend.ENTITY_FOLDER, EntityTier.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityBackend> backendsHourlyList = entitiesHourlyDictionary.Values.OfType<EntityBackend>().ToList();
                                            backendsHourlyAllList.AddRange(backendsHourlyList);
                                        }

                                        // Sort them
                                        backendsHourlyAllList = backendsHourlyAllList.OrderBy(o => o.BackendType).OrderBy(o => o.BackendName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(backendsHourlyAllList, new BackendMetricReportMap(), backendsHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * backendsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityBackend.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted,  jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Backends", backendsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, backendsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Business Transactions

                                List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsIndexFilePath, new BusinessTransactionEntityReportMap());
                                if (businessTransactionsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Business Transactions ({0} entities, {1} timeranges)", businessTransactionsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(businessTransactionsFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = businessTransactionsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, null, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, EntityBusinessTransaction.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityBusinessTransaction> businessTransactionsFullList = entitiesFullDictionary.Values.OfType<EntityBusinessTransaction>().ToList().OrderBy(o => o.TierName).OrderBy(o => o.BTName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(businessTransactionsFullList, new BusinessTransactionMetricReportMap(), businessTransactionsFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(businessTransactionsHourlyIndexFilePath) == false)
                                    {
                                        List<EntityBusinessTransaction> businessTransactionsHourlyAllList = new List<EntityBusinessTransaction>(businessTransactionsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = businessTransactionsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, null, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, EntityBusinessTransaction.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityBusinessTransaction> businessTransactionsHourlyList = entitiesHourlyDictionary.Values.OfType<EntityBusinessTransaction>().ToList();
                                            businessTransactionsHourlyAllList.AddRange(businessTransactionsHourlyList);
                                        }

                                        // Sort them
                                        businessTransactionsHourlyAllList = businessTransactionsHourlyAllList.OrderBy(o => o.TierName).OrderBy(o => o.BTName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(businessTransactionsHourlyAllList, new BusinessTransactionMetricReportMap(), businessTransactionsHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * businessTransactionsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted,  jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Business Transactions", businessTransactionsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, businessTransactionsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Service Endpoints

                                List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsIndexFilePath, new ServiceEndpointEntityReportMap());
                                if (serviceEndpointsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Service Endpoints ({0} entities, {1} timeranges)", serviceEndpointsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(serviceEndpointsFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = serviceEndpointsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, null, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, EntityServiceEndpoint.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityServiceEndpoint> serviceEndpointsFullList = entitiesFullDictionary.Values.OfType<EntityServiceEndpoint>().ToList().OrderBy(o => o.TierName).OrderBy(o => o.SEPName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(serviceEndpointsFullList, new ServiceEndpointMetricReportMap(), serviceEndpointsFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(serviceEndpointsHourlyIndexFilePath) == false)
                                    {
                                        List<EntityServiceEndpoint> serviceEndpointsHourlyAllList = new List<EntityServiceEndpoint>(serviceEndpointsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = serviceEndpointsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, null, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, EntityServiceEndpoint.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityServiceEndpoint> serviceEndpointsHourlyList = entitiesHourlyDictionary.Values.OfType<EntityServiceEndpoint>().ToList();
                                            serviceEndpointsHourlyAllList.AddRange(serviceEndpointsHourlyList);
                                        }

                                        // Sort them
                                        serviceEndpointsHourlyAllList = serviceEndpointsHourlyAllList.OrderBy(o => o.TierName).OrderBy(o => o.SEPName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(serviceEndpointsHourlyAllList, new ServiceEndpointMetricReportMap(), serviceEndpointsHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * serviceEndpointsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityServiceEndpoint.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted,  jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Service Endpoints", serviceEndpointsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, serviceEndpointsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Errors

                                List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsIndexFilePath, new ErrorEntityReportMap());
                                if (errorsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Errors ({0} entities, {1} timeranges)", errorsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(errorsFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = errorsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, null, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityError.ENTITY_FOLDER, EntityError.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityError> errorsFullList = entitiesFullDictionary.Values.OfType<EntityError>().ToList().OrderBy(o => o.TierName).ThenBy(o => o.ErrorName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(errorsFullList, new ErrorMetricReportMap(), errorsFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(errorsHourlyIndexFilePath) == false)
                                    {
                                        List<EntityError> errorsHourlyAllList = new List<EntityError>(errorsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = errorsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, null, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityError.ENTITY_FOLDER, EntityError.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityError> errorsHourlyList = entitiesHourlyDictionary.Values.OfType<EntityError>().ToList();
                                            errorsHourlyAllList.AddRange(errorsHourlyList);
                                        }

                                        // Sort them
                                        errorsHourlyAllList = errorsHourlyAllList.OrderBy(o => o.TierName).ThenBy(o => o.ErrorName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(errorsHourlyAllList, new ErrorMetricReportMap(), errorsHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * errorsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityError.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityError.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted,  jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityError.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Errors", errorsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, errorsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Information Points

                                List<EntityInformationPoint> informationPointsList = FileIOHelper.readListFromCSVFile<EntityInformationPoint>(informationPointsIndexFilePath, new InformationPointEntityReportMap());
                                if (informationPointsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Information Points ({0} entities, {1} timeranges)", informationPointsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    #region Process Full Range Metrics

                                    if (File.Exists(informationPointsFullIndexFilePath) == false)
                                    {
                                        // Prepare copies of entities indexed for fast access by their entity ID
                                        Dictionary<long, EntityBase> entitiesFullDictionary = informationPointsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                        readRolledUpRangeOfMetricsIntoEntities(entitiesFullDictionary, null, jobConfiguration.Input.TimeRange, metricExtractMappingList, metricsDataFolderPath, EntityInformationPoint.ENTITY_FOLDER, EntityInformationPoint.ENTITY_TYPE);

                                        foreach (EntityBase entity in entitiesFullDictionary.Values)
                                        {
                                            updateEntityWithDeeplinks(entity, jobConfiguration.Input.TimeRange);
                                            updateEntityRowWithDurationAndActivityStatus(entity, jobConfiguration.Input.TimeRange);
                                            entity.ARTRange = getDurationRangeAsString(entity.ART);
                                        }

                                        // Sort them
                                        List<EntityInformationPoint> informationPointsFullList = entitiesFullDictionary.Values.OfType<EntityInformationPoint>().ToList().OrderBy(o => o.IPName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(informationPointsFullList, new InformationPointMetricReportMap(), informationPointsFullIndexFilePath);
                                    }

                                    #endregion

                                    #region Process Hourly Ranges Metrics

                                    if (File.Exists(informationPointsHourlyIndexFilePath) == false)
                                    {
                                        List<EntityInformationPoint> informationPointsHourlyAllList = new List<EntityInformationPoint>(informationPointsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                        Dictionary<string, List<MetricValue>> metricValuesDictionary = new Dictionary<string, List<MetricValue>>();

                                        for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                                            // Prepare copies of entities indexed for fast access by their entity ID
                                            Dictionary<long, EntityBase> entitiesHourlyDictionary = informationPointsList.ToDictionary(e => e.EntityID, e => (EntityBase)(e.Clone()));

                                            readGranularRangeOfMetricsIntoEntities(entitiesHourlyDictionary, null, jobTimeRange, metricExtractMappingList, metricsDataFolderPath, EntityInformationPoint.ENTITY_FOLDER, EntityInformationPoint.ENTITY_TYPE, metricValuesDictionary);

                                            foreach (EntityBase entity in entitiesHourlyDictionary.Values)
                                            {
                                                updateEntityWithDeeplinks(entity, jobTimeRange);
                                                updateEntityRowWithDurationAndActivityStatus(entity, jobTimeRange);
                                                entity.ARTRange = getDurationRangeAsString(entity.ART);
                                            }

                                            List<EntityInformationPoint> informationPointsHourlyList = entitiesHourlyDictionary.Values.OfType<EntityInformationPoint>().ToList();
                                            informationPointsHourlyAllList.AddRange(informationPointsHourlyList);
                                        }

                                        // Sort them
                                        informationPointsHourlyAllList = informationPointsHourlyAllList.OrderBy(o => o.IPName).ThenBy(o => o.From).ToList();

                                        FileIOHelper.writeListToCSVFile(informationPointsHourlyAllList, new InformationPointMetricReportMap(), informationPointsHourlyIndexFilePath);

                                        // Save individual metric files and create index of their internal structure
                                        List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = new List<EntityHourlyMetricValueLocation>(metricValuesDictionary.Count * informationPointsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);
                                        foreach (KeyValuePair<string, List<MetricValue>> metricValuesListContainer in metricValuesDictionary)
                                        {
                                            if (metricValuesListContainer.Value.Count > 0)
                                            {
                                                string metricValuesIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER, String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricValuesListContainer.Key));
                                                string metricValuesReportFilePath = Path.Combine(applicationReportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityInformationPoint.ENTITY_FOLDER, metricValuesListContainer.Key));

                                                List<MetricValue> metricValuesSorted = metricValuesListContainer.Value.OrderBy(o => o.EntityID).ThenBy(o => o.MetricID).ThenBy(o => o.EventTimeStampUtc).ToList();

                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesIndexFilePath);
                                                FileIOHelper.writeListToCSVFile(metricValuesSorted,  new MetricValueReportMap(), metricValuesReportFilePath);

                                                List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForSingleMetric = getEntityHourlyMetricValueLocationsInTable(metricValuesSorted,  jobConfiguration.Input.HourlyTimeRanges);
                                                if (entityMetricValuesLocationsForSingleMetric != null)
                                                {
                                                    entityMetricValuesLocations.AddRange(entityMetricValuesLocationsForSingleMetric);
                                                }
                                            }
                                        }

                                        // Save entity and metric index lookup
                                        string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(entityMetricValuesLocations, new EntityHourlyMetricValueLocationReportMap(), metricsLocationIndexFilePath);
                                    }

                                    #endregion

                                    loggerConsole.Info("{0} Information Points", informationPointsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, informationPointsList.Count);
                                }

                                #endregion
                            }
                        );

                        stepTimingTarget.NumEntities = numEntitiesTotal;

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(metricsReportFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(metricsReportFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(applicationsFullReportFilePath, applicationsFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(applicationsHourlyReportFilePath, applicationsHourlyIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(tiersFullReportFilePath, tiersFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(tiersHourlyReportFilePath, tiersHourlyIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(nodesFullReportFilePath, nodesFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(nodesHourlyReportFilePath, nodesHourlyIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendsFullReportFilePath, backendsFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendsHourlyReportFilePath, backendsHourlyIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionsFullReportFilePath, businessTransactionsFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionsHourlyReportFilePath, businessTransactionsHourlyIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(serviceEndpointsFullReportFilePath, serviceEndpointsFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(serviceEndpointsHourlyReportFilePath, serviceEndpointsHourlyIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(errorsFullReportFilePath, errorsFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(errorsHourlyReportFilePath, errorsHourlyIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(informationPointsFullReportFilePath, informationPointsFullIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(informationPointsHourlyReportFilePath, informationPointsHourlyIndexFilePath);

                        // Combine the generated detailed metric value files
                        foreach (MetricExtractMapping metricExtractMapping in metricExtractMappingList)
                        {
                            string entityMetricReportFilePath = String.Empty;
                            string entityMetricIndexFilePath = String.Empty;
                            string metricValuesFileName = String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricExtractMapping.FolderName);

                            switch (metricExtractMapping.EntityType)
                            {
                                case EntityApplication.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityApplication.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                case EntityTier.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityTier.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                case EntityNode.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityNode.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                case EntityBackend.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityBackend.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                case EntityBusinessTransaction.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                case EntityServiceEndpoint.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityServiceEndpoint.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                case EntityError.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityError.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityError.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                case EntityInformationPoint.ENTITY_TYPE:
                                    entityMetricReportFilePath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME, String.Format(CONVERT_ENTITIES_ALL_METRICS_VALUES_FILE_NAME, EntityInformationPoint.ENTITY_FOLDER, metricExtractMapping.FolderName));
                                    entityMetricIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER, metricValuesFileName);
                                    break;

                                default:
                                    break;
                            }

                            if (entityMetricReportFilePath.Length != 0 && entityMetricIndexFilePath.Length != 0)
                            {
                                FileIOHelper.appendTwoCSVFiles(entityMetricReportFilePath, entityMetricIndexFilePath);
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingIndexFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingIndexFilePath, true);
            }
        }

        private static bool stepIndexApplicationAndEntityFlowmaps(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);
                        string activityGridDataFolderPath = Path.Combine(applicationDataFolderPath, ACTIVITYGRID_FOLDER_NAME);

                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);
                        string activityGridIndexFolderPath = Path.Combine(applicationIndexFolderPath, ACTIVITYGRID_FOLDER_NAME);

                        string activityGridReportFolderPath = Path.Combine(reportFolderPath, ACTIVITYGRID_FOLDER_NAME);

                        // Report files from previous steps
                        string applicationIndexFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);

                        // Report files
                        string applicationFlowmapIndexFilePath = Path.Combine(activityGridIndexFolderPath, EntityApplication.ENTITY_FOLDER, CONVERT_ACTIVITY_GRID_FILE_NAME);
                        string tiersFlowmapIndexFilePath = Path.Combine(activityGridIndexFolderPath, EntityTier.ENTITY_FOLDER, CONVERT_ACTIVITY_GRIDS_FILE_NAME);
                        string nodesFlowmapIndexFilePath = Path.Combine(activityGridIndexFolderPath, EntityNode.ENTITY_FOLDER, CONVERT_ACTIVITY_GRIDS_FILE_NAME);
                        string backendsFlowmapIndexFilePath = Path.Combine(activityGridIndexFolderPath, EntityBackend.ENTITY_FOLDER, CONVERT_ACTIVITY_GRIDS_FILE_NAME);
                        string businessTransactionsFlowmapIndexFilePath = Path.Combine(activityGridIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, CONVERT_ACTIVITY_GRIDS_FILE_NAME);

                        // Report files for All
                        string applicationsFlowmapReportFilePath = Path.Combine(activityGridReportFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityApplication.ENTITY_FOLDER));
                        string tiersFlowmapReportFilePath = Path.Combine(activityGridReportFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityTier.ENTITY_FOLDER));
                        string nodesFlowmapReportFilePath = Path.Combine(activityGridReportFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityNode.ENTITY_FOLDER));
                        string backendsFlowmapReportFilePath = Path.Combine(activityGridReportFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityBackend.ENTITY_FOLDER));
                        string businessTransactionsFlowmapReportFilePath = Path.Combine(activityGridReportFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER));

                        int numEntitiesTotal = 0;

                        #endregion

                        Parallel.Invoke(
                            () =>
                            {
                                #region Application

                                List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationIndexFilePath, new ApplicationEntityReportMap());
                                if (applicationList != null && applicationList.Count > 0)
                                {
                                    loggerConsole.Info("Index Flowmap for Application");

                                    convertFlowmapApplication(programOptions, jobConfiguration, applicationList[0], activityGridDataFolderPath, activityGridIndexFolderPath);

                                    Interlocked.Add(ref numEntitiesTotal, applicationList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Tiers

                                List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersIndexFilePath, new TierEntityReportMap());
                                if (tiersList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Tiers ({0} entities)", tiersList.Count);

                                    FileIOHelper.deleteFile(tiersFlowmapIndexFilePath);

                                    int numEntities = 0;

                                    foreach (EntityTier tierRow in tiersList)
                                    {
                                        string tierReportPath = convertFlowmapTier(programOptions, jobConfiguration, tierRow, activityGridDataFolderPath, activityGridIndexFolderPath);

                                        FileIOHelper.appendTwoCSVFiles(tiersFlowmapIndexFilePath, tierReportPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }

                                    loggerConsole.Info("{0} Tiers", numEntities);

                                    Interlocked.Add(ref numEntitiesTotal, tiersList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Nodes

                                List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesIndexFilePath, new NodeEntityReportMap());
                                if (nodesList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Nodes ({0} entities)", nodesList.Count);

                                    FileIOHelper.deleteFile(nodesFlowmapIndexFilePath);

                                    int numEntities = 0;

                                    foreach (EntityNode nodeRow in nodesList)
                                    {
                                        string nodeReportPath = convertFlowmapNode(programOptions, jobConfiguration, nodeRow, activityGridDataFolderPath, activityGridIndexFolderPath);

                                        FileIOHelper.appendTwoCSVFiles(nodesFlowmapIndexFilePath, nodeReportPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Nodes", numEntities);

                                    Interlocked.Add(ref numEntitiesTotal, nodesList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Backends

                                List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsIndexFilePath, new BackendEntityReportMap());
                                if (backendsList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Backends ({0} entities)", backendsList.Count);

                                    FileIOHelper.deleteFile(backendsFlowmapIndexFilePath);

                                    int numEntities = 0;

                                    foreach (EntityBackend backendRow in backendsList)
                                    {
                                        string backendReportPath = convertFlowmapBackend(programOptions, jobConfiguration, backendRow, activityGridDataFolderPath, activityGridIndexFolderPath);

                                        FileIOHelper.appendTwoCSVFiles(backendsFlowmapIndexFilePath, backendReportPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Backends", numEntities);

                                    Interlocked.Add(ref numEntitiesTotal, backendsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Business Transactions

                                List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsIndexFilePath, new BusinessTransactionEntityReportMap());
                                if (businessTransactionsList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Business Transactions ({0} entities)", businessTransactionsList.Count);

                                    FileIOHelper.deleteFile(businessTransactionsFlowmapIndexFilePath);

                                    int numEntities = 0;

                                    foreach (EntityBusinessTransaction businessTransactionRow in businessTransactionsList)
                                    {
                                        string businessTransactionReportPath = convertFlowmapsBusinessTransaction(programOptions, jobConfiguration, businessTransactionRow, activityGridDataFolderPath, activityGridIndexFolderPath);

                                        FileIOHelper.appendTwoCSVFiles(businessTransactionsFlowmapIndexFilePath, businessTransactionReportPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Business Transactions", numEntities);

                                    Interlocked.Add(ref numEntitiesTotal, businessTransactionsList.Count);
                                }

                                #endregion
                            }
                        );

                        stepTimingTarget.NumEntities = numEntitiesTotal;

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(activityGridReportFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(activityGridReportFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(applicationsFlowmapReportFilePath, applicationFlowmapIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(tiersFlowmapReportFilePath, tiersFlowmapIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(nodesFlowmapReportFilePath, nodesFlowmapIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendsFlowmapReportFilePath, backendsFlowmapIndexFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionsFlowmapReportFilePath, businessTransactionsFlowmapIndexFilePath);

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexEventsAndHealthRuleViolations(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesDataFolderPath = Path.Combine(applicationDataFolderPath, ENTITIES_FOLDER_NAME);
                        string eventsDataFolderPath = Path.Combine(applicationDataFolderPath, EVENTS_FOLDER_NAME);

                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);
                        string eventsIndexFolderPath = Path.Combine(applicationIndexFolderPath, EVENTS_FOLDER_NAME);

                        string eventsReportFolderPath = Path.Combine(reportFolderPath, EVENTS_FOLDER_NAME);

                        // Previosly rendered report files
                        string applicationReportFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);

                        // Report files
                        string applicationEventsSummaryIndexFilePath = Path.Combine(eventsIndexFolderPath, CONVERT_APPLICATION_EVENTS_FILE_NAME);
                        string healthRuleViolationEventsIndexFilePath = Path.Combine(eventsIndexFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                        string eventsIndexFilePath = Path.Combine(eventsIndexFolderPath, CONVERT_EVENTS_FILE_NAME);

                        // Report files for All
                        string applicationEventsSummaryReportFilePath = Path.Combine(eventsReportFolderPath, CONVERT_APPLICATION_EVENTS_FILE_NAME);
                        string healthRuleViolationEventsReportFilePath = Path.Combine(eventsReportFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                        string eventsReportFilePath = Path.Combine(eventsReportFolderPath, CONVERT_EVENTS_FILE_NAME);

                        #endregion

                        #region Health Rule violations

                        loggerConsole.Info("Index health rule violations");

                        List<HealthRuleViolationEvent> healthRuleViolationList = new List<HealthRuleViolationEvent>();

                        long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.From);
                        long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.To);
                        long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
                        string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

                        string healthRuleViolationsDataFilePath = Path.Combine(
                            eventsDataFolderPath,
                            String.Format(HEALTH_RULE_VIOLATIONS_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                        if (File.Exists(healthRuleViolationsDataFilePath))
                        {
                            JArray eventsInHour = FileIOHelper.loadJArrayFromFile(healthRuleViolationsDataFilePath);
                            if (eventsInHour != null)
                            {
                                foreach (JObject interestingEvent in eventsInHour)
                                {
                                    HealthRuleViolationEvent eventRow = new HealthRuleViolationEvent();
                                    eventRow.Controller = jobTarget.Controller;
                                    eventRow.ApplicationName = jobTarget.Application;
                                    eventRow.ApplicationID = jobTarget.ApplicationID;

                                    eventRow.EventID = (long)interestingEvent["id"];
                                    eventRow.FromUtc = convertFromUnixTimestamp((long)interestingEvent["startTimeInMillis"]);
                                    eventRow.From = eventRow.FromUtc.ToLocalTime();
                                    if ((long)interestingEvent["endTimeInMillis"] > 0)
                                    {
                                        eventRow.ToUtc = convertFromUnixTimestamp((long)interestingEvent["endTimeInMillis"]);
                                        eventRow.To = eventRow.FromUtc.ToLocalTime();
                                    }
                                    eventRow.Status = interestingEvent["incidentStatus"].ToString();
                                    eventRow.Severity = interestingEvent["severity"].ToString();
                                    //eventRow.EventLink = interestingEvent["deepLinkUrl"].ToString();
                                    eventRow.EventLink = String.Format(DEEPLINK_INCIDENT, eventRow.Controller, eventRow.ApplicationID, eventRow.EventID, interestingEvent["startTimeInMillis"], DEEPLINK_THIS_TIMERANGE); ;

                                    eventRow.Description = interestingEvent["description"].ToString();

                                    if (interestingEvent["triggeredEntityDefinition"].HasValues == true)
                                    {
                                        eventRow.HealthRuleID = (int)interestingEvent["triggeredEntityDefinition"]["entityId"];
                                        eventRow.HealthRuleName = interestingEvent["triggeredEntityDefinition"]["name"].ToString();
                                        // TODO the health rule can't be hotlinked to until platform rewrites this nonsense from Flash
                                        eventRow.HealthRuleLink = String.Format(DEEPLINK_HEALTH_RULE, eventRow.Controller, eventRow.ApplicationID, eventRow.HealthRuleID, DEEPLINK_THIS_TIMERANGE);
                                    }

                                    if (interestingEvent["affectedEntityDefinition"].HasValues == true)
                                    {
                                        eventRow.EntityID = (int)interestingEvent["affectedEntityDefinition"]["entityId"];
                                        eventRow.EntityName = interestingEvent["affectedEntityDefinition"]["name"].ToString();

                                        string entityType = interestingEvent["affectedEntityDefinition"]["entityType"].ToString();
                                        if (entityTypeStringMapping.ContainsKey(entityType) == true)
                                        {
                                            eventRow.EntityType = entityTypeStringMapping[entityType];
                                        }
                                        else
                                        {
                                            eventRow.EntityType = entityType;
                                        }

                                        // Come up with links
                                        switch (entityType)
                                        {
                                            case ENTITY_TYPE_FLOWMAP_APPLICATION:
                                                eventRow.EntityLink = String.Format(DEEPLINK_APPLICATION, eventRow.Controller, eventRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_FLOWMAP_APPLICATION_MOBILE:
                                                eventRow.EntityLink = String.Format(DEEPLINK_APPLICATION_MOBILE, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_FLOWMAP_TIER:
                                                eventRow.EntityLink = String.Format(DEEPLINK_TIER, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_FLOWMAP_NODE:
                                                eventRow.EntityLink = String.Format(DEEPLINK_NODE, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_FLOWMAP_BUSINESS_TRANSACTION:
                                                eventRow.EntityLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_FLOWMAP_BACKEND:
                                                eventRow.EntityLink = String.Format(DEEPLINK_BACKEND, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            default:
                                                logger.Warn("Unknown entity type {0} in affectedEntityDefinition in health rule violations", entityType);
                                                break;
                                        }
                                    }

                                    eventRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, eventRow.Controller, DEEPLINK_THIS_TIMERANGE);
                                    eventRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, eventRow.Controller, eventRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                                    healthRuleViolationList.Add(eventRow);
                                }
                            }
                        }

                        loggerConsole.Info("{0} events", healthRuleViolationList.Count);

                        stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + healthRuleViolationList.Count;

                        // Sort them
                        healthRuleViolationList = healthRuleViolationList.OrderBy(o => o.HealthRuleName).ThenBy(o => o.From).ThenBy(o => o.Severity).ToList();

                        FileIOHelper.writeListToCSVFile<HealthRuleViolationEvent>(healthRuleViolationList, new HealthRuleViolationEventReportMap(), healthRuleViolationEventsIndexFilePath);

                        #endregion

                        #region Events

                        loggerConsole.Info("Index events");

                        List<Event> eventsList = new List<Event>();
                        foreach (string eventType in eventTypes)
                        {
                            loggerConsole.Info("Type {0} events", eventType);

                            string eventsDataFilePath = Path.Combine(
                                eventsDataFolderPath,
                                String.Format(EVENTS_FILE_NAME, eventType, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                            if (File.Exists(eventsDataFilePath))
                            {
                                JArray eventsInHour = FileIOHelper.loadJArrayFromFile(eventsDataFilePath);
                                if (eventsInHour != null)
                                {
                                    foreach (JObject interestingEvent in eventsInHour)
                                    {
                                        Event eventRow = new Event();
                                        eventRow.Controller = jobTarget.Controller;
                                        eventRow.ApplicationName = jobTarget.Application;
                                        eventRow.ApplicationID = jobTarget.ApplicationID;

                                        eventRow.EventID = (long)interestingEvent["id"];
                                        eventRow.OccurredUtc = convertFromUnixTimestamp((long)interestingEvent["eventTime"]);
                                        eventRow.Occurred = eventRow.OccurredUtc.ToLocalTime();
                                        eventRow.Type = interestingEvent["type"].ToString();
                                        eventRow.SubType = interestingEvent["subType"].ToString();
                                        eventRow.Severity = interestingEvent["severity"].ToString();
                                        eventRow.EventLink = interestingEvent["deepLinkUrl"].ToString();
                                        eventRow.Summary = interestingEvent["summary"].ToString();

                                        if (interestingEvent["triggeredEntity"].HasValues == true)
                                        {
                                            eventRow.TriggeredEntityID = (int)interestingEvent["triggeredEntity"]["entityId"];
                                            eventRow.TriggeredEntityName = interestingEvent["triggeredEntity"]["name"].ToString();
                                            string entityType = interestingEvent["triggeredEntity"]["entityType"].ToString();
                                            if (entityTypeStringMapping.ContainsKey(entityType) == true)
                                            {
                                                eventRow.TriggeredEntityType = entityTypeStringMapping[entityType];
                                            }
                                            else
                                            {
                                                eventRow.TriggeredEntityType = entityType;
                                            }
                                        }

                                        foreach (JObject affectedEntity in interestingEvent["affectedEntities"])
                                        {
                                            string entityType = affectedEntity["entityType"].ToString();
                                            switch (entityType)
                                            {
                                                case ENTITY_TYPE_FLOWMAP_APPLICATION:
                                                    // already have this data
                                                    break;

                                                case ENTITY_TYPE_FLOWMAP_TIER:
                                                    eventRow.TierID = (int)affectedEntity["entityId"];
                                                    eventRow.TierName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_FLOWMAP_NODE:
                                                    eventRow.NodeID = (int)affectedEntity["entityId"];
                                                    eventRow.NodeName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_FLOWMAP_MACHINE:
                                                    eventRow.MachineID = (int)affectedEntity["entityId"];
                                                    eventRow.MachineName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_FLOWMAP_BUSINESS_TRANSACTION:
                                                    eventRow.BTID = (int)affectedEntity["entityId"];
                                                    eventRow.BTName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_FLOWMAP_HEALTH_RULE:
                                                    eventRow.TriggeredEntityID = (int)affectedEntity["entityId"];
                                                    eventRow.TriggeredEntityType = entityTypeStringMapping[affectedEntity["entityType"].ToString()];
                                                    eventRow.TriggeredEntityName = affectedEntity["name"].ToString();
                                                    break;

                                                default:
                                                    logger.Warn("Unknown entity type {0} in affectedEntities in events", entityType);
                                                    break;
                                            }
                                        }

                                        eventRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, eventRow.Controller, DEEPLINK_THIS_TIMERANGE);
                                        eventRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, eventRow.Controller, eventRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                                        if (eventRow.TierID != 0)
                                        {
                                            eventRow.TierLink = String.Format(DEEPLINK_TIER, eventRow.Controller, eventRow.ApplicationID, eventRow.TierID, DEEPLINK_THIS_TIMERANGE);
                                        }
                                        if (eventRow.NodeID != 0)
                                        {
                                            eventRow.NodeLink = String.Format(DEEPLINK_NODE, eventRow.Controller, eventRow.ApplicationID, eventRow.NodeID, DEEPLINK_THIS_TIMERANGE);
                                        }
                                        if (eventRow.BTID != 0)
                                        {
                                            eventRow.BTLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, eventRow.Controller, eventRow.ApplicationID, eventRow.BTID, DEEPLINK_THIS_TIMERANGE);
                                        }

                                        eventsList.Add(eventRow);
                                    }
                                }
                            }
                        }
                        loggerConsole.Info("{0} events", eventsList.Count);

                        stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + eventsList.Count;

                        // Sort them
                        eventsList = eventsList.OrderBy(o => o.Type).ThenBy(o => o.Occurred).ThenBy(o => o.Severity).ToList();

                        FileIOHelper.writeListToCSVFile<Event>(eventsList, new EventReportMap(), eventsIndexFilePath);

                        #endregion

                        #region Application

                        List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());
                        if (applicationList != null && applicationList.Count > 0)
                        {
                            EntityApplication applicationsRow = applicationList[0];

                            applicationsRow.NumEvents = eventsList.Count;
                            applicationsRow.NumEventsError = eventsList.Count(e => e.Severity == "ERROR");
                            applicationsRow.NumEventsWarning = eventsList.Count(e => e.Severity == "WARN");
                            applicationsRow.NumEventsInfo = eventsList.Count(e => e.Severity == "INFO");

                            applicationsRow.NumHRViolations = healthRuleViolationList.Count;
                            applicationsRow.NumHRViolationsCritical = healthRuleViolationList.Count(e => e.Severity == "CRITICAL");
                            applicationsRow.NumHRViolationsWarning = healthRuleViolationList.Count(e => e.Severity == "WARNING");

                            applicationsRow.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                            applicationsRow.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                            applicationsRow.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                            applicationsRow.FromUtc = jobConfiguration.Input.TimeRange.From;
                            applicationsRow.ToUtc = jobConfiguration.Input.TimeRange.To;

                            if (applicationsRow.NumEvents > 0 || applicationsRow.NumHRViolations > 0)
                            {
                                applicationsRow.HasActivity = true;
                            }

                            FileIOHelper.writeListToCSVFile(applicationList, new ApplicationEventReportMap(), applicationEventsSummaryIndexFilePath);
                        }

                        #endregion

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(eventsReportFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(eventsReportFolderPath);
                        }

                        // Append all the individual application files into one
                        if (File.Exists(applicationEventsSummaryIndexFilePath) == true && new FileInfo(applicationEventsSummaryIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(applicationEventsSummaryReportFilePath, applicationEventsSummaryIndexFilePath);
                        }
                        if (File.Exists(healthRuleViolationEventsIndexFilePath) == true && new FileInfo(healthRuleViolationEventsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(healthRuleViolationEventsReportFilePath, healthRuleViolationEventsIndexFilePath);
                        }
                        if (File.Exists(eventsIndexFilePath) == true && new FileInfo(eventsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(eventsReportFilePath, eventsIndexFilePath);
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexSnapshots(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string snapshotsDataFolderPath = Path.Combine(applicationDataFolderPath, SNAPSHOTS_FOLDER_NAME);

                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);
                        string snapshotsIndexFolderPath = Path.Combine(applicationIndexFolderPath, SNAPSHOTS_FOLDER_NAME);
                        string configIndexFolderPath = Path.Combine(applicationDataFolderPath, CONFIGURATION_FOLDER_NAME);

                        string snapshotsReportFolderPath = Path.Combine(reportFolderPath, SNAPSHOTS_FOLDER_NAME);

                        // Previosly rendered report files
                        string applicationIndexFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string methodInvocationDataCollectorsIndexFilePath = Path.Combine(configIndexFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                        string methodCallLinesToFrameworkTypeMappingFilePath = Path.Combine(programOptions.ProgramLocationFolderPath, METHOD_CALL_LINES_TO_FRAMEWORK_TYPE_MAPPING_FILE_NAME);

                        // Report files
                        string snapshotIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                        string segmentIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                        string callExitIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                        string serviceEndpointCallIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                        string detectedErrorsIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                        string businessDataIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                        string methodCallLineIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                        string methodCallLinesOccurrenceIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);
                        string applicationSnapshotsSummaryIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                        // Report files for All
                        string snapshotsReportFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                        string segmentsReportFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                        string callExitsReportFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                        string serviceEndpointCallsReporFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                        string detectedErrorsReporFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                        string businessDataReportFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                        string methodCallLinesReportFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                        string methodCallLinesOccurrencesReportFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);
                        string applicationSnapshotsSummaryReportFilePath = Path.Combine(snapshotsReportFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                        #endregion

                        #region Index Snapshots

                        // Process each hour at a time
                        loggerConsole.Info("Index Snapshots");

                        List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersIndexFilePath, new TierEntityReportMap());
                        List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesIndexFilePath, new NodeEntityReportMap());
                        List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsIndexFilePath, new BackendEntityReportMap());
                        List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsIndexFilePath, new BusinessTransactionEntityReportMap());
                        List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsIndexFilePath, new ServiceEndpointEntityReportMap());
                        List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsIndexFilePath, new ErrorEntityReportMap());
                        List<MethodInvocationDataCollector> methodInvocationDataCollectorsList = FileIOHelper.readListFromCSVFile<MethodInvocationDataCollector>(methodInvocationDataCollectorsIndexFilePath, new MethodInvocationDataCollectorReportMap());

                        // Load and bucketize the framework mappings
                        Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary = populateMethodCallMappingDictionary(methodCallLinesToFrameworkTypeMappingFilePath);

                        int totalNumberOfSnapshots = 0;
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            string snapshotsListFilePath = Path.Combine(snapshotsDataFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
                            JArray listOfSnapshotsInHour = FileIOHelper.loadJArrayFromFile(snapshotsListFilePath);

                            int j = 0;

                            if (listOfSnapshotsInHour != null && listOfSnapshotsInHour.Count > 0)
                            {
                                logger.Info("Index Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHour.Count);
                                loggerConsole.Info("Index Snapshots {0:G} to {1:G} ({2} snapshots)", jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime(), listOfSnapshotsInHour.Count);

                                stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + listOfSnapshotsInHour.Count;

                                if (programOptions.ProcessSequentially == false)
                                {
                                    var listOfSnapshotsInHourChunks = listOfSnapshotsInHour.BreakListIntoChunks(SNAPSHOTS_INDEX_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                    Parallel.ForEach<List<JToken>, int>(
                                        listOfSnapshotsInHourChunks,
                                        () => 0,
                                        (listOfSnapshotsInHourChunk, loop, subtotal) =>
                                        {
                                            subtotal += indexSnapshots(programOptions, jobConfiguration, jobTarget, jobTimeRange, listOfSnapshotsInHourChunk, tiersList, nodesList, backendsList, businessTransactionsList, serviceEndpointsList, errorsList, methodInvocationDataCollectorsList, methodCallLineClassToFrameworkTypeMappingDictionary, false);
                                            return subtotal;
                                        },
                                        (finalResult) =>
                                        {
                                            Interlocked.Add(ref j, finalResult);
                                            Console.Write("[{0}].", j);
                                        }
                                    );
                                }
                                else
                                {
                                    j = indexSnapshots(programOptions, jobConfiguration, jobTarget, jobTimeRange, listOfSnapshotsInHour.ToList<JToken>(), tiersList, nodesList, backendsList, businessTransactionsList, serviceEndpointsList, errorsList, methodInvocationDataCollectorsList, methodCallLineClassToFrameworkTypeMappingDictionary, true);
                                }

                                loggerConsole.Info("{0} snapshots", j);
                                totalNumberOfSnapshots = totalNumberOfSnapshots + j;
                            }
                        }
                        loggerConsole.Info("{0} snapshots total", totalNumberOfSnapshots);

                        #endregion

                        #region Combine Snapshots, Segments, Call Exits, Service Endpoints and Business Data for this Application

                        // Assemble snapshot files into summary file for entire application
                        loggerConsole.Info("Combine Snapshots for This Application");

                        FileIOHelper.deleteFile(snapshotIndexFilePath);
                        FileIOHelper.deleteFile(segmentIndexFilePath);
                        FileIOHelper.deleteFile(callExitIndexFilePath);
                        FileIOHelper.deleteFile(serviceEndpointCallIndexFilePath);
                        FileIOHelper.deleteFile(detectedErrorsIndexFilePath);
                        FileIOHelper.deleteFile(businessDataIndexFilePath);
                        FileIOHelper.deleteFile(methodCallLineIndexFilePath);
                        FileIOHelper.deleteFile(methodCallLinesOccurrenceIndexFilePath);
                        FileIOHelper.deleteFile(applicationSnapshotsSummaryIndexFilePath);

                        List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationIndexFilePath, new ApplicationEntityReportMap());
                        EntityApplication applicationsRow = null;
                        if (applicationList != null && applicationList.Count > 0)
                        {
                            applicationsRow = applicationList[0];

                            applicationsRow.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                            applicationsRow.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                            applicationsRow.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                            applicationsRow.FromUtc = jobConfiguration.Input.TimeRange.From;
                            applicationsRow.ToUtc = jobConfiguration.Input.TimeRange.To;
                        }

                        Hashtable requestIDs = new Hashtable(totalNumberOfSnapshots);

                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            int j = 0;

                            string snapshotsListFilePath = Path.Combine(snapshotsDataFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
                            JArray listOfSnapshotsInHour = FileIOHelper.loadJArrayFromFile(snapshotsListFilePath);

                            if (listOfSnapshotsInHour != null && listOfSnapshotsInHour.Count > 0)
                            {
                                logger.Info("Combine Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHour.Count);
                                loggerConsole.Info("Combine Snapshots {0:G} to {1:G} ({2} snapshots)", jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime(), listOfSnapshotsInHour.Count);

                                using (FileStream snapshotsIndexFileStream = File.Open(snapshotIndexFilePath, FileMode.Append))
                                {
                                    using (FileStream segmentsIndexFileStream = File.Open(segmentIndexFilePath, FileMode.Append))
                                    {
                                        using (FileStream callExitsIndexFileStream = File.Open(callExitIndexFilePath, FileMode.Append))
                                        {
                                            using (FileStream serviceEndpointCallsIndexFileStream = File.Open(serviceEndpointCallIndexFilePath, FileMode.Append))
                                            {
                                                using (FileStream detectedErrorsIndexFileStream = File.Open(detectedErrorsIndexFilePath, FileMode.Append))
                                                {
                                                    using (FileStream businessDataIndexFileStream = File.Open(businessDataIndexFilePath, FileMode.Append))
                                                    {
                                                        using (FileStream methodCallLinesIndexFileStream = File.Open(methodCallLineIndexFilePath, FileMode.Append))
                                                        {
                                                            using (FileStream methodCallLinesOccurrencesIndexFileStream = File.Open(methodCallLinesOccurrenceIndexFilePath, FileMode.Append))
                                                            {
                                                                foreach (JToken snapshot in listOfSnapshotsInHour)
                                                                {
                                                                    if (requestIDs.ContainsKey(snapshot["requestGUID"].ToString()) == true)
                                                                    {
                                                                        logger.Warn("Snapshot {0} is a duplicate, skipping", snapshot["requestGUID"]);
                                                                        continue;
                                                                    }
                                                                    requestIDs.Add(snapshot["requestGUID"].ToString(), true);

                                                                    // Count the snapshot
                                                                    if (applicationsRow != null)
                                                                    {
                                                                        applicationsRow.NumSnapshots++;
                                                                        switch (snapshot["userExperience"].ToString())
                                                                        {
                                                                            case "NORMAL":
                                                                                applicationsRow.NumSnapshotsNormal++;
                                                                                break;

                                                                            case "SLOW":
                                                                                applicationsRow.NumSnapshotsSlow++;
                                                                                break;

                                                                            case "VERY_SLOW":
                                                                                applicationsRow.NumSnapshotsVerySlow++;
                                                                                break;

                                                                            case "STALL":
                                                                                applicationsRow.NumSnapshotsStall++;
                                                                                break;

                                                                            case "ERROR":
                                                                                applicationsRow.NumSnapshotsError++;
                                                                                break;

                                                                            default:
                                                                                break;
                                                                        }
                                                                    }

                                                                    DateTime snapshotTime = convertFromUnixTimestamp((long)snapshot["serverStartTime"]);

                                                                    string snapshotFolderPath = Path.Combine(
                                                                        snapshotsIndexFolderPath,
                                                                        getShortenedEntityNameForFileSystem(snapshot["applicationComponentName"].ToString(), (long)snapshot["applicationComponentId"]),
                                                                        getShortenedEntityNameForFileSystem(snapshot["businessTransactionName"].ToString(), (long)snapshot["businessTransactionId"]),
                                                                        String.Format("{0:yyyyMMddHH}", snapshotTime),
                                                                        userExperienceFolderNameMapping[snapshot["userExperience"].ToString()],
                                                                        String.Format(SNAPSHOT_FOLDER_NAME, snapshot["requestGUID"], snapshotTime));

                                                                    string thisSnapshotSnapshotsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_FILE_NAME);
                                                                    string thisSnapshotSegmentsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_FILE_NAME);
                                                                    string thisSnapshotExitCallsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_EXIT_CALLS_FILE_NAME);
                                                                    string thisSnapshotServiceEndpointCallsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_SERVICE_ENDPOINT_CALLS_FILE_NAME);
                                                                    string thisSnapshotDetectedErrorsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                                                                    string thisSnapshotBusinessDataFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                                                                    string thisSnapshotMethodCallLinesFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                                                                    string thisSnapshotMethodCallOccurrencesLinesFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);

                                                                    FileIOHelper.appendTwoCSVFiles(snapshotsIndexFileStream, thisSnapshotSnapshotsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(segmentsIndexFileStream, thisSnapshotSegmentsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(callExitsIndexFileStream, thisSnapshotExitCallsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(serviceEndpointCallsIndexFileStream, thisSnapshotServiceEndpointCallsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(detectedErrorsIndexFileStream, thisSnapshotDetectedErrorsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(businessDataIndexFileStream, thisSnapshotBusinessDataFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(methodCallLinesIndexFileStream, thisSnapshotMethodCallLinesFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(methodCallLinesOccurrencesIndexFileStream, thisSnapshotMethodCallOccurrencesLinesFileName);

                                                                    j++;
                                                                    if (j % 200 == 0)
                                                                    {
                                                                        Console.Write("[{0}].", j);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            loggerConsole.Info("{0} snapshots", j);
                        }

                        if (applicationsRow != null)
                        {
                            if (applicationsRow.NumSnapshots > 0)
                            {
                                applicationsRow.HasActivity = true;
                            }

                            FileIOHelper.writeListToCSVFile(applicationList, new ApplicationSnapshotReportMap(), applicationSnapshotsSummaryIndexFilePath);
                        }

                        #endregion

                        #region Combine All for Report CSV

                        loggerConsole.Info("Combine Snapshots for All Applications");

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(snapshotsReportFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(snapshotsReportFolderPath);
                        }

                        // Append all the individual application files into one
                        if (File.Exists(snapshotIndexFilePath) == true && new FileInfo(snapshotIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(snapshotsReportFilePath, snapshotIndexFilePath);
                        }
                        if (File.Exists(segmentIndexFilePath) == true && new FileInfo(segmentIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(segmentsReportFilePath, segmentIndexFilePath);
                        }
                        if (File.Exists(callExitIndexFilePath) == true && new FileInfo(callExitIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(callExitsReportFilePath, callExitIndexFilePath);
                        }
                        if (File.Exists(serviceEndpointCallIndexFilePath) == true && new FileInfo(serviceEndpointCallIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(serviceEndpointCallsReporFilePath, serviceEndpointCallIndexFilePath);
                        }
                        if (File.Exists(detectedErrorsIndexFilePath) == true && new FileInfo(detectedErrorsIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(detectedErrorsReporFilePath, detectedErrorsIndexFilePath);
                        }
                        if (File.Exists(businessDataIndexFilePath) == true && new FileInfo(businessDataIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(businessDataReportFilePath, businessDataIndexFilePath);
                        }
                        if (File.Exists(methodCallLineIndexFilePath) == true && new FileInfo(methodCallLineIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(methodCallLinesReportFilePath, methodCallLineIndexFilePath);
                        }
                        if (File.Exists(methodCallLinesOccurrenceIndexFilePath) == true && new FileInfo(methodCallLinesOccurrenceIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(methodCallLinesOccurrencesReportFilePath, methodCallLinesOccurrenceIndexFilePath);
                        }
                        if (File.Exists(applicationSnapshotsSummaryIndexFilePath) == true && new FileInfo(applicationSnapshotsSummaryIndexFilePath).Length > 0)
                        {
                            FileIOHelper.appendTwoCSVFiles(applicationSnapshotsSummaryReportFilePath, applicationSnapshotsSummaryIndexFilePath);
                        }

                        #endregion

                        #region Combine folded Flame Graphs stacks from individual Snapshots

                        if (tiersList != null && nodesList != null && businessTransactionsList != null)
                        {
                            Dictionary<long, Dictionary<string, FoldedStackLine>> foldedCallStacksNodesList = new Dictionary<long, Dictionary<string, FoldedStackLine>>(nodesList.Count);
                            Dictionary<long, Dictionary<string, FoldedStackLine>> foldedCallStacksBusinessTransactionsList = new Dictionary<long, Dictionary<string, FoldedStackLine>>(businessTransactionsList.Count);
                            Dictionary<long, Dictionary<string, FoldedStackLine>> foldedCallStacksTiersList = new Dictionary<long, Dictionary<string, FoldedStackLine>>(tiersList.Count);
                            Dictionary<string, FoldedStackLine> foldedCallStacksApplication = new Dictionary<string, FoldedStackLine>(100);

                            #region Build Node and BT rollups first from the list of snapshots

                            loggerConsole.Info("Fold Stacks for Nodes and Business Transactions");

                            foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                            {
                                int j = 0;

                                string snapshotsListFilePath = Path.Combine(snapshotsDataFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
                                JArray listOfSnapshotsInHour = FileIOHelper.loadJArrayFromFile(snapshotsListFilePath);

                                if (listOfSnapshotsInHour != null && listOfSnapshotsInHour.Count > 0)
                                {
                                    logger.Info("Fold Stacks for Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHour.Count);
                                    loggerConsole.Info("Fold Stacks for Snapshots {0:G} to {1:G} ({2} snapshots)", jobTimeRange.From.ToLocalTime(), jobTimeRange.To.ToLocalTime(), listOfSnapshotsInHour.Count);

                                    foreach (JToken snapshotToken in listOfSnapshotsInHour)
                                    {
                                        if ((bool)snapshotToken["firstInChain"] == false)
                                        {
                                            continue;
                                        }

                                        // Look up the folded stack for Node
                                        long nodeID = (long)snapshotToken["applicationComponentNodeId"];
                                        if (foldedCallStacksNodesList.ContainsKey(nodeID) == false)
                                        {
                                            foldedCallStacksNodesList[nodeID] = new Dictionary<string, FoldedStackLine>(50);
                                        }

                                        // Look up the folded stack for Business Transaction
                                        long btID = (long)snapshotToken["businessTransactionId"];
                                        if (foldedCallStacksBusinessTransactionsList.ContainsKey(btID) == false)
                                        {
                                            foldedCallStacksBusinessTransactionsList[btID] = new Dictionary<string, FoldedStackLine>(50);
                                        }

                                        // Load folded call stack
                                        DateTime snapshotTime = convertFromUnixTimestamp((long)snapshotToken["serverStartTime"]);

                                        string snapshotFolderPath = Path.Combine(
                                            snapshotsIndexFolderPath,
                                            getShortenedEntityNameForFileSystem(snapshotToken["applicationComponentName"].ToString(), (long)snapshotToken["applicationComponentId"]),
                                            getShortenedEntityNameForFileSystem(snapshotToken["businessTransactionName"].ToString(), btID),
                                            String.Format("{0:yyyyMMddHH}", snapshotTime),
                                            userExperienceFolderNameMapping[snapshotToken["userExperience"].ToString()],
                                            String.Format(SNAPSHOT_FOLDER_NAME, snapshotToken["requestGUID"], snapshotTime));

                                        string snapshotFoldedCallStacksFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                        // Load the call stack and add it to the right list
                                        if (File.Exists(snapshotFoldedCallStacksFileName) == true)
                                        {
                                            List<FoldedStackLine> foldedStackLines = FileIOHelper.readListFromCSVFile<FoldedStackLine>(snapshotFoldedCallStacksFileName, new FoldedStackLineReportMap());

                                            addFoldedStacks(foldedCallStacksNodesList[nodeID], foldedStackLines);
                                            addFoldedStacks(foldedCallStacksBusinessTransactionsList[btID], foldedStackLines);
                                        }

                                        j++;
                                        if (j % 500 == 0)
                                        {
                                            Console.Write("[{0}].", j);
                                        }
                                    }
                                }

                                loggerConsole.Info("{0} snapshots", j);
                            }

                            // Save Node and BT rollups
                            foreach (EntityNode node in nodesList)
                            {
                                if (foldedCallStacksNodesList.ContainsKey(node.NodeID) == true && foldedCallStacksNodesList[node.NodeID].Count > 0)
                                {
                                    string nodeFoldedCallStacksFilePath = Path.Combine(
                                        snapshotsIndexFolderPath,
                                        EntityNode.ENTITY_FOLDER,
                                        getShortenedEntityNameForFileSystem(node.TierName, node.TierID),
                                        getShortenedEntityNameForFileSystem(node.NodeName, node.NodeID),
                                        CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                    FileIOHelper.writeListToCSVFile(foldedCallStacksNodesList[node.NodeID].Values.ToList<FoldedStackLine>(), new FoldedStackLineReportMap(), nodeFoldedCallStacksFilePath);
                                }
                            }

                            foreach (EntityBusinessTransaction businessTransaction in businessTransactionsList)
                            {
                                if (foldedCallStacksBusinessTransactionsList.ContainsKey(businessTransaction.BTID) == true && foldedCallStacksBusinessTransactionsList[businessTransaction.BTID].Count > 0)
                                {
                                    string businessTransactionFoldedCallStacksFilePath = Path.Combine(
                                        snapshotsIndexFolderPath,
                                        getShortenedEntityNameForFileSystem(businessTransaction.TierName, businessTransaction.TierID),
                                        getShortenedEntityNameForFileSystem(businessTransaction.BTName, businessTransaction.BTID),
                                        CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                    FileIOHelper.writeListToCSVFile(foldedCallStacksBusinessTransactionsList[businessTransaction.BTID].Values.ToList<FoldedStackLine>(), new FoldedStackLineReportMap(), businessTransactionFoldedCallStacksFilePath);
                                }
                            }

                            #endregion

                            #region Build Tier rollups second using Nodes that are part of Tier rollups

                            loggerConsole.Info("Fold Stacks for Tiers");

                            foreach (EntityTier tier in tiersList)
                            {
                                if (foldedCallStacksTiersList.ContainsKey(tier.TierID) == false)
                                {
                                    foldedCallStacksTiersList[tier.TierID] = new Dictionary<string, FoldedStackLine>(25);
                                }

                                foreach (EntityNode node in nodesList)
                                {
                                    if (node.TierID == tier.TierID)
                                    {
                                        string nodeFoldedCallStacksFilePath = Path.Combine(
                                            snapshotsIndexFolderPath,
                                            EntityNode.ENTITY_FOLDER,
                                            getShortenedEntityNameForFileSystem(node.TierName, node.TierID),
                                            getShortenedEntityNameForFileSystem(node.NodeName, node.NodeID),
                                            CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                        if (File.Exists(nodeFoldedCallStacksFilePath) == true)
                                        {
                                            List<FoldedStackLine> foldedStackLinesNodeList = FileIOHelper.readListFromCSVFile<FoldedStackLine>(nodeFoldedCallStacksFilePath, new FoldedStackLineReportMap());

                                            addFoldedStacks(foldedCallStacksTiersList[tier.TierID], foldedStackLinesNodeList);
                                        }
                                    }
                                }

                                if (foldedCallStacksTiersList[tier.TierID].Count > 0)
                                {
                                    string tierFoldedStacksFilePath = Path.Combine(
                                        snapshotsIndexFolderPath,
                                        getShortenedEntityNameForFileSystem(tier.TierName, tier.TierID),
                                        CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                    FileIOHelper.writeListToCSVFile(foldedCallStacksTiersList[tier.TierID].Values.ToList<FoldedStackLine>(), new FoldedStackLineReportMap(), tierFoldedStacksFilePath);
                                }
                            }

                            #endregion

                            #region Build Application level rollups using all Tiers

                            loggerConsole.Info("Fold Stacks for Application");

                            foreach (EntityTier tier in tiersList)
                            {
                                string tierFoldedStacksFilePath = Path.Combine(
                                    snapshotsIndexFolderPath,
                                    getShortenedEntityNameForFileSystem(tier.TierName, tier.TierID),
                                    CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                if (File.Exists(tierFoldedStacksFilePath) == true)
                                {
                                    List<FoldedStackLine> foldedStackLinesTierList = FileIOHelper.readListFromCSVFile<FoldedStackLine>(tierFoldedStacksFilePath, new FoldedStackLineReportMap());

                                    addFoldedStacks(foldedCallStacksApplication, foldedStackLinesTierList);
                                }
                            }

                            string applicationFoldedStacksFilePath = Path.Combine(
                                snapshotsIndexFolderPath,
                                CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                            FileIOHelper.writeListToCSVFile(foldedCallStacksApplication.Values.ToList<FoldedStackLine>(), new FoldedStackLineReportMap(), applicationFoldedStacksFilePath);

                            #endregion
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        #endregion

        #region Reporting steps

        private static bool stepReportControlerApplicationsAndEntities(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Detected Entities Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Detected Entities Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Detected Entities Report");

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of App Agent";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Types of Machine Agent";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Backends";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Locations of Backends";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of BTs";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Location of BTs";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Type of SEPs";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Location of SEPs";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Errors by Type";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Location of Errors";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Information Points by Type";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                #endregion

                loggerConsole.Info("Fill Detected Entities Report File");

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string applicationsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);
                string tiersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                string nodesAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                string backendsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                string businessTransactionsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                string serviceEndpointsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                string errorsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                string informationPointsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                ExcelRangeBase range = null;
                ExcelTable table = null;

                #endregion

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST];
                readCSVFileIntoExcelRange(applicationsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Tiers

                loggerConsole.Info("List of Tiers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST];
                readCSVFileIntoExcelRange(tiersAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Nodes

                loggerConsole.Info("List of Nodes");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST];
                readCSVFileIntoExcelRange(nodesAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Backends

                loggerConsole.Info("List of Backends");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST];
                readCSVFileIntoExcelRange(backendsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transactions

                loggerConsole.Info("List of Business Transactions");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST];
                readCSVFileIntoExcelRange(businessTransactionsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Service Endpoints

                loggerConsole.Info("List of Service Endpoints");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST];
                readCSVFileIntoExcelRange(serviceEndpointsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Errors

                loggerConsole.Info("List of Errors");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST];
                readCSVFileIntoExcelRange(errorsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Information Points

                loggerConsole.Info("List of Information Points");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST];
                readCSVFileIntoExcelRange(informationPointsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Detected Entities Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityApplication.ENTITY_FOLDER, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumTiers"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumNodes"].Position + 1, sheet.Dimension.Rows, table.Columns["NumNodes"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumIPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumIPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Tiers

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST];
                logger.Info("Tiers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tiers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_TIERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityTier.ENTITY_FOLDER, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumNodes"].Position + 1, sheet.Dimension.Rows, table.Columns["NumNodes"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_TIERS);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addColumnFieldToPivot(pivot, "AgentType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "TierName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_TIERS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                }

                #endregion

                #region Nodes

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST];
                logger.Info("Nodes Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Nodes Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_NODES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityNode.ENTITY_FOLDER, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "AgentPresent");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "NodeName");
                    addColumnFieldToPivot(pivot, "AgentType", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "AgentVersion", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "NodeName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "MachineAgentPresent");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "MachineName");
                    addColumnFieldToPivot(pivot, "AgentType", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "MachineAgentVersion", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "MachineName", DataFieldFunctions.Count);

                    chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                }

                #endregion

                #region Backends

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST];
                logger.Info("Backends Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backends Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_BACKENDS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityBackend.ENTITY_FOLDER, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "BackendName");
                    addColumnFieldToPivot(pivot, "BackendType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "BackendName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_LOCATION);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "BackendType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "BackendName");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addDataFieldToPivot(pivot, "BackendName", DataFieldFunctions.Count);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                }

                #endregion

                #region Business Transactions

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST];
                logger.Info("Business Transactions Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transactions Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_BUSINESS_TRANSACTIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityBusinessTransaction.ENTITY_FOLDER, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsRenamed");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addColumnFieldToPivot(pivot, "BTType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "BTName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_LOCATION_SHEET);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsRenamed");
                    addRowFieldToPivot(pivot, "BTType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "BTName");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addDataFieldToPivot(pivot, "BTName", DataFieldFunctions.Count);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Service Endpoints

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST];
                logger.Info("Service Endpoints Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Service Endpoints Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_SERVICE_ENDPOINTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityServiceEndpoint.ENTITY_FOLDER, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "SEPName");
                    addColumnFieldToPivot(pivot, "SEPType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SEPName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_LOCATION);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "SEPType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "SEPName");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addDataFieldToPivot(pivot, "SEPName", DataFieldFunctions.Count);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Errors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST];
                logger.Info("Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_ERRORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityError.ENTITY_FOLDER, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "ErrorDepth", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "ErrorName");
                    addColumnFieldToPivot(pivot, "ErrorType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "ErrorName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_LOCATION);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "ErrorDepth", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "ErrorType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "ErrorName");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addDataFieldToPivot(pivot, "ErrorName", DataFieldFunctions.Count);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Information Points

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST];
                logger.Info("Information Points Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Points Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_INFORMATION_POINTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(EntityInformationPoint.ENTITY_FOLDER, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "IPName");
                    addColumnFieldToPivot(pivot, "IPType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "IPName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        sheet.Cells[rowNum, 2].Value = s.Tables[0].Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_DETECTED_ENTITIES_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportControllerAndApplicationConfiguration(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Controller and Application Configuration Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Controller and Application Configuration  Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Controller and Application Configuration Report");

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of BT Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Locations BT Rules";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of BT Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Locations BT Rules";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Backend Detection Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Custom Exit Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_HEALTH_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Health Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_HEALTH_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_TIER_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Agent Configuration Properties";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                #endregion

                loggerConsole.Info("Fill Controller and Application Configuration Report File");

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string configAllFolderPath = Path.Combine(reportFolderPath, CONFIGURATION_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string controllerSettingsAllReportFilePath = Path.Combine(configAllFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                string applicationConfigurationAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_FILE_NAME);
                string businessTransactionDiscoveryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME);
                string businessTransactionEntryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME);
                string businessTransactionEntryScopesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME);
                string businessTransactionDiscoveryRules20AllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME);
                string businessTransactionEntryRules20AllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME);
                string backendDiscoveryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME);
                string customExitRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME);
                string informationPointRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME);
                string agentConfigurationPropertiesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME);
                string methodInvocationDataCollectorsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                string httpDataCollectorsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME);
                string entityTierConfigurationsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME);
                string entityBusinessTransactionConfigurationsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                string agentCallGraphSettingsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME);
                string healthRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME);

                ExcelRangeBase range = null;
                ExcelTable table = null;

                #endregion

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Controller Settings

                loggerConsole.Info("List of Controller Settings");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS];
                readCSVFileIntoExcelRange(controllerSettingsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Application Configuration

                loggerConsole.Info("List of Application Configuration");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION];
                readCSVFileIntoExcelRange(applicationConfigurationAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Detection Rules

                loggerConsole.Info("List of Business Transaction Detection Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES];
                readCSVFileIntoExcelRange(businessTransactionDiscoveryRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Entry Rules

                loggerConsole.Info("List of Business Transaction Entry Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES];
                readCSVFileIntoExcelRange(businessTransactionEntryRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Scopes

                loggerConsole.Info("List of Business Transaction Scopes");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES];
                readCSVFileIntoExcelRange(businessTransactionEntryScopesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Detection Rules 2.0

                loggerConsole.Info("List of Business Transaction 2.0 Detection Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20];
                readCSVFileIntoExcelRange(businessTransactionDiscoveryRules20AllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Entry Rules 2.0

                loggerConsole.Info("List of Business Transaction 2.0 Entry Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20];
                readCSVFileIntoExcelRange(businessTransactionEntryRules20AllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Backend Discovery Rules

                loggerConsole.Info("List of Backend Detection Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES];
                readCSVFileIntoExcelRange(backendDiscoveryRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Custom Exit Rules

                loggerConsole.Info("List of Custom Exit Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES];
                readCSVFileIntoExcelRange(customExitRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Information Point Rules

                loggerConsole.Info("List of Information Point Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES];
                readCSVFileIntoExcelRange(informationPointRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Agent Configuration Properties

                loggerConsole.Info("List of Agent Configuration Properties");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES];
                readCSVFileIntoExcelRange(agentConfigurationPropertiesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Data Collectors

                loggerConsole.Info("List of Method Invocation Data Collectors");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS];
                readCSVFileIntoExcelRange(methodInvocationDataCollectorsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of HTTP Data Collectors");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS];
                readCSVFileIntoExcelRange(httpDataCollectorsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Tier Settings

                loggerConsole.Info("List of Tier Settings");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_TIER_SETTINGS];
                readCSVFileIntoExcelRange(entityTierConfigurationsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Detected Business Transaction and Assigned Data Collectors

                loggerConsole.Info("List of Detected Business Transaction and Assigned Data Collectors");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS];
                readCSVFileIntoExcelRange(entityBusinessTransactionConfigurationsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Agent Call Graph Settings

                loggerConsole.Info("List of Agent Call Graph Settings");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS];
                readCSVFileIntoExcelRange(agentCallGraphSettingsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Health Rules

                loggerConsole.Info("List of Health Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HEALTH_RULES];
                readCSVFileIntoExcelRange(healthRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Controller and Application Configuration Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_DETAILS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Controller Settings

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS];
                logger.Info("Controller Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controller Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_CONTROLLER_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Name"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["Value"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Description"].Position + 1).Width = 30;
                }

                #endregion

                #region Application Configuration

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION];
                logger.Info("Application Configuration Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Application Configuration Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_APPLICATION_CONFIGURATION);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTDiscoveryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTDiscoveryRules"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTEntryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTEntryRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTExcludeRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTExcludeRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20Scopes"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20Scopes"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20DiscoveryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20DiscoveryRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20EntryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20EntryRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20ExcludeRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20ExcludeRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBackendRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBackendRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumInfoPointRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumInfoPointRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumAgentProps"].Position + 1, sheet.Dimension.Rows, table.Columns["NumAgentProps"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHealthRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHealthRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrorRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrorRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCVariablesCollected"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCVariablesCollected"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCVariablesCollected"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCVariablesCollected"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBaselines"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBaselines"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);


                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Business Transaction Detection Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES];
                logger.Info("Business Transaction Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["NamingConfigType"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["DiscoveryType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;
                }

                #endregion

                #region Business Transaction Entry Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES];
                logger.Info("Business Transaction Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsExclusion");
                    addFilterFieldToPivot(pivot, "IsEnabled");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "AgentType");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "RuleName");
                    addColumnFieldToPivot(pivot, "EntryPointType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "RuleName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_LOCATION);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsExclusion");
                    addFilterFieldToPivot(pivot, "IsEnabled");
                    addRowFieldToPivot(pivot, "AgentType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "EntryPointType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "RuleName");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addDataFieldToPivot(pivot, "RuleName", DataFieldFunctions.Count, "Rules");
                    addDataFieldToPivot(pivot, "NumDetectedBTs", DataFieldFunctions.Count, "BTs");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                    sheet.Column(6).Width = 20;
                }

                #endregion

                #region Business Transaction Scopes

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES];
                logger.Info("Business Transaction Scopes Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction Scopes Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SCOPES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ScopeName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["ScopeType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["IncludedTiers"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["IncludedRules"].Position + 1).Width = 20;
                }

                #endregion

                #region Business Transaction Detection Rules 2.0

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20];
                logger.Info("Business Transaction 2.0 Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction 2.0 Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES_20);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["ScopeName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["NamingConfigType"].Position + 1).Width = 15;
                }

                #endregion

                #region Business Transaction Entry Rules 2.0

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20];
                logger.Info("Business Transaction 2.0 Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction 2.0 Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["ScopeName"].Position + 1).Width = 30;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsExclusion");
                    addFilterFieldToPivot(pivot, "IsEnabled");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "AgentType");
                    addRowFieldToPivot(pivot, "ScopeName");
                    addRowFieldToPivot(pivot, "RuleName");
                    addColumnFieldToPivot(pivot, "EntryPointType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "RuleName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_20_LOCATION);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsExclusion");
                    addFilterFieldToPivot(pivot, "IsEnabled");
                    addRowFieldToPivot(pivot, "AgentType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "EntryPointType", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "ScopeName");
                    addRowFieldToPivot(pivot, "RuleName");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addDataFieldToPivot(pivot, "RuleName", DataFieldFunctions.Count, "Rules");
                    addDataFieldToPivot(pivot, "NumDetectedBTs", DataFieldFunctions.Count, "BTs");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                    sheet.Column(6).Width = 20;
                }

                #endregion

                #region Backend Discovery Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES];
                logger.Info("Backend Discovery Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backend Discovery Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BACKEND_DISCOVERY_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["ExitType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsEnabled");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "AgentType");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "RuleName");
                    addColumnFieldToPivot(pivot, "ExitType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "RuleName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Custom Exit Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES];
                logger.Info("Custom Exit Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Custom Exit Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_CUSTOM_EXIT_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["ExitType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "AgentType");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "RuleName");
                    addColumnFieldToPivot(pivot, "ExitType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "RuleName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Information Point Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES];
                logger.Info("Information Point Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Point Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_INFORMATION_POINT_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;
                }

                #endregion

                #region Agent Configuration Properties

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES];
                logger.Info("Agent Configuration Properties Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Agent Configuration Properties Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_AGENT_CONFIGURATION_PROPERTIES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["PropertyName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["PropertyName"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["StringValue"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["IntegerValue"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["BooleanValue"].Position + 1).Width = 15;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsDefault");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "AgentType");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "PropertyName");
                    addColumnFieldToPivot(pivot, "PropertyType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "PropertyName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Data Collectors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS];
                logger.Info("Method Invocation Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Method Invocation Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_METHOD_INVOCATION_DATA_COLLECTORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["CollectorName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["MatchClass"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["MatchMethod"].Position + 1).Width = 20;
                }

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS];
                logger.Info("HTTP Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("HTTP Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_HTTP_DATA_COLLECTORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["CollectorName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["DataGathererName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["DataGathererValue"].Position + 1).Width = 20;
                }

                #endregion

                #region Tier Settings

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_TIER_SETTINGS];
                logger.Info("Tier Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tier Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_TIER_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["TierType"].Position + 1).Width = 20;
                }

                #endregion

                #region Detected Business Transaction and Assigned Data Collectors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS];
                logger.Info("Detected Business Transaction and Assigned Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Detected Business Transaction and Assigned Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AssignedMIDCs"].Position + 1).Width = 20;
                }

                #endregion

                #region Agent Call Graph Settings

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS];
                logger.Info("Agent Call Graph Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Agent Call Graph Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_AGENT_CALL_GRAPH_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;

                }

                #endregion

                #region Health Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HEALTH_RULES];
                logger.Info("Health Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Health Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_HEALTH_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["RuleType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AffectsEntityType"].Position + 1).Width = 15;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 1, 1], range, REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "IsDefault");
                    addFilterFieldToPivot(pivot, "IsEnabled");
                    addFilterFieldToPivot(pivot, "IsAlwaysEnabled");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "RuleName");
                    addColumnFieldToPivot(pivot, "RuleType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "RuleName", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        sheet.Cells[rowNum, 2].Value = s.Tables[0].Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_CONFIGURATION_DETAILS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_CONFIGURATION_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportApplicationAndEntityMetrics(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Entity Metrics Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Entity Metrics Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Entity Metrics Report");

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Activity Flow";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_ACTIVITYFLOW);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_ACTIVITYFLOW);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Activity Flow";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_ACTIVITYFLOW);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_ACTIVITYFLOW);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Activity Flow";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_ACTIVITYFLOW);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_ACTIVITYFLOW);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Activity Flow";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_ACTIVITYFLOW);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_ACTIVITYFLOW);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Activity Flow";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_ACTIVITYFLOW);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_ACTIVITYFLOW);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 3, 1);

                #endregion

                loggerConsole.Info("Fill Entity Metrics Report File");

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string metricsAllFolderPath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME);
                string activityGridAllFolderPath = Path.Combine(reportFolderPath, ACTIVITYGRID_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string applicationsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityApplication.ENTITY_FOLDER));
                string applicationsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityApplication.ENTITY_FOLDER));
                string tiersAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityTier.ENTITY_FOLDER));
                string tiersAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityTier.ENTITY_FOLDER));
                string nodesAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityNode.ENTITY_FOLDER));
                string nodesAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityNode.ENTITY_FOLDER));
                string backendsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityBackend.ENTITY_FOLDER));
                string backendsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityBackend.ENTITY_FOLDER));
                string businessTransactionsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER));
                string businessTransactionsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER));
                string serviceEndpointsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityServiceEndpoint.ENTITY_FOLDER));
                string serviceEndpointsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityServiceEndpoint.ENTITY_FOLDER));
                string errorsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityError.ENTITY_FOLDER));
                string errorsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityError.ENTITY_FOLDER));
                string informationPointsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_FULLRANGE_FILE_NAME, EntityInformationPoint.ENTITY_FOLDER));
                string informationPointsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_SUMMARY_HOURLY_FILE_NAME, EntityInformationPoint.ENTITY_FOLDER));

                string applicationsFlowmapAllFullReportFilePath = Path.Combine(activityGridAllFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityApplication.ENTITY_FOLDER));
                string tiersFlowmapAllFullReportFilePath = Path.Combine(activityGridAllFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityTier.ENTITY_FOLDER));
                string nodesFlowmapAllFullReportFilePath = Path.Combine(activityGridAllFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityNode.ENTITY_FOLDER));
                string backendsFlowmapAllFullReportFilePath = Path.Combine(activityGridAllFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityBackend.ENTITY_FOLDER));
                string businessTransactionsFlowmapAllFullReportFilePath = Path.Combine(activityGridAllFolderPath, String.Format(CONVERT_ALL_ACTIVITY_GRIDS_FILE_NAME, EntityBusinessTransaction.ENTITY_FOLDER));

                ExcelRangeBase range = null;
                ExcelTable table = null;

                #endregion

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL];
                readCSVFileIntoExcelRange(applicationsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Applications (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY];
                readCSVFileIntoExcelRange(applicationsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("Applications Flowmap");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_ACTIVITYFLOW];
                readCSVFileIntoExcelRange(applicationsFlowmapAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                #endregion

                #region Tiers

                loggerConsole.Info("List of Tiers (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL];
                readCSVFileIntoExcelRange(tiersAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Tiers (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY];
                readCSVFileIntoExcelRange(tiersAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("Tiers Flowmap");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_ACTIVITYFLOW];
                readCSVFileIntoExcelRange(tiersFlowmapAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                #endregion

                #region Nodes

                loggerConsole.Info("List of Nodes (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL];
                readCSVFileIntoExcelRange(nodesAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Nodes (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY];
                readCSVFileIntoExcelRange(nodesAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("Nodes Flowmap");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_ACTIVITYFLOW];
                readCSVFileIntoExcelRange(nodesFlowmapAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                #endregion

                #region Backends

                loggerConsole.Info("List of Backends (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL];
                readCSVFileIntoExcelRange(backendsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Backends (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY];
                readCSVFileIntoExcelRange(backendsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("Backends Flowmap");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_ACTIVITYFLOW];
                readCSVFileIntoExcelRange(backendsFlowmapAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                #endregion

                #region Business Transactions

                loggerConsole.Info("List of Business Transactions (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL];
                readCSVFileIntoExcelRange(businessTransactionsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Business Transactions (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY];
                readCSVFileIntoExcelRange(businessTransactionsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("Business Transactions Flowmap");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_ACTIVITYFLOW];
                readCSVFileIntoExcelRange(businessTransactionsFlowmapAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                #endregion

                #region Service Endpoints

                loggerConsole.Info("List of Service Endpoints (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL];
                readCSVFileIntoExcelRange(serviceEndpointsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Service Endpoints (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY];
                readCSVFileIntoExcelRange(serviceEndpointsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Errors

                loggerConsole.Info("List of Errors (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL];
                readCSVFileIntoExcelRange(errorsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                loggerConsole.Info("List of Errors (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY];
                readCSVFileIntoExcelRange(errorsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1);

                #endregion

                #region Information Points

                loggerConsole.Info("List of Information Points (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL];
                readCSVFileIntoExcelRange(informationPointsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Information Points (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY];
                readCSVFileIntoExcelRange(informationPointsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Entity Metrics Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL];
                logger.Info("Applications Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityApplication.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityApplication.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "ApplicationName", REPORT_METRICS_ALL_ENTITIES_GRAPH_APPLICATIONS_FULL);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY];
                logger.Info("Applications Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityApplication.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityApplication.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "ApplicationName", REPORT_METRICS_ALL_ENTITIES_GRAPH_APPLICATIONS_HOURLY);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_APPLICATIONS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addDataFieldToPivot(pivot, "ART", DataFieldFunctions.Average, "ART");
                    addDataFieldToPivot(pivot, "TimeTotal", DataFieldFunctions.Sum, "Time");
                    addDataFieldToPivot(pivot, "Calls", DataFieldFunctions.Sum, "Calls");
                    addDataFieldToPivot(pivot, "CPM", DataFieldFunctions.Average, "CPM");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");
                    addDataFieldToPivot(pivot, "Exceptions", DataFieldFunctions.Sum, "Exceptions");
                    addDataFieldToPivot(pivot, "EXCPM", DataFieldFunctions.Average, "EXCPM");
                    addDataFieldToPivot(pivot, "HttpErrors", DataFieldFunctions.Sum, "HttpErrors");
                    addDataFieldToPivot(pivot, "HTTPEPM", DataFieldFunctions.Average, "HTTPEPM");
                    addDataFieldToPivot(pivot, "ErrorsPercentage", DataFieldFunctions.Average, "Errors %");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_ACTIVITYFLOW];
                logger.Info("Applications Flowmap ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Flowmap ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_ACTIVITYFLOW);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfActivityFlowRowTableInMetricReport(EntityApplication.ENTITY_TYPE, sheet, table);
                }

                #endregion

                #region Tiers

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL];
                logger.Info("Tiers Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tiers Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityTier.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityTier.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "TierName", REPORT_METRICS_ALL_ENTITIES_GRAPH_TIERS_FULL);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY];
                logger.Info("Tiers Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tiers Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityTier.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityTier.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "TierName", REPORT_METRICS_ALL_ENTITIES_GRAPH_TIERS_HOURLY);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_TIERS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "AgentType");
                    addRowFieldToPivot(pivot, "TierName");
                    addDataFieldToPivot(pivot, "ART", DataFieldFunctions.Average, "ART");
                    addDataFieldToPivot(pivot, "TimeTotal", DataFieldFunctions.Sum, "Time");
                    addDataFieldToPivot(pivot, "Calls", DataFieldFunctions.Sum, "Calls");
                    addDataFieldToPivot(pivot, "CPM", DataFieldFunctions.Average, "CPM");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");
                    addDataFieldToPivot(pivot, "Exceptions", DataFieldFunctions.Sum, "Exceptions");
                    addDataFieldToPivot(pivot, "EXCPM", DataFieldFunctions.Average, "EXCPM");
                    addDataFieldToPivot(pivot, "HttpErrors", DataFieldFunctions.Sum, "HttpErrors");
                    addDataFieldToPivot(pivot, "HTTPEPM", DataFieldFunctions.Average, "HTTPEPM");
                    addDataFieldToPivot(pivot, "ErrorsPercentage", DataFieldFunctions.Average, "Errors %");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_ACTIVITYFLOW];
                logger.Info("Tiers Flowmap ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tiers Flowmap ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_ACTIVITYFLOW);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfActivityFlowRowTableInMetricReport(EntityTier.ENTITY_TYPE, sheet, table);
                }

                #endregion

                #region Nodes

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL];
                logger.Info("Nodes Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Nodes Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityNode.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityNode.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "NodeName", REPORT_METRICS_ALL_ENTITIES_GRAPH_NODES_FULL);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY];
                logger.Info("Nodes Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Nodes Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityNode.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityNode.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "NodeName", REPORT_METRICS_ALL_ENTITIES_GRAPH_NODES_HOURLY);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_NODES);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "AgentType");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "NodeName");
                    addDataFieldToPivot(pivot, "ART", DataFieldFunctions.Average, "ART");
                    addDataFieldToPivot(pivot, "TimeTotal", DataFieldFunctions.Sum, "Time");
                    addDataFieldToPivot(pivot, "Calls", DataFieldFunctions.Sum, "Calls");
                    addDataFieldToPivot(pivot, "CPM", DataFieldFunctions.Average, "CPM");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");
                    addDataFieldToPivot(pivot, "Exceptions", DataFieldFunctions.Sum, "Exceptions");
                    addDataFieldToPivot(pivot, "EXCPM", DataFieldFunctions.Average, "EXCPM");
                    addDataFieldToPivot(pivot, "HttpErrors", DataFieldFunctions.Sum, "HttpErrors");
                    addDataFieldToPivot(pivot, "HTTPEPM", DataFieldFunctions.Average, "HTTPEPM");
                    addDataFieldToPivot(pivot, "ErrorsPercentage", DataFieldFunctions.Average, "Errors %");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_ACTIVITYFLOW];
                logger.Info("Nodes Flowmap ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Nodes Flowmap ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_ACTIVITYFLOW);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfActivityFlowRowTableInMetricReport(EntityNode.ENTITY_TYPE, sheet, table);
                }

                #endregion

                #region Backends

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL];
                logger.Info("Backends Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backends Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityBackend.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityBackend.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "BackendName", REPORT_METRICS_ALL_ENTITIES_GRAPH_BACKENDS_FULL);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY];
                logger.Info("Backends Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backends Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityBackend.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityBackend.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "BackendName", REPORT_METRICS_ALL_ENTITIES_GRAPH_BACKENDS_HOURLY);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_BACKENDS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "BackendType");
                    addRowFieldToPivot(pivot, "BackendName");
                    addDataFieldToPivot(pivot, "ART", DataFieldFunctions.Average, "ART");
                    addDataFieldToPivot(pivot, "TimeTotal", DataFieldFunctions.Sum, "Time");
                    addDataFieldToPivot(pivot, "Calls", DataFieldFunctions.Sum, "Calls");
                    addDataFieldToPivot(pivot, "CPM", DataFieldFunctions.Average, "CPM");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");
                    addDataFieldToPivot(pivot, "ErrorsPercentage", DataFieldFunctions.Average, "Errors %");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_ACTIVITYFLOW];
                logger.Info("Backends Flowmap ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backends Flowmap ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_ACTIVITYFLOW);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfActivityFlowRowTableInMetricReport(EntityBackend.ENTITY_TYPE, sheet, table);
                }

                #endregion

                #region Business Transactions

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL];
                logger.Info("Business Transactions Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transactions Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityBusinessTransaction.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityBusinessTransaction.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "BTName", REPORT_METRICS_ALL_ENTITIES_GRAPH_BUSINESS_TRANSACTIONS_FULL);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY];
                logger.Info("Business Transactions Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transactions Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityBusinessTransaction.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityBusinessTransaction.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "BTName", REPORT_METRICS_ALL_ENTITIES_GRAPH_BUSINESS_TRANSACTIONS_HOURLY);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTType");
                    addRowFieldToPivot(pivot, "BTName");
                    addDataFieldToPivot(pivot, "ART", DataFieldFunctions.Average, "ART");
                    addDataFieldToPivot(pivot, "TimeTotal", DataFieldFunctions.Sum, "Time");
                    addDataFieldToPivot(pivot, "Calls", DataFieldFunctions.Sum, "Calls");
                    addDataFieldToPivot(pivot, "CPM", DataFieldFunctions.Average, "CPM");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");
                    addDataFieldToPivot(pivot, "ErrorsPercentage", DataFieldFunctions.Average, "Errors %");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_ACTIVITYFLOW];
                logger.Info("Business Transactions Flowmap ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transactions Flowmap ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_ACTIVITYFLOW);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfActivityFlowRowTableInMetricReport(EntityBusinessTransaction.ENTITY_TYPE, sheet, table);
                }

                #endregion

                #region Service Endpoints

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL];
                logger.Info("Service Endpoints Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Service Endpoints Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityServiceEndpoint.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityServiceEndpoint.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "SEPName", REPORT_METRICS_ALL_ENTITIES_GRAPH_SERVICE_ENDPOINTS_FULL);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY];
                logger.Info("Service Endpoints Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Service Endpoints Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityServiceEndpoint.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityServiceEndpoint.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "SEPName", REPORT_METRICS_ALL_ENTITIES_GRAPH_SERVICE_ENDPOINTS_HOURLY);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_SERVICE_ENDPOINTS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "SEPType");
                    addRowFieldToPivot(pivot, "SEPName");
                    addDataFieldToPivot(pivot, "ART", DataFieldFunctions.Average, "ART");
                    addDataFieldToPivot(pivot, "TimeTotal", DataFieldFunctions.Sum, "Time");
                    addDataFieldToPivot(pivot, "Calls", DataFieldFunctions.Sum, "Calls");
                    addDataFieldToPivot(pivot, "CPM", DataFieldFunctions.Average, "CPM");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");
                    addDataFieldToPivot(pivot, "ErrorsPercentage", DataFieldFunctions.Average, "Errors %");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Errors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL];
                logger.Info("Errors Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Errors Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityError.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityError.ENTITY_TYPE, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY];
                logger.Info("Errors Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Errors Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityError.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityError.ENTITY_TYPE, sheet, table);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_ERRORS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "ErrorType");
                    addRowFieldToPivot(pivot, "ErrorName");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                }

                #endregion

                #region Information Points

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL];
                logger.Info("Information Points Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Points Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityInformationPoint.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityInformationPoint.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "IPName", REPORT_METRICS_ALL_ENTITIES_GRAPH_INFORMATION_POINTS_FULL);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY];
                logger.Info("Information Points Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Points Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityInformationPoint.ENTITY_TYPE, sheet, table);
                    addConditionalFormattingToTableInMetricReport(EntityInformationPoint.ENTITY_TYPE, sheet, table);

                    addScatterChartToEntityMetricSheet(sheet, table, "IPName", REPORT_METRICS_ALL_ENTITIES_GRAPH_INFORMATION_POINTS_HOURLY);

                    sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_METRICS_ALL_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 1, 1], range, REPORT_METRICS_ALL_ENTITIES_PIVOT_INFORMATION_POINTS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasActivity");
                    addFilterFieldToPivot(pivot, "From");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "IPType");
                    addRowFieldToPivot(pivot, "IPName");
                    addDataFieldToPivot(pivot, "ART", DataFieldFunctions.Average, "ART");
                    addDataFieldToPivot(pivot, "TimeTotal", DataFieldFunctions.Sum, "Time");
                    addDataFieldToPivot(pivot, "Calls", DataFieldFunctions.Sum, "Calls");
                    addDataFieldToPivot(pivot, "CPM", DataFieldFunctions.Average, "CPM");
                    addDataFieldToPivot(pivot, "Errors", DataFieldFunctions.Sum, "Errors");
                    addDataFieldToPivot(pivot, "EPM", DataFieldFunctions.Average, "EPM");
                    addDataFieldToPivot(pivot, "ErrorsPercentage", DataFieldFunctions.Average, "Errors %");

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count == 1)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                    else if (s.Tables.Count > 0)
                    {
                        sheet.Cells[rowNum, 2].Value = String.Format("{0} tables", s.Tables.Count);
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_METRICS_ALL_ENTITIES_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportApplicationAndEntityMetricGraphs(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            List<MetricExtractMapping> entityMetricExtractMappingList = getMetricsExtractMappingList(programOptions, jobConfiguration);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target step variables

                        // Major folders
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string metricsIndexFolderPath = Path.Combine(applicationIndexFolderPath, METRICS_FOLDER_NAME);
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);

                        // Report files from previous steps
                        string applicationsIndexFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        int numEntitiesTotal = 0;

                        #endregion

                        loggerConsole.Info("Prepare Entity Metrics Graphs Report with {0} metrics", entityMetricExtractMappingList.Count);

                        Parallel.Invoke(
                            () =>
                            {
                                #region Application

                                List<EntityApplication> applicationsList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationsIndexFilePath, new ApplicationEntityReportMap());
                                if (applicationsList != null && applicationsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Applications ({0} entities, {1} timeranges)", applicationsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityApplication.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, applicationsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, EntityApplication.ENTITY_TYPE);
                                    fillTransactionalScatterPlotsForEntityType(excelReport, entityMetricExtractMappingList, applicationsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, EntityApplication.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(applicationsList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, applicationsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Tier

                                List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersIndexFilePath, new TierEntityReportMap());
                                if (tiersList != null && tiersList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Tiers ({0} entities, {1} timeranges)", tiersList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityTier.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityTier.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, tiersList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, EntityTier.ENTITY_TYPE);
                                    fillTransactionalScatterPlotsForEntityType(excelReport, entityMetricExtractMappingList, tiersList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, EntityTier.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(tiersList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, tiersList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Nodes

                                List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesIndexFilePath, new NodeEntityReportMap());
                                if (nodesList != null && nodesList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Nodes ({0} entities, {1} timeranges)", nodesList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityNode.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityNode.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, nodesList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, EntityNode.ENTITY_TYPE);
                                    fillTransactionalScatterPlotsForEntityType(excelReport, entityMetricExtractMappingList, nodesList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, EntityNode.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(nodesList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, nodesList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Backends

                                List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsIndexFilePath, new BackendEntityReportMap());
                                if (backendsList != null && backendsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Backends ({0} entities, {1} timeranges)", backendsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityBackend.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, backendsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, EntityBackend.ENTITY_TYPE);
                                    fillTransactionalScatterPlotsForEntityType(excelReport, entityMetricExtractMappingList, backendsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, EntityBackend.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(backendsList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, backendsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Business Transactions

                                List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsIndexFilePath, new BusinessTransactionEntityReportMap());
                                if (businessTransactionsList != null && businessTransactionsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Business Transactions ({0} entities, {1} timeranges)", businessTransactionsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityBusinessTransaction.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, businessTransactionsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, EntityBusinessTransaction.ENTITY_TYPE);
                                    fillTransactionalScatterPlotsForEntityType(excelReport, entityMetricExtractMappingList, businessTransactionsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, EntityBusinessTransaction.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(businessTransactionsList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, businessTransactionsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Service Endpoints

                                List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsIndexFilePath, new ServiceEndpointEntityReportMap());
                                if (serviceEndpointsList != null && serviceEndpointsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Service Endpoints ({0} entities, {1} timeranges)", serviceEndpointsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityServiceEndpoint.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, serviceEndpointsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, EntityServiceEndpoint.ENTITY_TYPE);
                                    fillTransactionalScatterPlotsForEntityType(excelReport, entityMetricExtractMappingList, serviceEndpointsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, EntityServiceEndpoint.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(serviceEndpointsList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, serviceEndpointsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Errors

                                List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsIndexFilePath, new ErrorEntityReportMap());
                                if (errorsList != null && errorsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Errors ({0} entities, {1} timeranges)", errorsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityError.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityError.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, errorsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityError.ENTITY_FOLDER, EntityError.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(errorsList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, errorsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Information Points

                                List<EntityInformationPoint> informationPointsList = FileIOHelper.readListFromCSVFile<EntityInformationPoint>(informationPointsIndexFilePath, new InformationPointEntityReportMap());
                                if (informationPointsList != null && informationPointsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Metric Graphs Metrics for Information Points ({0} entities, {1} timeranges)", informationPointsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);
                                    List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == EntityInformationPoint.ENTITY_TYPE && m.Graph.Length > 0).ToList();
                                    fillMetricValueTablesForEntityType(excelReport, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER);

                                    fillMetricGraphsForEntityType(excelReport, entityMetricExtractMappingList, informationPointsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER, EntityInformationPoint.ENTITY_TYPE);
                                    fillTransactionalScatterPlotsForEntityType(excelReport, entityMetricExtractMappingList, informationPointsList.OfType<EntityBase>().ToList(), jobConfiguration, jobTarget, metricsIndexFolderPath, EntityInformationPoint.ENTITY_FOLDER, EntityInformationPoint.ENTITY_TYPE);

                                    string reportFilePath = getMetricGraphsReportFilePath(informationPointsList[0], jobConfiguration, jobTarget, reportFolderPath);
                                    finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);

                                    Interlocked.Add(ref numEntitiesTotal, informationPointsList.Count);
                                }

                                #endregion
                            }
                        );

                        stepTimingTarget.NumEntities = numEntitiesTotal;
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportEventsAndHealthRuleViolations(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Events and Health Rule Violations Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Events and Health Rule Violations Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Events and Health Rule Violations Report");

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_EVENTS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Duration";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS_TIMELINE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_EVENTS_TIMELINE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 7, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                #endregion

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string eventsAllFolderPath = Path.Combine(reportFolderPath, EVENTS_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string applicationEventsSummaryAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_APPLICATION_EVENTS_FILE_NAME);
                string healthRuleViolationEventsAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                string eventsAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_EVENTS_FILE_NAME);

                ExcelRangeBase range = null;
                ExcelTable table = null;

                #endregion

                loggerConsole.Info("Fill Events and Health Rule Violations Report File");

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS];
                readCSVFileIntoExcelRange(applicationEventsSummaryAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Events

                loggerConsole.Info("List of Events");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS];
                readCSVFileIntoExcelRange(eventsAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Health Rule Violation Events

                loggerConsole.Info("List of Health Rule Violation Events");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS];
                readCSVFileIntoExcelRange(healthRuleViolationEventsAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Events and Health Rule Violations Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityApplication.ENTITY_FOLDER, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEvents"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEvents"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEventsInfo"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEventsInfo"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEventsWarning"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEventsWarning"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEventsError"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEventsError"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHRViolations"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHRViolations"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHRViolationsWarning"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHRViolationsWarning"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHRViolationsCritical"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHRViolationsCritical"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Events

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS];
                logger.Info("Events Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Events Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_EVENTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EventID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Summary"].Position + 1).Width = 35;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SubType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityName"].Position + 1).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "Type");
                    addRowFieldToPivot(pivot, "SubType");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addRowFieldToPivot(pivot, "NodeName");
                    addColumnFieldToPivot(pivot, "Severity", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "EventID", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                    sheet.Column(6).Width = 20;
                    sheet.Column(7).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS_TIMELINE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 3, 1], range, REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TIMELINE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "ApplicationName");
                    addFilterFieldToPivot(pivot, "TierName");
                    addFilterFieldToPivot(pivot, "BTName");
                    addFilterFieldToPivot(pivot, "TriggeredEntityName");
                    addFilterFieldToPivot(pivot, "ApplicationName");
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "Severity", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "Type", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "SubType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "EventID", DataFieldFunctions.Count);

                    chart = sheet.Drawings.AddChart(REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TIMELINE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                }

                #endregion

                #region Health Rule Violation Events

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS];
                logger.Info("Health Rule Events Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Health Rule Events Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_HEALTH_RULE_VIOLATION_EVENTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EventID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["HealthRuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EntityName"].Position + 1).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "Status");
                    addRowFieldToPivot(pivot, "HealthRuleName");
                    addRowFieldToPivot(pivot, "EntityType");
                    addRowFieldToPivot(pivot, "EntityName");
                    addColumnFieldToPivot(pivot, "Severity", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "EventID", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                    sheet.Column(6).Width = 20;
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_DETECTED_EVENTS_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportSnapshots(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Snapshots Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Snapshots Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                var timelineStyle = sheet.Workbook.Styles.CreateNamedStyle("TimelineStyle");
                timelineStyle.Style.Font.Name = "Consolas";
                timelineStyle.Style.Font.Size = 8;

                fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Snapshots Report");

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivot

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_APPLICATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SNAPSHOTS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Timeline";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TIMELINE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TIMELINE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 6, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SEGMENTS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Timeline";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS_TIMELINE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SEGMENTS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SEGMENTS_TIMELINE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 6, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_EXIT_CALLS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Timeline";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TIMELINE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TIMELINE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 7, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Timeline";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TIMELINE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TIMELINE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Timeline";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TIMELINE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TIMELINE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 4, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Timeline";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TIMELINE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TIMELINE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 5, 1);

                #endregion

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string snapshotsAllFolderPath = Path.Combine(reportFolderPath, SNAPSHOTS_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string snapshotsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                string segmentsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                string callExitsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                string serviceEndpointCallsAllReporFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                string detectedErrorsAllReporFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                string businessDataAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                string applicationSnapshotsSummaryAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                ExcelRangeBase range = null;
                ExcelTable table = null;

                #endregion

                loggerConsole.Info("Fill Snapshots Report File");

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS];
                readCSVFileIntoExcelRange(applicationSnapshotsSummaryAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Snapshots

                loggerConsole.Info("List of Snapshots");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS];
                readCSVFileIntoExcelRange(snapshotsAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Segments

                loggerConsole.Info("List of Segments");
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS];
                readCSVFileIntoExcelRange(segmentsAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Exit Calls

                loggerConsole.Info("List of Exit Calls");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS];
                readCSVFileIntoExcelRange(callExitsAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Service Endpoint Calls

                loggerConsole.Info("List of Service Endpoint Calls");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS];
                readCSVFileIntoExcelRange(serviceEndpointCallsAllReporFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Detected Errors

                loggerConsole.Info("List of Detected Errors");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS];
                readCSVFileIntoExcelRange(detectedErrorsAllReporFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Data

                loggerConsole.Info("List of Business Data");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA];
                readCSVFileIntoExcelRange(businessDataAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Snapshots Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_APPLICATIONS];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityApplication.ENTITY_FOLDER, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshots"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshots"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsNormal"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsNormal"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsVerySlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsVerySlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsStall"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsStall"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsSlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsSlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsError"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsError"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Snapshots

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS];
                logger.Info("Snapshots Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Snapshots Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_SNAPSHOTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["UserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["DurationRange"].Position + 1).Width = 15;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["UserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["UserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallGraphs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallGraphs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasErrors");
                    addFilterFieldToPivot(pivot, "CallGraphType");
                    addFilterFieldToPivot(pivot, "DurationRange", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addColumnFieldToPivot(pivot, "UserExperience", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "RequestID", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_TIMELINE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 4, 1], range, REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_TIMELINE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "Controller", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ApplicationName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "TierName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "HasErrors");
                    addFilterFieldToPivot(pivot, "CallGraphType");
                    addFilterFieldToPivot(pivot, "DurationRange", eSortType.Ascending);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "UserExperience", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "Duration", DataFieldFunctions.Average);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_TIMELINE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                }

                #endregion

                #region Segments

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS];
                logger.Info("Segments Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Segments Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_SEGMENTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["UserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SnapshotUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["FromSegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["FromTierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    // Make timeline fixed width
                    ExcelRangeBase rangeTimeline = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Timeline"].Position + 1, sheet.Dimension.Rows, table.Columns["Timeline"].Position + 1];
                    rangeTimeline.StyleName = "TimelineStyle";

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["UserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["UserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SnapshotUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SnapshotUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_SNAPSHOTS_PIVOT_SEGMENTS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "HasErrors");
                    addFilterFieldToPivot(pivot, "CallGraphType");
                    addFilterFieldToPivot(pivot, "DurationRange", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addColumnFieldToPivot(pivot, "UserExperience", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SegmentID", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SEGMENTS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS_TIMELINE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 4, 1], range, REPORT_SNAPSHOTS_PIVOT_SEGMENTS_TIMELINE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "Controller", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ApplicationName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "TierName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "HasErrors");
                    addFilterFieldToPivot(pivot, "CallGraphType");
                    addFilterFieldToPivot(pivot, "DurationRange", eSortType.Ascending);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "UserExperience", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "Duration", DataFieldFunctions.Average);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SEGMENTS_TIMELINE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                }

                #endregion

                #region Exit Calls

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS];
                logger.Info("Exit Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Exit Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_EXIT_CALLS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SnapshotUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["ToEntityName"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["ExitType"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Detail"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Method"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ToSegmentID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SegmentUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SegmentUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SnapshotUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SnapshotUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 1, 1], range, REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "ToEntityType");
                    addFilterFieldToPivot(pivot, "ToEntityName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "RequestID");
                    addFilterFieldToPivot(pivot, "DurationRange", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "ExitType");
                    addRowFieldToPivot(pivot, "Detail");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addDataFieldToPivot(pivot, "RequestID", DataFieldFunctions.Count, "Calls");
                    addDataFieldToPivot(pivot, "Duration", DataFieldFunctions.Average, "Average");

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                    sheet.Column(6).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_TIMELINE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 5, 1], range, REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_TIMELINE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "Controller", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ApplicationName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "TierName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ToEntityType");
                    addFilterFieldToPivot(pivot, "ToEntityName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "DurationRange", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "Detail", eSortType.Ascending);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "ExitType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "Duration", DataFieldFunctions.Average);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_TIMELINE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                }

                #endregion

                #region Service Endpoint Calls

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS];
                logger.Info("Service Endpoint Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Service Endpoint Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_SERVICE_ENDPOINT_CALLS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SnapshotUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SEPName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SegmentUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SegmentUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SnapshotUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SnapshotUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT - 2, 1], range, REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "RequestID");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addRowFieldToPivot(pivot, "SEPName");
                    addColumnFieldToPivot(pivot, "SEPType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SegmentID", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS_TIMELINE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 1, 1], range, REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS_TIMELINE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "Controller", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ApplicationName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "TierName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "SEPType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SegmentID", DataFieldFunctions.Count);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SERVICE_ENDPOINT_CALLS_TIMELINE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                }

                #endregion

                #region Detected Errors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS];
                logger.Info("Detected Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Detected Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_DETECTED_ERRORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SnapshotUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["ErrorName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ErrorMessage"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ErrorDetail"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SegmentUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SegmentUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SnapshotUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SnapshotUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT - 2, 1], range, REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "RequestID");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addRowFieldToPivot(pivot, "ErrorMessage");
                    addColumnFieldToPivot(pivot, "ErrorType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SegmentID", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_TIMELINE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1], range, REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_TIMELINE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "Controller", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ApplicationName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "TierName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ErrorName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ErrorMessage", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ErrorDetail", eSortType.Ascending);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "ErrorType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SegmentID", DataFieldFunctions.Count);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_TIMELINE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                }

                #endregion

                #region Business Data

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA];
                logger.Info("Detected Business Data ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Detected Business Data ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_BUSINESS_DATA);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SnapshotUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["DataName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["DataValue"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["DataType"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SegmentUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SegmentUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SnapshotUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SnapshotUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT - 2, 1], range, REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "RequestID");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addRowFieldToPivot(pivot, "DataName");
                    addColumnFieldToPivot(pivot, "DataType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SegmentID", DataFieldFunctions.Count);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_TIMELINE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 3, 1], range, REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_TIMELINE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "Controller", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ApplicationName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "TierName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "DataName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "DataValue", eSortType.Ascending);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "DataType", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "SegmentID", DataFieldFunctions.Count);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_SNAPSHOTS_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportSnapshotsMethodCallLines(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Snapshots Method Calls Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Snapshots Method Call Lines Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Snapshots Method Call Lines Report");

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivot

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_APPLICATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Type";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_EXEC_AVERAGE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Location";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_EXEC_AVERAGE_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[4, 1].Value = "See Timeline";
                sheet.Cells[4, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TIMELINE_EXEC_AVERAGE_PIVOT);
                sheet.Cells[4, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_EXEC_AVERAGE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 5, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_EXEC_AVERAGE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TIMELINE_EXEC_AVERAGE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 9, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 4, 1);

                #endregion

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string snapshotsAllFolderPath = Path.Combine(reportFolderPath, SNAPSHOTS_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string methodCallLinesAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                string methodCallLinesOccurrencesAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);
                string applicationSnapshotsSummaryAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                ExcelRangeBase range = null;
                ExcelTable table = null;

                #endregion

                loggerConsole.Info("Fill Snapshots Method Call Lines Report File");

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_APPLICATIONS];
                readCSVFileIntoExcelRange(applicationSnapshotsSummaryAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Method Call Lines

                loggerConsole.Info("List of Method Call Lines");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES];
                readCSVFileIntoExcelRange(methodCallLinesAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                #endregion

                #region Method Call Occurrences

                loggerConsole.Info("List of Method Call Occurrences");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES];
                readCSVFileIntoExcelRange(methodCallLinesOccurrencesAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Snapshots Method Call Lines Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_APPLICATIONS];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(EntityApplication.ENTITY_FOLDER, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshots"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshots"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsNormal"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsNormal"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsVerySlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsVerySlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsStall"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsStall"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsSlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsSlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsError"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsError"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Method Call Lines

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES];
                logger.Info("Method Call Lines Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Method Call Lines Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SnapshotUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Framework"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["FullNameIndent"].Position + 1).Width = 45;
                    sheet.Column(table.Columns["ExitCalls"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SegmentUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SegmentUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SnapshotUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SnapshotUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_EXEC_AVERAGE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_TYPE_EXEC_AVERAGE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "ElementType");
                    addFilterFieldToPivot(pivot, "NumChildren", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "NumExits", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "Depth", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ExecRange", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addRowFieldToPivot(pivot, "FullName");
                    addColumnFieldToPivot(pivot, "Type", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "Framework", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "Exec", DataFieldFunctions.Average);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_TYPE_EXEC_AVERAGE, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_EXEC_AVERAGE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 1, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_LOCATION_EXEC_AVERAGE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "ElementType");
                    addFilterFieldToPivot(pivot, "NumChildren", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "NumExits", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "Depth", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "Type");
                    addRowFieldToPivot(pivot, "Framework");
                    addRowFieldToPivot(pivot, "FullName");
                    addRowFieldToPivot(pivot, "Controller");
                    addRowFieldToPivot(pivot, "ApplicationName");
                    addRowFieldToPivot(pivot, "TierName");
                    addRowFieldToPivot(pivot, "BTName");
                    addColumnFieldToPivot(pivot, "ExecRange", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "Exec", DataFieldFunctions.Average);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_LOCATION_EXEC_AVERAGE, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                    sheet.Column(3).Width = 20;
                    sheet.Column(4).Width = 20;
                    sheet.Column(5).Width = 20;
                    sheet.Column(6).Width = 20;
                    sheet.Column(7).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TIMELINE_EXEC_AVERAGE_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 6, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_TIMELINE_EXEC_AVERAGE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "ElementType");
                    addFilterFieldToPivot(pivot, "NumChildren", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "NumExits", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "Depth", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "Class", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "Method", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "FullName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ExecRange", eSortType.Ascending);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    addColumnFieldToPivot(pivot, "Type", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "Framework", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "Exec", DataFieldFunctions.Average);

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_TIMELINE_EXEC_AVERAGE, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                }

                #endregion

                #region Method Call Occurrences

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES];
                logger.Info("Method Call Occurrences Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Method Call Occurrences Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES_OCCURRENCES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SnapshotUserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Framework"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["FullName"].Position + 1).Width = 45;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SegmentUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SegmentUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["SnapshotUserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["SnapshotUserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 1, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_TYPE);
                    setDefaultPivotTableSettings(pivot);
                    addFilterFieldToPivot(pivot, "NumChildren", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "NumExits", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "BTName", eSortType.Ascending);
                    addFilterFieldToPivot(pivot, "ExecRange", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "NumCalls", eSortType.Ascending);
                    addRowFieldToPivot(pivot, "FullName", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "Type", eSortType.Ascending);
                    addColumnFieldToPivot(pivot, "Framework", eSortType.Ascending);
                    addDataFieldToPivot(pivot, "Exec", DataFieldFunctions.Average);

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_GRAPH_TYPE, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet.Column(1).Width = 20;
                    sheet.Column(2).Width = 20;
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_SNAPSHOTS_METHOD_CALL_LINES_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportIndividualEntityDetails(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            List<MetricExtractMapping> entityMetricExtractMappingList = getMetricsExtractMappingList(programOptions, jobConfiguration);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string metricsIndexFolderPath = Path.Combine(applicationIndexFolderPath, METRICS_FOLDER_NAME);
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);
                        string eventsIndexFolderPath = Path.Combine(applicationIndexFolderPath, EVENTS_FOLDER_NAME);
                        string snapshotsIndexFolderPath = Path.Combine(applicationIndexFolderPath, SNAPSHOTS_FOLDER_NAME);

                        // Report files
                        string applicationsIndexFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsIndexFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);

                        string eventsIndexFilePath = Path.Combine(eventsIndexFolderPath, CONVERT_EVENTS_FILE_NAME);
                        string healthRuleViolationEventsIndexFilePath = Path.Combine(eventsIndexFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                        string snapshotsIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                        string segmentsIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                        string exitCallsIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                        string serviceEndpointCallsIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                        string detectedErrorsIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                        string businessDatasIndexFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);

                        string applicationsMetricsIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityApplication.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string tiersMetricsIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityTier.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string nodesMetricsIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityNode.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string backendsMetricsIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBackend.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string businessTransactionsMetricsIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityBusinessTransaction.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string serviceEndpointsMetricsIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityServiceEndpoint.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
                        string errorMetricsIndexFilePath = Path.Combine(metricsIndexFolderPath, EntityError.ENTITY_FOLDER, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);

                        int numEntitiesTotal = 0;

                        #endregion

                        #region Preload all the reports that will be filtered by the subsequent entities

                        loggerConsole.Info("Entity Details Data Preloading");

                        List<Event> eventsAllList = FileIOHelper.readListFromCSVFile<Event>(eventsIndexFilePath, new EventReportMap());
                        List<HealthRuleViolationEvent> healthRuleViolationEventsAllList = FileIOHelper.readListFromCSVFile<HealthRuleViolationEvent>(healthRuleViolationEventsIndexFilePath, new HealthRuleViolationEventReportMap());
                        List<Snapshot> snapshotsAllList = FileIOHelper.readListFromCSVFile<Snapshot>(snapshotsIndexFilePath, new SnapshotReportMap());
                        List<Segment> segmentsAllList = FileIOHelper.readListFromCSVFile<Segment>(segmentsIndexFilePath, new SegmentReportMap());
                        List<ExitCall> exitCallsAllList = FileIOHelper.readListFromCSVFile<ExitCall>(exitCallsIndexFilePath, new ExitCallReportMap());
                        List<ServiceEndpointCall> serviceEndpointCallsAllList = FileIOHelper.readListFromCSVFile<ServiceEndpointCall>(serviceEndpointCallsIndexFilePath, new ServiceEndpointCallReportMap());
                        List<DetectedError> detectedErrorsAllList = FileIOHelper.readListFromCSVFile<DetectedError>(detectedErrorsIndexFilePath, new DetectedErrorReportMap());
                        List<BusinessData> businessDataAllList = FileIOHelper.readListFromCSVFile<BusinessData>(businessDatasIndexFilePath, new BusinessDataReportMap());

                        string relativePathToReportsToRemoveFromLinks = Path.Combine(
                            getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                            getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));

                        if (snapshotsAllList != null)
                        {
                            foreach (Snapshot snapshot in snapshotsAllList)
                            {
                                snapshot.FlameGraphLink = snapshot.FlameGraphLink.Replace(relativePathToReportsToRemoveFromLinks, "..");
                            }
                        }

                        #endregion

                        Parallel.Invoke(
                            () =>
                            {
                                #region Application

                                List<EntityApplication> applicationsList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationsIndexFilePath, new ApplicationEntityReportMap());
                                List<EntityApplication> applicationMetricsList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationsMetricsIndexFilePath, new ApplicationMetricReportMap());
                                if (applicationsList != null && applicationsList.Count > 0 &&
                                    applicationMetricsList != null && applicationMetricsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Entity Details for Applications ({0} entities, {1} timeranges)", applicationsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    foreach (EntityBase entity in applicationsList)
                                    {
                                        EntityBase entityWithMetrics = applicationMetricsList.Where(e => e.EntityID == entity.EntityID).FirstOrDefault();
                                        if (entityWithMetrics != null && entityWithMetrics.HasActivity == false)
                                        {
                                            logger.Trace("No metric activity in Entity Type {0} Entity {1}, skipping Entity Details output", entity.EntityType, entity.EntityName);
                                            continue;
                                        }

                                        ExcelPackage excelEntitiesDetail = createIndividualEntityDetailReportTemplate(programOptions, jobConfiguration, jobTarget);
                                        List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entity.EntityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();
                                        fillMetricValueTablesForEntityType(excelEntitiesDetail, REPORT_ENTITY_DETAILS_SHEET_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, entity.FolderName);

                                        fillIndividualEntityMetricReportForEntity(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            excelEntitiesDetail,
                                            entity,
                                            entityMetricExtractMappingListFiltered,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList);

                                        string reportFilePath = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
                                        finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, entity.EntityType, reportFilePath);
                                    }

                                    loggerConsole.Info("Entity Details for Applications ({0} entities)", applicationsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, applicationsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Tier

                                List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersIndexFilePath, new TierEntityReportMap());
                                List<EntityTier> tiersMetricsList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersMetricsIndexFilePath, new TierMetricReportMap());
                                if (tiersList != null && tiersList.Count > 0 &&
                                    tiersMetricsList != null && tiersMetricsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Entity Details for Tiers ({0} entities, {1} timeranges)", tiersList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    foreach (EntityBase entity in tiersList)
                                    {
                                        EntityBase entityWithMetrics = tiersMetricsList.Where(e => e.EntityID == entity.EntityID).FirstOrDefault();
                                        if (entityWithMetrics != null && entityWithMetrics.HasActivity == false)
                                        {
                                            logger.Trace("No metric activity in Entity Type {0} Entity {1}, skipping Entity Details output", entity.EntityType, entity.EntityName);
                                            continue;
                                        }

                                        ExcelPackage excelEntitiesDetail = createIndividualEntityDetailReportTemplate(programOptions, jobConfiguration, jobTarget);
                                        List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entity.EntityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();
                                        fillMetricValueTablesForEntityType(excelEntitiesDetail, REPORT_ENTITY_DETAILS_SHEET_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, entity.FolderName);

                                        fillIndividualEntityMetricReportForEntity(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            excelEntitiesDetail,
                                            entity,
                                            entityMetricExtractMappingListFiltered,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList);

                                        string reportFilePath = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
                                        finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, entity.EntityType, reportFilePath);
                                    }

                                    loggerConsole.Info("Entity Details for Tiers ({0} entities)", tiersList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, tiersList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Nodes

                                List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesIndexFilePath, new NodeEntityReportMap());
                                List<EntityNode> nodesMetricsList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesMetricsIndexFilePath, new NodeMetricReportMap());
                                if (nodesList != null && nodesList.Count > 0)
                                {
                                    loggerConsole.Info("Report Entity Details for Nodes ({0} entities, {1} timeranges)", nodesList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    foreach (EntityBase entity in nodesList)
                                    {
                                        EntityBase entityWithMetrics = nodesMetricsList.Where(e => e.EntityID == entity.EntityID).FirstOrDefault();
                                        if (entityWithMetrics != null && entityWithMetrics.HasActivity == false)
                                        {
                                            logger.Trace("No metric activity in Entity Type {0} Entity {1}, skipping Entity Details output", entity.EntityType, entity.EntityName);
                                            continue;
                                        }

                                        ExcelPackage excelEntitiesDetail = createIndividualEntityDetailReportTemplate(programOptions, jobConfiguration, jobTarget);
                                        List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entity.EntityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();
                                        fillMetricValueTablesForEntityType(excelEntitiesDetail, REPORT_ENTITY_DETAILS_SHEET_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, entity.FolderName);

                                        fillIndividualEntityMetricReportForEntity(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            excelEntitiesDetail,
                                            entity,
                                            entityMetricExtractMappingListFiltered,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList);

                                        string reportFilePath = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
                                        finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, entity.EntityType, reportFilePath);
                                    }

                                    loggerConsole.Info("Entity Details for Nodes ({0} entities)", nodesList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, nodesList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Backends

                                List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsIndexFilePath, new BackendEntityReportMap());
                                List<EntityBackend> backendsMetricsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsMetricsIndexFilePath, new BackendMetricReportMap());
                                if (backendsList != null && backendsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Entity Details for Backends ({0} entities, {1} timeranges)", backendsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    foreach (EntityBase entity in backendsList)
                                    {
                                        EntityBase entityWithMetrics = backendsMetricsList.Where(e => e.EntityID == entity.EntityID).FirstOrDefault();
                                        if (entityWithMetrics != null && entityWithMetrics.HasActivity == false)
                                        {
                                            logger.Trace("No metric activity in Entity Type {0} Entity {1}, skipping Entity Details output", entity.EntityType, entity.EntityName);
                                            continue;
                                        }

                                        ExcelPackage excelEntitiesDetail = createIndividualEntityDetailReportTemplate(programOptions, jobConfiguration, jobTarget);
                                        List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entity.EntityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();
                                        fillMetricValueTablesForEntityType(excelEntitiesDetail, REPORT_ENTITY_DETAILS_SHEET_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, entity.FolderName);

                                        fillIndividualEntityMetricReportForEntity(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            excelEntitiesDetail,
                                            entity,
                                            entityMetricExtractMappingListFiltered,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList);

                                        string reportFilePath = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
                                        finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, entity.EntityType, reportFilePath);
                                    }

                                    loggerConsole.Info("Entity Details for Backends ({0} entities)", backendsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, backendsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Business Transactions

                                List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsIndexFilePath, new BusinessTransactionEntityReportMap());
                                List<EntityBusinessTransaction> businessTransactionsMetricsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsMetricsIndexFilePath, new BusinessTransactionMetricReportMap());
                                if (businessTransactionsList != null && businessTransactionsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Entity Details for Business Transactions ({0} entities, {1} timeranges)", businessTransactionsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    foreach (EntityBase entity in businessTransactionsList)
                                    {
                                        EntityBase entityWithMetrics = businessTransactionsMetricsList.Where(e => e.EntityID == entity.EntityID).FirstOrDefault();
                                        if (entityWithMetrics != null && entityWithMetrics.HasActivity == false)
                                        {
                                            logger.Trace("No metric activity in Entity Type {0} Entity {1}, skipping Entity Details output", entity.EntityType, entity.EntityName);
                                            continue;
                                        }

                                        ExcelPackage excelEntitiesDetail = createIndividualEntityDetailReportTemplate(programOptions, jobConfiguration, jobTarget);
                                        List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entity.EntityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();
                                        fillMetricValueTablesForEntityType(excelEntitiesDetail, REPORT_ENTITY_DETAILS_SHEET_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, entity.FolderName);

                                        fillIndividualEntityMetricReportForEntity(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            excelEntitiesDetail,
                                            entity,
                                            entityMetricExtractMappingListFiltered,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList);

                                        string reportFilePath = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
                                        finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, entity.EntityType, reportFilePath);
                                    }

                                    loggerConsole.Info("Entity Details for Business Transactions ({0} entities)", businessTransactionsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, businessTransactionsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Service Endpoints

                                List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsIndexFilePath, new ServiceEndpointEntityReportMap());
                                List<EntityServiceEndpoint> serviceEndpointsMetricsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsMetricsIndexFilePath, new ServiceEndpointMetricReportMap());
                                if (serviceEndpointsList != null && serviceEndpointsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Entity Details for Service Endpoints ({0} entities, {1} timeranges)", serviceEndpointsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    foreach (EntityBase entity in serviceEndpointsList)
                                    {
                                        EntityBase entityWithMetrics = serviceEndpointsMetricsList.Where(e => e.EntityID == entity.EntityID).FirstOrDefault();
                                        if (entityWithMetrics != null && entityWithMetrics.HasActivity == false)
                                        {
                                            logger.Trace("No metric activity in Entity Type {0} Entity {1}, skipping Entity Details output", entity.EntityType, entity.EntityName);
                                            continue;
                                        }

                                        ExcelPackage excelEntitiesDetail = createIndividualEntityDetailReportTemplate(programOptions, jobConfiguration, jobTarget);
                                        List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entity.EntityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();
                                        fillMetricValueTablesForEntityType(excelEntitiesDetail, REPORT_ENTITY_DETAILS_SHEET_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, entity.FolderName);

                                        fillIndividualEntityMetricReportForEntity(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            excelEntitiesDetail,
                                            entity,
                                            entityMetricExtractMappingListFiltered,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList);

                                        string reportFilePath = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
                                        finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, entity.EntityType, reportFilePath);
                                    }

                                    loggerConsole.Info("Entity Details for Service Endpoints ({0} entities)", serviceEndpointsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, serviceEndpointsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Errors

                                List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsIndexFilePath, new ErrorEntityReportMap());
                                List<EntityError> errorsMetricsList = FileIOHelper.readListFromCSVFile<EntityError>(errorMetricsIndexFilePath, new ErrorMetricReportMap());
                                if (errorsList != null && errorsList.Count > 0)
                                {
                                    loggerConsole.Info("Report Entity Details for Errors ({0} entities, {1} timeranges)", errorsList.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                                    foreach (EntityBase entity in errorsList)
                                    {
                                        EntityBase entityWithMetrics = errorsMetricsList.Where(e => e.EntityID == entity.EntityID).FirstOrDefault();
                                        if (entityWithMetrics != null && entityWithMetrics.HasActivity == false)
                                        {
                                            logger.Trace("No metric activity in Entity Type {0} Entity {1}, skipping Entity Details output", entity.EntityType, entity.EntityName);
                                            continue;
                                        }

                                        ExcelPackage excelEntitiesDetail = createIndividualEntityDetailReportTemplate(programOptions, jobConfiguration, jobTarget);
                                        List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entity.EntityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();
                                        fillMetricValueTablesForEntityType(excelEntitiesDetail, REPORT_ENTITY_DETAILS_SHEET_METRICS, entityMetricExtractMappingListFiltered, metricsIndexFolderPath, entity.FolderName);

                                        fillIndividualEntityMetricReportForEntity(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            excelEntitiesDetail,
                                            entity,
                                            entityMetricExtractMappingListFiltered,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList);

                                        string reportFilePath = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
                                        finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, entity.EntityType, reportFilePath);
                                    }

                                    loggerConsole.Info("Entity Details for Errors ({0} entities)", errorsList.Count);

                                    Interlocked.Add(ref numEntitiesTotal, errorsList.Count);
                                }

                                #endregion
                            }
                        );
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportFlameGraphs(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Major folders
                        string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

                        // Various folders
                        string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);
                        string snapshotsIndexFolderPath = Path.Combine(applicationIndexFolderPath, SNAPSHOTS_FOLDER_NAME);

                        string controllerReportFolderPath = Path.Combine(reportFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationReportFolderPath = Path.Combine(controllerReportFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string snapshotsReportFolderPath = Path.Combine(applicationReportFolderPath, SNAPSHOTS_FOLDER_NAME);

                        // Report files
                        string applicationReportFilePath = Path.Combine(applicationIndexFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesReportFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesIndexFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string methodCallLinesToFrameworkTypeMappingFilePath = Path.Combine(programOptions.ProgramLocationFolderPath, METHOD_CALL_LINES_TO_FRAMEWORK_TYPE_MAPPING_FILE_NAME);
                        string snapshotsFilePath = Path.Combine(snapshotsIndexFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);

                        string flameGraphTemplateFilePath = Path.Combine(programOptions.ProgramLocationFolderPath, FLAME_GRAPH_TEMPLATE_FILE_NAME);
                        string flameGraphTemplateString = FileIOHelper.readFileFromPath(flameGraphTemplateFilePath);

                        #endregion

                        #region Application

                        // Load and bucketize the framework mappings
                        Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary = populateMethodCallMappingDictionary(methodCallLinesToFrameworkTypeMappingFilePath);

                        List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());

                        if (applicationList != null && applicationList.Count > 0)
                        {
                            loggerConsole.Info("Flame Graphs for Application");

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + 1;

                            EntityApplication application = applicationList[0];

                            string applicationFoldedStacksFilePath = Path.Combine(
                                snapshotsIndexFolderPath,
                                CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                            if (File.Exists(applicationFoldedStacksFilePath) == true)
                            {
                                createFlameGraph(
                                    applicationFoldedStacksFilePath,
                                    getFlameGraphReportFilePath(applicationList[0], jobConfiguration, jobTarget, reportFolderPath),
                                    String.Format("{0}/{1} ({2:G}-{3:G})", application.Controller, application.ApplicationName, jobConfiguration.Input.TimeRange.From.ToLocalTime(), jobConfiguration.Input.TimeRange.To.ToLocalTime()),
                                    flameGraphTemplateString,
                                    methodCallLineClassToFrameworkTypeMappingDictionary,
                                    true);
                            }

                        }

                        #endregion

                        #region Tier

                        List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersReportFilePath, new TierEntityReportMap());

                        if (tiersList != null)
                        {
                            loggerConsole.Info("Flame Graphs for Tiers ({0} entities)", tiersList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + tiersList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                Parallel.ForEach<EntityTier>(
                                    tiersList,
                                    tier =>
                                    {
                                        string tierFoldedStacksFilePath = Path.Combine(
                                            snapshotsIndexFolderPath,
                                            getShortenedEntityNameForFileSystem(tier.TierName, tier.TierID),
                                            CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                        if (File.Exists(tierFoldedStacksFilePath) == true)
                                        {
                                            createFlameGraph(
                                                tierFoldedStacksFilePath,
                                                getFlameGraphReportFilePath(tier, jobConfiguration, jobTarget, reportFolderPath),
                                                String.Format("{0}/{1}/{2} ({3:G}-{4:G})", tier.Controller, tier.ApplicationName, tier.TierName, jobConfiguration.Input.TimeRange.From.ToLocalTime(), jobConfiguration.Input.TimeRange.To.ToLocalTime()),
                                                flameGraphTemplateString,
                                                methodCallLineClassToFrameworkTypeMappingDictionary,
                                                false);
                                        }
                                    });

                                j = tiersList.Count;
                            }
                            else
                            {
                                foreach (EntityTier tier in tiersList)
                                {
                                    string tierFoldedStacksFilePath = Path.Combine(
                                        snapshotsIndexFolderPath,
                                        getShortenedEntityNameForFileSystem(tier.TierName, tier.TierID),
                                        CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                    if (File.Exists(tierFoldedStacksFilePath) == true)
                                    {
                                        createFlameGraph(
                                            tierFoldedStacksFilePath,
                                            getFlameGraphReportFilePath(tier, jobConfiguration, jobTarget, reportFolderPath),
                                            String.Format("{0}/{1}/{2} ({3:G}-{4:G})", tier.Controller, tier.ApplicationName, tier.TierName, jobConfiguration.Input.TimeRange.From.ToLocalTime(), jobConfiguration.Input.TimeRange.To.ToLocalTime()),
                                            flameGraphTemplateString,
                                            methodCallLineClassToFrameworkTypeMappingDictionary,
                                            true);
                                    }

                                    j++;
                                    if (j % 10 == 0)
                                    {
                                        Console.Write("[{0}].", j);
                                    }
                                }
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Nodes

                        List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesReportFilePath, new NodeEntityReportMap());

                        if (nodesList != null)
                        {
                            loggerConsole.Info("Flame Graphs for Nodes ({0} entities)", nodesList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + nodesList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                Parallel.ForEach<EntityNode>(
                                    nodesList,
                                    node =>
                                    {
                                        string nodeFoldedCallStacksFilePath = Path.Combine(
                                            snapshotsIndexFolderPath,
                                            EntityNode.ENTITY_FOLDER,
                                            getShortenedEntityNameForFileSystem(node.TierName, node.TierID),
                                            getShortenedEntityNameForFileSystem(node.NodeName, node.NodeID),
                                            CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                        if (File.Exists(nodeFoldedCallStacksFilePath) == true)
                                        {
                                            createFlameGraph(
                                                nodeFoldedCallStacksFilePath,
                                                getFlameGraphReportFilePath(node, jobConfiguration, jobTarget, reportFolderPath),
                                                String.Format("{0}/{1}/{2}, Node {3} ({4:G}-{5:G})", node.Controller, node.ApplicationName, node.TierName, node.NodeName, jobConfiguration.Input.TimeRange.From.ToLocalTime(), jobConfiguration.Input.TimeRange.To.ToLocalTime()),
                                                flameGraphTemplateString,
                                                methodCallLineClassToFrameworkTypeMappingDictionary,
                                                false);
                                        }
                                    });

                                j = nodesList.Count;
                            }
                            else
                            {
                                foreach (EntityNode node in nodesList)
                                {
                                    string nodeFoldedCallStacksFilePath = Path.Combine(
                                        snapshotsIndexFolderPath,
                                        EntityNode.ENTITY_FOLDER,
                                        getShortenedEntityNameForFileSystem(node.TierName, node.TierID),
                                        getShortenedEntityNameForFileSystem(node.NodeName, node.NodeID),
                                        CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                    if (File.Exists(nodeFoldedCallStacksFilePath) == true)
                                    {
                                        createFlameGraph(
                                            nodeFoldedCallStacksFilePath,
                                            getFlameGraphReportFilePath(node, jobConfiguration, jobTarget, reportFolderPath),
                                            String.Format("{0}/{1}/{2}, Node {3} ({4:G}-{5:G})", node.Controller, node.ApplicationName, node.TierName, node.NodeName, jobConfiguration.Input.TimeRange.From.ToLocalTime(), jobConfiguration.Input.TimeRange.To.ToLocalTime()),
                                            flameGraphTemplateString,
                                            methodCallLineClassToFrameworkTypeMappingDictionary,
                                            true);
                                    }

                                    j++;
                                    if (j % 10 == 0)
                                    {
                                        Console.Write("[{0}].", j);
                                    }
                                }
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Business Transactions

                        List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsReportFilePath, new BusinessTransactionEntityReportMap());

                        if (businessTransactionsList != null)
                        {
                            loggerConsole.Info("Flame Graphs for Business Transactions ({0} entities)", businessTransactionsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + businessTransactionsList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                Parallel.ForEach<EntityBusinessTransaction>(
                                    businessTransactionsList,
                                    businessTransaction =>
                                    {
                                        string businessTransactionFoldedCallStacksFilePath = Path.Combine(
                                            snapshotsIndexFolderPath,
                                            getShortenedEntityNameForFileSystem(businessTransaction.TierName, businessTransaction.TierID),
                                            getShortenedEntityNameForFileSystem(businessTransaction.BTName, businessTransaction.BTID),
                                            CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                        if (File.Exists(businessTransactionFoldedCallStacksFilePath) == true)
                                        {
                                            createFlameGraph(
                                                businessTransactionFoldedCallStacksFilePath,
                                                getFlameGraphReportFilePath(businessTransaction, jobConfiguration, jobTarget, reportFolderPath),
                                                String.Format("{0}/{1}/{2}, BT {3} ({4:G}-{5:G})", businessTransaction.Controller, businessTransaction.ApplicationName, businessTransaction.TierName, businessTransaction.BTName, jobConfiguration.Input.TimeRange.From.ToLocalTime(), jobConfiguration.Input.TimeRange.To.ToLocalTime()),
                                                flameGraphTemplateString,
                                                methodCallLineClassToFrameworkTypeMappingDictionary,
                                                false);
                                        }
                                    });

                                j = businessTransactionsList.Count;
                            }
                            else
                            {
                                foreach (EntityBusinessTransaction businessTransaction in businessTransactionsList)
                                {
                                    string businessTransactionFoldedCallStacksFilePath = Path.Combine(
                                        snapshotsIndexFolderPath,
                                        getShortenedEntityNameForFileSystem(businessTransaction.TierName, businessTransaction.TierID),
                                        getShortenedEntityNameForFileSystem(businessTransaction.BTName, businessTransaction.BTID),
                                        CONVERT_SNAPSHOTS_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                                    if (File.Exists(businessTransactionFoldedCallStacksFilePath) == true)
                                    {
                                        createFlameGraph(
                                            businessTransactionFoldedCallStacksFilePath,
                                            getFlameGraphReportFilePath(businessTransaction, jobConfiguration, jobTarget, reportFolderPath),
                                            String.Format("{0}/{1}/{2}, BT {3} ({4:G}-{5:G})", businessTransaction.Controller, businessTransaction.ApplicationName, businessTransaction.TierName, businessTransaction.BTName, jobConfiguration.Input.TimeRange.From.ToLocalTime(), jobConfiguration.Input.TimeRange.To.ToLocalTime()),
                                            flameGraphTemplateString,
                                            methodCallLineClassToFrameworkTypeMappingDictionary,
                                            true);
                                    }

                                    j++;
                                    if (j % 10 == 0)
                                    {
                                        Console.Write("[{0}].", j);
                                    }
                                }
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Snapshots

                        List<Snapshot> snapshotsList = FileIOHelper.readListFromCSVFile<Snapshot>(snapshotsFilePath, new SnapshotReportMap());

                        if (snapshotsList != null)
                        {
                            loggerConsole.Info("Flame Graphs for Snapshots ({0} entities)", snapshotsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + snapshotsList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var snapshotsListChunks = snapshotsList.BreakListIntoChunks(SNAPSHOTS_FLAMEGRAPH_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<Snapshot>, int>(
                                    snapshotsListChunks,
                                    () => 0,
                                    (snapshotsListChunk, loop, subtotal) =>
                                    {
                                        subtotal += reportFlameGraphsSnapshots(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            snapshotsListChunk,
                                            snapshotsIndexFolderPath,
                                            flameGraphTemplateString,
                                            methodCallLineClassToFrameworkTypeMappingDictionary,
                                            false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        Interlocked.Add(ref j, finalResult);
                                        Console.Write("[{0}].", j);
                                    }
                                );
                            }
                            else
                            {
                                j = reportFlameGraphsSnapshots(
                                        programOptions,
                                        jobConfiguration,
                                        jobTarget,
                                        snapshotsList,
                                        snapshotsIndexFolderPath,
                                        flameGraphTemplateString,
                                        methodCallLineClassToFrameworkTypeMappingDictionary,
                                        true);
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        #endregion


        #region Metric extraction functions

        private static List<MetricExtractMapping> getMetricsExtractMappingList(ProgramOptions programOptions, JobConfiguration jobConfiguration)
        {

            string entityMetricsExtractMappingFilePath = Path.Combine(programOptions.ProgramLocationFolderPath, ENTITY_METRICS_EXTRACT_MAPPING_FILE_NAME);
            List<MetricExtractMapping> entityMetricExtractMappingList = FileIOHelper.readListFromCSVFile<MetricExtractMapping>(entityMetricsExtractMappingFilePath, new MetricExtractMappingReportMap());

            List<MetricExtractMapping> entityMetricExtractMappingListFiltered = new List<MetricExtractMapping>(entityMetricExtractMappingList.Count);
            foreach (string metricSet in jobConfiguration.Input.MetricsSelectionCriteria)
            {
                List<MetricExtractMapping> entityMetricExtractMappingListForMetricSet = entityMetricExtractMappingList.Where(m => m.MetricSet == metricSet).ToList();
                if (entityMetricExtractMappingListForMetricSet != null)
                {
                    logger.Info("Input job specified {0} metric set, resulted in {1} metrics from mapping file", metricSet, entityMetricExtractMappingListForMetricSet.Count);
                    loggerConsole.Info("Input job specified {0} metric set, resulted in {1} metrics from mapping file", metricSet, entityMetricExtractMappingListForMetricSet.Count);
                    entityMetricExtractMappingListFiltered.AddRange(entityMetricExtractMappingListForMetricSet);
                    foreach (MetricExtractMapping mem in entityMetricExtractMappingListForMetricSet)
                    {
                        logger.Trace("{0}, path={1}", mem, mem.MetricPath);
                    }
                }
            }
            logger.Info("Selected {0} metrics from mapping file", entityMetricExtractMappingListFiltered.Count);
            loggerConsole.Info("Selected {0} metrics from mapping file", entityMetricExtractMappingListFiltered.Count);

            return entityMetricExtractMappingListFiltered;
        }

        private static void getMetricsForEntities(
            JobTarget jobTarget,
            JobConfiguration jobConfiguration,
            List<MetricExtractMapping> entityMetricExtractMappingList,
            string metricsDataFolderPath,
            string entityFolderName,
            string entityType)
        {
            ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

            string metricsEntityFolderPath = Path.Combine(
                metricsDataFolderPath,
                entityFolderName);

            List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entityType).ToList();

            loggerConsole.Info("Extract {0} ({1} metrics)", entityType, entityMetricExtractMappingListFiltered.Count);
            logger.Info("Extract {0} ({1} metrics)", entityType, entityMetricExtractMappingListFiltered.Count);

            foreach (MetricExtractMapping metricExtractMapping in entityMetricExtractMappingListFiltered)
            {
                getMetricDataForMetricForAllRanges(controllerApi, jobTarget, metricExtractMapping.MetricPath, metricExtractMapping.FolderName, jobConfiguration, metricsEntityFolderPath);
            }

            loggerConsole.Info("Completed {0} ({1} metrics)", entityType, entityMetricExtractMappingListFiltered.Count);
        }

        private static void getMetricDataForMetricForAllRanges(ControllerApi controllerApi, JobTarget jobTarget, string metricPath, string metricEntitySubFolderName, JobConfiguration jobConfiguration, string metricsEntityFolderPath)
        {
            // Get the full range
            JobTimeRange jobTimeRange = jobConfiguration.Input.TimeRange;

            logger.Info("Retrieving metric in Application {0}({1}), Metric='{2}', From {3:o}, To {4:o}", jobTarget.Application, jobTarget.ApplicationID, metricPath, jobTimeRange.From, jobTimeRange.To);

            string metricsJson = String.Empty;

            string metricsDataFilePath = Path.Combine(metricsEntityFolderPath, metricEntitySubFolderName, String.Format(EXTRACT_METRIC_FULL_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
            if (File.Exists(metricsDataFilePath) == false)
            {
                // First range is the whole thing
                metricsJson = controllerApi.GetMetricData(
                    jobTarget.ApplicationID,
                    metricPath,
                    convertToUnixTimestamp(jobTimeRange.From),
                    convertToUnixTimestamp(jobTimeRange.To),
                    true);

                if (metricsJson != String.Empty) FileIOHelper.saveFileToPath(metricsJson, metricsDataFilePath);
            }

            // Get the hourly time ranges
            for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
            {
                jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                logger.Info("Retrieving metric for Application {0}({1}), Metric='{2}', From {3:o}, To {4:o}", jobTarget.Application, jobTarget.ApplicationID, metricPath, jobTimeRange.From, jobTimeRange.To);

                metricsDataFilePath = Path.Combine(metricsEntityFolderPath, metricEntitySubFolderName, String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To));

                if (File.Exists(metricsDataFilePath) == false)
                {
                    // Subsequent ones are details
                    metricsJson = controllerApi.GetMetricData(
                        jobTarget.ApplicationID,
                        metricPath,
                        convertToUnixTimestamp(jobTimeRange.From),
                        convertToUnixTimestamp(jobTimeRange.To),
                        false);

                    if (metricsJson != String.Empty) FileIOHelper.saveFileToPath(metricsJson, metricsDataFilePath);
                }
            }
        }

        #endregion

        #region Flowmap extraction functions

        private static int extractFlowmapsApplication(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, string activityGridFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes)
        {
            logger.Info("Retrieving flowmap for Application {0}, From {1:o}, To {2:o}", jobTarget.Application, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

            string flowmapDataFilePath = Path.Combine(
                activityGridFolderPath,
                EntityApplication.ENTITY_FOLDER,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

            string flowmapJson = String.Empty;

            if (File.Exists(flowmapDataFilePath) == false)
            {
                flowmapJson = controllerApi.GetFlowmapApplication(jobTarget.ApplicationID, fromTimeUnix, toTimeUnix, differenceInMinutes);
                if (flowmapJson != String.Empty) FileIOHelper.saveFileToPath(flowmapJson, flowmapDataFilePath);
            }

            return 1;
        }

        private static int extractFlowmapsTiers(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTTier> entityList, string activityGridFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTTier tier in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Tier {1}, From {2:o}, To {3:o}", jobTarget.Application, tier.name, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    activityGridFolderPath,
                    EntityTier.ENTITY_FOLDER,
                    getShortenedEntityNameForFileSystem(tier.name, tier.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapTier(tier.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToPath(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int extractFlowmapsNodes(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTNode> entityList, string activityGridFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTNode node in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Tier {1}, Node {2}, From {3:o}, To {4:o}", jobTarget.Application, node.tierName, node.name, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    activityGridFolderPath,
                    EntityNode.ENTITY_FOLDER,
                    getShortenedEntityNameForFileSystem(node.tierName, node.tierId),
                    getShortenedEntityNameForFileSystem(node.name, node.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapNode(node.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToPath(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int extractFlowmapsBackends(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTBackend> entityList, string activityGridFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTBackend backend in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Backend {1}, From {2:o}, To {3:o}", jobTarget.Application, backend.name, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    activityGridFolderPath,
                    EntityBackend.ENTITY_FOLDER,
                    getShortenedEntityNameForFileSystem(backend.name, backend.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapBackend(backend.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToPath(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int extractFlowmapsBusinessTransactions(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTBusinessTransaction> entityList, string activityGridFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTBusinessTransaction businessTransaction in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Tier {1}, Business Transaction {2}, From {3:o}, To {4:o}", jobTarget.Application, businessTransaction.tierName, businessTransaction.name, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    activityGridFolderPath,
                    EntityBusinessTransaction.ENTITY_FOLDER,
                    getShortenedEntityNameForFileSystem(businessTransaction.tierName, businessTransaction.tierId),
                    getShortenedEntityNameForFileSystem(businessTransaction.name, businessTransaction.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapBusinessTransaction(jobTarget.ApplicationID, businessTransaction.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToPath(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        #endregion

        #region Event extraction functions

        private static int extractEvents(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, string eventsDataFolderPath, string eventType, bool progressToConsole)
        {
            if (progressToConsole == true)
            {
                loggerConsole.Info("Extract {0} events ({1} time ranges)", eventType, jobConfiguration.Input.HourlyTimeRanges.Count);
            }

            JArray listOfEvents = new JArray();
            int totalEventsFound = 0;
            foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
            {
                long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);

                string eventsJSON = controllerApi.GetEvents(jobTarget.ApplicationID, eventType, fromTimeUnix, toTimeUnix);
                if (eventsJSON != String.Empty)
                {
                    // Load events
                    JArray eventsInHour = JArray.Parse(eventsJSON);
                    foreach (JObject interestingEvent in eventsInHour)
                    {
                        listOfEvents.Add(interestingEvent);
                    }
                    totalEventsFound = totalEventsFound + eventsInHour.Count;

                    if (progressToConsole == true)
                    {
                        Console.Write("+{0}", eventsInHour.Count);
                    }
                }
            }

            if (listOfEvents.Count > 0)
            {
                string eventsDataFilePath = Path.Combine(
                    eventsDataFolderPath,
                    String.Format(EVENTS_FILE_NAME, eventType, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

                FileIOHelper.writeJArrayToFile(listOfEvents, eventsDataFilePath);

                logger.Info("{0} events from {1:o} to {2:o}", listOfEvents.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);
                if (progressToConsole == true)
                {
                    Console.Write("=");
                    loggerConsole.Info("{0} {1} events", listOfEvents.Count, eventType);
                }
            }
            else
            {
                if (progressToConsole == true)
                {
                    Console.WriteLine();
                }
            }

            return listOfEvents.Count;
        }

        #endregion

        #region Snapshot extraction functions

        private static int extractSnapshots(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<JToken> entityList, List<AppDRESTTier> tiersNodeJSList, string snapshotsDataFolderPath, bool progressToConsole)
        {
            int j = 0;

            foreach (JToken snapshot in entityList)
            {
                // Only do first in chain
                if ((bool)snapshot["firstInChain"] == true)
                {
                    logger.Info("Retrieving snapshot for Application {0}, Tier {1}, Business Transaction {2}, RequestGUID {3}", jobTarget.Application, snapshot["applicationComponentName"], snapshot["businessTransactionName"], snapshot["requestGUID"]);

                    #region Target step variables

                    DateTime snapshotTime = convertFromUnixTimestamp((long)snapshot["serverStartTime"]);

                    string snapshotFolderPath = Path.Combine(
                        snapshotsDataFolderPath,
                        getShortenedEntityNameForFileSystem(snapshot["applicationComponentName"].ToString(), (long)snapshot["applicationComponentId"]),
                        getShortenedEntityNameForFileSystem(snapshot["businessTransactionName"].ToString(), (long)snapshot["businessTransactionId"]),
                        String.Format("{0:yyyyMMddHH}", snapshotTime),
                        userExperienceFolderNameMapping[snapshot["userExperience"].ToString()],
                        String.Format(SNAPSHOT_FOLDER_NAME, snapshot["requestGUID"], snapshotTime));

                    // Must strip out the milliseconds, because the segment list retrieval doesn't seem to like them in the datetimes
                    DateTime snapshotTimeFrom = snapshotTime.AddMinutes(-30).AddMilliseconds(snapshotTime.Millisecond * -1);
                    DateTime snapshotTimeTo = snapshotTime.AddMinutes(30).AddMilliseconds(snapshotTime.Millisecond * -1);

                    long fromTimeUnix = convertToUnixTimestamp(snapshotTimeFrom);
                    long toTimeUnix = convertToUnixTimestamp(snapshotTimeTo);
                    int differenceInMinutes = (int)(snapshotTimeTo - snapshotTimeFrom).TotalMinutes;

                    #endregion

                    #region Get Snapshot Flowmap

                    // Get snapshot flow map
                    // Commenting this out until the time I decide to build visual representation of it, until then it is not needed
                    //string snapshotFlowmapDataFilePath = Path.Combine(snapshotFolderPath, EXTRACT_SNAPSHOT_FLOWMAP_FILE_NAME);

                    //if (File.Exists(snapshotFlowmapDataFilePath) == false)
                    //{
                    //    string snapshotFlowmapJson = controllerApi.GetFlowmapSnapshot(jobTarget.ApplicationID, (int)snapshot["businessTransactionId"], snapshot["requestGUID"].ToString(), fromTimeUnix, toTimeUnix, differenceInMinutes);
                    //    if (snapshotFlowmapJson != String.Empty) FileIOHelper.saveFileToPath(snapshotFlowmapJson, snapshotFlowmapDataFilePath);
                    //}

                    #endregion

                    #region Get List of Segments

                    // Get list of segments
                    string snapshotSegmentsDataFilePath = Path.Combine(snapshotFolderPath, EXTRACT_SNAPSHOT_SEGMENT_FILE_NAME);

                    if (File.Exists(snapshotSegmentsDataFilePath) == false)
                    {
                        string snapshotSegmentsJson = controllerApi.GetSnapshotSegments(snapshot["requestGUID"].ToString(), snapshotTimeFrom, snapshotTimeTo, differenceInMinutes);
                        if (snapshotSegmentsJson != String.Empty) FileIOHelper.saveFileToPath(snapshotSegmentsJson, snapshotSegmentsDataFilePath);
                    }

                    #endregion

                    #region Get Details for Each Segment

                    JArray snapshotSegmentsList = FileIOHelper.loadJArrayFromFile(snapshotSegmentsDataFilePath);
                    if (snapshotSegmentsList != null)
                    {
                        // Get details for segment
                        foreach (JToken snapshotSegment in snapshotSegmentsList)
                        {
                            string snapshotSegmentDataFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME, snapshotSegment["id"]));

                            if (File.Exists(snapshotSegmentDataFilePath) == false)
                            {
                                string snapshotSegmentJson = controllerApi.GetSnapshotSegmentDetails((long)snapshotSegment["id"], fromTimeUnix, toTimeUnix, differenceInMinutes);
                                if (snapshotSegmentJson != String.Empty) FileIOHelper.saveFileToPath(snapshotSegmentJson, snapshotSegmentDataFilePath);
                            }
                        }

                        // Get errors for segment
                        foreach (JToken snapshotSegment in snapshotSegmentsList)
                        {
                            string snapshotSegmentErrorFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_ERROR_FILE_NAME, snapshotSegment["id"]));

                            if (File.Exists(snapshotSegmentErrorFilePath) == false && (bool)snapshotSegment["errorOccurred"] == true)
                            {
                                string snapshotSegmentJson = controllerApi.GetSnapshotSegmentErrors((long)snapshotSegment["id"], fromTimeUnix, toTimeUnix, differenceInMinutes);
                                if (snapshotSegmentJson != String.Empty)
                                {
                                    // "[ ]" == empty data. Don't create the file
                                    if (snapshotSegmentJson.Length > 3)
                                    {
                                        FileIOHelper.saveFileToPath(snapshotSegmentJson, snapshotSegmentErrorFilePath);
                                    }
                                }
                            }
                        }

                        // Get call graphs for segment
                        foreach (JToken snapshotSegment in snapshotSegmentsList)
                        {
                            string snapshotSegmentCallGraphFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_CALLGRAPH_FILE_NAME, snapshotSegment["id"]));

                            if (File.Exists(snapshotSegmentCallGraphFilePath) == false && ((bool)snapshotSegment["fullCallgraph"] == true || (bool)snapshotSegment["delayedCallGraph"] == true))
                            {
                                // If the tier is Node.JS, the call graphs come from Process Snapshot
                                bool getProcessCallGraph = false;
                                string processRequestGUID = String.Empty;
                                if (tiersNodeJSList != null && tiersNodeJSList.Count > 0)
                                {
                                    // Is this a Node.JS tier?
                                    if (tiersNodeJSList.Count(t => t.id == (long)snapshotSegment["applicationComponentId"]) > 0)
                                    {
                                        // Yes, it is

                                        // Is there a process snapshot? Check Transaction Properties for its value
                                        string snapshotSegmentDataFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME, snapshotSegment["id"]));
                                        JObject snapshotSegmentDetail = FileIOHelper.loadJObjectFromFile(snapshotSegmentDataFilePath);
                                        if (snapshotSegmentDetail != null)
                                        {
                                            if (snapshotSegmentDetail["transactionProperties"].HasValues == true)
                                            {
                                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["transactionProperties"])
                                                {
                                                    if (transactionPropertyToken["name"].ToString() == "Process Snapshot GUIDs")
                                                    {
                                                        getProcessCallGraph = true;
                                                        processRequestGUID = transactionPropertyToken["value"].ToString();
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                // Ok, now either get call graph the usual way or process snapshot call graph
                                if (getProcessCallGraph == true && processRequestGUID.Length > 0)
                                {
                                    string snapshotSegmentJson = controllerApi.GetProcessSnapshotCallGraph(processRequestGUID, fromTimeUnix, toTimeUnix, differenceInMinutes);
                                    if (snapshotSegmentJson != String.Empty) FileIOHelper.saveFileToPath(snapshotSegmentJson, snapshotSegmentCallGraphFilePath);
                                }
                                else
                                {
                                    string snapshotSegmentJson = controllerApi.GetSnapshotSegmentCallGraph((long)snapshotSegment["id"], fromTimeUnix, toTimeUnix, differenceInMinutes);
                                    if (snapshotSegmentJson != String.Empty) FileIOHelper.saveFileToPath(snapshotSegmentJson, snapshotSegmentCallGraphFilePath);
                                }
                            }
                        }
                    }

                    #endregion

                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        #endregion


        #region Metric index functions

        private static void updateEntityRowWithDurationAndActivityStatus(EntityBase entityRow, JobTimeRange jobTimeRange)
        {
            // Duration
            entityRow.Duration = (int)(jobTimeRange.To - jobTimeRange.From).Duration().TotalMinutes;
            entityRow.From = jobTimeRange.From.ToLocalTime();
            entityRow.To = jobTimeRange.To.ToLocalTime();
            entityRow.FromUtc = jobTimeRange.From;
            entityRow.ToUtc = jobTimeRange.To;

            // Has Activity
            if (entityRow.ART == 0 && entityRow.TimeTotal == 0 &&
                entityRow.CPM == 0 && entityRow.Calls == 0 &&
                entityRow.EPM == 0 && entityRow.Errors == 0 &&
                entityRow.EXCPM == 0 && entityRow.Exceptions == 0 &&
                entityRow.HTTPEPM == 0 && entityRow.HttpErrors == 0)
            {
                entityRow.HasActivity = false;
            }
            else
            {
                entityRow.HasActivity = true;
            }
        }

        private static void readRolledUpRangeOfMetricsIntoEntities(
            Dictionary<long, EntityBase> entitiesDictionaryByID,
            Dictionary<string, EntityBase> entitiesDictionaryByName,
            JobTimeRange jobTimeRange,
            List<MetricExtractMapping> entityMetricExtractMappingList,
            string metricsDataFolderPath,
            string entityFolderName,
            string entityType)
        {
            string metricsEntityFolderPath = Path.Combine(
                metricsDataFolderPath,
                entityFolderName);

            string fullRangeMetricDataFileName = String.Format(EXTRACT_METRIC_FULL_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

            List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entityType).ToList();
            foreach (MetricExtractMapping metricExtractMapping in entityMetricExtractMappingListFiltered)
            {
                string metricsDataFilePath = Path.Combine(metricsEntityFolderPath, metricExtractMapping.FolderName, fullRangeMetricDataFileName);

                List<AppDRESTMetric> metricData = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);
                if (metricData != null)
                {
                    readMetricsIntoEntities(metricData, entitiesDictionaryByID, entitiesDictionaryByName, jobTimeRange);
                }
            }
        }

        private static void readGranularRangeOfMetricsIntoEntities(
            Dictionary<long, EntityBase> entitiesDictionaryByID,
            Dictionary<string, EntityBase> entitiesDictionaryByName,
            JobTimeRange jobTimeRange,
            List<MetricExtractMapping> entityMetricExtractMappingList,
            string metricsDataFolderPath,
            string entityFolderName,
            string entityType,
            Dictionary<string, List<MetricValue>> metricValuesDictionary)
        {
            string metricsEntityFolderPath = Path.Combine(
                metricsDataFolderPath,
                entityFolderName);

            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

            List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entityType).ToList();
            foreach (MetricExtractMapping metricExtractMapping in entityMetricExtractMappingListFiltered)
            {
                string metricsDataFilePath = Path.Combine(metricsEntityFolderPath, metricExtractMapping.FolderName, hourlyRangeMetricDataFileName);

                List<AppDRESTMetric> metricData = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);
                if (metricData != null)
                {
                    List<MetricValue> metricValues = readMetricsIntoEntities(metricData, entitiesDictionaryByID, entitiesDictionaryByName, jobTimeRange);
                    if (metricValues != null)
                    {
                        if (metricValuesDictionary.ContainsKey(metricExtractMapping.FolderName) == false)
                        {
                            metricValuesDictionary.Add(metricExtractMapping.FolderName, metricValues);
                        }
                        else
                        {
                            metricValuesDictionary[metricExtractMapping.FolderName].AddRange(metricValues);
                        }
                    }
                }
            }

            return;
        }

        private static List<MetricValue> readMetricsIntoEntities(
            List<AppDRESTMetric> metricData,
            Dictionary<long, EntityBase> entitiesDictionaryByID,
            Dictionary<string, EntityBase> entitiesDictionaryByName,
            JobTimeRange jobTimeRange)
        {
            EntityBase entity;

            int timerangeDuration = (int)(jobTimeRange.To - jobTimeRange.From).Duration().TotalMinutes;

            List<MetricValue> metricValues = new List<MetricValue>(metricData.Count * timerangeDuration);

            foreach (AppDRESTMetric appDRESTMetric in metricData)
            {
                if (appDRESTMetric.metricValues.Count == 0)
                {
                    // No metrics in this chunk
                    continue;
                }

                #region Get metric path components and metric name

                // Analyze metric path returned by the call to controller
                string[] metricPathComponents = appDRESTMetric.metricPath.Split('|');

                if (metricPathComponents.Length == 0)
                {
                    // Metric name was no good
                    logger.Warn("Metric path='{0}' could not be parsed into individual components", appDRESTMetric.metricPath);
                    continue;
                }

                string[] metricNameComponents = appDRESTMetric.metricName.Split('|');

                if (metricNameComponents.Length == 0)
                {
                    // Metric name was no good
                    logger.Warn("Metric name='{0}' could not be parsed into individual components", appDRESTMetric.metricName);
                    continue;
                }

                // Name of the metric is always the last one in the metric path
                string metricName = metricPathComponents[metricPathComponents.Length - 1];

                #endregion

                #region Determine metric entity type, scope and name from metric path

                if (String.Compare(metricPathComponents[0], "Overall Application Performance", true) == 0)
                {
                    #region Overall Application Performance - App, Tier, Node

                    switch (metricPathComponents.Length)
                    {
                        case 2:
                            // MetricPath = Overall Application Performance|Calls per Minute
                            // MetricName = BTM|Application Summary|Calls per Minute
                            // Application
                            {
                                entity = entitiesDictionaryByID.FirstOrDefault().Value;
                                List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                metricValues.AddRange(metricValuesConverted);
                                break;
                            }
                        case 3:
                            // MetricPath = Overall Application Performance|ECommerce-Services|Calls per Minute
                            // MetricName = BTM|Application Summary|Component:184|Calls per Minute
                            // Tier
                            {
                                long tierID = -1;
                                if (metricNameComponents.Length >= 3)
                                {
                                    string[] tierIDComponents = metricNameComponents[2].Split(':');
                                    if (tierIDComponents.Length >= 2 && Int64.TryParse(tierIDComponents[1], out tierID) == true)
                                    {
                                        if (entitiesDictionaryByID.TryGetValue(tierID, out entity) == true)
                                        {
                                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                            metricValues.AddRange(metricValuesConverted);
                                        }
                                    }
                                }
                                break;
                            }
                        case 5:
                            // Node in a Tier 
                            // or
                            // Backend exit from Tier
                            {
                                // MetricPath = Overall Application Performance|ECommerce-Services|Individual Nodes|ECommerce_WEB1_NODE|Calls per Minute
                                // MetricName = BTM|Application Summary|Component:184|Calls per Minute
                                // Node in a Tier
                                if (String.Compare(metricPathComponents[2], "Individual Nodes", true) == 0)
                                {
                                    if (metricPathComponents.Length >= 4 && entitiesDictionaryByName.TryGetValue(String.Format("{0}-{1}", metricPathComponents[1], metricPathComponents[3]), out entity) == true)
                                    {
                                        List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                        metricValues.AddRange(metricValuesConverted);
                                    }
                                }
                                // MetricPath = Overall Application Performance|ECommerce-Services|External Calls|Call-HTTP to Discovered backend call - api.shipping.com|Calls per Minute
                                // MetricName = BTM|Application Summary|Component:184|Exit Call:HTTP|To:{[UNRESOLVED][824]}|Calls per Minute
                                // Backend exit from Tier
                                else if (String.Compare(metricPathComponents[2], "External Calls", true) == 0)
                                {
                                    long tierID = -1;
                                    if (metricNameComponents.Length >= 3)
                                    {
                                        string[] tierIDComponents = metricNameComponents[2].Split(':');
                                        if (tierIDComponents.Length >= 2 && Int64.TryParse(tierIDComponents[1], out tierID) == true)
                                        {
                                            if (entitiesDictionaryByID.TryGetValue(tierID, out entity) == true)
                                            {
                                                metricName = String.Join("|", metricPathComponents, 3, metricPathComponents.Length - 3);
                                                List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                                metricValues.AddRange(metricValuesConverted);
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        case 7:
                            // MetricPath = Overall Application Performance|ECommerce-Services|Individual Nodes|ECommerce_WEB2_NODE|External Calls|Call-HTTP to Discovered backend call - api.shipping.com|Calls per Minute
                            // MetricName = BTM|Application Summary|Component:184|Exit Call:HTTP|To:{[UNRESOLVED][824]}|Calls per Minute
                            // Backend exit from Node
                            {
                                if (metricPathComponents.Length >= 4 && entitiesDictionaryByName.TryGetValue(String.Format("{0}-{1}", metricPathComponents[1], metricPathComponents[3]), out entity) == true)
                                {
                                    metricName = String.Join("|", metricPathComponents, 5, metricPathComponents.Length - 5);
                                    List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                    metricValues.AddRange(metricValuesConverted);
                                }
                                break;
                            }
                        default:
                            {
                                logger.Warn("Metric path='{0}' is not of supported type of metric for processing", appDRESTMetric.metricPath);
                                break;
                            }
                    }

                    #endregion
                }
                else if (String.Compare(metricPathComponents[0], "Application Infrastructure Performance", true) == 0)
                {
                    #region Aplication Infrastructure Performance - Tier, Node

                    // MetricPath = Application Infrastructure Performance|ECommerce-Services|Individual Nodes|ECommerce_WEB1_NODE|Agent|App|Availability
                    // MetricName = Agent|App|Availability
                    // or
                    // MetricPath = Application Infrastructure Performance|ECommerce-Services|Individual Nodes|ECommerce_WEB1_NODE|Agent|App|Availability
                    // MetricName = Agent|App|Availability
                    // Node in a Tier
                    if (String.Compare(metricPathComponents[2], "Individual Nodes", true) == 0)
                    {
                        if (metricPathComponents.Length >= 4 && entitiesDictionaryByName.TryGetValue(String.Format("{0}-{1}", metricPathComponents[1], metricPathComponents[3]), out entity) == true)
                        {
                            metricName = String.Join("|", metricPathComponents, 4, metricPathComponents.Length - 4);
                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                            metricValues.AddRange(metricValuesConverted);
                        }
                    }
                    // MetricPath = Application Infrastructure Performance|ECommerce-Services|Hardware Resources|CPU|%Busy	
                    // MetricName = Hardware Resources|CPU|%Busy
                    // or
                    // MetricPath = Application Infrastructure Performance|ECommerce-Services|Agent|App|Availability
                    // MetricName = Agent|App|Availability
                    // Tier
                    else
                    {
                        if (metricPathComponents.Length >= 2 && entitiesDictionaryByName.TryGetValue(metricPathComponents[1], out entity) == true)
                        {
                            metricName = String.Join("|", metricPathComponents, 2, metricPathComponents.Length - 2);
                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                            metricValues.AddRange(metricValuesConverted);
                        }
                    }

                    #endregion
                }
                else if (String.Compare(metricPathComponents[0], "Business Transaction Performance", true) == 0)
                {
                    #region Business Transaction Performance

                    switch (metricPathComponents.Length)
                    {
                        case 5:
                            // MetricPath = Business Transaction Performance|Business Transactions|ECommerce-Services|Homepage|Calls per Minute
                            // MetricName = BTM|BTs|BT:1008|Component:184|Calls per Minute
                            // or
                            // MetricPath = Business Transaction Performance|Business Transactions|ECommerce-Services|Login - Mobile|95th Percentile Response Time (ms)
                            // MetricName = BTM|BTs|BT:557|Component:184|95th Percentile Response Time (ms)
                            // Business Transaction
                            {
                                long businessTransactionID = -1;
                                if (metricNameComponents.Length >= 3)
                                {
                                    string[] businessTransactionIDComponents = metricNameComponents[2].Split(':');
                                    if (businessTransactionIDComponents.Length >= 2 && Int64.TryParse(businessTransactionIDComponents[1], out businessTransactionID) == true)
                                    {
                                        if (entitiesDictionaryByID.TryGetValue(businessTransactionID, out entity) == true)
                                        {
                                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                            metricValues.AddRange(metricValuesConverted);
                                        }
                                    }
                                }
                                break;
                            }
                        case 7:
                            // Business Transaction calls by Individual Nodes 
                            // or
                            // Business Transaction calls to Backends
                            {
                                // MetricPath = Business Transaction Performance|Business Transactions|ECommerce-Services|Homepage|Individual Nodes|ECommerce_WEB2_NODE|Calls per Minute
                                // MetricName = BTM|BTs|BT:1008|Component:184|Calls per Minute
                                // Business Transaction calls by Individual Nodes 
                                if (String.Compare(metricPathComponents[4], "Individual Nodes", true) == 0)
                                {
                                    long businessTransactionID = -1;
                                    if (metricNameComponents.Length >= 3)
                                    {
                                        string[] businessTransactionIDComponents = metricNameComponents[2].Split(':');
                                        if (businessTransactionIDComponents.Length >= 2 && Int64.TryParse(businessTransactionIDComponents[1], out businessTransactionID) == true)
                                        {
                                            if (entitiesDictionaryByID.TryGetValue(businessTransactionID, out entity) == true)
                                            {
                                                metricName = String.Join("|", metricPathComponents, 5, metricPathComponents.Length - 5);
                                                List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                                metricValues.AddRange(metricValuesConverted);
                                            }
                                        }
                                    }
                                }
                                // MetricPath = Business Transaction Performance|Business Transactions|ECommerce-Services|Fetch Catalog|External Calls|Call-JDBC to Discovered backend call - XE-Oracle-ORACLE-DB-Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production|Calls per Minute
                                // MetricName = BTM|BTs|BT:1010|Component:184|Exit Call:JDBC|To:{[UNRESOLVED][925]}|Calls per Minute
                                // Business Transaction calls to Backends
                                else if (String.Compare(metricPathComponents[4], "External Calls", true) == 0)
                                {
                                    long businessTransactionID = -1;
                                    if (metricNameComponents.Length >= 3)
                                    {
                                        string[] businessTransactionIDComponents = metricNameComponents[2].Split(':');
                                        if (businessTransactionIDComponents.Length >= 2 && Int64.TryParse(businessTransactionIDComponents[1], out businessTransactionID) == true)
                                        {
                                            if (entitiesDictionaryByID.TryGetValue(businessTransactionID, out entity) == true)
                                            {
                                                metricName = String.Join("|", metricPathComponents, 5, metricPathComponents.Length - 5);
                                                List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                                metricValues.AddRange(metricValuesConverted);
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        case 9:
                            // MetricPath = Business Transaction Performance|Business Transactions|ECommerce-Services|Login - Mobile|Individual Nodes|ECommerce_WEB2_NODE|External Calls|Call-JDBC to Discovered backend call - APPDY-MySQL-DB-5.7.13-0ubuntu0.16.04.2|Calls per Minute
                            // MetricName = BTM|BTs|BT:557|Component:184|Exit Call:JDBC|To:{[UNRESOLVED][2348]}|Calls per Minute
                            // Business Transaction calls to Backends by Individual Nodes
                            {
                                long businessTransactionID = -1;
                                if (metricNameComponents.Length >= 3)
                                {
                                    string[] businessTransactionIDComponents = metricNameComponents[2].Split(':');
                                    if (businessTransactionIDComponents.Length >= 2 && Int64.TryParse(businessTransactionIDComponents[1], out businessTransactionID) == true)
                                    {
                                        if (entitiesDictionaryByID.TryGetValue(businessTransactionID, out entity) == true)
                                        {
                                            metricName = String.Join("|", metricPathComponents, 5, metricPathComponents.Length - 5);
                                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                            metricValues.AddRange(metricValuesConverted);
                                        }
                                    }
                                }
                                break;
                            }
                        default:
                            {
                                logger.Warn("Metric path='{0}' is not of supported type of metric for processing", appDRESTMetric.metricPath);
                                break;
                            }
                    }

                    #endregion
                }
                else if (String.Compare(metricPathComponents[0], "Backends", true) == 0)
                {
                    #region Backends

                    switch (metricPathComponents.Length)
                    {
                        case 3:
                            // MetricPath = Backends|Discovered backend call - api.shipping.com|Calls per Minute
                            // MetricName = BTM|Backends|Component:{[UNRESOLVED][824]}|Calls per Minute
                            // Backends
                            {
                                long backendID = -1;
                                if (metricNameComponents.Length >= 3)
                                {
                                    string[] backendIDComponents = metricNameComponents[2].Split(':');
                                    if (backendIDComponents.Length >= 2)
                                    {
                                        backendIDComponents = backendIDComponents[1].Split(new char[] { '[', ']' });
                                        if (backendIDComponents.Length >= 4 && Int64.TryParse(backendIDComponents[3], out backendID) == true)
                                        {
                                            if (entitiesDictionaryByID.TryGetValue(backendID, out entity) == true)
                                            {
                                                List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                                metricValues.AddRange(metricValuesConverted);
                                            }
                                        }
                                    }
                                }
                                // Backends
                                break;
                            }
                        default:
                            {
                                logger.Warn("Metric path='{0}' is not of supported type of metric for processing", appDRESTMetric.metricPath);
                                break;
                            }
                    }

                    #endregion
                }
                else if (String.Compare(metricPathComponents[0], "Errors", true) == 0)
                {
                    #region Errors

                    switch (metricPathComponents.Length)
                    {
                        case 4:
                            // MetrichPath = Errors|ECommerce-Services|ServletException : CannotCreateTransactionException : DatabaseException : SQLNestedException : NoSuchElementException|Errors per Minute
                            // MetricName = BTM|Application Diagnostic Data|Error:12611|Errors per Minute
                            // Error
                            {
                                long errorID = -1;
                                if (metricNameComponents.Length >= 3)
                                {
                                    string[] errorIDComponents = metricNameComponents[2].Split(':');
                                    if (errorIDComponents.Length >= 2 && Int64.TryParse(errorIDComponents[1], out errorID) == true)
                                    {
                                        if (entitiesDictionaryByID.TryGetValue(errorID, out entity) == true)
                                        {
                                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                            metricValues.AddRange(metricValuesConverted);
                                        }
                                    }
                                }
                                break;
                            }
                        case 6:
                            // Error calls by Individual Node
                            {
                                // MetricPath = Errors|ECommerce-Services|ServletException : PersistenceException : DatabaseException : SQLNestedException : NoSuchElementException|Individual Nodes|ECommerce_WEB1_NODE|Errors per Minute
                                // MetricName = BTM|Application Diagnostic Data|Error:12605|Errors per Minute
                                // Error calls by Individual Node
                                if (String.Compare(metricPathComponents[3], "Individual Nodes", true) == 0)
                                {
                                    long errorID = -1;
                                    if (metricNameComponents.Length >= 3)
                                    {
                                        string[] errorIDComponents = metricNameComponents[2].Split(':');
                                        if (errorIDComponents.Length >= 2 && Int64.TryParse(errorIDComponents[1], out errorID) == true)
                                        {
                                            if (entitiesDictionaryByID.TryGetValue(errorID, out entity) == true)
                                            {
                                                metricName = String.Join("|", metricPathComponents, 4, metricPathComponents.Length - 4);
                                                List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                                metricValues.AddRange(metricValuesConverted);
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        default:
                            {
                                logger.Warn("Metric path='{0}' is not of supported type of metric for processing", appDRESTMetric.metricPath);
                                break;
                            }
                    }

                    #endregion
                }
                else if (String.Compare(metricPathComponents[0], "Service Endpoints", true) == 0)
                {
                    #region Service End Points

                    switch (metricPathComponents.Length)
                    {
                        case 4:
                            // MetricPath = Service Endpoints|ECommerce-Services|ViewItems.getAllItems|Calls per Minute
                            // MetricName = BTM|Application Diagnostic Data|SEP:4859|Calls per Minute
                            // Service Endpoint
                            {
                                long serviceEndpointID = -1;
                                if (metricNameComponents.Length >= 3)
                                {
                                    string[] serviceEndpointIDComponents = metricNameComponents[2].Split(':');
                                    if (serviceEndpointIDComponents.Length >= 2 && Int64.TryParse(serviceEndpointIDComponents[1], out serviceEndpointID) == true)
                                    {
                                        if (entitiesDictionaryByID.TryGetValue(serviceEndpointID, out entity) == true)
                                        {
                                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                            metricValues.AddRange(metricValuesConverted);
                                        }
                                    }
                                }
                                break;
                            }
                        case 6:
                            // MetricPath = Service Endpoints|ECommerce-Services|ViewItems.getAllItems|Individual Nodes|ECommerce_WEB2_NODE|Calls per Minute
                            // MetricName = BTM|Application Diagnostic Data|SEP:4859|Calls per Minute
                            // Service Endpoint calls by Individual Nodes
                            {
                                if (String.Compare(metricPathComponents[3], "Individual Nodes", true) == 0)
                                {
                                    long serviceEndpointID = -1;
                                    if (metricNameComponents.Length >= 3)
                                    {
                                        string[] serviceEndpointIDComponents = metricNameComponents[2].Split(':');
                                        if (serviceEndpointIDComponents.Length >= 2 && Int64.TryParse(serviceEndpointIDComponents[1], out serviceEndpointID) == true)
                                        {
                                            if (entitiesDictionaryByID.TryGetValue(serviceEndpointID, out entity) == true)
                                            {
                                                metricName = String.Join("|", metricPathComponents, 4, metricPathComponents.Length - 4);
                                                List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                                metricValues.AddRange(metricValuesConverted);
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        default:
                            {
                                logger.Warn("Metric path='{0}' is not of supported type of metric for processing", appDRESTMetric.metricPath);
                                break;
                            }
                    }

                    #endregion
                }
                else if (String.Compare(metricPathComponents[0], "Information Points", true) == 0)
                {
                    #region Information Points

                    switch (metricPathComponents.Length)
                    {
                        case 3:
                            // MetricPath = Information Points|CartTotal|Calls per Minute
                            // MetricName = BTM|IPs|IP:8|Calls per Minute
                            // Information Point
                            {
                                long informationPointID = -1;
                                if (metricNameComponents.Length >= 3)
                                {
                                    string[] informationPointIDComponents = metricNameComponents[2].Split(':');
                                    if (informationPointIDComponents.Length >= 2 && Int64.TryParse(informationPointIDComponents[1], out informationPointID) == true)
                                    {
                                        if (entitiesDictionaryByID.TryGetValue(informationPointID, out entity) == true)
                                        {
                                            List<MetricValue> metricValuesConverted = readMetricValuesIntoEntity(entity, metricName, appDRESTMetric, timerangeDuration);
                                            metricValues.AddRange(metricValuesConverted);
                                        }
                                    }
                                }
                                break;
                            }
                        default:
                            {
                                logger.Warn("Metric path='{0}' is not of supported type of metric for processing", appDRESTMetric.metricPath);
                                break;
                            }
                    }

                    #endregion
                }
                else
                {
                    // Unsupported type of metric
                    logger.Warn("Metric path='{0}' is not of supported type of metric for processing", appDRESTMetric.metricPath);
                }

                #endregion
            }

            return metricValues;
        }

        private static List<MetricValue> readMetricValuesIntoEntity(EntityBase entity, string metricName, AppDRESTMetric appDRESTMetric, int timerangeDuration)
        {
            List<MetricValue> metricValues = new List<MetricValue>(appDRESTMetric.metricValues.Count);
            foreach (AppDRESTMetricValue appDRESTMetricValue in appDRESTMetric.metricValues)
            {
                // Populate metrics into the list for output into CSV
                MetricValue metricValue = new MetricValue();
                metricValue.Controller = entity.Controller;
                metricValue.ApplicationID = entity.ApplicationID;
                metricValue.ApplicationName = entity.ApplicationName;

                metricValue.EntityID = entity.EntityID;
                metricValue.EntityName = entity.EntityName;
                metricValue.EntityType = entity.EntityType;

                metricValue.EventTimeStampUtc = convertFromUnixTimestamp(appDRESTMetricValue.startTimeInMillis);
                metricValue.EventTimeStamp = metricValue.EventTimeStampUtc.ToLocalTime();
                metricValue.EventTime = metricValue.EventTimeStamp;

                metricValue.MetricName = metricName;
                metricValue.MetricID = appDRESTMetric.metricId;
                switch (appDRESTMetric.frequency)
                {
                    case "SIXTY_MIN":
                        {
                            metricValue.MetricResolution = 60;
                            break;
                        }
                    case "TEN_MIN":
                        {
                            metricValue.MetricResolution = 10;
                            break;
                        }
                    case "ONE_MIN":
                        {
                            metricValue.MetricResolution = 1;
                            break;
                        }
                    default:
                        {
                            metricValue.MetricResolution = 1;
                            break;
                        }
                }

                metricValue.Count = appDRESTMetricValue.count;
                metricValue.Min = appDRESTMetricValue.min;
                metricValue.Max = appDRESTMetricValue.max;
                metricValue.Occurrences = appDRESTMetricValue.occurrences;
                metricValue.Sum = appDRESTMetricValue.sum;
                metricValue.Value = appDRESTMetricValue.value;

                metricValues.Add(metricValue);
            }

            // Update the entity with the calculated values if there were more than 1 metric value in the list
            // The speed of this can be improved if I were to keep a rolling total rather than a lambda but I'll do it later
            switch (metricName)
            {
                case METRIC_ART_FULLNAME:
                    double intermediateART = (double)metricValues.Sum(mv => mv.Sum) / (double)metricValues.Sum(mv => mv.Count);
                    if (Double.IsNaN(intermediateART) == true)
                    {
                        entity.ART = 0;
                    }
                    else
                    {
                        entity.ART = (long)Math.Round(intermediateART, 0);
                    }
                    entity.TimeTotal = metricValues.Sum(mv => mv.Sum);
                    break;

                case METRIC_CPM_FULLNAME:
                    entity.CPM = (long)Math.Round((double)((double)metricValues.Sum(mv => mv.Sum) / (double)timerangeDuration), 0);
                    entity.Calls = metricValues.Sum(mv => mv.Sum);
                    break;

                case METRIC_EPM_FULLNAME:
                    entity.EPM = (long)Math.Round((double)((double)metricValues.Sum(mv => mv.Sum) / (double)timerangeDuration), 0);
                    entity.Errors = metricValues.Sum(mv => mv.Sum);
                    entity.ErrorsPercentage = Math.Round((double)(double)entity.Errors / (double)entity.Calls * 100, 2);
                    if (Double.IsNaN(entity.ErrorsPercentage) == true) entity.ErrorsPercentage = 0;
                    break;

                case METRIC_EXCPM_FULLNAME:
                    entity.EXCPM = (long)Math.Round((double)((double)metricValues.Sum(mv => mv.Sum) / (double)timerangeDuration), 0);
                    entity.Exceptions = metricValues.Sum(mv => mv.Sum);
                    break;

                case METRIC_HTTPEPM_FULLNAME:
                    entity.HTTPEPM = (long)Math.Round((double)((double)metricValues.Sum(mv => mv.Sum) / (double)timerangeDuration), 0);
                    entity.HttpErrors = metricValues.Sum(mv => mv.Sum);
                    break;

                default:
                    break;
            }

            return metricValues;
        }

        private static List<EntityHourlyMetricValueLocation> getEntityHourlyMetricValueLocationsInTable(List<MetricValue> metricValues, List<JobTimeRange> jobTimeRanges)
        {
            // Pre-size this to about 100 items
            List<EntityHourlyMetricValueLocation> entityMetricsValueLocationList = new List<EntityHourlyMetricValueLocation>(100 * jobTimeRanges.Count);

            EntityHourlyMetricValueLocation currentEntityMetricsValueLocation = null;

            for (int i = 0; i < metricValues.Count; i++)
            {
                MetricValue metricValue = metricValues[i];

                bool startNewLocation = true;

                if (currentEntityMetricsValueLocation != null)
                {
                    if (currentEntityMetricsValueLocation.Controller == metricValue.Controller &&
                        currentEntityMetricsValueLocation.ApplicationID == metricValue.ApplicationID &&
                        currentEntityMetricsValueLocation.EntityType == metricValue.EntityType &&
                        currentEntityMetricsValueLocation.EntityID == metricValue.EntityID)
                    {
                        // Still rolling through the same hourly range?
                        if (currentEntityMetricsValueLocation.ToUtc.Hour == metricValue.EventTimeStampUtc.Hour)
                        {
                            // Yes, still in the same hour
                            currentEntityMetricsValueLocation.ToUtc = metricValue.EventTimeStampUtc;
                            currentEntityMetricsValueLocation.RowEnd = i;

                            startNewLocation = false;
                        }
                    }
                }

                if (startNewLocation)
                {
                    currentEntityMetricsValueLocation = new EntityHourlyMetricValueLocation();
                    currentEntityMetricsValueLocation.Controller = metricValue.Controller;
                    currentEntityMetricsValueLocation.ApplicationName = metricValue.ApplicationName;
                    currentEntityMetricsValueLocation.ApplicationID = metricValue.ApplicationID;
                    currentEntityMetricsValueLocation.EntityType = metricValue.EntityType;
                    currentEntityMetricsValueLocation.EntityName = metricValue.EntityName;
                    currentEntityMetricsValueLocation.EntityID = metricValue.EntityID;
                    currentEntityMetricsValueLocation.MetricName = metricValue.MetricName;
                    currentEntityMetricsValueLocation.MetricID = metricValue.MetricID;
                    currentEntityMetricsValueLocation.FromUtc = metricValue.EventTimeStampUtc;
                    currentEntityMetricsValueLocation.ToUtc = metricValue.EventTimeStampUtc;
                    currentEntityMetricsValueLocation.RowStart = i;
                    currentEntityMetricsValueLocation.RowEnd = i;

                    entityMetricsValueLocationList.Add(currentEntityMetricsValueLocation);
                }
            }

            return entityMetricsValueLocationList;
        }

        #endregion

        #region Entity links to Controller and Reports functions

        private static void updateEntityWithDeeplinks(EntityBase entityRow)
        {
            updateEntityWithDeeplinks(entityRow, null);
        }

        private static void updateEntityWithDeeplinks(EntityBase entityRow, JobTimeRange jobTimeRange)
        {
            // Decide what kind of timerange
            string DEEPLINK_THIS_TIMERANGE = DEEPLINK_TIMERANGE_LAST_15_MINUTES;
            if (jobTimeRange != null)
            {
                long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);
                long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
                DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);
            }

            // Determine what kind of entity we are dealing with and adjust accordingly
            string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
            long entityIdForMetricBrowser = entityRow.ApplicationID;
            if (entityRow is EntityApplication)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityTier)
            {
                EntityTier entity = (EntityTier)entityRow;
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entity.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entity.TierID, DEEPLINK_THIS_TIMERANGE);
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entity.TierID;
            }
            else if (entityRow is EntityNode)
            {
                EntityNode entity = (EntityNode)entityRow;
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entity.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entity.TierID, DEEPLINK_THIS_TIMERANGE);
                entity.NodeLink = String.Format(DEEPLINK_NODE, entityRow.Controller, entityRow.ApplicationID, entity.NodeID, DEEPLINK_THIS_TIMERANGE);
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_NODE_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entity.NodeID;
            }
            else if (entityRow is EntityBackend)
            {
                EntityBackend entity = (EntityBackend)entityRow;
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entity.BackendLink = String.Format(DEEPLINK_BACKEND, entityRow.Controller, entityRow.ApplicationID, entity.BackendID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityBusinessTransaction)
            {
                EntityBusinessTransaction entity = (EntityBusinessTransaction)entityRow;
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entity.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entity.TierID, DEEPLINK_THIS_TIMERANGE);
                entity.BTLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, entityRow.Controller, entityRow.ApplicationID, entity.BTID, DEEPLINK_THIS_TIMERANGE);
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entity.TierID;
            }
            else if (entityRow is EntityServiceEndpoint)
            {
                EntityServiceEndpoint entity = (EntityServiceEndpoint)entityRow;
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entity.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entity.TierID, DEEPLINK_THIS_TIMERANGE);
                entity.SEPLink = String.Format(DEEPLINK_SERVICE_ENDPOINT, entityRow.Controller, entityRow.ApplicationID, entity.TierID, entity.SEPID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityError)
            {
                EntityError entity = (EntityError)entityRow;
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entity.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entity.TierID, DEEPLINK_THIS_TIMERANGE);
                entity.ErrorLink = String.Format(DEEPLINK_ERROR, entityRow.Controller, entityRow.ApplicationID, entity.ErrorID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityInformationPoint)
            {
                EntityInformationPoint entity = (EntityInformationPoint)entityRow;
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entity.IPLink = String.Format(DEEPLINK_INFORMATION_POINT, entityRow.Controller, entityRow.ApplicationID, entity.IPID, DEEPLINK_THIS_TIMERANGE);
            }

            if (entityRow.MetricsIDs != null && entityRow.MetricsIDs.Count > 0)
            {
                StringBuilder sb = new StringBuilder(128);
                foreach (int metricID in entityRow.MetricsIDs)
                {
                    sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                    sb.Append(",");
                }
                sb.Remove(sb.Length - 1, 1);
                entityRow.MetricLink = String.Format(DEEPLINK_METRIC, entityRow.Controller, entityRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
            }
        }

        private static void updateEntityWithReportDetailAndFlameGraphLinks(EntityBase entity, JobConfiguration jobConfiguration, JobTarget jobTarget, string reportFolderPath)
        {
            string pathToLinkTo = getEntityMetricDetailReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
            if (pathToLinkTo.Length > 0)
            {
                pathToLinkTo = pathToLinkTo.Substring(reportFolderPath.Length + 1);
                entity.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", pathToLinkTo);
            }

            pathToLinkTo = getFlameGraphReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
            if (pathToLinkTo.Length > 0)
            {
                pathToLinkTo = pathToLinkTo.Substring(reportFolderPath.Length + 1);
                entity.FlameGraphLink = String.Format(@"=HYPERLINK(""{0}"", ""<Flame>"")", pathToLinkTo);
            }

            pathToLinkTo = getMetricGraphsReportFilePath(entity, jobConfiguration, jobTarget, reportFolderPath);
            if (pathToLinkTo.Length > 0)
            {
                pathToLinkTo = pathToLinkTo.Substring(reportFolderPath.Length + 1);
                entity.MetricGraphLink = String.Format(@"=HYPERLINK(""{0}"", ""<Graph>"")", pathToLinkTo);
            }
        }

        private static string getEntityMetricDetailReportFilePath(EntityBase entity, JobConfiguration jobConfiguration, JobTarget jobTarget, string reportFolderPath)
        {
            string reportFileName = String.Empty;
            string reportFilePath = String.Empty;

            if (entity is EntityApplication)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_APPLICATION_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityTier)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityNode)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityBackend)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityBusinessTransaction)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityServiceEndpoint)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityError)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }

            if (reportFileName.Length > 0)
            {
                reportFilePath = Path.Combine(
                    reportFolderPath,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    entity.FolderName,
                    reportFileName);
            }

            return reportFilePath;
        }

        #endregion

        #region Configuration detail conversion functions

        private static string getNameValueDetailsFromNameValueCollection(XmlNode xmlNodeWithNameValuePairs)
        {
            if (xmlNodeWithNameValuePairs == null) return String.Empty;

            StringBuilder sb = new StringBuilder();
            foreach (XmlNode xmlNodeNameValue in xmlNodeWithNameValuePairs.SelectNodes("name-values"))
            {
                sb.AppendFormat("{0}={1};", xmlNodeNameValue.SelectSingleNode("name").InnerText, xmlNodeNameValue.SelectSingleNode("value").InnerText);
            }

            return sb.ToString();
        }

        private static string getNameValueDetailsFromParametersCollection(XmlNode xmlNodeWithParameters)
        {
            if (xmlNodeWithParameters == null) return String.Empty;

            StringBuilder sb = new StringBuilder();
            foreach (XmlNode xmlNodeNameValue in xmlNodeWithParameters.SelectNodes("parameter"))
            {
                sb.AppendFormat(
                    "{0}:{1}/{2}={3}/{4};",
                    xmlNodeNameValue.Attributes["match-type"].Value,
                    xmlNodeNameValue.SelectSingleNode("name").Attributes["filter-value"].Value,
                    xmlNodeNameValue.SelectSingleNode("name").Attributes["filter-type"].Value,
                    xmlNodeNameValue.SelectSingleNode("value").Attributes["filter-value"].Value,
                    xmlNodeNameValue.SelectSingleNode("value").Attributes["filter-type"].Value);
            }

            return sb.ToString();
        }

        private static int getIntegerValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return 0;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return 0;
            }
            else
            {
                int value;
                if (Int32.TryParse(xmlNode.InnerText, out value) == true)
                {
                    return value;
                }
                else
                {
                    double value1;
                    if (Double.TryParse(xmlNode.InnerText, out value1) == true)
                    {
                        return Convert.ToInt32(Math.Floor(value1));
                    }
                    else
                    {
                        return 0;
                    }
                }
            }
        }

        private static long getLongValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return 0;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return 0;
            }
            else
            {
                long value;
                if (Int64.TryParse(xmlNode.InnerText, out value) == true)
                {
                    return value;
                }
                else
                {
                    double value1;
                    if (Double.TryParse(xmlNode.InnerText, out value1) == true)
                    {
                        return Convert.ToInt64(Math.Floor(value1));
                    }
                    else
                    {
                        return 0;
                    }
                }
            }
        }

        private static bool getBoolValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return false;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return false;
            }
            else
            {
                bool value;
                if (Boolean.TryParse(xmlNode.InnerText, out value) == true)
                {
                    return value;
                }
                else
                {
                    return false;
                }
            }
        }

        private static string getStringValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return String.Empty;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return String.Empty;
            }
            else
            {
                return xmlNode.InnerText;
            }
        }

        /// <summary>
        /// https://stackoverflow.com/questions/1123718/format-xml-string-to-print-friendly-xml-string
        /// </summary>
        /// <param name="XML"></param>
        /// <returns></returns>
        private static string makeXMLFormattedAndIndented(String XML)
        {
            string Result = "";

            MemoryStream MS = new MemoryStream();
            XmlTextWriter W = new XmlTextWriter(MS, Encoding.Unicode);
            XmlDocument D = new XmlDocument();

            try
            {
                // Load the XmlDocument with the XML.
                D.LoadXml(XML);

                W.Formatting = Formatting.Indented;

                // Write the XML into a formatting XmlTextWriter
                D.WriteContentTo(W);
                W.Flush();
                MS.Flush();

                // Have to rewind the MemoryStream in order to read
                // its contents.
                MS.Position = 0;

                // Read MemoryStream contents into a StreamReader.
                StreamReader SR = new StreamReader(MS);

                // Extract the text from the StreamReader.
                String FormattedXML = SR.ReadToEnd();

                Result = FormattedXML;
            }
            catch (XmlException)
            {
            }

            MS.Close();
            W.Close();

            return Result;
        }

        private static string makeXMLFormattedAndIndented(XmlNode xmlNode)
        {
            if (xmlNode != null)
            {
                return makeXMLFormattedAndIndented(xmlNode.OuterXml);
            }
            else
            {
                return String.Empty;
            }
        }

        private static string makeXMLFormattedAndIndented(XmlNodeList xmlNodeList)
        {
            if (xmlNodeList.Count > 0)
            {
                StringBuilder sb = new StringBuilder(128 * xmlNodeList.Count);
                foreach (XmlNode xmlNode in xmlNodeList)
                {
                    sb.Append(makeXMLFormattedAndIndented(xmlNode));
                    sb.AppendLine();
                }
                sb.Remove(sb.Length - 1, 1);
                return sb.ToString();
            }
            else
            {
                return String.Empty;
            }
        }

        private static BusinessTransactionDiscoveryRule fillBusinessTransactionDiscoveryRule(XmlNode entryMatchPointConfigurationNode, XmlNode entryMatchPointTransactionConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode)
        {
            BusinessTransactionDiscoveryRule businessTransactionDiscoveryRule = new BusinessTransactionDiscoveryRule();

            businessTransactionDiscoveryRule.Controller = applicationConfiguration.Controller;
            businessTransactionDiscoveryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionDiscoveryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionDiscoveryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionDiscoveryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionDiscoveryRule.AgentType = entryMatchPointConfigurationNode.SelectSingleNode("agent-type").InnerText;
            businessTransactionDiscoveryRule.EntryPointType = entryMatchPointTransactionConfigurationNode.Attributes["transaction-entry-point-type"].Value;
            businessTransactionDiscoveryRule.IsMonitoringEnabled = getBoolValueFromXmlNode(entryMatchPointTransactionConfigurationNode.SelectSingleNode("enable"));
            businessTransactionDiscoveryRule.DiscoveryType = entryMatchPointTransactionConfigurationNode.SelectSingleNode("discovery-config").Attributes["discovery-resolution"].Value;
            businessTransactionDiscoveryRule.IsDiscoveryEnabled = getBoolValueFromXmlNode(entryMatchPointTransactionConfigurationNode.SelectSingleNode("discovery-config/discovery-config-enabled"));
            businessTransactionDiscoveryRule.NamingConfigType = entryMatchPointTransactionConfigurationNode.SelectSingleNode("discovery-config/naming-config").Attributes["scheme"].Value;

            businessTransactionDiscoveryRule.RuleRawValue = makeXMLFormattedAndIndented(entryMatchPointTransactionConfigurationNode);

            if (applicationComponentNode != null)
            {
                businessTransactionDiscoveryRule.TierName = applicationComponentNode.SelectSingleNode("name").InnerText;
            }

            return businessTransactionDiscoveryRule;
        }

        private static BusinessTransactionEntryRule fillBusinessTransactionExcludeRule(XmlNode entryMatchPointConfigurationNode, XmlNode entryMatchPointTransactionConfigurationNode, XmlNode entryMatchPointCustomMatchPointConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode)
        {
            BusinessTransactionEntryRule businessTransactionEntryRule = new BusinessTransactionEntryRule();

            businessTransactionEntryRule.Controller = applicationConfiguration.Controller;
            businessTransactionEntryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryRule.AgentType = getStringValueFromXmlNode(entryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            businessTransactionEntryRule.EntryPointType = entryMatchPointTransactionConfigurationNode.Attributes["transaction-entry-point-type"].Value;
            businessTransactionEntryRule.RuleName = entryMatchPointCustomMatchPointConfigurationNode.Attributes["name"].Value;
            businessTransactionEntryRule.IsExclusion = true;

            XmlNode matchRule = entryMatchPointCustomMatchPointConfigurationNode.ChildNodes[0];
            fillMatchRuleDetails(businessTransactionEntryRule, matchRule);

            businessTransactionEntryRule.RuleRawValue = makeXMLFormattedAndIndented(entryMatchPointCustomMatchPointConfigurationNode);

            if (applicationComponentNode != null)
            {
                businessTransactionEntryRule.TierName = applicationComponentNode.SelectSingleNode("name").InnerText;
            }

            return businessTransactionEntryRule;
        }

        private static BusinessTransactionEntryRule fillBusinessTransactionEntryRule(XmlNode entryMatchPointConfigurationNode, XmlNode entryMatchPointCustomMatchPointConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode, List<EntityBusinessTransaction> businessTransactionsList)
        {
            BusinessTransactionEntryRule businessTransactionEntryRule = new BusinessTransactionEntryRule();

            businessTransactionEntryRule.Controller = applicationConfiguration.Controller;
            businessTransactionEntryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryRule.AgentType = getStringValueFromXmlNode(entryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            businessTransactionEntryRule.EntryPointType = entryMatchPointCustomMatchPointConfigurationNode.Attributes["transaction-entry-point-type"].Value;
            businessTransactionEntryRule.RuleName = getStringValueFromXmlNode(entryMatchPointCustomMatchPointConfigurationNode.SelectSingleNode("name"));
            businessTransactionEntryRule.IsBackground = getBoolValueFromXmlNode(entryMatchPointCustomMatchPointConfigurationNode.SelectSingleNode("background"));
            businessTransactionEntryRule.IsExclusion = false;

            XmlNode matchRule = entryMatchPointCustomMatchPointConfigurationNode.SelectSingleNode("match-rule").ChildNodes[0];
            fillMatchRuleDetails(businessTransactionEntryRule, matchRule);

            businessTransactionEntryRule.RuleRawValue = makeXMLFormattedAndIndented(entryMatchPointCustomMatchPointConfigurationNode);

            if (applicationComponentNode != null)
            {
                businessTransactionEntryRule.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            if (businessTransactionsList != null)
            {
                List<EntityBusinessTransaction> businessTransactionsForThisRule = new List<EntityBusinessTransaction>();
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule = businessTransactionsForThisRule.Distinct().ToList();
                businessTransactionEntryRule.NumDetectedBTs = businessTransactionsForThisRule.Count;
                if (businessTransactionsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * businessTransactionsForThisRule.Count);
                    foreach (EntityBusinessTransaction bt in businessTransactionsForThisRule)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    businessTransactionEntryRule.DetectedBTs = sb.ToString();
                }
            }

            return businessTransactionEntryRule;
        }

        private static BusinessTransactionEntryScope fillBusinessTransactionEntryScope(XmlNode scopeConfigurationNode, XmlNode scopeToRuleMappingConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            BusinessTransactionEntryScope businessTransactionEntryScope = new BusinessTransactionEntryScope();

            businessTransactionEntryScope.Controller = applicationConfiguration.Controller;
            businessTransactionEntryScope.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryScope.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryScope.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryScope.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryScope.ScopeName = scopeConfigurationNode.Attributes["scope-name"].Value;
            businessTransactionEntryScope.ScopeType = scopeConfigurationNode.Attributes["scope-type"].Value;
            businessTransactionEntryScope.Description = scopeConfigurationNode.Attributes["scope-description"].Value;
            businessTransactionEntryScope.Version = Convert.ToInt32(scopeConfigurationNode.Attributes["scope-version"].Value);

            XmlNodeList includedTierNodeList = scopeConfigurationNode.SelectNodes("included-tiers/tier-name");
            businessTransactionEntryScope.NumTiers = includedTierNodeList.Count;
            if (businessTransactionEntryScope.NumTiers > 0)
            {
                List<string> includedTiersList = new List<string>(businessTransactionEntryScope.NumTiers);
                foreach (XmlNode includedTierNode in includedTierNodeList)
                {
                    includedTiersList.Add(includedTierNode.InnerText);
                }
                includedTiersList.Sort();

                StringBuilder sb = new StringBuilder(32 * businessTransactionEntryScope.NumTiers);
                foreach (string includedTier in includedTiersList)
                {
                    sb.AppendFormat("{0};\n", includedTier);
                }
                sb.Remove(sb.Length - 1, 1);
                businessTransactionEntryScope.IncludedTiers = sb.ToString();
            }

            XmlNodeList ruleMappingNodeList = scopeToRuleMappingConfigurationNode.SelectNodes(String.Format("scope-rule-mapping[@scope-name='{0}']/rule", businessTransactionEntryScope.ScopeName));
            businessTransactionEntryScope.NumRules = ruleMappingNodeList.Count;
            if (businessTransactionEntryScope.NumRules > 0)
            {
                List<string> ruleMappingList = new List<string>(businessTransactionEntryScope.NumRules);
                foreach (XmlNode ruleMappingNode in ruleMappingNodeList)
                {
                    string ruleName = ruleMappingNode.Attributes["rule-name"].Value;
                    string ruleDescription = ruleMappingNode.Attributes["rule-description"].Value;
                    string ruleNameAndDescription = String.Empty;
                    if (ruleDescription.Length > 0 && ruleDescription != ruleName)
                    {
                        ruleMappingList.Add(String.Format("{0} ({1})", ruleName, ruleDescription));
                    }
                    else
                    {
                        ruleMappingList.Add(ruleName);
                    }
                }
                ruleMappingList.Sort();

                StringBuilder sb = new StringBuilder(32 * businessTransactionEntryScope.NumRules);
                foreach (string ruleMapping in ruleMappingList)
                {
                    sb.AppendFormat("{0};\n", ruleMapping);
                }
                sb.Remove(sb.Length - 1, 1);
                businessTransactionEntryScope.IncludedRules = sb.ToString();
            }

            return businessTransactionEntryScope;
        }

        private static BusinessTransactionEntryRule20 fillBusinessTransactionEntryRule20(XmlNode ruleConfigurationNode, XmlNode scopeToRuleMappingConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransaction> businessTransactionsList)
        {
            BusinessTransactionEntryRule20 businessTransactionEntryRule = new BusinessTransactionEntryRule20();

            businessTransactionEntryRule.Controller = applicationConfiguration.Controller;
            businessTransactionEntryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryRule.AgentType = ruleConfigurationNode.Attributes["agent-type"].Value;
            businessTransactionEntryRule.RuleName = ruleConfigurationNode.Attributes["rule-name"].Value;
            businessTransactionEntryRule.Description = ruleConfigurationNode.Attributes["rule-description"].Value;
            businessTransactionEntryRule.Version = Convert.ToInt32(ruleConfigurationNode.Attributes["version"].Value);

            businessTransactionEntryRule.IsEnabled = Convert.ToBoolean(ruleConfigurationNode.Attributes["enabled"].Value);
            businessTransactionEntryRule.Priority = Convert.ToInt32(ruleConfigurationNode.Attributes["priority"].Value);

            JObject txRuleSettings = JObject.Parse(getStringValueFromXmlNode(ruleConfigurationNode.SelectSingleNode("tx-match-rule")));
            if (txRuleSettings != null)
            {
                if (txRuleSettings["type"].ToString() != "CUSTOM")
                {
                    // This is likely autodiscovery rule, do not fill it out and bail
                    return null;
                }

                JToken txCustomRuleSettings = txRuleSettings["txcustomrule"];
                if (txCustomRuleSettings != null)
                {
                    if (txCustomRuleSettings["type"].ToString() == "EXCLUDE")
                    {
                        businessTransactionEntryRule.IsExclusion = true;
                    }
                    else if (txCustomRuleSettings["type"].ToString() == "INCLUDE")
                    {
                        businessTransactionEntryRule.IsExclusion = false;
                    }

                    businessTransactionEntryRule.EntryPointType = txCustomRuleSettings["txentrypointtype"].ToString();

                    JToken isBackgroundProperty = txCustomRuleSettings["properties"].Where(p => p["name"].ToString() == "BACKGROUND_TASK").FirstOrDefault();
                    if (isBackgroundProperty != null)
                    {
                        businessTransactionEntryRule.IsBackground = (bool)isBackgroundProperty["booleanvalue"];
                    }

                    businessTransactionEntryRule.MatchConditions = txCustomRuleSettings["matchconditions"].ToString();
                    businessTransactionEntryRule.Actions = txCustomRuleSettings["actions"].ToString();
                    businessTransactionEntryRule.Properties = txCustomRuleSettings["properties"].ToString();
                }
            }

            // I really want to do it, but some of our rules have apostrophes
            // Spring WS - Base servlet for Spring's web framework
            // And the query for scope-rule-mapping/rule[@rule-name='Spring WS - Base servlet for Spring's web framework'] breaks
            // So going to do it the hard way
            //XmlNode scopeForThisRuleNode = scopeToRuleMappingConfigurationNode.SelectSingleNode(String.Format("scope-rule-mapping/rule[@rule-name='{0}']", businessTransactionEntryRule.RuleName));
            foreach (XmlNode scopeNode in scopeToRuleMappingConfigurationNode.SelectNodes("scope-rule-mapping/rule"))
            {
                if (scopeNode.Attributes["rule-name"].Value == businessTransactionEntryRule.RuleName)
                {
                    businessTransactionEntryRule.ScopeName = scopeNode.ParentNode.Attributes["scope-name"].Value;
                    break;
                }
            }

            if (businessTransactionsList != null)
            {
                List<EntityBusinessTransaction> businessTransactionsForThisRule = new List<EntityBusinessTransaction>();
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule = businessTransactionsForThisRule.Distinct().ToList();
                businessTransactionEntryRule.NumDetectedBTs = businessTransactionsForThisRule.Count;
                if (businessTransactionsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * businessTransactionsForThisRule.Count);
                    foreach (EntityBusinessTransaction bt in businessTransactionsForThisRule)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    businessTransactionEntryRule.DetectedBTs = sb.ToString();
                }
            }

            businessTransactionEntryRule.RuleRawValue = makeXMLFormattedAndIndented(ruleConfigurationNode);

            return businessTransactionEntryRule;
        }

        private static List<BusinessTransactionDiscoveryRule20> fillBusinessTransactionDiscoveryRule20(XmlNode ruleConfigurationNode, XmlNode scopeToRuleMappingConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransaction> businessTransactionsList)
        {
            List<BusinessTransactionDiscoveryRule20> businessTransactionDiscoveryRule20List = new List<BusinessTransactionDiscoveryRule20>();

            JObject txRuleSettings = JObject.Parse(getStringValueFromXmlNode(ruleConfigurationNode.SelectSingleNode("tx-match-rule")));
            if (txRuleSettings != null)
            {
                if (txRuleSettings["type"].ToString() != "AUTOMATIC_DISCOVERY")
                {
                    // This is not an autodiscovery rule, do not fill it out and bail
                    return null;
                }

                JArray txDiscoveryConfigs = (JArray)txRuleSettings["txautodiscoveryrule"]["autodiscoveryconfigs"];
                if (txDiscoveryConfigs != null && txDiscoveryConfigs.Count > 0)
                {
                    foreach (JToken txDiscoveryConfig in txDiscoveryConfigs)
                    {
                        BusinessTransactionDiscoveryRule20 businessTransactionDiscoveryRule20 = new BusinessTransactionDiscoveryRule20();

                        businessTransactionDiscoveryRule20.Controller = applicationConfiguration.Controller;
                        businessTransactionDiscoveryRule20.ControllerLink = applicationConfiguration.ControllerLink;
                        businessTransactionDiscoveryRule20.ApplicationName = applicationConfiguration.ApplicationName;
                        businessTransactionDiscoveryRule20.ApplicationID = applicationConfiguration.ApplicationID;
                        businessTransactionDiscoveryRule20.ApplicationLink = applicationConfiguration.ApplicationLink;

                        businessTransactionDiscoveryRule20.AgentType = ruleConfigurationNode.Attributes["agent-type"].Value;
                        businessTransactionDiscoveryRule20.RuleName = ruleConfigurationNode.Attributes["rule-name"].Value;
                        businessTransactionDiscoveryRule20.Description = ruleConfigurationNode.Attributes["rule-description"].Value;
                        businessTransactionDiscoveryRule20.Version = Convert.ToInt32(ruleConfigurationNode.Attributes["version"].Value);

                        businessTransactionDiscoveryRule20.IsEnabled = Convert.ToBoolean(ruleConfigurationNode.Attributes["enabled"].Value);
                        businessTransactionDiscoveryRule20.Priority = Convert.ToInt32(ruleConfigurationNode.Attributes["priority"].Value);

                        businessTransactionDiscoveryRule20.EntryPointType = txDiscoveryConfig["txentrypointtype"].ToString();
                        businessTransactionDiscoveryRule20.IsMonitoringEnabled = (bool)txDiscoveryConfig["monitoringenabled"];
                        businessTransactionDiscoveryRule20.IsDiscoveryEnabled = (bool)txDiscoveryConfig["discoveryenabled"];
                        businessTransactionDiscoveryRule20.NamingConfigType = txDiscoveryConfig["namingschemetype"].ToString();

                        if (txDiscoveryConfig["httpautodiscovery"] != null)
                        {
                            businessTransactionDiscoveryRule20.HTTPAutoDiscovery = txDiscoveryConfig["httpautodiscovery"].ToString();
                        }

                        // I really want to do it, but some of our rules have apostrophes
                        // Spring WS - Base servlet for Spring's web framework
                        // And the query for scope-rule-mapping/rule[@rule-name='Spring WS - Base servlet for Spring's web framework'] breaks
                        // So going to do it the hard way
                        //XmlNode scopeForThisRuleNode = scopeToRuleMappingConfigurationNode.SelectSingleNode(String.Format("scope-rule-mapping/rule[@rule-name='{0}']", businessTransactionEntryRule.RuleName));
                        foreach (XmlNode scopeNode in scopeToRuleMappingConfigurationNode.SelectNodes("scope-rule-mapping/rule"))
                        {
                            if (scopeNode.Attributes["rule-name"].Value == businessTransactionDiscoveryRule20.RuleName)
                            {
                                businessTransactionDiscoveryRule20.ScopeName = scopeNode.ParentNode.Attributes["scope-name"].Value;
                                break;
                            }
                        }

                        businessTransactionDiscoveryRule20List.Add(businessTransactionDiscoveryRule20);
                    }
                }
            }

            return businessTransactionDiscoveryRule20List;
        }

        private static BackendDiscoveryRule fillBackendDiscoveryRule(XmlNode backendDiscoveryMatchPointConfigurationNode, XmlNode backendDiscoveryConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode, List<EntityBackend> backendsList)
        {
            BackendDiscoveryRule backendDiscoveryRule = new BackendDiscoveryRule();

            backendDiscoveryRule.Controller = applicationConfiguration.Controller;
            backendDiscoveryRule.ControllerLink = applicationConfiguration.ControllerLink;
            backendDiscoveryRule.ApplicationName = applicationConfiguration.ApplicationName;
            backendDiscoveryRule.ApplicationID = applicationConfiguration.ApplicationID;
            backendDiscoveryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            backendDiscoveryRule.AgentType = getStringValueFromXmlNode(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            backendDiscoveryRule.ExitType = getStringValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("exit-point-type"));
            if (backendDiscoveryRule.ExitType == "CUSTOM")
            {
                backendDiscoveryRule.ExitType = getStringValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("exit-point-subtype"));
            }
            backendDiscoveryRule.RuleName = getStringValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("name"));
            backendDiscoveryRule.IsEnabled = getBoolValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("discovery-enabled"));
            backendDiscoveryRule.IsCorrelationSupported = getBoolValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("supports-correlation"));
            backendDiscoveryRule.IsCorrelationEnabled = getBoolValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("correlation-enabled"));
            backendDiscoveryRule.Priority = getIntegerValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("priority"));

            backendDiscoveryRule.IdentityOptions = makeXMLFormattedAndIndented(backendDiscoveryConfigurationNode.SelectSingleNode("backend-identity-options"));
            backendDiscoveryRule.DiscoveryConditions = makeXMLFormattedAndIndented(backendDiscoveryConfigurationNode.SelectSingleNode("backend-identity-options"));

            backendDiscoveryRule.RuleRawValue = makeXMLFormattedAndIndented(backendDiscoveryConfigurationNode);

            if (applicationComponentNode != null)
            {
                backendDiscoveryRule.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            if (backendsList != null)
            {
                List<EntityBackend> backendsForThisRule = new List<EntityBackend>();

                // Try to find them by match first
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName == backendDiscoveryRule.RuleName).ToList());
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName.StartsWith(String.Format("{0}", backendDiscoveryRule.RuleName))).ToList());
                backendsForThisRule = backendsForThisRule.Distinct().ToList();
                if (backendsForThisRule.Count == 0)
                {
                    // If by name doesn't match, let's do by type
                    // Nope, this doesn't work. Backend is differentiated by the Agent Type
                    // Because of that the backend matches every darn type starting with Default
                    // backendsForThisRule.AddRange(backendsList.Where(b => b.BackendType == backendDiscoveryRule.ExitType).ToList());
                }
                backendDiscoveryRule.NumDetectedBackends = backendsForThisRule.Count;
                if (backendsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * backendsForThisRule.Count);
                    foreach (EntityBackend backend in backendsForThisRule)
                    {
                        sb.AppendFormat("{0} ({1});\n", backend.BackendName, backend.BackendID);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    backendDiscoveryRule.DetectedBackends = sb.ToString();
                }
            }

            return backendDiscoveryRule;
        }

        private static CustomExitRule fillCustomExitRule(XmlNode backendDiscoveryMatchPointConfigurationNode, XmlNode customExitConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode, List<EntityBackend> backendsList)
        {
            CustomExitRule customExitRule = new CustomExitRule();

            customExitRule.Controller = applicationConfiguration.Controller;
            customExitRule.ControllerLink = applicationConfiguration.ControllerLink;
            customExitRule.ApplicationName = applicationConfiguration.ApplicationName;
            customExitRule.ApplicationID = applicationConfiguration.ApplicationID;
            customExitRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            customExitRule.AgentType = getStringValueFromXmlNode(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            customExitRule.ExitType = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("type"));

            customExitRule.RuleName = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("name"));
            customExitRule.MatchClass = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/class-name"));
            customExitRule.MatchMethod = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/method-name"));
            customExitRule.MatchType = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/match-type"));
            customExitRule.MatchParameterTypes = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/method-parameter-types"));

            customExitRule.IsApplyToAllBTs = getBoolValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/apply-to-all-bts"));

            customExitRule.DataCollectorsConfig = makeXMLFormattedAndIndented(customExitConfigurationNode.SelectNodes("instrumentation-point/method-invocation-data-gatherer-config"));
            customExitRule.InfoPointsConfig = makeXMLFormattedAndIndented(customExitConfigurationNode.SelectNodes("instrumentation-point/info-point-metric-definition"));

            customExitRule.RuleRawValue = makeXMLFormattedAndIndented(customExitConfigurationNode);

            if (applicationComponentNode != null)
            {
                customExitRule.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            if (backendsList != null)
            {
                List<EntityBackend> backendsForThisRule = new List<EntityBackend>();

                // Try to find them by match first
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName == customExitRule.RuleName).ToList());
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName.StartsWith(String.Format("{0}", customExitRule.RuleName))).ToList());
                backendsForThisRule = backendsForThisRule.Distinct().ToList();
                if (backendsForThisRule.Count == 0)
                {
                    // If by name doesn't match, let's do by type
                    // Nope, this doesn't work. Backend is differentiated by the Agent Type
                    // Because of that the backend matches every darn type starting with Default
                    // backendsForThisRule.AddRange(backendsList.Where(b => b.BackendType == customExitRule.ExitType).ToList());
                }
                customExitRule.NumDetectedBackends = backendsForThisRule.Count;
                if (backendsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * backendsForThisRule.Count);
                    foreach (EntityBackend backend in backendsForThisRule)
                    {
                        sb.AppendFormat("{0} ({1});\n", backend.BackendName, backend.BackendID);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    customExitRule.DetectedBackends = sb.ToString();
                }
            }

            return customExitRule;
        }

        private static InformationPointRule fillInformationPointRule(XmlNode informationPointConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            InformationPointRule informationPointRule = new InformationPointRule();

            informationPointRule.Controller = applicationConfiguration.Controller;
            informationPointRule.ControllerLink = applicationConfiguration.ControllerLink;
            informationPointRule.ApplicationName = applicationConfiguration.ApplicationName;
            informationPointRule.ApplicationID = applicationConfiguration.ApplicationID;
            informationPointRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            informationPointRule.AgentType = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("agent-type"));

            informationPointRule.RuleName = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("name"));
            informationPointRule.MatchClass = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/class-name"));
            informationPointRule.MatchMethod = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/method-name"));
            informationPointRule.MatchType = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/match-type"));
            informationPointRule.MatchParameterTypes = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/method-parameter-types"));
            informationPointRule.MatchCondition = makeXMLFormattedAndIndented(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/match-condition"));

            informationPointRule.InfoPointsConfig = makeXMLFormattedAndIndented(informationPointConfigurationNode.SelectNodes("info-point-metric-definition"));

            informationPointRule.RuleRawValue = makeXMLFormattedAndIndented(informationPointConfigurationNode);

            return informationPointRule;
        }

        private static AgentConfigurationProperty fillAgentConfigurationProperty(XmlNode agentConfigurationNode, XmlNode agentPropertyDefinitionConfigurationNode, XmlNode agentPropertyValueConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode)
        {
            AgentConfigurationProperty agentConfigurationProperty = new AgentConfigurationProperty();

            agentConfigurationProperty.Controller = applicationConfiguration.Controller;
            agentConfigurationProperty.ControllerLink = applicationConfiguration.ControllerLink;
            agentConfigurationProperty.ApplicationName = applicationConfiguration.ApplicationName;
            agentConfigurationProperty.ApplicationID = applicationConfiguration.ApplicationID;
            agentConfigurationProperty.ApplicationLink = applicationConfiguration.ApplicationLink;

            agentConfigurationProperty.AgentType = getStringValueFromXmlNode(agentConfigurationNode.SelectSingleNode("agent-type"));

            agentConfigurationProperty.PropertyName = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("name"));
            agentConfigurationProperty.PropertyType = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("type"));
            agentConfigurationProperty.Description = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("description"));
            agentConfigurationProperty.IsRequired = getBoolValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("required"));

            switch (agentConfigurationProperty.PropertyType)
            {
                case "STRING":
                    agentConfigurationProperty.StringValue = getStringValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    agentConfigurationProperty.StringDefaultValue = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("default-string-value"));
                    agentConfigurationProperty.StringMaxLength = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("string-max-length"));
                    agentConfigurationProperty.StringAllowedValues = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("allowed-string-values"));

                    agentConfigurationProperty.IsDefault = (agentConfigurationProperty.StringDefaultValue == agentConfigurationProperty.StringDefaultValue);
                    break;

                case "BOOLEAN":
                    agentConfigurationProperty.BooleanValue = getBoolValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    agentConfigurationProperty.BooleanDefaultValue = getBoolValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("default-string-value"));

                    agentConfigurationProperty.IsDefault = (agentConfigurationProperty.BooleanValue == agentConfigurationProperty.BooleanDefaultValue);
                    break;

                case "INTEGER":
                    agentConfigurationProperty.IntegerValue = getIntegerValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    agentConfigurationProperty.IntegerDefaultValue = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("default-string-value"));
                    agentConfigurationProperty.IntegerMinValue = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("lower-numeric-bound"));
                    agentConfigurationProperty.IntegerMaxValue = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("upper-numeric-bound"));

                    agentConfigurationProperty.IsDefault = (agentConfigurationProperty.IntegerValue == agentConfigurationProperty.IntegerDefaultValue);
                    break;

                default:
                    agentConfigurationProperty.StringValue = getStringValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    break;
            }

            if (applicationComponentNode != null)
            {
                agentConfigurationProperty.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            return agentConfigurationProperty;
        }

        private static MethodInvocationDataCollector fillMethodInvocationDataCollector(XmlNode methodInvocationDataCollectorConfigurationNode, XmlNode dataGathererConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList)
        {
            MethodInvocationDataCollector methodInvocationDataCollector = new MethodInvocationDataCollector();

            methodInvocationDataCollector.Controller = applicationConfiguration.Controller;
            methodInvocationDataCollector.ControllerLink = applicationConfiguration.ControllerLink;
            methodInvocationDataCollector.ApplicationName = applicationConfiguration.ApplicationName;
            methodInvocationDataCollector.ApplicationID = applicationConfiguration.ApplicationID;
            methodInvocationDataCollector.ApplicationLink = applicationConfiguration.ApplicationLink;

            methodInvocationDataCollector.CollectorName = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("name"));

            methodInvocationDataCollector.IsAPM = Convert.ToBoolean(methodInvocationDataCollectorConfigurationNode.Attributes["enabled-for-apm"].Value);
            methodInvocationDataCollector.IsAnalytics = Convert.ToBoolean(methodInvocationDataCollectorConfigurationNode.Attributes["enabled-for-analytics"].Value);
            methodInvocationDataCollector.IsAssignedToNewBTs = Convert.ToBoolean(methodInvocationDataCollectorConfigurationNode.Attributes["attach-to-new-bts"].Value);

            methodInvocationDataCollector.MatchClass = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/class-name"));
            methodInvocationDataCollector.MatchMethod = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/method-name"));
            methodInvocationDataCollector.MatchType = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/match-type"));
            methodInvocationDataCollector.MatchParameterTypes = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/method-parameter-types"));

            methodInvocationDataCollector.DataGathererName = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("name"));
            methodInvocationDataCollector.DataGathererType = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("gatherer-type"));
            methodInvocationDataCollector.DataGathererPosition = getIntegerValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("position"));
            methodInvocationDataCollector.DataGathererTransform = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("transformer-type"));
            methodInvocationDataCollector.DataGathererGetter = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("transformer-value"));

            methodInvocationDataCollector.IsAssignedToBTs = false;

            methodInvocationDataCollector.RuleRawValue = makeXMLFormattedAndIndented(methodInvocationDataCollectorConfigurationNode);

            if (entityBusinessTransactionConfigurationsList != null)
            {
                List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsForThisDCList = entityBusinessTransactionConfigurationsList.Where(b => b.AssignedMIDCs.Contains(String.Format("{0};", methodInvocationDataCollector.CollectorName)) == true).ToList();

                if (entityBusinessTransactionConfigurationsForThisDCList.Count > 0)
                {
                    methodInvocationDataCollector.IsAssignedToBTs = true;
                    methodInvocationDataCollector.NumAssignedBTs = entityBusinessTransactionConfigurationsForThisDCList.Count;

                    StringBuilder sb = new StringBuilder(32 * entityBusinessTransactionConfigurationsForThisDCList.Count);
                    foreach (EntityBusinessTransactionConfiguration bt in entityBusinessTransactionConfigurationsForThisDCList)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    methodInvocationDataCollector.AssignedBTs = sb.ToString();
                }
            }

            return methodInvocationDataCollector;
        }

        private static HTTPDataCollector fillHTTPDataCollector(XmlNode httpDataCollectorConfigurationNode, XmlNode dataGathererConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList)
        {
            HTTPDataCollector httpDataCollector = new HTTPDataCollector();

            httpDataCollector.Controller = applicationConfiguration.Controller;
            httpDataCollector.ControllerLink = applicationConfiguration.ControllerLink;
            httpDataCollector.ApplicationName = applicationConfiguration.ApplicationName;
            httpDataCollector.ApplicationID = applicationConfiguration.ApplicationID;
            httpDataCollector.ApplicationLink = applicationConfiguration.ApplicationLink;

            httpDataCollector.CollectorName = getStringValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("name"));

            httpDataCollector.IsAPM = Convert.ToBoolean(httpDataCollectorConfigurationNode.Attributes["enabled-for-apm"].Value);
            httpDataCollector.IsAnalytics = Convert.ToBoolean(httpDataCollectorConfigurationNode.Attributes["enabled-for-analytics"].Value);
            httpDataCollector.IsAssignedToNewBTs = Convert.ToBoolean(httpDataCollectorConfigurationNode.Attributes["attach-to-new-bts"].Value);

            httpDataCollector.IsURLEnabled = getBoolValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("gather-url"));
            httpDataCollector.IsSessionIDEnabled = getBoolValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("gather-session-id"));
            httpDataCollector.IsUserPrincipalEnabled = getBoolValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("gather-user-principal"));

            if (dataGathererConfigurationNode != null)
            {
                httpDataCollector.DataGathererName = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("display-name"));
                httpDataCollector.DataGathererValue = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("name"));
            }

            httpDataCollector.IsAssignedToBTs = false;

            httpDataCollector.RuleRawValue = makeXMLFormattedAndIndented(httpDataCollectorConfigurationNode);

            if (entityBusinessTransactionConfigurationsList != null)
            {
                List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsForThisDCList = entityBusinessTransactionConfigurationsList.Where(b => b.AssignedMIDCs.Contains(String.Format("{0};", httpDataCollector.CollectorName)) == true).ToList();

                if (entityBusinessTransactionConfigurationsForThisDCList.Count > 0)
                {
                    httpDataCollector.IsAssignedToBTs = true;
                    httpDataCollector.NumAssignedBTs = entityBusinessTransactionConfigurationsForThisDCList.Count;

                    StringBuilder sb = new StringBuilder(32 * entityBusinessTransactionConfigurationsForThisDCList.Count);
                    foreach (EntityBusinessTransactionConfiguration bt in entityBusinessTransactionConfigurationsForThisDCList)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    httpDataCollector.AssignedBTs = sb.ToString();
                }
            }

            return httpDataCollector;
        }

        private static EntityTierConfiguration fillEntityTierConfiguration(XmlNode applicationComponentNode, EntityApplicationConfiguration applicationConfiguration, List<EntityTier> tiersList, List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList)
        {
            EntityTierConfiguration entityTierConfiguration = new EntityTierConfiguration();

            entityTierConfiguration.Controller = applicationConfiguration.Controller;
            entityTierConfiguration.ControllerLink = applicationConfiguration.ControllerLink;
            entityTierConfiguration.ApplicationName = applicationConfiguration.ApplicationName;
            entityTierConfiguration.ApplicationID = applicationConfiguration.ApplicationID;
            entityTierConfiguration.ApplicationLink = applicationConfiguration.ApplicationLink;

            entityTierConfiguration.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            entityTierConfiguration.TierDescription = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("description"));
            entityTierConfiguration.TierType = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("component-type"));
            if (tiersList != null)
            {
                EntityTier tier = tiersList.Where(t => t.TierName == entityTierConfiguration.TierName).FirstOrDefault();
                if (tier != null)
                {
                    entityTierConfiguration.TierID = tier.TierID;
                }
            }

            entityTierConfiguration.IsDynamicScalingEnabled = getBoolValueFromXmlNode(applicationComponentNode.SelectSingleNode("dynamic-scaling-enabled"));

            entityTierConfiguration.MemoryConfig = makeXMLFormattedAndIndented(applicationComponentNode.SelectSingleNode("memory-configuration"));
            entityTierConfiguration.CacheConfig = makeXMLFormattedAndIndented(applicationComponentNode.SelectSingleNode("cache-configuration"));
            entityTierConfiguration.CustomCacheConfig = makeXMLFormattedAndIndented(applicationComponentNode.SelectSingleNode("custom-cache-configurations"));

            if (entityBusinessTransactionConfigurationsList != null)
            {
                List<EntityBusinessTransactionConfiguration> businessTransactionsList = entityBusinessTransactionConfigurationsList.Where(b => b.TierID == entityTierConfiguration.TierID).ToList();
                entityTierConfiguration.NumBTs = businessTransactionsList.Count;

                var businessTransactionsListGroup = businessTransactionsList.GroupBy(b => b.BTType);
                entityTierConfiguration.NumBTTypes = businessTransactionsListGroup.Count();
            }

            return entityTierConfiguration;
        }

        private static EntityBusinessTransactionConfiguration fillEntityBusinessTransactionConfiguration(XmlNode applicationComponentNode, XmlNode businessTransactionConfigurationtNode, EntityApplicationConfiguration applicationConfiguration, List<EntityTier> tiersList, List<EntityBusinessTransaction> businessTransactionsList)
        {
            EntityBusinessTransactionConfiguration entityBusinessTransactionConfiguration = new EntityBusinessTransactionConfiguration();

            entityBusinessTransactionConfiguration.Controller = applicationConfiguration.Controller;
            entityBusinessTransactionConfiguration.ControllerLink = applicationConfiguration.ControllerLink;
            entityBusinessTransactionConfiguration.ApplicationName = applicationConfiguration.ApplicationName;
            entityBusinessTransactionConfiguration.ApplicationID = applicationConfiguration.ApplicationID;
            entityBusinessTransactionConfiguration.ApplicationLink = applicationConfiguration.ApplicationLink;

            entityBusinessTransactionConfiguration.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            if (tiersList != null)
            {
                EntityTier tier = tiersList.Where(t => t.TierName == entityBusinessTransactionConfiguration.TierName).FirstOrDefault();
                if (tier != null)
                {
                    entityBusinessTransactionConfiguration.TierID = tier.TierID;
                }
            }

            entityBusinessTransactionConfiguration.BTName = getStringValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("name"));
            entityBusinessTransactionConfiguration.BTType = businessTransactionConfigurationtNode.Attributes["transaction-entry-point-type"].Value;
            if (businessTransactionsList != null)
            {
                EntityBusinessTransaction businessTransaction = businessTransactionsList.Where(b => b.BTName == entityBusinessTransactionConfiguration.BTName && b.TierName == entityBusinessTransactionConfiguration.TierName).FirstOrDefault();
                if (businessTransaction != null)
                {
                    entityBusinessTransactionConfiguration.BTID = businessTransaction.BTID;
                }
            }

            entityBusinessTransactionConfiguration.IsExcluded = Convert.ToBoolean(businessTransactionConfigurationtNode.Attributes["excluded"].Value);
            entityBusinessTransactionConfiguration.IsBackground = getBoolValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("background"));

            entityBusinessTransactionConfiguration.IsEUMEnabled = getBoolValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("enabled-for-eum"));
            entityBusinessTransactionConfiguration.IsEUMPossible = getStringValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("eum-auto-enable-possible"));
            entityBusinessTransactionConfiguration.IsAnalyticsEnabled = getBoolValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("analytics-enabled"));

            entityBusinessTransactionConfiguration.BTSLAConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("sla"));
            entityBusinessTransactionConfiguration.BTSnapshotCollectionConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("business-transaction-config/snapshot-collection-policy"));
            entityBusinessTransactionConfiguration.BTRequestThresholdConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("business-transaction-config/bt-request-thresholds"));
            entityBusinessTransactionConfiguration.BTBackgroundSnapshotCollectionConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("background-business-transaction-config/snapshot-collection-policy"));
            entityBusinessTransactionConfiguration.BTBackgroundRequestThresholdConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("background-business-transaction-config/bt-request-thresholds"));

            entityBusinessTransactionConfiguration.NumAssignedMIDCs = businessTransactionConfigurationtNode.SelectNodes("data-gatherer-config").Count;
            entityBusinessTransactionConfiguration.AssignedMIDCs = String.Empty;
            if (entityBusinessTransactionConfiguration.NumAssignedMIDCs > 0)
            {
                StringBuilder sb = new StringBuilder(32 * entityBusinessTransactionConfiguration.NumAssignedMIDCs);
                foreach (XmlNode dataGathererXmlNode in businessTransactionConfigurationtNode.SelectNodes("data-gatherer-config"))
                {
                    sb.AppendFormat("{0};\n", dataGathererXmlNode.InnerText);
                }
                sb.Remove(sb.Length - 1, 1);
                entityBusinessTransactionConfiguration.AssignedMIDCs = sb.ToString();
            }

            return entityBusinessTransactionConfiguration;
        }

        private static AgentCallGraphSetting fillAgentCallGraphSetting(XmlNode agentCallGraphSettingConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            AgentCallGraphSetting agentCallGraphSetting = new AgentCallGraphSetting();

            agentCallGraphSetting.Controller = applicationConfiguration.Controller;
            agentCallGraphSetting.ControllerLink = applicationConfiguration.ControllerLink;
            agentCallGraphSetting.ApplicationName = applicationConfiguration.ApplicationName;
            agentCallGraphSetting.ApplicationID = applicationConfiguration.ApplicationID;
            agentCallGraphSetting.ApplicationLink = applicationConfiguration.ApplicationLink;

            agentCallGraphSetting.AgentType = agentCallGraphSettingConfigurationNode.Attributes["agent-type"].Value;

            agentCallGraphSetting.SamplingRate = getIntegerValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("sampling-rate"));
            agentCallGraphSetting.IncludePackages = getStringValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("include-packages"));
            agentCallGraphSetting.NumIncludePackages = agentCallGraphSetting.IncludePackages.Split('|').Count();
            agentCallGraphSetting.IncludePackages = agentCallGraphSetting.IncludePackages.Replace("|", ";\n");
            agentCallGraphSetting.ExcludePackages = getStringValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("exclude-packages"));
            agentCallGraphSetting.NumExcludePackages = agentCallGraphSetting.ExcludePackages.Split('|').Count();
            agentCallGraphSetting.ExcludePackages = agentCallGraphSetting.ExcludePackages.Replace("|", ";\n");
            agentCallGraphSetting.MinSQLDuration = getIntegerValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("min-duration-for-db-calls"));
            agentCallGraphSetting.IsRawSQLEnabled = getBoolValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("raw-sql"));
            agentCallGraphSetting.IsHotSpotEnabled = getBoolValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("hotspots-enabled"));

            return agentCallGraphSetting;
        }

        private static HealthRule fillHealthRule(XmlNode healthRuleConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            HealthRule healthRule = new HealthRule();

            healthRule.Controller = applicationConfiguration.Controller;
            healthRule.ControllerLink = applicationConfiguration.ControllerLink;
            healthRule.ApplicationName = applicationConfiguration.ApplicationName;
            healthRule.ApplicationID = applicationConfiguration.ApplicationID;
            healthRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            healthRule.RuleName = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("name"));
            healthRule.RuleType = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("type"));
            healthRule.Description = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("description"));
            healthRule.IsEnabled = getBoolValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("enabled"));
            healthRule.IsDefault = getBoolValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("is-default"));
            healthRule.IsAlwaysEnabled = getBoolValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("always-enabled"));
            healthRule.Schedule = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("schedule"));
            healthRule.DurationOfEvalPeriod = getIntegerValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("duration-min"));
            healthRule.WaitTimeAfterViolation = getIntegerValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("wait-time-min"));

            healthRule.AffectedEntitiesRawValue = makeXMLFormattedAndIndented(healthRuleConfigurationNode.SelectSingleNode("affected-entities-match-criteria"));
            healthRule.CriticalConditionRawValue = makeXMLFormattedAndIndented(healthRuleConfigurationNode.SelectSingleNode("critical-execution-criteria"));
            healthRule.WarningConditionRawValue = makeXMLFormattedAndIndented(healthRuleConfigurationNode.SelectSingleNode("warning-execution-criteria"));

            // Affected entity selection
            XmlNode affectedWrapperXmlNode = healthRuleConfigurationNode.SelectSingleNode("affected-entities-match-criteria").ChildNodes[0];
            if (affectedWrapperXmlNode != null)
            {
                healthRule.AffectsEntityType = getStringValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("type"));
                healthRule.AffectsEntityMatchType = getStringValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("match-type"));
                healthRule.AffectsEntityMatchPattern = getStringValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("match-pattern"));
                healthRule.AffectsEntityMatchIsInverse = getBoolValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("inverse"));
                healthRule.AffectsEntityMatchCriteria = makeXMLFormattedAndIndented(affectedWrapperXmlNode.SelectNodes("*[not(self::type) and not(self::match-type) and not(self::match-pattern) and not(self::inverse)]"));
            }

            // XML can look like that for single element
            //<critical-execution-criteria>
            //    <entity-aggregation-scope>
            //        <type>ANY</type>
            //        <value>0</value>
            //    </entity-aggregation-scope>
            //    <policy-condition>
            //        <type>leaf</type>
            //        <display-name>condition 1</display-name>
            //        <condition-value-type>ABSOLUTE</condition-value-type>
            //        <condition-value>0.0</condition-value>
            //        <operator>GREATER_THAN</operator>
            //        <condition-expression/>
            //        <use-active-baseline>false</use-active-baseline>
            //        <trigger-on-no-data>true</trigger-on-no-data>
            //        <metric-expression>
            //            <type>leaf</type>
            //            <function-type>VALUE</function-type>
            //            <value>0</value>
            //            <is-literal-expression>false</is-literal-expression>
            //            <display-name>null</display-name>
            //            <metric-definition>
            //                <type>LOGICAL_METRIC</type>
            //                <logical-metric-name>Agent|App|Availability</logical-metric-name>
            //            </metric-definition>
            //        </metric-expression>
            //    </policy-condition>
            //</critical-execution-criteria>

            // Or like that for multiple
            //<critical-execution-criteria>
            //    <entity-aggregation-scope>
            //        <type>AGGREGATE</type>
            //        <value>0</value>
            //    </entity-aggregation-scope>
            //    <policy-condition>
            //        <type>boolean</type>
            //        <operator>AND</operator>
            //        <condition1>
            //            <type>leaf</type>
            //            <display-name>Average Response Time (ms) Baseline Condition</display-name>
            //            <condition-value-type>BASELINE_STANDARD_DEVIATION</condition-value-type>
            //            <condition-value>3.0</condition-value>
            //            <operator>GREATER_THAN</operator>
            //            <condition-expression/>
            //            <use-active-baseline>true</use-active-baseline>
            //            <trigger-on-no-data>false</trigger-on-no-data>
            //            <metric-expression>
            //                <type>leaf</type>
            //                <function-type>VALUE</function-type>
            //                <value>0</value>
            //                <is-literal-expression>false</is-literal-expression>
            //                <display-name>null</display-name>
            //                <metric-definition>
            //                    <type>LOGICAL_METRIC</type>
            //                    <logical-metric-name>Average Response Time (ms)</logical-metric-name>
            //                </metric-definition>
            //            </metric-expression>
            //        </condition1>
            //        <condition2>
            //            <type>leaf</type>
            //            <display-name>Calls per Minute Condition</display-name>
            //            <condition-value-type>ABSOLUTE</condition-value-type>
            //            <condition-value>50.0</condition-value>
            //            <operator>GREATER_THAN</operator>
            //            <condition-expression/>
            //            <use-active-baseline>false</use-active-baseline>
            //            <trigger-on-no-data>false</trigger-on-no-data>
            //            <metric-expression>
            //                <type>leaf</type>
            //                <function-type>VALUE</function-type>
            //                <value>0</value>
            //                <is-literal-expression>false</is-literal-expression>
            //                <display-name>null</display-name>
            //                <metric-definition>
            //                    <type>LOGICAL_METRIC</type>
            //                    <logical-metric-name>Calls per Minute</logical-metric-name>
            //                </metric-definition>
            //            </metric-expression>
            //        </condition2>
            //    </policy-condition>
            //</critical-execution-criteria>            

            // Critical
            XmlNode criticalExecutionCriteriaXmlNode = healthRuleConfigurationNode.SelectSingleNode("critical-execution-criteria");
            if (criticalExecutionCriteriaXmlNode != null)
            {
                healthRule.CriticalAggregateType = getStringValueFromXmlNode(criticalExecutionCriteriaXmlNode.SelectSingleNode("entity-aggregation-scope/type"));

                XmlNode firstCondition = criticalExecutionCriteriaXmlNode.SelectSingleNode("policy-condition");
                XmlNodeList condition1sXmlNodeList = criticalExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition1");
                XmlNodeList condition2sXmlNodeList = criticalExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition2");

                List<XmlNode> conditionsList = new List<XmlNode>();
                if (condition1sXmlNodeList.Count == 0)
                {
                    healthRule.CriticalEntityConditionType = "AND";
                    conditionsList.Add(firstCondition);
                }
                else
                {
                    healthRule.CriticalEntityConditionType = getStringValueFromXmlNode(criticalExecutionCriteriaXmlNode.SelectSingleNode("policy-condition/operator"));
                    foreach (XmlNode xmlNode in condition1sXmlNodeList)
                    {
                        conditionsList.Add(xmlNode);
                    }
                    conditionsList.Add(condition2sXmlNodeList[condition2sXmlNodeList.Count - 1]);
                }

                healthRule.CriticalNumConditions = conditionsList.Count;

                int i = 1;
                foreach (XmlNode conditionXmlNode in conditionsList)
                {
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Name", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("display-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Type", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Value", i)).SetValue(healthRule, getLongValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Operator", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("operator")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Expression", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-expression")), null);
                    if (getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("use-active-baseline")) == true)
                    {
                        healthRule.GetType().GetProperty(String.Format("Crit{0}BaselineUsed", i)).SetValue(healthRule, "Default Baseline", null);
                    }
                    else
                    {
                        healthRule.GetType().GetProperty(String.Format("Crit{0}BaselineUsed", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-baseline/name")), null);
                    }
                    healthRule.GetType().GetProperty(String.Format("Crit{0}TriggerOnNoData", i)).SetValue(healthRule, getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("trigger-on-no-data")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}MetricName", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/metric-definition/logical-metric-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}MetricFunction", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/function-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}MetricExpressionConfig", i)).SetValue(healthRule, makeXMLFormattedAndIndented(conditionXmlNode.SelectSingleNode("metric-expression")), null);

                    i++;
                    if (i > 5) break;
                }
            }

            // Warning
            XmlNode warningExecutionCriteriaXmlNode = healthRuleConfigurationNode.SelectSingleNode("warning-execution-criteria");
            if (warningExecutionCriteriaXmlNode != null)
            {
                healthRule.WarningAggregateType = getStringValueFromXmlNode(warningExecutionCriteriaXmlNode.SelectSingleNode("entity-aggregation-scope/type"));

                XmlNode firstCondition = warningExecutionCriteriaXmlNode.SelectSingleNode("policy-condition");
                XmlNodeList condition1sXmlNodeList = warningExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition1");
                XmlNodeList condition2sXmlNodeList = warningExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition2");

                List<XmlNode> conditionsList = new List<XmlNode>();
                if (condition1sXmlNodeList.Count == 0)
                {
                    healthRule.WarningEntityConditionType = "AND";
                    conditionsList.Add(firstCondition);
                }
                else
                {
                    healthRule.WarningEntityConditionType = getStringValueFromXmlNode(warningExecutionCriteriaXmlNode.SelectSingleNode("policy-condition/operator"));
                    foreach (XmlNode xmlNode in condition1sXmlNodeList)
                    {
                        conditionsList.Add(xmlNode);
                    }
                    conditionsList.Add(condition2sXmlNodeList[condition2sXmlNodeList.Count - 1]);
                }

                healthRule.WarningNumConditions = conditionsList.Count;

                int i = 1;
                foreach (XmlNode conditionXmlNode in conditionsList)
                {
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Name", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("display-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Type", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Value", i)).SetValue(healthRule, getLongValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Operator", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("operator")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Expression", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-expression")), null);
                    if (getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("use-active-baseline")) == true)
                    {
                        healthRule.GetType().GetProperty(String.Format("Warn{0}BaselineUsed", i)).SetValue(healthRule, "Default Baseline", null);
                    }
                    else
                    {
                        healthRule.GetType().GetProperty(String.Format("Warn{0}BaselineUsed", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-baseline/name")), null);
                    }
                    healthRule.GetType().GetProperty(String.Format("Warn{0}TriggerOnNoData", i)).SetValue(healthRule, getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("trigger-on-no-data")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}MetricName", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/metric-definition/logical-metric-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}MetricFunction", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/function-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}MetricExpressionConfig", i)).SetValue(healthRule, makeXMLFormattedAndIndented(conditionXmlNode.SelectSingleNode("metric-expression")), null);

                    i++;
                    if (i > 5) break;
                }
            }

            return healthRule;
        }

        private static void fillMatchRuleDetails(BusinessTransactionEntryRule businessTransactionEntryRule, XmlNode matchRule)
        {
            // Enabled seems to be set inside of the match-rule, not couple of levels up
            businessTransactionEntryRule.IsEnabled = Convert.ToBoolean(matchRule.SelectSingleNode("enabled").InnerText);
            businessTransactionEntryRule.Priority = Convert.ToInt32(matchRule.SelectSingleNode("priority").InnerText);
            businessTransactionEntryRule.IsExcluded = Convert.ToBoolean(matchRule.SelectSingleNode("excluded").InnerText);

            switch (businessTransactionEntryRule.EntryPointType)
            {
                case "ASP_DOTNET":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("class-name"));

                    break;

                case "NODEJS_WEB":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("http-method"));

                    break;

                case "PYTHON_WEB":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("http-method"));

                    break;

                case "POCO":
                    // Background is really only set for POCOs
                    businessTransactionEntryRule.IsBackground = Convert.ToBoolean(matchRule.SelectSingleNode("background").InnerText);
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-class"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-method"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));

                    break;

                case "POJO":
                    // Background is really only set for POJOs
                    businessTransactionEntryRule.IsBackground = Convert.ToBoolean(matchRule.SelectSingleNode("background").InnerText);
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-class"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-method"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));

                    break;

                case "SERVLET":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("class-name"));

                    break;

                case "STRUTS_ACTION":
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("action-class-name"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("action-method-name"));
                    // There is also Struts Action Name in the UI, but I don't know how it shows up

                    break;

                case "WCF":
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("web-service-name"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("operation-name"));

                    break;

                case "WEB":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));

                    break;

                default:
                    break;
            }

        }

        #endregion

        #region Flowmap detail conversion functions

        private static void convertFlowmapApplication(ProgramOptions programOptions, JobConfiguration jobConfiguration, EntityApplication applicationRow, string activityGridDataFolderPath, string activityGridIndexFolderPath)
        {
            string flowmapDataFilePath = Path.Combine(
                activityGridDataFolderPath,
                EntityApplication.ENTITY_FOLDER,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntities.Count + flowmapEntityConnections.Count);

                // Process each of the individual Tiers, Backends and Applications as individual icons on the flow map
                foreach (JToken entity in flowmapEntities)
                {
                    ActivityFlow activityFlowRow = new ActivityFlow();
                    activityFlowRow.MetricsIDs = new List<long>(3);

                    activityFlowRow.Controller = applicationRow.Controller;
                    activityFlowRow.ApplicationName = applicationRow.ApplicationName;
                    activityFlowRow.ApplicationID = applicationRow.ApplicationID;

                    activityFlowRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRow.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRow.Controller, activityFlowRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRow.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                    activityFlowRow.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                    activityFlowRow.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                    activityFlowRow.FromUtc = jobConfiguration.Input.TimeRange.From;
                    activityFlowRow.ToUtc = jobConfiguration.Input.TimeRange.To;

                    activityFlowRow.CallDirection = "Total";

                    activityFlowRow.FromEntityID = (long)entity["idNum"];
                    activityFlowRow.FromName = entity["name"].ToString();

                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRow.ApplicationID;
                    switch (entity["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRow.FromEntityID;
                            activityFlowRow.CallType = "Total";
                            activityFlowRow.FromType = EntityTier.ENTITY_TYPE;
                            activityFlowRow.FromLink = String.Format(DEEPLINK_TIER, activityFlowRow.Controller, activityFlowRow.ApplicationID, activityFlowRow.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRow.CallType = "Total";
                            activityFlowRow.FromType = EntityBackend.ENTITY_TYPE;
                            activityFlowRow.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRow.Controller, activityFlowRow.ApplicationID, activityFlowRow.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRow.CallType = "Total";
                            activityFlowRow.FromType = EntityApplication.ENTITY_TYPE;
                            activityFlowRow.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRow.Controller, activityFlowRow.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRow.CallType = entity["entityType"].ToString();
                            activityFlowRow.FromType = "Unknown";
                            break;
                    }

                    //activityFlowRow.ToName = activityFlowRow.FromName;
                    //activityFlowRow.ToType= activityFlowRow.FromType;
                    activityFlowRow.ToEntityID = activityFlowRow.FromEntityID;
                    //activityFlowRow.ToLink = activityFlowRow.FromLink;

                    activityFlowRow.ART = (long)entity["stats"]["averageResponseTime"]["metricValue"];
                    activityFlowRow.CPM = (long)entity["stats"]["callsPerMinute"]["metricValue"];
                    activityFlowRow.EPM = (long)entity["stats"]["errorsPerMinute"]["metricValue"];
                    activityFlowRow.Calls = (long)entity["stats"]["numberOfCalls"]["metricValue"];
                    activityFlowRow.Errors = (long)entity["stats"]["numberOfErrors"]["metricValue"];

                    if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                    if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                    if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                    if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                    if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                    activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                    if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                    activityFlowRow.MetricsIDs.Add((int)entity["stats"]["averageResponseTime"]["metricId"]);
                    activityFlowRow.MetricsIDs.Add((int)entity["stats"]["callsPerMinute"]["metricId"]);
                    activityFlowRow.MetricsIDs.Add((int)entity["stats"]["errorsPerMinute"]["metricId"]);
                    activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                    if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                    {
                        StringBuilder sb = new StringBuilder(128);
                        foreach (int metricID in activityFlowRow.MetricsIDs)
                        {
                            sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                            sb.Append(",");
                        }
                        sb.Remove(sb.Length - 1, 1);
                        activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                    }

                    activityFlowsList.Add(activityFlowRow);
                }

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = applicationRow.Controller;
                    activityFlowRowTemplate.ApplicationName = applicationRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = applicationRow.ApplicationID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.TimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.TimeRange.To;

                    activityFlowRowTemplate.CallDirection = "Exit";

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.FromType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            activityFlowRowTemplate.ToType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.ToType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            activityFlowRowTemplate.ToType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (activityFlowRow.CallType.Length == 0)
                        {
                            activityFlowRow.CallType = entity["backendType"].ToString();
                            if (activityFlowRow.CallType.Length == 0)
                            {
                                if ((bool)entityConnectionStat["exitPointCall"]["customExitPoint"] == true)
                                {
                                    activityFlowRow.CallType = "Custom";
                                }
                            }
                        }
                        if (((bool)entityConnectionStat["async"]) == true)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                activityGridIndexFolderPath,
                EntityApplication.ENTITY_FOLDER,
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new ApplicationActivityFlowReportMap(), activityGridReportFileName);

            return;
        }

        private static string convertFlowmapTier(ProgramOptions programOptions, JobConfiguration jobConfiguration, EntityTier tierRow, string activityGridDataFolderPath, string activityGridIndexFolderPath)
        {
            string flowmapDataFilePath = Path.Combine(
                activityGridDataFolderPath,
                EntityTier.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(tierRow.TierName, tierRow.TierID),
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return String.Empty;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // For Tiers, not going to process individual entities, but only connecting lines

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = tierRow.Controller;
                    activityFlowRowTemplate.ApplicationName = tierRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = tierRow.ApplicationID;
                    activityFlowRowTemplate.TierName = tierRow.TierName;
                    activityFlowRowTemplate.TierID = tierRow.TierID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.TierLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.TierID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.TimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.TimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.FromType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            activityFlowRowTemplate.ToType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.ToType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            activityFlowRowTemplate.ToType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    if (activityFlowRowTemplate.FromEntityID == tierRow.TierID)
                    {
                        activityFlowRowTemplate.CallDirection = "Outgoing";
                    }
                    else
                    {
                        activityFlowRowTemplate.CallDirection = "Incoming";
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (activityFlowRow.CallType.Length == 0)
                        {
                            activityFlowRow.CallType = entity["backendType"].ToString();
                            if (activityFlowRow.CallType.Length == 0)
                            {
                                if ((bool)entityConnectionStat["exitPointCall"]["customExitPoint"] == true)
                                {
                                    activityFlowRow.CallType = "Custom";
                                }
                            }
                        }
                        if (((bool)entityConnectionStat["async"]) == true)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                activityGridIndexFolderPath,
                EntityTier.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(tierRow.TierName, tierRow.TierID),
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new TierActivityFlowReportMap(), activityGridReportFileName);

            return activityGridReportFileName;
        }

        private static string convertFlowmapNode(ProgramOptions programOptions, JobConfiguration jobConfiguration, EntityNode nodeRow, string activityGridDataFolderPath, string activityGridIndexFolderPath)
        {
            string flowmapDataFilePath = Path.Combine(
                activityGridDataFolderPath,
                EntityNode.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(nodeRow.TierName, nodeRow.TierID),
                getShortenedEntityNameForFileSystem(nodeRow.NodeName, nodeRow.NodeID),
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return String.Empty;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // For Nodes, not going to process individual entities, but only connecting lines

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = nodeRow.Controller;
                    activityFlowRowTemplate.ApplicationName = nodeRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = nodeRow.ApplicationID;
                    activityFlowRowTemplate.TierName = nodeRow.TierName;
                    activityFlowRowTemplate.TierID = nodeRow.TierID;
                    activityFlowRowTemplate.NodeName = nodeRow.NodeName;
                    activityFlowRowTemplate.NodeID = nodeRow.NodeID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.TierLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.TierID, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.NodeLink = String.Format(DEEPLINK_NODE, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.NodeID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.TimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.TimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_NODE:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_NODE_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = EntityNode.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_NODE, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.FromType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case "APPLICATION_COMPONENT_NODE":
                            activityFlowRowTemplate.ToType = EntityNode.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_NODE, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_TIER:
                            activityFlowRowTemplate.ToType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.ToType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            activityFlowRowTemplate.ToType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    // Haven't seen the incoming calls on the flowmap for Nodes. But maybe?
                    if (activityFlowRowTemplate.FromEntityID == nodeRow.NodeID)
                    {
                        activityFlowRowTemplate.CallDirection = "Outgoing";
                    }
                    else
                    {
                        activityFlowRowTemplate.CallDirection = "Incoming";
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (activityFlowRow.CallType.Length == 0)
                        {
                            activityFlowRow.CallType = entity["backendType"].ToString();
                            if (activityFlowRow.CallType.Length == 0)
                            {
                                if ((bool)entityConnectionStat["exitPointCall"]["customExitPoint"] == true)
                                {
                                    activityFlowRow.CallType = "Custom";
                                }
                            }
                        }
                        if (((bool)entityConnectionStat["async"]) == true)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                activityGridIndexFolderPath,
                EntityNode.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(nodeRow.TierName, nodeRow.TierID),
                getShortenedEntityNameForFileSystem(nodeRow.NodeName, nodeRow.NodeID),
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new NodeActivityFlowReportMap(), activityGridReportFileName);

            return activityGridReportFileName;
        }

        private static string convertFlowmapsBusinessTransaction(ProgramOptions programOptions, JobConfiguration jobConfiguration, EntityBusinessTransaction businessTransactionRow, string activityGridDataFolderPath, string activityGridIndexFolderPath)
        {
            string flowmapDataFilePath = Path.Combine(
                activityGridDataFolderPath,
                EntityBusinessTransaction.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(businessTransactionRow.TierName, businessTransactionRow.TierID),
                getShortenedEntityNameForFileSystem(businessTransactionRow.BTName, businessTransactionRow.BTID),
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return String.Empty;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // Controller shows a pretty complex grid view for jumps that continue from other tiers.
                // I couldn't figure out how the JSON is converted into that
                // For Business Transactions, not going to process individual entities, but only connecting lines

                // Assume that the first node is the 
                JObject startTier = (JObject)flowmapEntities.Where(e => (bool)e["startComponent"] == true).FirstOrDefault();

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = businessTransactionRow.Controller;
                    activityFlowRowTemplate.ApplicationName = businessTransactionRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = businessTransactionRow.ApplicationID;
                    activityFlowRowTemplate.TierName = businessTransactionRow.TierName;
                    activityFlowRowTemplate.TierID = businessTransactionRow.TierID;
                    activityFlowRowTemplate.BTName = businessTransactionRow.BTName;
                    activityFlowRowTemplate.BTID = businessTransactionRow.BTID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.TierLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.TierID, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.BTLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.BTID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.TimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.TimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.FromType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            activityFlowRowTemplate.ToType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.ToType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            activityFlowRowTemplate.ToType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    // Haven't seen the incoming calls on the flowmap for Nodes. But maybe?
                    if (startTier != null)
                    {
                        if (activityFlowRowTemplate.FromEntityID == (long)startTier["idNum"])
                        {
                            activityFlowRowTemplate.CallDirection = "FirstHop";
                        }
                        else
                        {
                            activityFlowRowTemplate.CallDirection = "SubsequentHop";
                        }
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (activityFlowRow.CallType.Length == 0)
                        {
                            activityFlowRow.CallType = entity["backendType"].ToString();
                            if (activityFlowRow.CallType.Length == 0)
                            {
                                if ((bool)entityConnectionStat["exitPointCall"]["customExitPoint"] == true)
                                {
                                    activityFlowRow.CallType = "Custom";
                                }
                            }
                        }
                        if (((bool)entityConnectionStat["async"]) == true)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                activityGridIndexFolderPath,
                EntityBusinessTransaction.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(businessTransactionRow.TierName, businessTransactionRow.TierID),
                getShortenedEntityNameForFileSystem(businessTransactionRow.BTName, businessTransactionRow.BTID),
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new BusinessTransactionActivityFlowReportMap(), activityGridReportFileName);

            return activityGridReportFileName;
        }

        private static string convertFlowmapBackend(ProgramOptions programOptions, JobConfiguration jobConfiguration, EntityBackend backendRow, string activityGridDataFolderPath, string activityGridIndexFolderPath)
        {
            string flowmapDataFilePath = Path.Combine(
                activityGridDataFolderPath,
                EntityBackend.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(backendRow.BackendName, backendRow.BackendID),
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return String.Empty;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.TimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // We don't display grid for Backends. But it is quite similar to Tier view
                // For Backends, not going to process individual entities, but only connecting lines

                // Process each call between Tiers, Tiers and Backends
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = backendRow.Controller;
                    activityFlowRowTemplate.ApplicationName = backendRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = backendRow.ApplicationID;
                    activityFlowRowTemplate.BackendName = backendRow.BackendName;
                    activityFlowRowTemplate.BackendID = backendRow.BackendID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.BackendLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.BackendID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.TimeRange.To - jobConfiguration.Input.TimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.TimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.TimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.TimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.TimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.FromType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_FLOWMAP_TIER:
                            activityFlowRowTemplate.ToType = EntityTier.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_BACKEND:
                            activityFlowRowTemplate.ToType = EntityBackend.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_FLOWMAP_APPLICATION:
                            activityFlowRowTemplate.ToType = EntityApplication.ENTITY_TYPE;
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    if (activityFlowRowTemplate.FromEntityID == backendRow.BackendID)
                    {
                        activityFlowRowTemplate.CallDirection = "Outgoing";
                    }
                    else
                    {
                        activityFlowRowTemplate.CallDirection = "Incoming";
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (activityFlowRow.CallType.Length == 0)
                        {
                            activityFlowRow.CallType = entity["backendType"].ToString();
                            if (activityFlowRow.CallType.Length == 0)
                            {
                                if ((bool)entityConnectionStat["exitPointCall"]["customExitPoint"] == true)
                                {
                                    activityFlowRow.CallType = "Custom";
                                }
                            }
                        }
                        if (((bool)entityConnectionStat["async"]) == true)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                activityGridIndexFolderPath,
                EntityBackend.ENTITY_FOLDER,
                getShortenedEntityNameForFileSystem(backendRow.BackendName, backendRow.BackendID),
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new BackendActivityFlowReportMap(), activityGridReportFileName);

            return activityGridReportFileName;
        }

        #endregion

        #region Snapshot conversion functions

        private static int indexSnapshots(
            ProgramOptions programOptions,
            JobConfiguration jobConfiguration,
            JobTarget jobTarget,
            JobTimeRange jobTimeRange,
            List<JToken> snapshotTokenList,
            List<EntityTier> tiersList,
            List<EntityNode> nodesList,
            List<EntityBackend> backendsList,
            List<EntityBusinessTransaction> businessTransactionsList,
            List<EntityServiceEndpoint> serviceEndpointsList,
            List<EntityError> errorsList,
            List<MethodInvocationDataCollector> methodInvocationDataCollectorsList,
            Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary,
            bool progressToConsole)
        {
            int j = 0;

            #region Target step variables

            string dataFolderPath = Path.Combine(programOptions.OutputJobFolderPath, DATA_FOLDER_NAME);
            string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);
            string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

            string controllerDataFolderPath = Path.Combine(dataFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationDataFolderPath = Path.Combine(controllerDataFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string snapshotsDataFolderPath = Path.Combine(applicationDataFolderPath, SNAPSHOTS_FOLDER_NAME);

            string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string snapshotsIndexFolderPath = Path.Combine(applicationIndexFolderPath, SNAPSHOTS_FOLDER_NAME);

            #endregion

            foreach (JToken snapshotToken in snapshotTokenList)
            {
                // Only do first in chain
                if ((bool)snapshotToken["firstInChain"] == false)
                {
                    continue;
                }

                logger.Info("Indexing snapshot for Application {0}, Tier {1}, Business Transaction {2}, RequestGUID {3}", jobTarget.Application, snapshotToken["applicationComponentName"], snapshotToken["businessTransactionName"], snapshotToken["requestGUID"]);

                #region Target step variables

                DateTime snapshotTime = convertFromUnixTimestamp((long)snapshotToken["serverStartTime"]);

                string snapshotDataFolderPath = Path.Combine(
                    snapshotsDataFolderPath,
                    getShortenedEntityNameForFileSystem(snapshotToken["applicationComponentName"].ToString(), (long)snapshotToken["applicationComponentId"]),
                    getShortenedEntityNameForFileSystem(snapshotToken["businessTransactionName"].ToString(), (long)snapshotToken["businessTransactionId"]),
                    String.Format("{0:yyyyMMddHH}", snapshotTime),
                    userExperienceFolderNameMapping[snapshotToken["userExperience"].ToString()],
                    String.Format(SNAPSHOT_FOLDER_NAME, snapshotToken["requestGUID"], snapshotTime));

                string snapshotSegmentsDataFilePath = Path.Combine(snapshotDataFolderPath, EXTRACT_SNAPSHOT_SEGMENT_FILE_NAME);

                string snapshotIndexFolderPath = Path.Combine(
                    snapshotsIndexFolderPath,
                    getShortenedEntityNameForFileSystem(snapshotToken["applicationComponentName"].ToString(), (long)snapshotToken["applicationComponentId"]),
                    getShortenedEntityNameForFileSystem(snapshotToken["businessTransactionName"].ToString(), (long)snapshotToken["businessTransactionId"]),
                    String.Format("{0:yyyyMMddHH}", snapshotTime),
                    userExperienceFolderNameMapping[snapshotToken["userExperience"].ToString()],
                    String.Format(SNAPSHOT_FOLDER_NAME, snapshotToken["requestGUID"], snapshotTime));

                string snapshotsFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_FILE_NAME);
                string segmentsFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_FILE_NAME);
                string exitCallsFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_EXIT_CALLS_FILE_NAME);
                string serviceEndpointCallsFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_SERVICE_ENDPOINT_CALLS_FILE_NAME);
                string detectedErrorsFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                string businessDataFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                string methodCallLinesFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                string methodCallLinesOccurrencesFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);
                string foldedCallStacksFileName = Path.Combine(snapshotIndexFolderPath, CONVERT_SNAPSHOT_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                #endregion

                // Only process stuff that was previously exported but not indexed yet
                if (Directory.Exists(snapshotDataFolderPath) == true &&
                    File.Exists(snapshotsFileName) == false)
                {
                    #region Fill in Snapshot data

                    Snapshot snapshot = new Snapshot();
                    snapshot.Controller = jobTarget.Controller;
                    snapshot.ApplicationName = jobTarget.Application;
                    snapshot.ApplicationID = jobTarget.ApplicationID;
                    snapshot.TierID = (long)snapshotToken["applicationComponentId"];
                    snapshot.TierName = snapshotToken["applicationComponentName"].ToString();
                    if (tiersList != null)
                    {
                        EntityTier tier = tiersList.Where(t => t.TierID == snapshot.TierID).FirstOrDefault();
                        if (tier != null)
                        {
                            snapshot.TierType = tier.TierType;
                        }
                    }
                    snapshot.BTID = (long)snapshotToken["businessTransactionId"];
                    snapshot.BTName = snapshotToken["businessTransactionName"].ToString();
                    if (businessTransactionsList != null)
                    {
                        EntityBusinessTransaction businessTransaction = businessTransactionsList.Where(b => b.BTID == snapshot.BTID).FirstOrDefault();
                        if (businessTransaction != null)
                        {
                            snapshot.BTType = businessTransaction.BTType;
                        }
                    }
                    snapshot.NodeID = (long)snapshotToken["applicationComponentNodeId"];
                    snapshot.NodeName = snapshotToken["applicationComponentNodeName"].ToString();
                    if (nodesList != null)
                    {
                        EntityNode node = nodesList.Where(n => n.NodeID == snapshot.NodeID).FirstOrDefault();
                        if (node != null)
                        {
                            snapshot.AgentType = node.AgentType;
                        }
                    }

                    snapshot.OccurredUtc = convertFromUnixTimestamp((long)snapshotToken["serverStartTime"]);
                    snapshot.Occurred = snapshot.OccurredUtc.ToLocalTime();

                    snapshot.RequestID = snapshotToken["requestGUID"].ToString();
                    snapshot.UserExperience = snapshotToken["userExperience"].ToString();
                    snapshot.Duration = (long)snapshotToken["timeTakenInMilliSecs"];
                    snapshot.DurationRange = getDurationRangeAsString(snapshot.Duration);
                    snapshot.DiagSessionID = snapshotToken["diagnosticSessionGUID"].ToString();
                    if (snapshotToken["url"] != null) { snapshot.URL = snapshotToken["url"].ToString(); }

                    snapshot.TakenSummary = snapshotToken["summary"].ToString();
                    if (snapshot.TakenSummary.Contains("Scheduled Snapshots:") == true)
                    {
                        snapshot.TakenReason = "Scheduled";
                    }
                    else if (snapshot.TakenSummary.Contains("[Manual Diagnostic Session]") == true)
                    {
                        snapshot.TakenReason = "Diagnostic Session";
                    }
                    else if (snapshot.TakenSummary.Contains("[Error]") == true)
                    {
                        snapshot.TakenReason = "Error";
                    }
                    else if (snapshot.TakenSummary.Contains("Request was slower than the Standard Deviation threshold") == true)
                    {
                        snapshot.TakenReason = "Slower than StDev";
                    }
                    else if (snapshot.TakenSummary.Contains("of requests were slow in the last minute starting") == true)
                    {
                        snapshot.TakenReason = "Slow Rate in Minute";
                    }
                    else if (snapshot.TakenSummary.Contains("of requests had errors in the last minute starting") == true)
                    {
                        snapshot.TakenReason = "Error Rate in Minute";
                    }
                    else
                    {
                        snapshot.TakenReason = "";
                    }

                    if ((bool)snapshotToken["fullCallgraph"] == true)
                    {
                        snapshot.CallGraphType = "FULL";
                    }
                    else if ((bool)snapshotToken["delayedCallGraph"] == true)
                    {
                        snapshot.CallGraphType = "PARTIAL";
                    }
                    else
                    {
                        snapshot.CallGraphType = "NONE";
                    }

                    snapshot.HasErrors = (bool)snapshotToken["errorOccurred"];
                    snapshot.IsArchived = (bool)snapshotToken["archived"];

                    #region Fill in the deeplinks for the snapshot

                    // Decide what kind of timerange
                    long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                    long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);
                    long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
                    string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

                    // The snapshot link requires to have the time range is -30 < Occurredtime < +30 minutes
                    long fromTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(-30));
                    long toTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(+30));
                    long differenceInMinutesSnapshot = (toTimeUnixSnapshot - fromTimeUnixSnapshot) / (60000);
                    string DEEPLINK_THIS_TIMERANGE_SNAPSHOT = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnixSnapshot, fromTimeUnixSnapshot, differenceInMinutesSnapshot);
                    snapshot.SnapshotLink = String.Format(DEEPLINK_SNAPSHOT_OVERVIEW, snapshot.Controller, snapshot.ApplicationID, snapshot.RequestID, DEEPLINK_THIS_TIMERANGE_SNAPSHOT);

                    if (snapshot.CallGraphType != "NONE")
                    {
                        snapshot.FlameGraphLink = String.Format(@"=HYPERLINK(""{0}"", ""<Flame>"")", getFlameGraphReportFilePath(snapshot, jobTarget, reportFolderPath).Substring(reportFolderPath.Length + 1));
                    }

                    #endregion

                    #endregion

                    #region Process segments

                    List<Segment> segmentsList = null;
                    List<ExitCall> exitCallsList = null;
                    List<ServiceEndpointCall> serviceEndpointCallsList = null;
                    List<DetectedError> detectedErrorsList = null;
                    List<BusinessData> businessDataList = null;
                    List<MethodCallLine> methodCallLinesList = null;
                    List<MethodCallLine> methodCallLinesOccurrencesList = null;
                    Dictionary<string, FoldedStackLine> foldedCallStacksList = null;

                    JArray snapshotSegmentsList = FileIOHelper.loadJArrayFromFile(snapshotSegmentsDataFilePath);
                    if (snapshotSegmentsList != null)
                    {
                        #region Prepare elements for storage of indexed data from segments

                        // Number of segments is known
                        segmentsList = new List<Segment>(snapshotSegmentsList.Count);

                        // Eyeball each segment to have 3 exits on average
                        exitCallsList = new List<ExitCall>(snapshotSegmentsList.Count * 3);

                        // Let's assume that each segment has a SEP
                        serviceEndpointCallsList = new List<ServiceEndpointCall>(snapshotSegmentsList.Count);

                        // Don't know how long this is going to be
                        detectedErrorsList = new List<DetectedError>();

                        // Don't know how long this one is going to be either
                        businessDataList = new List<BusinessData>();

                        // Assume each call graph is 250 items long
                        methodCallLinesList = new List<MethodCallLine>(snapshotSegmentsList.Count * 250);

                        // Some methods repeat though
                        methodCallLinesOccurrencesList = new List<MethodCallLine>(snapshotSegmentsList.Count * 50);

                        // Assume 25 distinct call stacks in each segment
                        foldedCallStacksList = new Dictionary<string, FoldedStackLine>(snapshotSegmentsList.Count * 25);

                        SortedDictionary<string, CallChainContainer> callChainsSnapshot = new SortedDictionary<string, CallChainContainer>();

                        #endregion

                        // Process segments one by one
                        foreach (JToken snapshotSegmentToken in snapshotSegmentsList)
                        {
                            string snapshotSegmentDataFilePath = Path.Combine(snapshotDataFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME, snapshotSegmentToken["id"]));
                            JObject snapshotSegmentDetail = FileIOHelper.loadJObjectFromFile(snapshotSegmentDataFilePath);
                            if (snapshotSegmentDetail != null)
                            {
                                #region Fill in Segment data

                                Segment segment = new Segment();

                                segment.Controller = snapshot.Controller;
                                segment.ApplicationName = snapshot.ApplicationName;
                                segment.ApplicationID = snapshot.ApplicationID;
                                segment.TierID = (long)snapshotSegmentToken["applicationComponentId"];
                                segment.TierName = snapshotSegmentToken["applicationComponentName"].ToString();
                                if (tiersList != null)
                                {
                                    EntityTier tier = tiersList.Where(t => t.TierID == segment.TierID).FirstOrDefault();
                                    if (tier != null)
                                    {
                                        segment.TierType = tier.TierType;
                                    }
                                }
                                segment.BTID = snapshot.BTID;
                                segment.BTName = snapshot.BTName;
                                segment.BTType = snapshot.BTType;
                                segment.NodeID = (long)snapshotSegmentToken["applicationComponentNodeId"];
                                segment.NodeName = snapshotSegmentToken["applicationComponentNodeName"].ToString();
                                if (nodesList != null)
                                {
                                    EntityNode node = nodesList.Where(n => n.NodeID == segment.NodeID).FirstOrDefault();
                                    if (node != null)
                                    {
                                        segment.AgentType = node.AgentType;
                                    }
                                }

                                segment.OccurredUtc = convertFromUnixTimestamp((long)snapshotSegmentDetail["serverStartTime"]);
                                segment.Occurred = segment.OccurredUtc.ToLocalTime();

                                segment.RequestID = snapshotSegmentDetail["requestGUID"].ToString();
                                segment.SegmentID = (long)snapshotSegmentDetail["id"];
                                segment.UserExperience = snapshotSegmentDetail["userExperience"].ToString();
                                segment.SnapshotUserExperience = snapshot.UserExperience;
                                segment.Duration = (long)snapshotSegmentDetail["timeTakenInMilliSecs"];
                                segment.DurationRange = getDurationRangeAsString(segment.Duration);
                                // The value here is not in milliseconds, contrary to the name
                                segment.CPUDuration = Math.Round((double)snapshotSegmentDetail["cpuTimeTakenInMilliSecs"] / 1000000, 2);
                                segment.E2ELatency = (long)snapshotSegmentDetail["endToEndLatency"];
                                if (segment.E2ELatency == -1) { segment.E2ELatency = 0; }
                                if (snapshotSegmentDetail["totalWaitTime"] != null) segment.WaitDuration = (long)snapshotSegmentDetail["totalWaitTime"];
                                if (snapshotSegmentDetail["totalBlockTime"] != null) segment.BlockDuration = (long)snapshotSegmentDetail["totalBlockTime"];
                                segment.DiagSessionID = snapshotSegmentDetail["diagnosticSessionGUID"].ToString();
                                if (snapshotSegmentDetail["url"] != null) segment.URL = snapshotSegmentDetail["url"].ToString();
                                if (snapshotSegmentDetail["securityID"] != null) { segment.UserPrincipal = snapshotSegmentDetail["securityID"].ToString(); }
                                if (snapshotSegmentDetail["httpSessionID"] != null) { segment.HTTPSessionID = snapshotSegmentDetail["httpSessionID"].ToString(); }

                                segment.TakenSummary = snapshotSegmentDetail["summary"].ToString();
                                if (segment.TakenSummary.Contains("Scheduled Snapshots:") == true)
                                {
                                    segment.TakenReason = "Scheduled";
                                }
                                else if (segment.TakenSummary.Contains("[Manual Diagnostic Session]") == true)
                                {
                                    segment.TakenReason = "Diagnostic Session";
                                }
                                else if (segment.TakenSummary.Contains("[Error]") == true)
                                {
                                    segment.TakenReason = "Error";
                                }
                                else if (segment.TakenSummary.Contains("Request was slower than the Standard Deviation threshold") == true)
                                {
                                    segment.TakenReason = "Slower than StDev";
                                }
                                else if (segment.TakenSummary.Contains("of requests were slow in the last minute starting") == true)
                                {
                                    segment.TakenReason = "Slow Rate in Minute";
                                }
                                else if (segment.TakenSummary.Contains("of requests had errors in the last minute starting") == true)
                                {
                                    segment.TakenReason = "Error Rate in Minute";
                                }
                                else if (segment.TakenSummary.Contains("[Continuing]") == true)
                                {
                                    segment.TakenReason = "Continuing";
                                }
                                else
                                {
                                    segment.TakenReason = "";
                                }
                                segment.TakenPolicy = snapshotSegmentDetail["deepDivePolicy"].ToString();

                                segment.ThreadID = snapshotSegmentDetail["threadID"].ToString();
                                segment.ThreadName = snapshotSegmentDetail["threadName"].ToString();

                                segment.WarningThreshold = snapshotSegmentDetail["warningThreshold"].ToString();
                                segment.CriticalThreshold = snapshotSegmentDetail["criticalThreshold"].ToString();

                                if ((bool)snapshotSegmentToken["fullCallgraph"] == true)
                                {
                                    segment.CallGraphType = "FULL";
                                }
                                else if ((bool)snapshotSegmentToken["delayedCallGraph"] == true)
                                {
                                    segment.CallGraphType = "PARTIAL";
                                }
                                else
                                {
                                    segment.CallGraphType = "NONE";
                                }

                                segment.HasErrors = (bool)snapshotSegmentDetail["errorOccured"];
                                segment.IsArchived = (bool)snapshotSegmentDetail["archived"];
                                segment.IsAsync = (bool)snapshotSegmentDetail["async"];
                                segment.IsFirstInChain = (bool)snapshotSegmentDetail["firstInChain"];

                                // What is the relationship to the root segment
                                segment.FromSegmentID = 0;
                                if (segment.IsFirstInChain == false)
                                {
                                    if (snapshotSegmentDetail["snapshotExitSequence"] != null)
                                    {
                                        // Parent exit has snapshotSequenceCounter in exitCalls array
                                        // Child exit has snapshotExitSequence value that binds the child snapshot to the parent
                                        List<JToken> possibleParentSegments = snapshotSegmentsList.Where(s => s["exitCalls"].Count() > 0).ToList();
                                        foreach (JToken possibleParentSegment in possibleParentSegments)
                                        {
                                            List<JToken> possibleExits = possibleParentSegment["exitCalls"].Where(e => e["snapshotSequenceCounter"].ToString() == snapshotSegmentDetail["snapshotExitSequence"].ToString()).ToList();
                                            if (possibleExits.Count > 0)
                                            {
                                                segment.FromSegmentID = (long)possibleParentSegment["id"];
                                                break;
                                            }
                                        }
                                    }
                                    if (segment.FromSegmentID == 0)
                                    {
                                        // Some async snapshots can have no initiating parent
                                        // Do nothing
                                        // OR!
                                        // This can happen when the parent snapshot got an exception calling downstream tier, both producing snapshot, but parent snapshot doesn't have a call graph
                                        // But sometimes non-async ones have funny parenting
                                    }
                                }
                                segment.FromTierName = snapshotSegmentToken["callingComponent"].ToString();

                                #endregion

                                #region Fill in the deeplinks for the segment

                                // The snapshot link requires to have the time range is -30 < Occurredtime < +30 minutes
                                fromTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(-30));
                                toTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(+30));
                                differenceInMinutesSnapshot = (toTimeUnixSnapshot - fromTimeUnixSnapshot) / (60000);
                                DEEPLINK_THIS_TIMERANGE_SNAPSHOT = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnixSnapshot, fromTimeUnixSnapshot, differenceInMinutesSnapshot);
                                segment.SegmentLink = String.Format(DEEPLINK_SNAPSHOT_SEGMENT, segment.Controller, segment.ApplicationID, segment.RequestID, segment.SegmentID, DEEPLINK_THIS_TIMERANGE_SNAPSHOT);

                                #endregion

                                #region Get segment's call chain and make it pretty

                                // Convert call chain to something readable
                                // This is raw:
                                //Component:108|Exit Call:JMS|To:{[UNRESOLVED][115]}|Component:{[UNRESOLVED][115]}|Exit Call:JMS|To:115|Component:115
                                //^^^^^^^^^^^^^ ECommerce-Services
                                //              ^^^^^^^^^^^^^ JMS
                                //							^^^^^^^^^^^^^^^^^^^^^^ Active MQ-OrderQueue
                                //												   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ JMS
                                //																				^^^^^^^^^^^^^^ 
                                //																							   ^^^^^^^ Order-Processing-Services
                                //																									   ^^^^^^^^^^^^ Order-Processing-Services
                                // This is what I want it to look like:
                                // ECommerce-Services->[JMS]->Active MQ-OrderQueue->[JMS]->Order-Processing-Services
                                // 
                                // This is raw:
                                //Component:108|Exit Call:WEB_SERVICE|To:111|Component:111
                                //^^^^^^^^^^^^^ ECommerce-Services
                                //              ^^^^^^^^^^^^^^^^^^^^^ WEB_SERVICE
                                //                                    ^^^^^^ Inventory-Services
                                //                                           ^^^^^^ Inventory-Services
                                // This is what I want it to look like:
                                // ECommerce-Services->[WEB_SERVICE]->Inventory-Services
                                string callChainForThisSegment = snapshotSegmentDetail["callChain"].ToString();
                                string[] callChainTokens = callChainForThisSegment.Split('|');
                                StringBuilder sbCallChain = new StringBuilder();
                                foreach (string callChainToken in callChainTokens)
                                {
                                    if (callChainToken.StartsWith("Component") == true)
                                    {
                                        long tierID = -1;
                                        if (long.TryParse(callChainToken.Substring(10), out tierID) == true)
                                        {
                                            if (tiersList != null)
                                            {
                                                EntityTier tier = tiersList.Where(t => t.TierID == tierID).FirstOrDefault();
                                                if (tier != null)
                                                {
                                                    sbCallChain.AppendFormat("({0})->", tier.TierName);
                                                }
                                            }
                                        }
                                    }
                                    else if (callChainToken.StartsWith("Exit Call") == true)
                                    {
                                        sbCallChain.AppendFormat("[{0}]->", callChainToken.Substring(10));
                                    }
                                    else if (callChainToken.StartsWith("To:{[UNRESOLVED]") == true)
                                    {
                                        long backendID = -1;
                                        if (long.TryParse(callChainToken.Substring(17).TrimEnd(']', '}'), out backendID) == true)
                                        {
                                            if (backendsList != null)
                                            {
                                                EntityBackend backend = backendsList.Where(b => b.BackendID == backendID).FirstOrDefault();
                                                if (backend != null)
                                                {
                                                    //sbCallChain.AppendFormat("<{0}><{1}>>->", backendRow.BackendName, backendRow.BackendType);
                                                    sbCallChain.AppendFormat("<{0}>->", backend.BackendName);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (sbCallChain.Length > 2)
                                {
                                    sbCallChain.Remove(sbCallChain.Length - 2, 2);
                                }
                                callChainForThisSegment = sbCallChain.ToString();

                                #endregion

                                #region Process Exits in Segment

                                SortedDictionary<string, CallChainContainer> callChainsSegment = new SortedDictionary<string, CallChainContainer>();

                                List<ExitCall> exitCallsListInThisSegment = new List<ExitCall>();
                                foreach (JToken exitCallToken in snapshotSegmentDetail["snapshotExitCalls"])
                                {
                                    #region Parse the exit call into correct exit

                                    ExitCall exitCall = new ExitCall();

                                    exitCall.Controller = segment.Controller;
                                    exitCall.ApplicationName = segment.ApplicationName;
                                    exitCall.ApplicationID = segment.ApplicationID;
                                    exitCall.TierID = segment.TierID;
                                    exitCall.TierName = segment.TierName;
                                    exitCall.TierType = segment.TierType;
                                    exitCall.BTID = segment.BTID;
                                    exitCall.BTName = segment.BTName;
                                    exitCall.BTType = segment.BTType;
                                    exitCall.NodeID = segment.NodeID;
                                    exitCall.NodeName = segment.NodeName;
                                    exitCall.AgentType = segment.AgentType;

                                    exitCall.RequestID = segment.RequestID;
                                    exitCall.SegmentID = segment.SegmentID;

                                    exitCall.OccurredUtc = segment.OccurredUtc;
                                    exitCall.Occurred = segment.Occurred;

                                    exitCall.SegmentUserExperience = segment.UserExperience;
                                    exitCall.SnapshotUserExperience = snapshot.UserExperience;

                                    exitCall.ExitType = exitCallToken["exitPointName"].ToString();

                                    exitCall.SequenceNumber = exitCallToken["snapshotSequenceCounter"].ToString();

                                    exitCall.Duration = (long)exitCallToken["timeTakenInMillis"];
                                    exitCall.DurationRange = getDurationRangeAsString(exitCall.Duration);

                                    exitCall.IsAsync = ((bool)exitCallToken["exitPointCall"]["synchronous"] == false);

                                    // Create pretty call chain
                                    // Where are we going, Tier or Backend
                                    if (exitCallToken["toComponentId"].ToString().StartsWith("{[UNRESOLVED]") == true)
                                    {
                                        // Backend
                                        exitCall.ToEntityType = EntityBackend.ENTITY_TYPE;
                                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "backendId").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityID = (long)goingToProperty["value"]; ;
                                        }
                                        goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityName = goingToProperty["value"].ToString();
                                        }
                                        if (exitCall.IsAsync == false)
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms]-><{2}>", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                        else
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms async]-><{2}>", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                    }
                                    else if (exitCallToken["toComponentId"].ToString().StartsWith("App:") == true)
                                    {
                                        //Application
                                        exitCall.ToEntityType = EntityApplication.ENTITY_TYPE;
                                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "appId").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityID = (long)goingToProperty["value"]; ;
                                        }
                                        goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityName = goingToProperty["value"].ToString();
                                        }
                                        if (exitCall.IsAsync == false)
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms]->{{{2}}}", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                        else
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms async]->{{{2}}}", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                    }
                                    else
                                    {
                                        // Tier
                                        exitCall.ToEntityType = EntityTier.ENTITY_TYPE;
                                        exitCall.ToEntityID = (long)exitCallToken["toComponentId"];
                                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityName = goingToProperty["value"].ToString();
                                        }
                                        if (exitCall.IsAsync == false)
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms]->({2})", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                        else
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms async]->({2})", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                    }

                                    // Add the exit call to the overall list for tracking
                                    string exitCCCKey = String.Format("{0}_{1}_{2}", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName);
                                    CallChainContainer cccSeg = null;
                                    if (callChainsSegment.ContainsKey(exitCCCKey) == false)
                                    {
                                        cccSeg = new CallChainContainer { From = callChainForThisSegment, ExitType = exitCall.ExitType, ToEntityName = exitCall.ToEntityName, ToEntityType = exitCall.ToEntityType };
                                        callChainsSegment.Add(exitCCCKey, cccSeg);
                                    }
                                    else
                                    {
                                        cccSeg = callChainsSegment[exitCCCKey];
                                    }
                                    cccSeg.CallTimings.Add(new CallTiming { Async = exitCall.IsAsync, Duration = exitCall.Duration });

                                    CallChainContainer cccSnap = null;
                                    if (callChainsSnapshot.ContainsKey(exitCCCKey) == false)
                                    {
                                        cccSnap = new CallChainContainer { From = callChainForThisSegment, ExitType = exitCall.ExitType, ToEntityName = exitCall.ToEntityName, ToEntityType = exitCall.ToEntityType };
                                        callChainsSnapshot.Add(exitCCCKey, cccSnap);
                                    }
                                    else
                                    {
                                        cccSnap = callChainsSnapshot[exitCCCKey];
                                    }
                                    cccSnap.CallTimings.Add(new CallTiming { Async = exitCall.IsAsync, Duration = exitCall.Duration });

                                    exitCall.Detail = exitCallToken["detailString"].ToString();
                                    exitCall.ErrorDetail = exitCallToken["errorDetails"].ToString();
                                    if (exitCall.ErrorDetail == "\\N") { exitCall.ErrorDetail = String.Empty; }

                                    exitCall.Method = exitCallToken["callingMethod"].ToString();
                                    exitCall.Framework = getFrameworkFromClassOrFunctionName(exitCall.Method, methodCallLineClassToFrameworkTypeMappingDictionary);

                                    // Parse Properties
                                    exitCall.PropsAll = exitCallToken["propertiesAsString"].ToString();
                                    int i = 0;
                                    foreach (JToken customExitPropertyToken in exitCallToken["properties"])
                                    {
                                        exitCall.NumProps++;
                                        string propertyName = customExitPropertyToken["name"].ToString();
                                        string propertyValue = customExitPropertyToken["value"].ToString();
                                        switch (propertyName)
                                        {
                                            case "component":
                                            case "to":
                                            case "from":
                                            case "backendId":
                                                // Ignore those, already mapped elsewhere
                                                exitCall.NumProps--;
                                                break;
                                            case "Query Type":
                                                exitCall.PropQueryType = propertyValue;
                                                break;
                                            case "Statement Type":
                                                exitCall.PropStatementType = propertyValue;
                                                break;
                                            case "URL":
                                                exitCall.PropURL = propertyValue;
                                                break;
                                            case "Service":
                                                exitCall.PropServiceName = propertyValue;
                                                break;
                                            case "Operation":
                                                exitCall.PropOperationName = propertyValue;
                                                break;
                                            case "Name":
                                                exitCall.PropName = propertyValue;
                                                break;
                                            case "Asynchronous":
                                                exitCall.PropAsync = propertyValue;
                                                break;
                                            case "Continuation":
                                                exitCall.PropContinuation = propertyValue;
                                                break;
                                            default:
                                                i++;
                                                // Have 5 overflow buckets for those, hope it is enough
                                                if (i == 1)
                                                {
                                                    exitCall.Prop1Name = propertyName;
                                                    exitCall.Prop1Value = propertyValue;
                                                }
                                                else if (i == 2)
                                                {
                                                    exitCall.Prop2Name = propertyName;
                                                    exitCall.Prop2Value = propertyValue;
                                                }
                                                else if (i == 3)
                                                {
                                                    exitCall.Prop3Name = propertyName;
                                                    exitCall.Prop3Value = propertyValue;
                                                }
                                                else if (i == 4)
                                                {
                                                    exitCall.Prop4Name = propertyName;
                                                    exitCall.Prop4Value = propertyValue;
                                                }
                                                else if (i == 5)
                                                {
                                                    exitCall.Prop5Name = propertyName;
                                                    exitCall.Prop5Value = propertyValue;
                                                }
                                                break;
                                        }
                                    }

                                    exitCall.NumCalls = (int)exitCallToken["count"];
                                    exitCall.NumErrors = (int)exitCallToken["errorCount"];
                                    exitCall.HasErrors = exitCall.NumErrors != 0;

                                    // Which Segment are we going to
                                    exitCall.ToSegmentID = 0;
                                    if (exitCallToken["snapshotSequenceCounter"] != null)
                                    {
                                        // Parent segment has snapshotSequenceCounter in exitCalls array
                                        // Child snapshot has snapshotExitSequence value that binds the child snapshot to the parent
                                        JToken childSegment = snapshotSegmentsList.Where(s => s["triggerCall"].HasValues == true && s["triggerCall"]["snapshotSequenceCounter"].ToString() == exitCallToken["snapshotSequenceCounter"].ToString()).FirstOrDefault();
                                        if (childSegment != null)
                                        {
                                            exitCall.ToSegmentID = (long)childSegment["id"];
                                        }
                                    }

                                    #endregion

                                    #region Parse SQL 

                                    // Only format for stuff that is actually SQL
                                    if (exitCall.ExitType == "ADODOTNET" ||
                                        exitCall.ExitType == "JDBC" ||
                                        exitCall.ExitType == "DB")
                                    {
                                        if (exitCall.Detail != null && exitCall.Detail.Length > 0 && exitCall.PropQueryType != null && exitCall.PropQueryType.Length > 0)
                                        {
                                            // Only look through the first few characters for the SQL selection
                                            int lengthToSeekThrough = 30;
                                            if (exitCall.Detail.Length < lengthToSeekThrough) lengthToSeekThrough = exitCall.Detail.Length;

                                            switch (exitCall.PropQueryType.ToLower())
                                            {
                                                case "stored procedure":
                                                    exitCall.SQLClauseType = "PROCCALL";
                                                    break;

                                                case "commit":
                                                    exitCall.SQLClauseType = "COMMIT";
                                                    break;

                                                case "datasource.getconnection":
                                                    exitCall.SQLClauseType = "CONNECTION";
                                                    break;

                                                case "insert":
                                                case "query":
                                                case "update":
                                                case "delete":
                                                default:
                                                    // Get SQL statement type
                                                    if (new Regex(@"\bCREATE\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "CREATE";
                                                    }
                                                    else if (new Regex(@"\bALTER\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "ALTER";
                                                    }
                                                    else if (new Regex(@"\bTRUNCATE\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "TRUNCATE";
                                                    }
                                                    else if (new Regex(@"\bDROP\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "DROP";
                                                    }
                                                    else if (new Regex(@"\bGRANT\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "GRANT";
                                                    }
                                                    else if (new Regex(@"\bREVOKE\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "REVOKE";
                                                    }
                                                    else if (new Regex(@"\bSELECT\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "SELECT";
                                                    }
                                                    else if (new Regex(@"\bINSERT\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "INSERT";
                                                    }
                                                    else if (new Regex(@"\bUPDATE\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "UPDATE";
                                                    }
                                                    else if (new Regex(@"\bDELETE\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "DELETE";
                                                    }
                                                    else if (new Regex(@"\bEXEC\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "PROCCALL";
                                                    }
                                                    else if (new Regex(@"\bCALL\s", RegexOptions.IgnoreCase).Match(exitCall.Detail, 0, lengthToSeekThrough).Success == true)
                                                    {
                                                        exitCall.SQLClauseType = "PROCCALL";
                                                    }

                                                    // Check other clauses
                                                    if (new Regex(@"\bWHERE\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLWhere = true;
                                                    }
                                                    if (new Regex(@"\bGROUP BY\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLGroupBy = true;
                                                    }
                                                    if (new Regex(@"\bORDER BY\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLOrderBy = true;
                                                    }
                                                    if (new Regex(@"\bHAVING\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLHaving = true;
                                                    }
                                                    if (new Regex(@"\bUNION\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLUnion = true;
                                                    }

                                                    // Get join type if present
                                                    if (new Regex(@"\bINNER JOIN\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLJoinType = "INNER";
                                                    }
                                                    else if (new Regex(@"\bLEFT JOIN\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true || new Regex(@"\bLEFT OUTER JOIN", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLJoinType = "LEFT";
                                                    }
                                                    else if (new Regex(@"\bRIGHT JOIN\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true || new Regex(@"\bRIGHT OUTER JOIN", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLJoinType = "RIGHT";
                                                    }
                                                    else if (new Regex(@"\bFULL JOIN\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true || new Regex(@"\bFULL OUTER JOIN", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLJoinType = "FULL";
                                                    }
                                                    else if (new Regex(@"\bSELF JOIN\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLJoinType = "SELF";
                                                    }
                                                    else if (new Regex(@"\bCARTESIAN JOIN\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true || new Regex(@"\bCROSS JOIN", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLJoinType = "CROSS";
                                                    }
                                                    else if (new Regex(@"\bJOIN\s", RegexOptions.IgnoreCase).Match(exitCall.Detail).Success == true)
                                                    {
                                                        exitCall.SQLJoinType = "INNER";
                                                    }

                                                    break;
                                            }
                                        }
                                    }

                                    #endregion

                                    #region Parse HTTP
                                    if (exitCall.ExitType == "HTTP" ||
                                        exitCall.ExitType == "WCF" ||
                                        exitCall.ExitType == "WEB_SERVICE")
                                    {
                                        if (exitCall.Detail != null && exitCall.Detail.Length > 0)
                                        {
                                            Uri uri = null;
                                            try
                                            {
                                                uri = new Uri(exitCall.Detail);
                                            }
                                            catch
                                            {
                                                // Not a URI, ignore it
                                            }

                                            if (uri != null)
                                            {
                                                exitCall.URLScheme = uri.Scheme;
                                                exitCall.URLHost = uri.Host;
                                                exitCall.URLPort = uri.Port;
                                                exitCall.URLPath = uri.LocalPath;
                                                exitCall.URLQuery = Uri.UnescapeDataString(uri.Query);
                                                exitCall.URLFragment = uri.Fragment;
                                                if (exitCall.URLQuery.Length > 0)
                                                {
                                                    exitCall.URLNumQueryParams = exitCall.URLQuery.Count(c => c == '=');
                                                }
                                                Regex regexGUID = new Regex("[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}", RegexOptions.IgnoreCase);
                                                exitCall.URLCleaned = regexGUID.Replace(String.Format("{0}://{1}{2}", uri.Scheme, uri.Authority, uri.LocalPath), "{guid-removed}");

                                            }
                                        }
                                    }

                                    #endregion

                                    exitCallsListInThisSegment.Add(exitCall);
                                }

                                #endregion

                                #region Process Service Endpoints in Segment

                                List<ServiceEndpointCall> serviceEndpointCallsListInThisSegment = new List<ServiceEndpointCall>();
                                foreach (JToken serviceEndpointToken in snapshotSegmentDetail["serviceEndPointIds"])
                                {
                                    long serviceEndpointID = (long)((JValue)serviceEndpointToken).Value;

                                    #region Fill Service Endpoint stuff

                                    ServiceEndpointCall serviceEndpointCall = new ServiceEndpointCall();

                                    serviceEndpointCall.Controller = segment.Controller;
                                    serviceEndpointCall.ApplicationName = segment.ApplicationName;
                                    serviceEndpointCall.ApplicationID = segment.ApplicationID;
                                    serviceEndpointCall.TierID = segment.TierID;
                                    serviceEndpointCall.TierName = segment.TierName;
                                    serviceEndpointCall.TierType = segment.TierType;
                                    serviceEndpointCall.BTID = segment.BTID;
                                    serviceEndpointCall.BTName = segment.BTName;
                                    serviceEndpointCall.BTType = segment.BTType;
                                    serviceEndpointCall.NodeID = segment.NodeID;
                                    serviceEndpointCall.NodeName = segment.NodeName;
                                    serviceEndpointCall.AgentType = segment.AgentType;

                                    serviceEndpointCall.RequestID = segment.RequestID;
                                    serviceEndpointCall.SegmentID = segment.SegmentID;

                                    serviceEndpointCall.OccurredUtc = segment.OccurredUtc;
                                    serviceEndpointCall.Occurred = segment.Occurred;

                                    serviceEndpointCall.SegmentUserExperience = segment.UserExperience;
                                    serviceEndpointCall.SnapshotUserExperience = snapshot.UserExperience;

                                    if (serviceEndpointsList != null)
                                    {
                                        EntityServiceEndpoint serviceEndpoint = serviceEndpointsList.Where(s => s.SEPID == serviceEndpointID).FirstOrDefault();
                                        if (serviceEndpoint != null)
                                        {
                                            serviceEndpointCall.SEPID = serviceEndpoint.SEPID;
                                            serviceEndpointCall.SEPName = serviceEndpoint.SEPName;
                                            serviceEndpointCall.SEPType = serviceEndpoint.SEPType;
                                        }
                                    }

                                    #endregion

                                    serviceEndpointCallsListInThisSegment.Add(serviceEndpointCall);
                                }

                                #endregion

                                #region Process Errors in Segment

                                segment.NumErrors = snapshotSegmentDetail["errorIDs"].Count();
                                List<DetectedError> detectedErrorsListInThisSegment = new List<DetectedError>();
                                if (segment.NumErrors > 0)
                                {
                                    // First, populate the list of errors from the detected errors using error numbers
                                    List<DetectedError> detectedErrorsFromErrorIDs = new List<DetectedError>(segment.NumErrors);
                                    foreach (JToken errorToken in snapshotSegmentDetail["errorIDs"])
                                    {
                                        long errorID = (long)((JValue)errorToken).Value;
                                        if (errorsList != null)
                                        {
                                            EntityError error = errorsList.Where(e => e.ErrorID == errorID).FirstOrDefault();
                                            if (error != null)
                                            {
                                                DetectedError detectedError = new DetectedError();

                                                detectedError.Controller = segment.Controller;
                                                detectedError.ApplicationName = segment.ApplicationName;
                                                detectedError.ApplicationID = segment.ApplicationID;
                                                detectedError.TierID = segment.TierID;
                                                detectedError.TierName = segment.TierName;
                                                detectedError.TierType = segment.TierType;
                                                detectedError.BTID = segment.BTID;
                                                detectedError.BTName = segment.BTName;
                                                detectedError.BTType = segment.BTType;
                                                detectedError.NodeID = segment.NodeID;
                                                detectedError.NodeName = segment.NodeName;
                                                detectedError.AgentType = segment.AgentType;

                                                detectedError.RequestID = segment.RequestID;
                                                detectedError.SegmentID = segment.SegmentID;

                                                detectedError.OccurredUtc = segment.OccurredUtc;
                                                detectedError.Occurred = segment.Occurred;

                                                detectedError.SegmentUserExperience = segment.UserExperience;
                                                detectedError.SnapshotUserExperience = snapshot.UserExperience;

                                                detectedError.ErrorID = error.ErrorID;
                                                detectedError.ErrorName = error.ErrorName;
                                                detectedError.ErrorType = error.ErrorType;

                                                detectedError.ErrorIDMatchedToMessage = false;

                                                detectedError.ErrorCategory = "<unmatched>";
                                                detectedError.ErrorDetail = "<unmatched>";

                                                detectedErrorsFromErrorIDs.Add(detectedError);
                                            }
                                        }
                                    }

                                    // Second, populate the list of the details of errors
                                    string snapshotSegmentErrorFilePath = Path.Combine(snapshotDataFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_ERROR_FILE_NAME, snapshotSegmentToken["id"]));
                                    JArray snapshotSegmentErrorDetail = FileIOHelper.loadJArrayFromFile(snapshotSegmentErrorFilePath);
                                    if (snapshotSegmentErrorDetail != null)
                                    {
                                        detectedErrorsListInThisSegment = new List<DetectedError>(snapshotSegmentErrorDetail.Count);

                                        foreach (JToken errorToken in snapshotSegmentErrorDetail)
                                        {
                                            DetectedError detectedError = new DetectedError();

                                            detectedError.Controller = segment.Controller;
                                            detectedError.ApplicationName = segment.ApplicationName;
                                            detectedError.ApplicationID = segment.ApplicationID;
                                            detectedError.TierID = segment.TierID;
                                            detectedError.TierName = segment.TierName;
                                            detectedError.TierType = segment.TierType;
                                            detectedError.BTID = segment.BTID;
                                            detectedError.BTName = segment.BTName;
                                            detectedError.BTType = segment.BTType;
                                            detectedError.NodeID = segment.NodeID;
                                            detectedError.NodeName = segment.NodeName;
                                            detectedError.AgentType = segment.AgentType;

                                            detectedError.RequestID = segment.RequestID;
                                            detectedError.SegmentID = segment.SegmentID;

                                            detectedError.OccurredUtc = segment.OccurredUtc;
                                            detectedError.Occurred = segment.Occurred;

                                            detectedError.SegmentUserExperience = segment.UserExperience;
                                            detectedError.SnapshotUserExperience = snapshot.UserExperience;

                                            detectedError.ErrorID = -1;
                                            detectedError.ErrorName = "Unparsed";
                                            detectedError.ErrorType = "Unparsed";

                                            detectedError.ErrorCategory = errorToken["name"].ToString();
                                            detectedError.ErrorDetail = errorToken["value"].ToString().Replace("AD_STACK_TRACE:", "\n").Replace("__AD_CMSG__", "\n");

                                            detectedErrorsListInThisSegment.Add(detectedError);
                                        }
                                    }

                                    // Now reconcile them both
                                    #region Explanation of all of this nonsense to parse the errors

                                    // The IDs of the errors give us what errors Occurred
                                    // But the segment JSON does not include all the errors
                                    // The JSON in segment error detailsdoesn't include error number
                                    // However, we get multipe error instances for each of the errors
                                    // Here we have to do some serious gymnastics to match the detected error with what is in JSON
                                    // 
                                    // Segment may say:
                                    //"errorIDs" : [ 4532 ],
                                    //"errorDetails" : [ {
                                    //  "id" : 0,
                                    //  "version" : 0,
                                    //  "name" : "Internal Server Error : 500",
                                    //  "value" : "HTTP error code : 500"
                                    //}
                                    // Error detail says:
                                    //{
                                    //  "id" : 286452959,
                                    //  "version" : 0,
                                    //  "name" : "Internal Server Error : 500",
                                    //  "value" : "HTTP error code : 500"
                                    //}
                                    // -------------------------------
                                    // Sometimes segment has no details:
                                    //"errorIDs" : [ 66976 ],
                                    //"errorDetails" : [ ],
                                    // Where:
                                    // 66976        TRBException : COMException
                                    // But the details are there:
                                    //[ {
                                    //  "id" : 171771942,
                                    //  "version" : 0,
                                    //  "name" : "Corillian.Voyager.ExecutionServices.Client.TRBException:Corillian.Voyager.ExecutionServices.Client.TRBException",
                                    //  "value" : "Unknown Voyager Connectivity Error: C0000FA5__AD_CMSG__System.Runtime.InteropServices.COMException (0xC0000FA5): Execute: Session doesn't exist or has timed out in TP TP41-SVAKSA69901MXK\r\n   at Corillian.Platform.Router.VoyagerLoadBalancer.Execute(String sKey, String sRequest, String& sResponse)\r\n   at Corillian.Voyager.VoyagerInterface.Client.VlbConnector.Execute(String voyagerCommandString, String sessionId, String userId, String FI)AD_STACK_TRACE:Corillian.Voyager.ExecutionServices.Client.TRBException: at Corillian.Voyager.VoyagerInterface.Client.VlbConnector.Void HandleCOMException(System.Runtime.InteropServices.COMException)() at Corillian.Voyager.VoyagerInterface.Client.VlbConnector.System.String Execute(System.String, System.String, System.String, System.String)() at Corillian.Voyager.ExecutionServices.Client.VoyagerService.System.String Execute(Corillian.Voyager.Common.IRequest, System.String, System.String, System.String)() at Corillian.Voyager.ExecutionServices.Client.VoyagerService.System.String Execute(Corillian.Voyager.Common.IRequest)() at USB.Banking.Operations.BankingServiceProxy.USB.Banking.Messages.USBGetAccountsResponse GetAccounts(USB.Banking.Messages.USBGetAccountsRequest)() at Corillian.AppsUI.Web.Models.Accounts.AccountServiceProxy.USB.Banking.Messages.USBGetAccountsResponse Corillian.AppsUI.Web.Models.Accounts.IAccountServiceProxy.GetAllAccounts(Boolean, Boolean, Boolean, Boolean)() at Corillian.AppsUI.Web.Models.Accounts.AccountServiceProxy.USB.Banking.Messages.USBGetAccountsResponse Corillian.AppsUI.Web.Models.Accounts.IAccountServiceProxy.GetAllAccounts(Boolean)() at Castle.Proxies.Invocations.IAccountServiceProxy_GetAllAccounts.Void InvokeMethodOnTarget()() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at USB.DigitalChannel.DigitalUI.Helpers.Logging.LoggingInterceptor.Void Intercept(Castle.DynamicProxy.IInvocation)() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at Castle.Proxies.IAccountServiceProxyProxy.USB.Banking.Messages.USBGetAccountsResponse GetAllAccounts(Boolean)() at Corillian.AppsUI.Web.Models.PaymentCentral.PaymentCentralService.Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesResponseContainer GetAccountBalances(Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesRequest)() at Corillian.AppsUI.Web.Models.PaymentCentral.PaymentCentralService.Corillian.AppsUI.Web.Models.PaymentCentral.UserAndAccountsResponse GetUserAndAccounts(Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesRequest)() at Castle.Proxies.Invocations.IPaymentCentralService_GetUserAndAccounts.Void InvokeMethodOnTarget()() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at USB.DigitalChannel.DigitalUI.Helpers.Logging.LoggingInterceptor.Void Intercept(Castle.DynamicProxy.IInvocation)() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at Castle.Proxies.IPaymentCentralServiceProxy.Corillian.AppsUI.Web.Models.PaymentCentral.UserAndAccountsResponse GetUserAndAccounts(Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesRequest)() at Corillian.AppsUI.Web.AsyncGetUserAndAccounts.System.String GetUserAndAccounts()() at Corillian.AppsUI.Web.AsyncGetUserAndAccounts.System.String get_TaskResult()() at USB.DigitalChannel.CommonUI.Controllers.BaseController.Void GetAsyncData(USB.DigitalChannel.CommonUI.Models.shared.BaseModel)() at Corillian.AppsUI.Web.Controllers.BaseDashboardController.Void GetWebAsyncData(Corillian.AppsUI.Web.Models.Shared.DashboardBaseModel)() at Corillian.AppsUI.Web.Controllers.CustomerDashboardController.System.Web.Mvc.ActionResult Index()() at .System.Object lambda_method(System.Runtime.CompilerServices.ExecutionScope, System.Web.Mvc.ControllerBase, System.Object[])() at System.Web.Mvc.ReflectedActionDescriptor.System.Object Execute(System.Web.Mvc.ControllerContext, System.Collections.Generic.IDictionary`2[System.String,System.Object])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionResult InvokeActionMethod(System.Web.Mvc.ControllerContext, System.Web.Mvc.ActionDescriptor, System.Collections.Generic.IDictionary`2[System.String,System.Object])() at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClassd.System.Web.Mvc.ActionExecutedContext <InvokeActionMethodWithFilters>b__a()() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext, System.Collections.Generic.IList`1[System.Web.Mvc.IActionFilter], System.Web.Mvc.ActionDescriptor, System.Collections.Generic.IDictionary`2[System.String,System.Object])() at System.Web.Mvc.ControllerActionInvoker.Boolean InvokeAction(System.Web.Mvc.ControllerContext, System.String)() at System.Web.Mvc.Controller.Void ExecuteCore()() at System.Web.Mvc.ControllerBase.Execute() at System.Web.Mvc.MvcHandler+<>c__DisplayClass8.<BeginProcessRequest>b__4() at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass1.<MakeVoidDelegate>b__0() at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1.<BeginSynchronous>b__7() at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1.End() at System.Web.Mvc.Async.AsyncResultWrapper.End() at System.Web.Mvc.Async.AsyncResultWrapper.End() at Microsoft.Web.Mvc.MvcDynamicSessionHandler.EndProcessRequest() at System.Web.HttpApplication+CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() at System.Web.HttpApplication.ExecuteStep() at System.Web.HttpApplication+PipelineStepManager.ResumeSteps() at System.Web.HttpApplication.BeginProcessRequestNotification() at System.Web.HttpRuntime.ProcessRequestNotificationPrivate() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotification() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotification() Caused by: Corillian.Voyager.ExecutionServices.Client.TRBException  at Corillian.Platform.Router.VoyagerLoadBalancer.Void Execute(System.String, System.String, System.String ByRef)()  ... 17 more "
                                    //} ]
                                    // -------------------------------
                                    // Sometimes segment says:
                                    //"errorIDs" : [ 131789, 3002 ],
                                    //"errorDetails" : [ {
                                    //  "id" : 0,
                                    //  "version" : 0,
                                    //  "name" : "1. USB.OLBService.Handlers.TransactionUtilities",
                                    //  "value" : "USB.OLBService.Handlers.TransactionUtilities : Error occurred in MapHostTransactions: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at USB.OLBService.Handlers.TransactionUtilities.MapCheckCardHostResponseTransactions(GetOutStandingAuthRequest requestFromUI, List`1 transactions, USBAccount actualAcct)"
                                    //} ],
                                    // Where:
                                    // 131789   MessageQueueException
                                    // 3002     .NET Logger Error Messages
                                    // But the list of errors looks like that:
                                    //[ {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetTransactionTypes.Execute() at USB.OLBService.Handlers.TransactionUtilities.MapHostResponseTransactions() at USB.OLBService.Handlers.TransactionUtilities.GetMonitoryListExecutor() at USB.OLBService.Handlers.TransactionUtilities.GetHostHistory() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetTransactionTypes.Execute() at USB.OLBService.Handlers.TransactionUtilities.MapCheckCardHostResponseTransactions() at USB.OLBService.Handlers.TransactionUtilities.GetCheckCardAuthorizationsFromHost() at USB.OLBService.Handlers.GetPagedTransactionsV2.GetDebitCardAuthorizationTransactions() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetPagedTransactionsV2.GetDebitCardAuthorizationTransactions() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.DigitalServices.HandlerCore.ContextSafeHandler`1.Audit() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "1. USB.OLBService.Handlers.TransactionUtilities",
                                    //  "value" : "USB.OLBService.Handlers.TransactionUtilities : Error occurred in MapHostTransactions: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at USB.OLBService.Handlers.TransactionUtilities.MapCheckCardHostResponseTransactions(GetOutStandingAuthRequest requestFromUI, List`1 transactions, USBAccount actualAcct)"
                                    //} ]

                                    #endregion

                                    foreach (DetectedError detectedError in detectedErrorsListInThisSegment)
                                    {
                                        // Try by exact message match
                                        DetectedError detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName == detectedError.ErrorCategory).FirstOrDefault();

                                        // Try starting with the message
                                        if (detectedErrorWithErrorID == null)
                                        {
                                            detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName.StartsWith(detectedError.ErrorCategory)).FirstOrDefault();
                                        }

                                        // Try containing the message
                                        if (detectedErrorWithErrorID == null)
                                        {
                                            detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName.Contains(detectedError.ErrorCategory)).FirstOrDefault();
                                        }

                                        // Try by partial name match second
                                        if (detectedErrorWithErrorID == null)
                                        {
                                            // Split by . and :
                                            // java.io.IOException 
                                            //      -> java, io, IOException
                                            //      Detected as IOException
                                            // Corillian.Voyager.ExecutionServices.Client.TRBException:Corillian.Voyager.ExecutionServices.Client.TRBException
                                            //      -> Corillian, Voyager, ExecutionServices, Client, TRBException, Corillian, Voyager, ExecutionServices, Client, TRBException
                                            //      Detected as TRBException
                                            string[] errorMessageTokens = detectedError.ErrorCategory.Split('.', ':');

                                            // Go backwards because exception type is at the end
                                            for (int i = errorMessageTokens.Length - 1; i >= 0; i--)
                                            {
                                                detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName.Contains(errorMessageTokens[i])).FirstOrDefault();
                                                if (detectedErrorWithErrorID != null)
                                                {
                                                    break;
                                                }
                                            }
                                        }

                                        // Did we find it?
                                        if (detectedErrorWithErrorID != null)
                                        {
                                            // Yay, we did, mark this error by ID off as matched and copy the values to the final 
                                            detectedErrorWithErrorID.ErrorIDMatchedToMessage = true;

                                            detectedError.ErrorID = detectedErrorWithErrorID.ErrorID;
                                            detectedError.ErrorName = detectedErrorWithErrorID.ErrorName;
                                            detectedError.ErrorType = detectedErrorWithErrorID.ErrorType;
                                        }
                                    }

                                    // At this point, we matched what we could.
                                    // A little cleanup - what if we have 1 by error ID and some messages without matched Error ID left? If yes, those obviously match
                                    List<DetectedError> detectedErrorsListInThisSegmentUnmatched = detectedErrorsListInThisSegment.Where(e => e.ErrorID == -1).ToList();
                                    if (detectedErrorsListInThisSegmentUnmatched.Count > 0)
                                    {
                                        List<DetectedError> detectedErrorsFromErrorIDsUnmatched = detectedErrorsFromErrorIDs.Where(e => e.ErrorIDMatchedToMessage == false).ToList();
                                        if (detectedErrorsFromErrorIDsUnmatched.Count == 1)
                                        {
                                            foreach (DetectedError detectedErrorThatWasUnmatched in detectedErrorsListInThisSegmentUnmatched)
                                            {
                                                detectedErrorThatWasUnmatched.ErrorIDMatchedToMessage = true;

                                                detectedErrorThatWasUnmatched.ErrorID = detectedErrorsFromErrorIDsUnmatched[0].ErrorID;
                                                detectedErrorThatWasUnmatched.ErrorName = detectedErrorsFromErrorIDsUnmatched[0].ErrorName;
                                                detectedErrorThatWasUnmatched.ErrorType = detectedErrorsFromErrorIDsUnmatched[0].ErrorType;
                                            }
                                        }

                                    }

                                    // Finally, let's parse stack trace away from the message
                                    foreach (DetectedError detectedError in detectedErrorsListInThisSegment)
                                    {
                                        int atIndex = detectedError.ErrorDetail.IndexOf(" at ");
                                        if (atIndex < 0) atIndex = detectedError.ErrorDetail.IndexOf("\tat ");
                                        if (atIndex < 0) atIndex = detectedError.ErrorDetail.IndexOf("\nat ");
                                        if (atIndex < 0) atIndex = detectedError.ErrorDetail.IndexOf("\rat ");

                                        if (atIndex > 0)
                                        {
                                            detectedError.ErrorMessage = detectedError.ErrorDetail.Substring(0, atIndex).TrimEnd();
                                            detectedError.ErrorStack = detectedError.ErrorDetail.Substring(atIndex).Trim();
                                        }
                                    }
                                }

                                #endregion

                                #region Process Data Collectors in Segment

                                List<BusinessData> businessDataListInThisSegment = new List<BusinessData>();

                                // Transaction properties
                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["transactionProperties"])
                                {
                                    BusinessData businessData = new BusinessData();

                                    businessData.Controller = segment.Controller;
                                    businessData.ApplicationName = segment.ApplicationName;
                                    businessData.ApplicationID = segment.ApplicationID;
                                    businessData.TierID = segment.TierID;
                                    businessData.TierName = segment.TierName;
                                    businessData.TierType = segment.TierType;
                                    businessData.BTID = segment.BTID;
                                    businessData.BTName = segment.BTName;
                                    businessData.BTType = segment.BTType;
                                    businessData.NodeID = segment.NodeID;
                                    businessData.NodeName = segment.NodeName;
                                    businessData.AgentType = segment.AgentType;

                                    businessData.RequestID = segment.RequestID;
                                    businessData.SegmentID = segment.SegmentID;

                                    businessData.OccurredUtc = segment.OccurredUtc;
                                    businessData.Occurred = segment.Occurred;

                                    businessData.SegmentUserExperience = segment.UserExperience;
                                    businessData.SnapshotUserExperience = snapshot.UserExperience;

                                    businessData.DataType = "Transaction";

                                    businessData.DataName = transactionPropertyToken["name"].ToString();
                                    businessData.DataValue = transactionPropertyToken["value"].ToString();

                                    businessDataListInThisSegment.Add(businessData);
                                }

                                // HTTP data collectors
                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["httpParameters"])
                                {
                                    BusinessData businessData = new BusinessData();

                                    businessData.Controller = segment.Controller;
                                    businessData.ApplicationName = segment.ApplicationName;
                                    businessData.ApplicationID = segment.ApplicationID;
                                    businessData.TierID = segment.TierID;
                                    businessData.TierName = segment.TierName;
                                    businessData.TierType = segment.TierType;
                                    businessData.BTID = segment.BTID;
                                    businessData.BTName = segment.BTName;
                                    businessData.BTType = segment.BTType;
                                    businessData.NodeID = segment.NodeID;
                                    businessData.NodeName = segment.NodeName;
                                    businessData.AgentType = segment.AgentType;

                                    businessData.RequestID = segment.RequestID;
                                    businessData.SegmentID = segment.SegmentID;

                                    businessData.OccurredUtc = segment.OccurredUtc;
                                    businessData.Occurred = segment.Occurred;

                                    businessData.SegmentUserExperience = segment.UserExperience;
                                    businessData.SnapshotUserExperience = snapshot.UserExperience;

                                    businessData.DataType = "HTTP";

                                    businessData.DataName = transactionPropertyToken["name"].ToString();
                                    businessData.DataValue = transactionPropertyToken["value"].ToString();

                                    businessDataListInThisSegment.Add(businessData);
                                }

                                // MIDCs 
                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["businessData"])
                                {
                                    BusinessData businessData = new BusinessData();

                                    businessData.Controller = segment.Controller;
                                    businessData.ApplicationName = segment.ApplicationName;
                                    businessData.ApplicationID = segment.ApplicationID;
                                    businessData.TierID = segment.TierID;
                                    businessData.TierName = segment.TierName;
                                    businessData.TierType = segment.TierType;
                                    businessData.BTID = segment.BTID;
                                    businessData.BTName = segment.BTName;
                                    businessData.BTType = segment.BTType;
                                    businessData.NodeID = segment.NodeID;
                                    businessData.NodeName = segment.NodeName;
                                    businessData.AgentType = segment.AgentType;

                                    businessData.RequestID = segment.RequestID;
                                    businessData.SegmentID = segment.SegmentID;

                                    businessData.OccurredUtc = segment.OccurredUtc;
                                    businessData.Occurred = segment.Occurred;

                                    businessData.SegmentUserExperience = segment.UserExperience;
                                    businessData.SnapshotUserExperience = snapshot.UserExperience;

                                    businessData.DataName = transactionPropertyToken["name"].ToString();
                                    businessData.DataValue = transactionPropertyToken["value"].ToString().Trim('[', ']');

                                    if (businessData.DataName.StartsWith("Exit ") == true)
                                    {
                                        // Exits from the call graphs
                                        businessData.DataType = "Exit";
                                    }
                                    else
                                    {
                                        // Most likely MIDC although not always
                                        businessData.DataType = "Code";
                                    }

                                    businessDataListInThisSegment.Add(businessData);
                                }

                                #endregion

                                #region Process Call Graphs in Segment

                                string snapshotSegmentCallGraphFilePath = Path.Combine(snapshotDataFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_CALLGRAPH_FILE_NAME, snapshotSegmentToken["id"]));
                                JArray snapshotSegmentCallGraphs = FileIOHelper.loadJArrayFromFile(snapshotSegmentCallGraphFilePath);

                                // Can't use recursion for some of the snapshots because of StackOverflowException
                                // We run out of stack when we go 400+ deep into call stack, which apparently happens
                                //List<MethodCallLine> methodCallLinesInSegmentList = new List<MethodCallLine>(250);
                                //if (snapshotSegmentCallGraphs != null && snapshotSegmentCallGraphs.HasValues == true)
                                //{
                                //    int methodLineCallSequenceNumber = 0;
                                //    // Make a copy of this list because we are going to slowly strip it down and we don't want the parent list modified
                                //    List<ExitCall> exitCallsListInThisSegmentCopy = new List<ExitCall>(exitCallsListInThisSegment.Count);
                                //    exitCallsListInThisSegmentCopy.AddRange(exitCallsListInThisSegment);
                                //    convertCallGraphChildren_Recursion(snapshotSegmentCallGraphs[0], 0, ref methodLineCallSequenceNumber, methodCallLinesInSegmentList, serviceEndpointCallsListInThisSegment, exitCallsListInThisSegmentCopy);
                                //}

                                // Instead, let's unwrap it using stack-based algorithm

                                // Make a copy of this list because we are going to slowly strip it down and we don't want the parent list modified
                                List<MethodCallLine> methodCallLinesInSegmentList = new List<MethodCallLine>();
                                if (snapshotSegmentCallGraphs != null && snapshotSegmentCallGraphs.HasValues == true)
                                {
                                    List<ExitCall> exitCallsListInThisSegmentCopy = new List<ExitCall>(exitCallsListInThisSegment.Count);
                                    exitCallsListInThisSegmentCopy.AddRange(exitCallsListInThisSegment);

                                    // For vast majority of snapshots, there is only one element off the root that is an entry
                                    // However, for process snapshots (Node.JS tiers), there can be multiple of those
                                    methodCallLinesInSegmentList = convertCallGraphChildren_Stack(snapshotSegmentCallGraphs[0], serviceEndpointCallsListInThisSegment, exitCallsListInThisSegmentCopy);
                                }
                                if (methodCallLinesInSegmentList == null)
                                {
                                    methodCallLinesInSegmentList = new List<MethodCallLine>(0);
                                }

                                // Fill in common values and look up framework
                                long execTimeTotal = 0;
                                foreach (MethodCallLine methodCallLine in methodCallLinesInSegmentList)
                                {
                                    methodCallLine.Controller = snapshot.Controller;
                                    methodCallLine.ApplicationName = snapshot.ApplicationName;
                                    methodCallLine.ApplicationID = snapshot.ApplicationID;
                                    methodCallLine.TierID = segment.TierID;
                                    methodCallLine.TierName = segment.TierName;
                                    methodCallLine.TierType = segment.TierType;
                                    methodCallLine.BTID = segment.BTID;
                                    methodCallLine.BTName = segment.BTName;
                                    methodCallLine.BTType = segment.BTType;
                                    methodCallLine.NodeID = segment.NodeID;
                                    methodCallLine.NodeName = segment.NodeName;
                                    methodCallLine.AgentType = segment.AgentType;

                                    methodCallLine.RequestID = segment.RequestID;
                                    methodCallLine.SegmentID = segment.SegmentID;

                                    methodCallLine.SegmentUserExperience = segment.UserExperience;
                                    methodCallLine.SnapshotUserExperience = snapshot.UserExperience;

                                    // Index Method->Framework type
                                    methodCallLine.Framework = getFrameworkFromClassOrFunctionName(methodCallLine.Class, methodCallLineClassToFrameworkTypeMappingDictionary);

                                    // Calculate the duration range
                                    methodCallLine.ExecRange = getDurationRangeAsString(methodCallLine.Exec);

                                    // Calculate elapsed time
                                    methodCallLine.ExecToHere = execTimeTotal;
                                    execTimeTotal = execTimeTotal + methodCallLine.Exec;

                                    // Adjust time when it occurred to take execution time of the method into account
                                    methodCallLine.OccurredUtc = segment.OccurredUtc.AddMilliseconds(methodCallLine.ExecToHere);
                                    methodCallLine.Occurred = segment.Occurred.AddMilliseconds(methodCallLine.ExecToHere);
                                }

                                // Fill in data collectors
                                // Choose only the MIDC data collectors
                                List<BusinessData> businessDataCodeListInThisSegment = businessDataListInThisSegment.Where(b => b.DataType == "Code").ToList();
                                // Only fill in MIDCs if there are rules in places and values
                                if (businessDataCodeListInThisSegment.Count > 0 && methodInvocationDataCollectorsList != null && methodInvocationDataCollectorsList.Count > 0)
                                {
                                    var midcSettingGroups = methodInvocationDataCollectorsList.GroupBy(m => new { m.MatchClass, m.MatchMethod });

                                    foreach (var midcSettingGroup in midcSettingGroups)
                                    {
                                        List<MethodInvocationDataCollector> methodInvocationDataCollectors = midcSettingGroup.ToList();
                                        MethodInvocationDataCollector methodInvocationDataCollector = methodInvocationDataCollectors[0];
                                        // Find the methods matching this data collector setting
                                        List<MethodCallLine> methodCallLinesMatchingMIDC = methodCallLinesInSegmentList.Where(m => m.Class == methodInvocationDataCollector.MatchClass && m.Method == methodInvocationDataCollector.MatchMethod).ToList();
                                        if (methodCallLinesMatchingMIDC.Count > 0)
                                        {
                                            // Found some lines, let's enumerate data collectors that were actually collected and match them
                                            List<string> businessDataReferenceList = new List<string>(methodInvocationDataCollectors.Count);
                                            foreach (BusinessData businessData in businessDataCodeListInThisSegment)
                                            {
                                                if (methodInvocationDataCollectors.Count(m => m.DataGathererName == businessData.DataName) > 0)
                                                {
                                                    businessDataReferenceList.Add(String.Format("{0}={1} ({2})", businessData.DataName, businessData.DataValue, methodInvocationDataCollector.CollectorName));
                                                }
                                            }

                                            // Now that we have the list of those data collectors, put them into the method line
                                            foreach (MethodCallLine methodCallLine in methodCallLinesMatchingMIDC)
                                            {
                                                methodCallLine.NumMIDCs = businessDataReferenceList.Count;

                                                if (methodCallLine.NumMIDCs == 1)
                                                {
                                                    methodCallLine.MIDCs = businessDataReferenceList[0];
                                                }
                                                else
                                                {
                                                    if (businessDataReferenceList.Count > 0)
                                                    {
                                                        StringBuilder sb = new StringBuilder(64 * methodCallLine.NumMIDCs);
                                                        foreach (string businessDataReference in businessDataReferenceList)
                                                        {
                                                            sb.AppendFormat("{0};\n", businessDataReference);
                                                        }
                                                        sb.Remove(sb.Length - 1, 1);
                                                        methodCallLine.MIDCs = sb.ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                // Process all method call lines to generate Occurrences list, finding and counting all the unique values
                                Dictionary<string, MethodCallLine> methodCallLinesOccurrencesInSegmentDictionary = new Dictionary<string, MethodCallLine>(methodCallLinesInSegmentList.Count);
                                foreach (MethodCallLine methodCallLine in methodCallLinesInSegmentList)
                                {
                                    if (methodCallLinesOccurrencesInSegmentDictionary.ContainsKey(methodCallLine.FullName) == false)
                                    {
                                        // Add new
                                        MethodCallLine methodCallLineOccurrence = methodCallLine.Clone();
                                        methodCallLineOccurrence.NumCalls = 1;
                                        // Correct the time from the offset originally associated with this method call back to the segment's time
                                        methodCallLineOccurrence.OccurredUtc = segment.OccurredUtc;
                                        methodCallLineOccurrence.Occurred = segment.Occurred;
                                        methodCallLinesOccurrencesInSegmentDictionary.Add(methodCallLine.FullName, methodCallLineOccurrence);
                                    }
                                    else
                                    {
                                        // Adjust existing
                                        MethodCallLine methodCallLineOccurrence = methodCallLinesOccurrencesInSegmentDictionary[methodCallLine.FullName];

                                        methodCallLineOccurrence.NumCalls++;

                                        methodCallLineOccurrence.Exec = methodCallLineOccurrence.Exec + methodCallLine.Exec;
                                        methodCallLineOccurrence.Wait = methodCallLineOccurrence.Wait + methodCallLine.Wait;
                                        methodCallLineOccurrence.Block = methodCallLineOccurrence.Block + methodCallLine.Block;
                                        methodCallLineOccurrence.CPU = methodCallLineOccurrence.CPU + methodCallLine.CPU;

                                        methodCallLineOccurrence.NumExits = methodCallLineOccurrence.NumExits + methodCallLine.NumExits;
                                        methodCallLineOccurrence.NumSEPs = methodCallLineOccurrence.NumSEPs + methodCallLine.NumSEPs;
                                        methodCallLineOccurrence.NumMIDCs = methodCallLineOccurrence.NumMIDCs + methodCallLine.NumMIDCs;
                                        methodCallLineOccurrence.NumChildren = methodCallLineOccurrence.NumChildren + methodCallLine.NumChildren;
                                    }
                                }
                                List<MethodCallLine> methodCallLinesOccurrencesInSegmentList = new List<MethodCallLine>(methodCallLinesOccurrencesInSegmentDictionary.Count);
                                methodCallLinesOccurrencesInSegmentList = methodCallLinesOccurrencesInSegmentDictionary.Values.ToList();
                                methodCallLinesOccurrencesInSegmentList = methodCallLinesOccurrencesInSegmentList.OrderBy(m => m.FullName).ToList();
                                foreach (MethodCallLine methodCallLine in methodCallLinesOccurrencesInSegmentList)
                                {
                                    methodCallLine.ExecRange = getDurationRangeAsString(methodCallLine.Exec);
                                }

                                // Process all method call lines into folded call stacks for flame graphs
                                List<MethodCallLine> methodCallLinesLeaves = null;
                                if (methodCallLinesInSegmentList.Count > 0)
                                {
                                    // Find all leaves and go up from them there
                                    if (methodCallLinesInSegmentList.Count == 1)
                                    {
                                        methodCallLinesLeaves = methodCallLinesInSegmentList;
                                    }
                                    else
                                    {
                                        methodCallLinesLeaves = methodCallLinesInSegmentList.Where(m => m.ElementType == MethodCallLineElementType.Leaf).ToList();
                                    }
                                    foreach (MethodCallLine methodCallLineLeaf in methodCallLinesLeaves)
                                    {
                                        FoldedStackLine foldedStackLine = new FoldedStackLine(methodCallLineLeaf);
                                        if (foldedCallStacksList.ContainsKey(foldedStackLine.FoldedStack) == true)
                                        {
                                            foldedCallStacksList[foldedStackLine.FoldedStack].AddFoldedStackLine(foldedStackLine);
                                        }
                                        else
                                        {
                                            foldedCallStacksList.Add(foldedStackLine.FoldedStack, foldedStackLine);
                                        }
                                    }
                                }

                                #endregion

                                #region Update call chains and call types from exits into segment

                                SortedDictionary<string, int> exitTypesSegment = new SortedDictionary<string, int>();

                                StringBuilder sbCallChainsSegment = new StringBuilder(128 * callChainsSegment.Count);
                                foreach (var callChain in callChainsSegment)
                                {
                                    sbCallChainsSegment.AppendFormat("{0}\n", callChain.Value);
                                    if (exitTypesSegment.ContainsKey(callChain.Value.ExitType) == false)
                                    {
                                        exitTypesSegment.Add(callChain.Value.ExitType, 0);
                                    }
                                    exitTypesSegment[callChain.Value.ExitType] = exitTypesSegment[callChain.Value.ExitType] + callChain.Value.CallTimings.Count;
                                }
                                if (sbCallChainsSegment.Length > 1) { sbCallChainsSegment.Remove(sbCallChainsSegment.Length - 1, 1); }
                                segment.CallChains = sbCallChainsSegment.ToString();

                                StringBuilder sbExitTypesSegment = new StringBuilder(10 * exitTypesSegment.Count);
                                foreach (var exitType in exitTypesSegment)
                                {
                                    sbExitTypesSegment.AppendFormat("{0}={1}\n", exitType.Key, exitType.Value);
                                }

                                if (sbExitTypesSegment.Length > 1) { sbExitTypesSegment.Remove(sbExitTypesSegment.Length - 1, 1); }
                                segment.ExitTypes = sbExitTypesSegment.ToString();

                                #endregion

                                #region Update counts of calls and types of destinations for Segment

                                segment.NumCallsToTiers = exitCallsListInThisSegment.Where(e => e.ToEntityType == EntityTier.ENTITY_TYPE).Sum(e => e.NumCalls);
                                segment.NumCallsToBackends = exitCallsListInThisSegment.Where(e => e.ToEntityType == EntityBackend.ENTITY_TYPE).Sum(e => e.NumCalls);
                                segment.NumCallsToApplications = exitCallsListInThisSegment.Where(e => e.ToEntityType == EntityApplication.ENTITY_FOLDER).Sum(e => e.NumCalls);

                                segment.NumCalledTiers = exitCallsListInThisSegment.Where(e => e.ToEntityType == EntityTier.ENTITY_TYPE).GroupBy(e => e.ToEntityName).Count();
                                segment.NumCalledBackends = exitCallsListInThisSegment.Where(e => e.ToEntityType == EntityBackend.ENTITY_TYPE).GroupBy(e => e.ToEntityName).Count();
                                segment.NumCalledApplications = exitCallsListInThisSegment.Where(e => e.ToEntityType == EntityApplication.ENTITY_FOLDER).GroupBy(e => e.ToEntityName).Count();

                                segment.NumSEPs = serviceEndpointCallsListInThisSegment.Count();

                                segment.NumHTTPDCs = businessDataListInThisSegment.Where(d => d.DataType == "HTTP").Count();
                                segment.NumMIDCs = businessDataListInThisSegment.Where(d => d.DataType == "Code").Count();

                                #endregion

                                // Add the created entities
                                segmentsList.Add(segment);
                                exitCallsList.AddRange(exitCallsListInThisSegment);
                                serviceEndpointCallsList.AddRange(serviceEndpointCallsListInThisSegment);
                                detectedErrorsList.AddRange(detectedErrorsListInThisSegment);
                                businessDataList.AddRange(businessDataListInThisSegment);
                                methodCallLinesList.AddRange(methodCallLinesInSegmentList);
                                methodCallLinesOccurrencesList.AddRange(methodCallLinesOccurrencesInSegmentList);
                            }
                        }

                        // Sort things prettily
                        segmentsList = segmentsList.OrderByDescending(s => s.IsFirstInChain).ThenBy(s => s.Occurred).ThenBy(s => s.UserExperience).ToList();
                        exitCallsList = exitCallsList.OrderBy(c => c.RequestID).ThenBy(c => c.SegmentID).ThenBy(c => c.ExitType).ToList();
                        serviceEndpointCallsList = serviceEndpointCallsList.OrderBy(s => s.RequestID).ThenBy(s => s.SegmentID).ThenBy(s => s.SEPName).ToList();
                        detectedErrorsList = detectedErrorsList.OrderBy(e => e.RequestID).ThenBy(e => e.SegmentID).ThenBy(e => e.ErrorName).ToList();
                        businessDataList = businessDataList.OrderBy(b => b.DataType).ThenBy(b => b.DataName).ToList();

                        #region Calculate End to End Duration time

                        if (segmentsList.Count == 0)
                        {
                            snapshot.EndToEndDuration = snapshot.Duration;
                        }
                        else if (segmentsList.Count == 1)
                        {
                            snapshot.EndToEndDuration = segmentsList[0].Duration;
                        }
                        else
                        {
                            Segment segmentFirst = segmentsList[0];
                            Segment segmentLast = segmentsList[segmentsList.Count - 1];
                            snapshot.EndToEndDuration = Math.Abs((long)(segmentLast.Occurred - segmentFirst.Occurred).TotalMilliseconds) + segmentLast.Duration;
                            if (snapshot.EndToEndDuration < snapshot.Duration)
                            {
                                snapshot.EndToEndDuration = snapshot.Duration;
                            }

                            if (snapshot.EndToEndDuration != snapshot.Duration)
                            {
                                snapshot.IsEndToEndDurationDifferent = true;
                            }
                        }
                        snapshot.EndToEndDurationRange = getDurationRangeAsString(snapshot.EndToEndDuration);

                        #endregion

                        #region Build call timeline for the Segments

                        foreach (Segment segment in segmentsList)
                        {
                            // Timeline looks like that:
                            //^ ---------------^---1------------^------2---------^---------3-----^-------------4 -^
                            //-
                            //-
                            //-
                            //-
                            //^ ---------------
                            //                -
                            //                -
                            //                ^ ---------------
                            //                                 -
                            //                                 -
                            //                                 -
                            //                                 ^ ---------------
                            //                                                  -
                            //                                                  -
                            //                                                  ^ ---------------
                            //                                                                  -
                            //                                                                  ^ ---------------
                            //                                                                                   -
                            //                                                                                   -
                            //                                                                                   -
                            //                                                                                   ^
                            //                                                                                   -
                            //                                                                                   -
                            // Where: 
                            //      - each dash - character is a certain duration, resolution is determined by the overall duration of the snapshot
                            //      - space character begins is offset between the time of Segment and time of Snapshot
                            //      - exits are signified by caret mark ^ character
                            //      - numbers are either 1 second or 10 second marks, depending on resolution
                            // To calculate
                            // 1) Evaluate interval range based on overall size of snapshot
                            // 2) For each interval, put dash - characters to signify exec time
                            // 3) For each of the exit calls in MethodCallLine, replace = character with caret mark ^ character
                            // 4) Go from beginning of Snapshot time to beginning of Segment, putting space character for each interval to signify time offset

                            // Assume duration of segment to be max 2 minutes. Of course, StringBuilder will adjust if it is longer
                            StringBuilder sbTimeline = new StringBuilder(120);

                            // Determine Timeline resolution
                            int timelineResolutionInMS = 0;
                            int timelineSignificantMarksAt = 0;

                            if (snapshot.EndToEndDuration <= 1000)
                            {
                                timelineResolutionInMS = 10;
                                timelineSignificantMarksAt = 100;
                            }
                            else if (snapshot.EndToEndDuration <= 5000)
                            {
                                timelineResolutionInMS = 50;
                                timelineSignificantMarksAt = 20;
                            }
                            else if (snapshot.EndToEndDuration <= 10000)
                            {
                                timelineResolutionInMS = 100;
                                timelineSignificantMarksAt = 10;
                            }
                            else if (snapshot.EndToEndDuration <= 25000)
                            {
                                timelineResolutionInMS = 250;
                                timelineSignificantMarksAt = 40;
                            }
                            else if (snapshot.EndToEndDuration <= 50000)
                            {
                                timelineResolutionInMS = 500;
                                timelineSignificantMarksAt = 20;
                            }
                            else
                            {
                                timelineResolutionInMS = 1000;
                                timelineSignificantMarksAt = 10;
                            }
                            segment.TimelineResolution = timelineResolutionInMS;

                            // Display this Segment's execution time as line of dashes -
                            int numIntervalsSegmentDuration = (int)Math.Round((double)(segment.Duration / timelineResolutionInMS), 0);
                            if (numIntervalsSegmentDuration == 0)
                            {
                                numIntervalsSegmentDuration = 1;
                            }
                            sbTimeline.Append(new String('-', numIntervalsSegmentDuration));

                            // Put significant area marks at 1 or 10 second intervals
                            int intervalCounter = 1;
                            for (int i = timelineSignificantMarksAt; i < sbTimeline.Length; i = i + timelineSignificantMarksAt)
                            {
                                // Calculate number of seconds
                                int secondsElapsed = (timelineResolutionInMS * timelineSignificantMarksAt) / 1000 * intervalCounter;
                                string secondsElapsedString = secondsElapsed.ToString();

                                // Insert number of seconds, aligned left
                                sbTimeline.Insert(i - 1, secondsElapsedString);

                                // Now remove the same number of characters
                                if (i - 1 + secondsElapsedString.Length > numIntervalsSegmentDuration)
                                {
                                    // We went past the end of the buffer
                                    sbTimeline.Remove(numIntervalsSegmentDuration, sbTimeline.Length - numIntervalsSegmentDuration);
                                }
                                else
                                {
                                    sbTimeline.Remove(i - 1 + secondsElapsedString.Length, secondsElapsedString.Length);
                                }

                                // Go to next counter
                                intervalCounter++;
                            }

                            // Represent the exits from MethodCallLines with caret ^ characters
                            List<MethodCallLine> methodCallLinesOccurrencesExits = methodCallLinesList.Where(m => m.SegmentID == segment.SegmentID && m.NumExits > 0).ToList();
                            foreach (MethodCallLine methodCallLineExit in methodCallLinesOccurrencesExits)
                            {
                                int numIntervalsOffsetFromSegmentStartToExit = (int)Math.Round((double)(methodCallLineExit.ExecToHere / timelineResolutionInMS), 0);
                                if (numIntervalsOffsetFromSegmentStartToExit > sbTimeline.Length - 1)
                                {
                                    numIntervalsOffsetFromSegmentStartToExit = sbTimeline.Length - 1;
                                }
                                sbTimeline[numIntervalsOffsetFromSegmentStartToExit] = '^';
                            }

                            // Add indent away from the beginning of Snapshot time to this Segment
                            int numIntervalsBetweenSnapshotStartandSegmentStart = (int)Math.Round((segment.Occurred - snapshot.Occurred).TotalMilliseconds / timelineResolutionInMS, 0);
                            if (numIntervalsBetweenSnapshotStartandSegmentStart > 0)
                            {
                                sbTimeline.Insert(0, new String(' ', numIntervalsBetweenSnapshotStartandSegmentStart));
                            }
                            else if (numIntervalsBetweenSnapshotStartandSegmentStart < 0)
                            {
                                // This segment happened earlier then Snapshot
                                // Happens sometimes when the clock on originating Tier is behind the clocks on the downstream tiers
                                // Indicate that this segment came from earlier using < character
                                for (int i = 0; i < Math.Abs(numIntervalsBetweenSnapshotStartandSegmentStart) - 1; i++)
                                {
                                    if (sbTimeline.Length > 0)
                                    {
                                        sbTimeline.Remove(0, 1);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (sbTimeline.Length > 0)
                                {
                                    sbTimeline[0] = '<';
                                }
                                else if (sbTimeline.Length == 0)
                                {
                                    sbTimeline.Append('-');
                                }
                            }

                            // Finally, render the timeline as a pretty string. Whew.
                            segment.Timeline = sbTimeline.ToString();
                        }

                        #endregion

                        #region Update call chains from segments into snapshot

                        SortedDictionary<string, int> exitTypesSnapshot = new SortedDictionary<string, int>();

                        StringBuilder sbCallChainsSnapshot = new StringBuilder(128 * callChainsSnapshot.Count);
                        foreach (var callChain in callChainsSnapshot)
                        {
                            sbCallChainsSnapshot.AppendFormat("{0};\n", callChain.Value);
                            if (exitTypesSnapshot.ContainsKey(callChain.Value.ExitType) == false)
                            {
                                exitTypesSnapshot.Add(callChain.Value.ExitType, 0);
                            }
                            exitTypesSnapshot[callChain.Value.ExitType] = exitTypesSnapshot[callChain.Value.ExitType] + callChain.Value.CallTimings.Count;
                        }
                        if (sbCallChainsSnapshot.Length > 1) { sbCallChainsSnapshot.Remove(sbCallChainsSnapshot.Length - 1, 1); }
                        snapshot.CallChains = sbCallChainsSnapshot.ToString();

                        StringBuilder sbExitTypesSnapshot = new StringBuilder(10 * exitTypesSnapshot.Count);
                        foreach (var exitType in exitTypesSnapshot)
                        {
                            sbExitTypesSnapshot.AppendFormat("{0}={1}\n", exitType.Key, exitType.Value);
                        }

                        if (sbExitTypesSnapshot.Length > 1) { sbExitTypesSnapshot.Remove(sbExitTypesSnapshot.Length - 1, 1); }
                        snapshot.ExitTypes = sbExitTypesSnapshot.ToString();

                        #endregion

                        #region Update various counts for Snapshot columns

                        snapshot.NumErrors = segmentsList.Sum(s => s.NumErrors);

                        snapshot.NumSegments = segmentsList.Count;
                        snapshot.NumCallGraphs = segmentsList.Count(s => s.CallGraphType != "NONE");

                        snapshot.NumCallsToTiers = segmentsList.Sum(s => s.NumCallsToTiers);
                        snapshot.NumCallsToBackends = segmentsList.Sum(s => s.NumCallsToBackends);
                        snapshot.NumCallsToApplications = segmentsList.Sum(s => s.NumCallsToApplications);

                        snapshot.NumCalledTiers = segmentsList.Sum(s => s.NumCalledTiers);
                        snapshot.NumCalledBackends = segmentsList.Sum(s => s.NumCalledBackends);
                        snapshot.NumCalledApplications = segmentsList.Sum(s => s.NumCalledApplications);

                        snapshot.NumSEPs = segmentsList.Sum(s => s.NumSEPs);

                        snapshot.NumHTTPDCs = segmentsList.Sum(s => s.NumHTTPDCs);
                        snapshot.NumMIDCs = segmentsList.Sum(s => s.NumMIDCs);

                        #endregion
                    }

                    #endregion

                    #region Save results

                    // Save results
                    if (segmentsList != null)
                    {
                        FileIOHelper.writeListToCSVFile(segmentsList, new SegmentReportMap(), segmentsFileName);
                    }

                    if (exitCallsList != null)
                    {
                        FileIOHelper.writeListToCSVFile(exitCallsList, new ExitCallReportMap(), exitCallsFileName);
                    }

                    if (serviceEndpointCallsList != null)
                    {

                        FileIOHelper.writeListToCSVFile(serviceEndpointCallsList, new ServiceEndpointCallReportMap(), serviceEndpointCallsFileName);
                    }

                    if (detectedErrorsList != null)
                    {
                        FileIOHelper.writeListToCSVFile(detectedErrorsList, new DetectedErrorReportMap(), detectedErrorsFileName);
                    }

                    if (businessDataList != null)
                    {
                        FileIOHelper.writeListToCSVFile(businessDataList, new BusinessDataReportMap(), businessDataFileName);
                    }

                    if (methodCallLinesList != null)
                    {
                        FileIOHelper.writeListToCSVFile(methodCallLinesList, new MethodCallLineReportMap(), methodCallLinesFileName);
                    }

                    if (methodCallLinesOccurrencesList != null)
                    {
                        FileIOHelper.writeListToCSVFile(methodCallLinesOccurrencesList, new MethodCallLineOccurrenceReportMap(), methodCallLinesOccurrencesFileName);
                    }

                    if (foldedCallStacksList != null)
                    {
                        FileIOHelper.writeListToCSVFile(foldedCallStacksList.Values.ToList<FoldedStackLine>(), new FoldedStackLineReportMap(), foldedCallStacksFileName);
                    }

                    List<Snapshot> snapshotRows = new List<Snapshot>(1);
                    snapshotRows.Add(snapshot);
                    FileIOHelper.writeListToCSVFile(snapshotRows, new SnapshotReportMap(), snapshotsFileName);

                    #endregion
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 100 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return snapshotTokenList.Count;
        }

        private static MethodCallLine convertCallGraphChildren_Recursion(
            JToken methodCallLineJSON,
            int currentDepth,
            ref int methodLineCallSequenceNumber,
            List<MethodCallLine> methodCallLinesList,
            List<ServiceEndpointCall> serviceEndpointCallsList,
            List<ExitCall> exitCallsList)
        {
            MethodCallLine methodCallLine = new MethodCallLine();

            methodCallLine.SequenceNumber = methodLineCallSequenceNumber;
            methodLineCallSequenceNumber++;

            // Populate current method call class, methods and types
            methodCallLine.Type = methodCallLineJSON["type"].ToString();
            methodCallLine.PrettyName = methodCallLineJSON["name"].ToString();
            methodCallLine.Class = methodCallLineJSON["className"].ToString();
            methodCallLine.Method = methodCallLineJSON["methodName"].ToString();
            methodCallLine.LineNumber = (int)methodCallLineJSON["lineNumber"];
            if (methodCallLine.LineNumber > 0)
            {
                methodCallLine.FullName = String.Format("{0}:{1}:{2}", methodCallLine.Class, methodCallLine.Method, methodCallLine.LineNumber);
            }
            else
            {
                methodCallLine.FullName = String.Format("{0}:{1}", methodCallLine.Class, methodCallLine.Method);
            }
            methodCallLine.FullNameIndent = String.Format("{0}{1}", new string(' ', currentDepth), methodCallLine.FullName);

            // Fill in Service Endpoints
            if (methodCallLineJSON["serviceEndPointIds"].HasValues == true && serviceEndpointCallsList.Count > 0)
            {
                methodCallLine.NumSEPs = methodCallLineJSON["serviceEndPointIds"].Count();

                List<string> serviceEndpointReferenceList = new List<string>(methodCallLine.NumSEPs);
                foreach (long sepID in methodCallLineJSON["serviceEndPointIds"])
                {
                    ServiceEndpointCall serviceEndpointCall = serviceEndpointCallsList.Where(s => s.SEPID == sepID).FirstOrDefault();
                    if (serviceEndpointCall != null)
                    {
                        serviceEndpointReferenceList.Add(String.Format("{0} ({1})", serviceEndpointCall.SEPName, serviceEndpointCall.SEPType));
                    }
                }

                if (methodCallLine.NumSEPs == 1)
                {
                    methodCallLine.SEPs = serviceEndpointReferenceList[0];
                }
                else
                {
                    StringBuilder sb = new StringBuilder(32 * methodCallLine.NumSEPs);
                    foreach (string serviceEndpointReference in serviceEndpointReferenceList)
                    {
                        sb.AppendFormat("{0};\n", serviceEndpointReference);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    methodCallLine.SEPs = sb.ToString();
                }
            }

            // Fill in Durations
            // We first assume that duration is equal to duration with children. Then when adding children, recalculate, subtracting child's duration
            methodCallLine.ExecTotal = (long)methodCallLineJSON["timeSpentInMilliSec"];
            methodCallLine.Exec = methodCallLine.ExecTotal;
            methodCallLine.WaitTotal = (long)methodCallLineJSON["waitTime"];
            methodCallLine.Wait = methodCallLine.WaitTotal;
            methodCallLine.BlockTotal = (long)methodCallLineJSON["blockTime"];
            methodCallLine.Block = methodCallLine.BlockTotal;
            methodCallLine.CPUTotal = (long)methodCallLineJSON["cpuTime"];
            methodCallLine.CPU = methodCallLine.CPUTotal;

            // Count children
            if (methodCallLineJSON["children"].HasValues == false)
            {
                methodCallLine.NumChildren = 0;
            }
            else
            {
                methodCallLine.NumChildren = methodCallLineJSON["children"].Count();
            }

            // Specify depth
            methodCallLine.Depth = currentDepth;

            // Determine type of this element in the call graph tree
            if (currentDepth == 0)
            {
                methodCallLine.ElementType = MethodCallLineElementType.Root;
            }
            else
            {
                if (methodCallLine.NumChildren == 0)
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Leaf;
                }
                else if (methodCallLine.NumChildren == 1)
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Stem;
                }
                else
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Branch;
                }
            }

            // Fill in exits
            // Frequently, the exits in the list from Segments (passed via exitCallsList parameter to the function), are ordered
            // in the same sequence as the exits encountered during unrolling the call graph tree
            // However, that is not always the case
            // Exceptions appear to be 
            // a) .NET applications 
            // and 
            // b) the database connection acquisition backend calls that are grouped together into number of calls >1 and duration being the Sum(of all)
            // So the logic is to find the Exit by the ordinal location, if that doesn't work, find it by SequenceNumber, and if that doesn't work, by the detail string 
            // The ExitCall.SequenceNumber can look like that:
            // "snapshotSequenceCounter" : "1|6|5"
            // Most of the time the sequence number from segment matches just great to that in the exit call
            // But sometimes there can be an exit that is to the same query, and so its ExitCall.NumCalls will be > 1
            // For those, the UI displays the exit with total number of those, and the call graph has detail
            // Typically these are the calls to database pooling
            if (methodCallLineJSON["exitCalls"].HasValues == true && exitCallsList.Count > 0)
            {
                methodCallLine.NumExits = methodCallLineJSON["exitCalls"].Count();

                List<string> exitCallsReferenceList = new List<string>(methodCallLine.NumExits);

                foreach (JToken exitCallToken in methodCallLineJSON["exitCalls"])
                {
                    ExitCall exitCallForThisExit = null;

                    bool adjustCallDurationInCallChain = false;

                    // First, try by the ordinal value
                    if (exitCallsList.Count > 0)
                    {
                        exitCallForThisExit = exitCallsList[0];
                        if (exitCallForThisExit.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString())
                        {
                            if (exitCallForThisExit.NumCalls > 1)
                            {
                                // Found it and it is used more than once
                                adjustCallDurationInCallChain = true;
                            }
                            else
                            {
                                // Found it and it is a singular one
                                exitCallsList.Remove(exitCallForThisExit);
                            }
                        }
                        else
                        {
                            // Not the right one
                            exitCallForThisExit = null;
                        }
                    }

                    // Second, try looking it up by the sequence number
                    if (exitCallForThisExit == null)
                    {
                        exitCallForThisExit = exitCallsList.Where(e => e.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString()).FirstOrDefault();
                        if (exitCallForThisExit != null)
                        {
                            if (exitCallForThisExit.NumCalls > 1)
                            {
                                // Found it and it is used more than once
                                adjustCallDurationInCallChain = true;
                            }
                            else
                            {
                                // Found it and it is a singular one
                                exitCallsList.Remove(exitCallForThisExit);
                            }
                        }
                    }

                    // Third, try looking up up by the exact properties
                    if (exitCallForThisExit == null)
                    {
                        adjustCallDurationInCallChain = true;

                        // This must be one of those calls that has more then 1 call, and is grouped
                        // Make up the exit details using the values in the call graph information
                        exitCallForThisExit = exitCallsList.Where(
                            e => e.NumCalls > 1 &&
                            e.Detail == exitCallToken["detailString"].ToString() &&
                            e.PropsAll == exitCallToken["propertiesAsString"].ToString()).FirstOrDefault();
                    }

                    // Fourth, still don't have an exit from segment data
                    // Manually create an exit from the Call Graph value
                    if (exitCallForThisExit == null)
                    {
                        adjustCallDurationInCallChain = false;

                        exitCallForThisExit = new ExitCall();
                        exitCallForThisExit.Duration = (long)exitCallToken["timeTakenInMillis"];
                        exitCallForThisExit.IsAsync = ((bool)exitCallToken["exitPointCall"]["synchronous"] == false);
                        exitCallForThisExit.ExitType = exitCallToken["type"].ToString();
                        exitCallForThisExit.Detail = exitCallToken["detailString"].ToString();

                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                        if (goingToProperty != null)
                        {
                            exitCallForThisExit.ToEntityName = goingToProperty["value"].ToString();
                        }
                        goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "from").FirstOrDefault();
                        string callChainForThisSegment = "(Generated From Call Graph:Unknown)";
                        if (goingToProperty != null)
                        {
                            callChainForThisSegment = String.Format("(Generated From Call Graph:{0})", goingToProperty["value"].ToString());
                        }
                        if (exitCallForThisExit.IsAsync == false)
                        {
                            exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                        }
                        else
                        {
                            exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms async]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                        }
                    }

                    // Finally, here we should have an exit from the segment data
                    string callChain = exitCallForThisExit.CallChain;
                    if (adjustCallDurationInCallChain == true)
                    {
                        // Call duration in the exit that has more then one call (typically database connection acquisition
                        // would have this call chain
                        // (ECommerce-Services)->[WEB_SERVICE]->(Inventory-Services)->[JDBC]:[20 ms]-><INVENTORY-MySQL DB-DB-5.7.13-0ubuntu0.16.04.2>
                        // Here we replace this                                               ^^, which is a sum of all the calls in the call graph
                        // with the value from the exit in the call graph

                        Regex regexDuration = new Regex(@"(.*\[)(\d*)( ms.*\].*)", RegexOptions.IgnoreCase);
                        callChain = regexDuration.Replace(callChain,
                            m => String.Format(
                                "{0}{1}{2}",
                                m.Groups[1].Value,
                                exitCallToken["timeTakenInMillis"],
                                m.Groups[3].Value));
                    }

                    // Prepare the rendered value
                    if (exitCallForThisExit.HasErrors == false)
                    {
                        if (exitCallForThisExit.ToSegmentID != 0)
                        {
                            exitCallsReferenceList.Add(String.Format("{0}->/{1}/ {2}", callChain, exitCallForThisExit.ToSegmentID, exitCallForThisExit.Detail));
                        }
                        else
                        {
                            exitCallsReferenceList.Add(String.Format("{0} {1}", callChain, exitCallForThisExit.Detail));
                        }
                    }
                    else
                    {
                        exitCallsReferenceList.Add(String.Format("{0} {1} Error {2}", callChain, exitCallForThisExit.Detail, exitCallForThisExit.ErrorDetail));
                        methodCallLine.HasErrors = true;
                    }
                }

                // Finally, render the value out of all the exits in here
                if (methodCallLine.NumExits == 1 && exitCallsReferenceList.Count > 0)
                {
                    methodCallLine.ExitCalls = exitCallsReferenceList[0];
                }
                else
                {
                    StringBuilder sb = new StringBuilder(32 * methodCallLine.NumExits);
                    foreach (string exitCallsReference in exitCallsReferenceList)
                    {
                        sb.AppendFormat("{0};\n", exitCallsReference);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    methodCallLine.ExitCalls = sb.ToString();
                }
            }

            // Add to total list
            methodCallLinesList.Add(methodCallLine);

            // Go through the children, recursively. Love recursion
            if (methodCallLine.NumChildren > 0)
            {
                List<MethodCallLine> methodCallLinesAllChildren = new List<MethodCallLine>(10);
                foreach (JToken childMethodCallLineJSON in (JArray)methodCallLineJSON["children"])
                {
                    currentDepth++;

                    MethodCallLine methodCallLineChild = convertCallGraphChildren_Recursion(childMethodCallLineJSON, currentDepth, ref methodLineCallSequenceNumber, methodCallLinesList, serviceEndpointCallsList, exitCallsList);

                    // Now that we measured child, subtract its duration from the current node
                    methodCallLine.Exec = methodCallLine.Exec - methodCallLineChild.ExecTotal;
                    methodCallLine.Wait = methodCallLine.Wait - methodCallLineChild.WaitTotal;
                    methodCallLine.Block = methodCallLine.Block - methodCallLineChild.BlockTotal;
                    methodCallLine.CPU = methodCallLine.CPU - methodCallLineChild.CPUTotal;

                    currentDepth--;
                }
            }

            // Calculate the duration range
            methodCallLine.ExecRange = getDurationRangeAsString(methodCallLine.Exec);

            return methodCallLine;
        }

        private static List<MethodCallLine> convertCallGraphChildren_Stack(
            JToken methodCallLineJSONRoot,
            List<ServiceEndpointCall> serviceEndpointCallsList,
            List<ExitCall> exitCallsList)
        {
            List<MethodCallLine> methodCallLinesList = new List<MethodCallLine>(500);
            List<MethodCallLine> methodCallLinesLeafList = new List<MethodCallLine>(10);

            if (methodCallLineJSONRoot == null)
            {
                return methodCallLinesList;
            }

            // Assume depth of at least 100
            Stack<JToken> stackOfMethodCallLineJSONs = new Stack<JToken>(100);
            Stack<MethodCallLine> stackOfParentMethodCallLines = new Stack<MethodCallLine>(100);

            // Add the first one 
            stackOfMethodCallLineJSONs.Push(methodCallLineJSONRoot);

            int methodLineCallSequenceNumber = 0;

            // Let's scroll through, it is just like a binary tree, except with multiple children, meaning that it has left and right, and right again
            while (stackOfMethodCallLineJSONs.Count > 0)
            {
                JToken methodCallLineJSON = stackOfMethodCallLineJSONs.Pop();
                MethodCallLine methodCallLineParent = null;
                if (stackOfParentMethodCallLines.Count > 0)
                {
                    methodCallLineParent = stackOfParentMethodCallLines.Pop();
                }

                #region Populate MethodCallLine

                MethodCallLine methodCallLine = new MethodCallLine();

                methodCallLine.Parent = methodCallLineParent;

                methodCallLine.SequenceNumber = methodLineCallSequenceNumber;
                methodLineCallSequenceNumber++;

                // Populate current method call class, methods and types
                methodCallLine.Type = methodCallLineJSON["type"].ToString();
                methodCallLine.PrettyName = methodCallLineJSON["name"].ToString();
                methodCallLine.Class = methodCallLineJSON["className"].ToString();
                methodCallLine.Method = methodCallLineJSON["methodName"].ToString();
                methodCallLine.LineNumber = (int)methodCallLineJSON["lineNumber"];
                if (methodCallLine.Type == "JS")
                {
                    // Node.js call graphs should use pretty name
                    if (methodCallLine.LineNumber > 0)
                    {
                        methodCallLine.FullName = String.Format("{0}:{1}", methodCallLine.PrettyName, methodCallLine.LineNumber);
                    }
                    else
                    {
                        methodCallLine.FullName = methodCallLine.PrettyName;
                    }
                }
                else
                {
                    if (methodCallLine.LineNumber > 0)
                    {
                        methodCallLine.FullName = String.Format("{0}:{1}:{2}", methodCallLine.Class, methodCallLine.Method, methodCallLine.LineNumber);
                    }
                    else
                    {
                        methodCallLine.FullName = String.Format("{0}:{1}", methodCallLine.Class, methodCallLine.Method);
                    }
                }

                // Specify depth
                if (methodCallLine.Parent == null)
                {
                    methodCallLine.Depth = 0;
                }
                else
                {
                    methodCallLine.Depth = methodCallLine.Parent.Depth + 1;
                }

                methodCallLine.FullNameIndent = String.Format("{0}{1}", new string(' ', methodCallLine.Depth), methodCallLine.FullName);

                // Fill in Service Endpoints
                if (methodCallLineJSON["serviceEndPointIds"].HasValues == true && serviceEndpointCallsList.Count > 0)
                {
                    methodCallLine.NumSEPs = methodCallLineJSON["serviceEndPointIds"].Count();

                    List<string> serviceEndpointReferenceList = new List<string>(methodCallLine.NumSEPs);
                    foreach (long sepID in methodCallLineJSON["serviceEndPointIds"])
                    {
                        ServiceEndpointCall serviceEndpointCall = serviceEndpointCallsList.Where(s => s.SEPID == sepID).FirstOrDefault();
                        if (serviceEndpointCall != null)
                        {
                            serviceEndpointReferenceList.Add(String.Format("{0} ({1})", serviceEndpointCall.SEPName, serviceEndpointCall.SEPType));
                        }
                    }

                    if (methodCallLine.NumSEPs == 1)
                    {
                        methodCallLine.SEPs = serviceEndpointReferenceList[0];
                    }
                    else
                    {
                        StringBuilder sb = new StringBuilder(32 * methodCallLine.NumSEPs);
                        foreach (string serviceEndpointReference in serviceEndpointReferenceList)
                        {
                            sb.AppendFormat("{0};\n", serviceEndpointReference);
                        }
                        sb.Remove(sb.Length - 1, 1);
                        methodCallLine.SEPs = sb.ToString();
                    }
                }

                // Fill in Durations
                // We first assume that duration is equal to duration with children. Then when adding children, recalculate, subtracting child's duration
                methodCallLine.ExecTotal = (long)methodCallLineJSON["timeSpentInMilliSec"];
                methodCallLine.Exec = methodCallLine.ExecTotal;
                methodCallLine.WaitTotal = (long)methodCallLineJSON["waitTime"];
                methodCallLine.Wait = methodCallLine.WaitTotal;
                methodCallLine.BlockTotal = (long)methodCallLineJSON["blockTime"];
                methodCallLine.Block = methodCallLine.BlockTotal;
                methodCallLine.CPUTotal = (long)methodCallLineJSON["cpuTime"];
                methodCallLine.CPU = methodCallLine.CPUTotal;

                if (methodCallLineParent != null)
                {
                    methodCallLineParent.Exec = methodCallLineParent.Exec - methodCallLine.ExecTotal;
                    methodCallLineParent.Wait = methodCallLineParent.Wait - methodCallLine.WaitTotal;
                    methodCallLineParent.Block = methodCallLineParent.Block - methodCallLine.BlockTotal;
                    methodCallLineParent.CPU = methodCallLineParent.CPU - methodCallLine.CPUTotal;
                }

                // Count children
                if (methodCallLineJSON["children"].HasValues == false)
                {
                    methodCallLine.NumChildren = 0;
                }
                else
                {
                    methodCallLine.NumChildren = methodCallLineJSON["children"].Count();
                }

                // Determine type of this element in the call graph tree
                if (methodCallLine.Depth == 0)
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Root;
                }
                else
                {
                    if (methodCallLine.NumChildren == 0)
                    {
                        methodCallLine.ElementType = MethodCallLineElementType.Leaf;
                        // Remember this as the bottom of call graph so we can walk from up here calculating durations
                        methodCallLinesLeafList.Add(methodCallLine);
                    }
                    else if (methodCallLine.NumChildren == 1)
                    {
                        methodCallLine.ElementType = MethodCallLineElementType.Stem;
                    }
                    else
                    {
                        methodCallLine.ElementType = MethodCallLineElementType.Branch;
                    }
                }

                // Fill in exits
                // Frequently, the exits in the list from Segments (passed via exitCallsList parameter to the function), are ordered
                // in the same sequence as the exits encountered during unrolling the call graph tree
                // However, that is not always the case
                // Exceptions appear to be 
                // a) .NET applications 
                // and 
                // b) the database connection acquisition backend calls that are grouped together into number of calls >1 and duration being the Sum(of all)
                // So the logic is to find the Exit by the ordinal location, if that doesn't work, find it by SequenceNumber, and if that doesn't work, by the detail string 
                // The ExitCall.SequenceNumber can look like that:
                // "snapshotSequenceCounter" : "1|6|5"
                // Most of the time the sequence number from segment matches just great to that in the exit call
                // But sometimes there can be an exit that is to the same query, and so its ExitCall.NumCalls will be > 1
                // For those, the UI displays the exit with total number of those, and the call graph has detail
                // Typically these are the calls to database pooling
                if (methodCallLineJSON["exitCalls"].HasValues == true && exitCallsList.Count > 0)
                {
                    methodCallLine.NumExits = methodCallLineJSON["exitCalls"].Count();

                    List<string> exitCallsReferenceList = new List<string>(methodCallLine.NumExits);

                    foreach (JToken exitCallToken in methodCallLineJSON["exitCalls"])
                    {
                        ExitCall exitCallForThisExit = null;

                        bool adjustCallDurationInCallChain = false;

                        // First, try by the ordinal value
                        if (exitCallsList.Count > 0)
                        {
                            exitCallForThisExit = exitCallsList[0];
                            if (exitCallForThisExit.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString())
                            {
                                if (exitCallForThisExit.NumCalls > 1)
                                {
                                    // Found it and it is used more than once
                                    adjustCallDurationInCallChain = true;
                                }
                                else
                                {
                                    // Found it and it is a singular one
                                    exitCallsList.Remove(exitCallForThisExit);
                                }
                            }
                            else
                            {
                                // Not the right one
                                exitCallForThisExit = null;
                            }
                        }

                        // Second, try looking it up by the sequence number
                        if (exitCallForThisExit == null)
                        {
                            exitCallForThisExit = exitCallsList.Where(e => e.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString()).FirstOrDefault();
                            if (exitCallForThisExit != null)
                            {
                                if (exitCallForThisExit.NumCalls > 1)
                                {
                                    // Found it and it is used more than once
                                    adjustCallDurationInCallChain = true;
                                }
                                else
                                {
                                    // Found it and it is a singular one
                                    exitCallsList.Remove(exitCallForThisExit);
                                }
                            }
                        }

                        // Third, try looking up up by the exact properties
                        if (exitCallForThisExit == null)
                        {
                            adjustCallDurationInCallChain = true;

                            // This must be one of those calls that has more then 1 call, and is grouped
                            // Make up the exit details using the values in the call graph information
                            exitCallForThisExit = exitCallsList.Where(
                                e => e.NumCalls > 1 &&
                                e.Detail == exitCallToken["detailString"].ToString() &&
                                e.PropsAll == exitCallToken["propertiesAsString"].ToString()).FirstOrDefault();
                        }

                        // Fourth, still don't have an exit from segment data
                        // Manually create an exit from the Call Graph value
                        if (exitCallForThisExit == null)
                        {
                            adjustCallDurationInCallChain = false;

                            exitCallForThisExit = new ExitCall();
                            exitCallForThisExit.Duration = (long)exitCallToken["timeTakenInMillis"];
                            exitCallForThisExit.IsAsync = ((bool)exitCallToken["exitPointCall"]["synchronous"] == false);
                            exitCallForThisExit.ExitType = exitCallToken["type"].ToString();
                            exitCallForThisExit.Detail = exitCallToken["detailString"].ToString();

                            JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                            if (goingToProperty != null)
                            {
                                exitCallForThisExit.ToEntityName = goingToProperty["value"].ToString();
                            }
                            goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "from").FirstOrDefault();
                            string callChainForThisSegment = "(Generated From Call Graph:Unknown)";
                            if (goingToProperty != null)
                            {
                                callChainForThisSegment = String.Format("(Generated From Call Graph:{0})", goingToProperty["value"].ToString());
                            }
                            if (exitCallForThisExit.IsAsync == false)
                            {
                                exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                            }
                            else
                            {
                                exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms async]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                            }
                        }

                        // Finally, here we should have an exit from the segment data
                        string callChain = exitCallForThisExit.CallChain;
                        if (adjustCallDurationInCallChain == true)
                        {
                            // Call duration in the exit that has more then one call (typically database connection acquisition
                            // would have this call chain
                            // (ECommerce-Services)->[WEB_SERVICE]->(Inventory-Services)->[JDBC]:[20 ms]-><INVENTORY-MySQL DB-DB-5.7.13-0ubuntu0.16.04.2>
                            // Here we replace this                                               ^^, which is a sum of all the calls in the call graph
                            // with the value from the exit in the call graph

                            Regex regexDuration = new Regex(@"(.*\[)(\d*)( ms.*\].*)", RegexOptions.IgnoreCase);
                            callChain = regexDuration.Replace(callChain,
                                m => String.Format(
                                    "{0}{1}{2}",
                                    m.Groups[1].Value,
                                    exitCallToken["timeTakenInMillis"],
                                    m.Groups[3].Value));
                        }

                        // Prepare the rendered value
                        if (exitCallForThisExit.HasErrors == false)
                        {
                            if (exitCallForThisExit.ToSegmentID != 0)
                            {
                                exitCallsReferenceList.Add(String.Format("{0}->/{1}/ {2}", callChain, exitCallForThisExit.ToSegmentID, exitCallForThisExit.Detail));
                            }
                            else
                            {
                                exitCallsReferenceList.Add(String.Format("{0} {1}", callChain, exitCallForThisExit.Detail));
                            }
                        }
                        else
                        {
                            exitCallsReferenceList.Add(String.Format("{0} {1} Error {2}", callChain, exitCallForThisExit.Detail, exitCallForThisExit.ErrorDetail));
                            methodCallLine.HasErrors = true;
                        }
                    }

                    // Finally, render the value out of all the exits in here
                    if (methodCallLine.NumExits == 1 && exitCallsReferenceList.Count > 0)
                    {
                        methodCallLine.ExitCalls = exitCallsReferenceList[0];
                    }
                    else
                    {
                        StringBuilder sb = new StringBuilder(32 * methodCallLine.NumExits);
                        foreach (string exitCallsReference in exitCallsReferenceList)
                        {
                            sb.AppendFormat("{0};\n", exitCallsReference);
                        }
                        sb.Remove(sb.Length - 1, 1);
                        methodCallLine.ExitCalls = sb.ToString();
                    }
                }

                #endregion

                // Add to total list
                methodCallLinesList.Add(methodCallLine);

                // Move to next sibling
                if (methodCallLineJSON.Next != null)
                {
                    JToken methodCallLineNextJSON = methodCallLineJSON.Next;
                    stackOfMethodCallLineJSONs.Push(methodCallLineNextJSON);
                    stackOfParentMethodCallLines.Push(methodCallLine.Parent);
                }

                // Move to next child, if exists, will take precedence of the sibling
                if (methodCallLine.NumChildren > 0)
                {
                    JToken methodCallLineNextJSON = methodCallLineJSON["children"];
                    if (methodCallLineNextJSON.HasValues == true)
                    {
                        methodCallLineNextJSON = methodCallLineNextJSON[0];
                        stackOfMethodCallLineJSONs.Push(methodCallLineNextJSON);
                        stackOfParentMethodCallLines.Push(methodCallLine);
                    }
                }
            }

            return methodCallLinesList;
        }

        public static string getFrameworkFromClassOrFunctionName(string classOrFunctionName, Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary)
        {
            string frameworkName = String.Empty;

            if (classOrFunctionName.Length > 0)
            {
                // Find mapping
                string keyLetterOfMappingList = classOrFunctionName.Substring(0, 1).ToLower();
                if (methodCallLineClassToFrameworkTypeMappingDictionary.ContainsKey(keyLetterOfMappingList) == true)
                {
                    List<MethodCallLineClassTypeMapping> methodCallLineClassToFrameworkTypeMappingList = methodCallLineClassToFrameworkTypeMappingDictionary[keyLetterOfMappingList];
                    foreach (MethodCallLineClassTypeMapping mapping in methodCallLineClassToFrameworkTypeMappingList)
                    {
                        if (classOrFunctionName.StartsWith(mapping.ClassPrefix, StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            frameworkName = String.Format("{0} ({1})", mapping.ClassPrefix, mapping.FrameworkType);
                            break;
                        }
                    }
                }

                // If we haven't found framework, get it out of the fiull class name
                // Grab first two elements instead of the entire class name
                // AutoFac.Control.Execution -> Autofac.Funky
                // com.tms.whatever -> com.tms
                // com.matrixone.jdl.rmi.bosMQLCommandImpl > com.matrixone
                // org.bread.with.butter -> org.bread
                if (frameworkName.Length == 0)
                {
                    string[] classNameTokens = classOrFunctionName.Split('.');
                    if (classNameTokens.Length == 0 || classNameTokens.Length == 1)
                    {
                        // No periods
                        frameworkName = classOrFunctionName;
                    }
                    else if (classNameTokens.Length >= 2)
                    {
                        frameworkName = String.Format("{0}.{1}", classNameTokens[0], classNameTokens[1]);
                    }
                }
            }

            return frameworkName;
        }

        private static string getDurationRangeAsString(long duration)
        {
            if (duration < 0)
            {
                return "-1: t<0";
            }
            else if (duration == 0)
            {
                return "00: t=0";
            }
            else if (duration > 0 && duration <= 10)
            {
                return "01: 0<t<=10";
            }
            else if (duration > 10 && duration <= 50)
            {
                return "02: 10<t<=50";
            }
            else if (duration > 50 && duration <= 100)
            {
                return "03: 50<t<=100";
            }
            else if (duration > 100 && duration <= 200)
            {
                return "04: 100<t<=200";
            }
            else if (duration > 200 && duration <= 500)
            {
                return "05: 200<t<=500";
            }
            else if (duration > 500 && duration <= 1000)
            {
                return "06: 500<t<=1000";
            }
            else if (duration > 1000 && duration <= 2000)
            {
                return "07: 1000<t<=2000";
            }
            else if (duration > 2000 && duration <= 5000)
            {
                return "08: 2000<t<=5000";
            }
            else if (duration > 5000 && duration <= 10000)
            {
                return "09: 5000<t<=10000";
            }
            else if (duration > 10000 && duration <= 15000)
            {
                return "10: 10000<t<=15000";
            }
            else if (duration > 15000 && duration <= 20000)
            {
                return "11: 15000<t<=20000";
            }
            else if (duration > 20000 && duration <= 50000)
            {
                return "12: 20000<t<=50000";
            }
            else if (duration > 50000 && duration <= 100000)
            {
                return "13: 50000<t<=100000";
            }
            else if (duration > 100000 && duration <= 150000)
            {
                return "14: 100000<t<=150000";
            }
            else if (duration > 150000 && duration <= 200000)
            {
                return "15: 150000<t<=200000";
            }
            else if (duration > 200000 && duration <= 300000)
            {
                return "16: 200000<t<=300000";
            }
            return "17: t>300000"; ;
        }

        public static Dictionary<string, int> readFoldedStackFramesFromString(string foldedCallStacksString)
        {
            Dictionary<string, int> foldedCallStacksList = new Dictionary<string, int>(25);
            StringReader sr = new StringReader(foldedCallStacksString);
            while (true)
            {
                string foldedCallGraphLine = sr.ReadLine();
                if (foldedCallGraphLine != null)
                {
                    int indexOfNumberOfOccurrences = foldedCallGraphLine.LastIndexOf(' ');
                    if (indexOfNumberOfOccurrences > 0)
                    {
                        foldedCallStacksList.Add(foldedCallGraphLine.Substring(0, indexOfNumberOfOccurrences), Convert.ToInt32(foldedCallGraphLine.Substring(indexOfNumberOfOccurrences + 1)));
                    }
                }
                else
                {
                    break;
                }
            }

            return foldedCallStacksList;
        }

        public static void addFoldedStacks(Dictionary<string, FoldedStackLine> foldedlStackLinesAddTo, List<FoldedStackLine> foldedStackLinesAddFrom)
        {
            if (foldedlStackLinesAddTo != null && foldedStackLinesAddFrom != null)
            {
                foreach (FoldedStackLine foldedCallStack in foldedStackLinesAddFrom)
                {
                    if (foldedlStackLinesAddTo.ContainsKey(foldedCallStack.FoldedStack) == true)
                    {
                        foldedlStackLinesAddTo[foldedCallStack.FoldedStack].AddFoldedStackLine(foldedCallStack);
                    }
                    else
                    {
                        foldedlStackLinesAddTo.Add(foldedCallStack.FoldedStack, foldedCallStack);
                    }
                }
            }
        }

        public static Dictionary<string, List<MethodCallLineClassTypeMapping>> populateMethodCallMappingDictionary(string methodCallLinesToFrameworkTypeMappingFilePath)
        {
            List<MethodCallLineClassTypeMapping> methodCallLineClassToFrameworkTypeMappingList = FileIOHelper.readListFromCSVFile<MethodCallLineClassTypeMapping>(methodCallLinesToFrameworkTypeMappingFilePath, new MethodCallLineClassTypeMappingReportMap());
            methodCallLineClassToFrameworkTypeMappingList = methodCallLineClassToFrameworkTypeMappingList.OrderByDescending(m => m.ClassPrefix).ToList();
            Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary = new Dictionary<string, List<MethodCallLineClassTypeMapping>>(26);
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("a", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "a").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("b", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "b").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("c", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "c").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("d", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "d").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("e", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "e").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("f", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "f").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("g", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "g").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("h", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "h").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("i", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "i").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("j", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "j").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("k", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "k").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("l", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "l").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("m", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "m").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("n", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "n").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("o", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "o").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("p", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "p").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("q", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "q").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("r", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "r").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("s", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "s").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("t", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "t").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("u", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "u").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("v", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "v").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("w", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "w").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("x", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "x").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("y", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "y").ToList());
            methodCallLineClassToFrameworkTypeMappingDictionary.Add("z", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "z").ToList());

            return methodCallLineClassToFrameworkTypeMappingDictionary;
        }

        #endregion


        #region Detected Entities report functions

        private static void adjustColumnsOfEntityRowTableInEntitiesReport(string entityType, ExcelWorksheet sheet, ExcelTable table)
        {
            if (entityType == EntityApplication.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
            }
            else if (entityType == EntityTier.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
            }
            else if (entityType == EntityNode.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["AgentVersion"].Position + 1).Width = 25;
                sheet.Column(table.Columns["MachineName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["MachineAgentVersion"].Position + 1).Width = 25;
            }
            else if (entityType == EntityBackend.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["BackendName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BackendType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop1Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop2Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop3Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop4Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop5Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop1Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop2Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop3Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop4Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop5Value"].Position + 1).Width = 20;
            }
            else if (entityType == EntityBusinessTransaction.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTNameOriginal"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTType"].Position + 1).Width = 25;
            }
            else if (entityType == EntityServiceEndpoint.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPType"].Position + 1).Width = 25;
            }
            else if (entityType == EntityError.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["HttpCode"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ErrorDepth"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ErrorLevel1"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel2"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel3"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel4"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel5"].Position + 1).Width = 20;
            }
            else if (entityType == EntityInformationPoint.ENTITY_FOLDER)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["IPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["IPType"].Position + 1).Width = 25;
            }
        }

        #endregion

        #region Entity Metric Graph report functions

        private static ExcelPackage createIndividualEntityMetricGraphsReportTemplate(ProgramOptions programOptions, JobConfiguration jobConfiguration)
        {
            #region Target step variables

            // Various folders
            string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);
            string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);

            // Report files
            string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);

            #endregion

            #region Prepare the report package

            // Prepare package
            ExcelPackage excelMetricGraphs = new ExcelPackage();
            excelMetricGraphs.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
            excelMetricGraphs.Workbook.Properties.Title = "AppDynamics DEXTER Entity Metric Graphs Report";
            excelMetricGraphs.Workbook.Properties.Subject = programOptions.JobName;

            excelMetricGraphs.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

            #endregion

            #region Parameters sheet

            // Parameters sheet
            ExcelWorksheet sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

            var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
            hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
            hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

            var grayTextStyle = sheet.Workbook.Styles.CreateNamedStyle("GrayTextStyle");
            grayTextStyle.Style.Font.Color.SetColor(colorGrayForRepeatedText);

            var metricNameStyle = sheet.Workbook.Styles.CreateNamedStyle("MetricNameStyle");
            metricNameStyle.Style.Font.Size = 8;

            fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Entities Metric Graphs Report");

            ExcelRangeBase range = null;
            ExcelTable table = null;

            #endregion

            #region TOC sheet

            // Navigation sheet with link to other sheets
            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

            #endregion

            #region Controller sheet

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_CONTROLLERS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT + 1, 1);

            range = readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT, 1);
            if (range != null)
            {
                table = sheet.Tables.Add(range, REPORT_METRICS_GRAPHS_TABLE_CONTROLLERS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
            }

            #endregion

            #region Metrics sheet

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT + 1, 1);

            #endregion

            return excelMetricGraphs;
        }

        private static bool finalizeAndSaveIndividualEntityMetricReport(ExcelPackage excelMetricGraphs, string reportFilePath)
        {
            logger.Info("Finalize Entity Metric Graphs Report File {0}", reportFilePath);

            ExcelWorksheet sheet;
            ExcelRangeBase range;
            ExcelTable table;

            #region TOC sheet

            // TOC sheet again
            sheet = excelMetricGraphs.Workbook.Worksheets[REPORT_SHEET_TOC];
            sheet.Cells[1, 1].Value = "Sheet Name";
            sheet.Cells[1, 2].Value = "# Entities";
            sheet.Cells[1, 3].Value = "Link";
            int rowNum = 1;
            foreach (ExcelWorksheet s in excelMetricGraphs.Workbook.Worksheets)
            {
                rowNum++;
                sheet.Cells[rowNum, 1].Value = s.Name;
                sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                if (s.Tables.Count == 1)
                {
                    table = s.Tables[0];
                    sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                }
                else if (s.Tables.Count > 0)
                {
                    sheet.Cells[rowNum, 2].Value = String.Format("{0} tables", s.Tables.Count);
                }
            }
            range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
            table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_TOC);
            table.ShowHeader = true;
            table.TableStyle = TableStyles.Medium2;
            table.ShowFilter = true;
            table.ShowTotal = false;

            sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
            sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

            #endregion

            #region Save file 

            // Report files
            logger.Info("Saving Excel report {0}", reportFilePath);
            loggerConsole.Info("Saving Excel report {0}", reportFilePath);

            string folderPath = Path.GetDirectoryName(reportFilePath);
            if (Directory.Exists(folderPath) == false)
            {
                Directory.CreateDirectory(folderPath);
            }

            try
            {
                // Save full report Excel files
                excelMetricGraphs.SaveAs(new FileInfo(reportFilePath));
            }
            catch (InvalidOperationException ex)
            {
                logger.Warn("Unable to save Excel file {0}", reportFilePath);
                logger.Warn(ex);
                loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);

                return false;
            }

            #endregion

            return true;
        }

        private static string getMetricGraphsReportFilePath(EntityBase entity, JobConfiguration jobConfiguration, JobTarget jobTarget, string reportFolderPath)
        {
            string reportFileName = String.Format(
                REPORT_METRICS_GRAPHS_FILE_NAME,
                entity.FolderName,
                getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                jobConfiguration.Input.TimeRange.From,
                jobConfiguration.Input.TimeRange.To);
            string reportFilePath = Path.Combine(
                reportFolderPath,
                getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                entity.FolderName,
                reportFileName);

            return reportFilePath;
        }

        private static void fillMetricValueTablesForEntityType(
            ExcelPackage excelReport,
            string sheetName,
            List<MetricExtractMapping> entityMetricExtractMappingList,
            string metricsIndexFolderPath,
            string entityFolderName)
        {
            ExcelWorksheet sheetMetrics = excelReport.Workbook.Worksheets[sheetName];

            int fromRow = REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT;
            int fromColumn = 1;

            // Load each of the metrics in the mapping table that apply to this entity type
            foreach (MetricExtractMapping metricExtractMapping in entityMetricExtractMappingList)
            {
                string metricValuesFileName = String.Format(CONVERT_ENTITIES_METRICS_VALUES_FILE_NAME, metricExtractMapping.FolderName);
                string metricsValuesFilePath = Path.Combine(metricsIndexFolderPath, entityFolderName, metricValuesFileName);

                if (File.Exists(metricsValuesFilePath) == true)
                {
                    ExcelRangeBase range = readCSVFileIntoExcelRange(metricsValuesFilePath, 0, sheetMetrics, fromRow, fromColumn);
                    if (range != null)
                    {
                        if (range.Rows == 1)
                        {
                            // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                            range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                        }
                        ExcelTable table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityFolderName, metricExtractMapping.FolderName));
                        table.ShowHeader = true;
                        table.TableStyle = TableStyles.Medium2;
                        table.ShowFilter = true;
                        table.ShowTotal = false;

                        sheetMetrics.Column(table.Columns["Controller"].Position + fromColumn).Width = 15;
                        sheetMetrics.Column(table.Columns["ApplicationName"].Position + fromColumn).Width = 15;
                        sheetMetrics.Column(table.Columns["EntityName"].Position + fromColumn).Width = 15;
                        sheetMetrics.Column(table.Columns["EntityType"].Position + fromColumn).Width = 15;
                        sheetMetrics.Column(table.Columns["MetricName"].Position + fromColumn).Width = 15;
                        sheetMetrics.Column(table.Columns["EventTimeStamp"].Position + fromColumn).Width = 20;

                        fromColumn = fromColumn + range.Columns + 1;
                    }
                }
            }
        }

        private static void fillMetricGraphsForEntityType(
            ExcelPackage excelReportMetrics,
            List<MetricExtractMapping> entityMetricExtractMappingList,
            List<EntityBase> entityList,
            JobConfiguration jobConfiguration,
            JobTarget jobTarget,
            string metricsIndexFolderPath,
            string entityFolderName,
            string entityType)
        {
            ExcelWorksheet sheetMetrics = excelReportMetrics.Workbook.Worksheets[REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS];

            // Load metric index locations file for later use
            string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, entityFolderName, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
            List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = FileIOHelper.readListFromCSVFile< EntityHourlyMetricValueLocation>(metricsLocationIndexFilePath, new EntityHourlyMetricValueLocationReportMap());

            // Process metrics in groups as indicated by their Graph column. All metrics with same Graph value go into same sheet, with as many sheets as necessary
            // Empty graph name means do not output
            List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entityType && m.Graph.Length > 0).ToList();

            // Output all graphs
            var metricMappingsGrouped = entityMetricExtractMappingListFiltered.GroupBy(m => new { m.Graph });
            foreach (var metricMappingGroup in metricMappingsGrouped)
            {
                List<MetricExtractMapping> entityMetricExtractMappingForThisGraph = metricMappingGroup.ToList();

                // Measure the width of the time range to be at least 16 cells
                int numCellsPerHourRange = entityMetricExtractMappingForThisGraph.Count * 2;
                if (numCellsPerHourRange < 16) numCellsPerHourRange = 16;

                #region Set variables for the sheet output based on Entity Type

                string sheetName = String.Empty;
                string sheetEntityTableName = String.Empty;
                int columnsBetweenHourRanges = 1;
                int columnsBeforeFirstHourRange = 0;

                switch (entityFolderName)
                {
                    case EntityApplication.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_APPLICATIONS, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 2;
                        break;
                    case EntityTier.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_TIERS_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_TIERS, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 3;
                        break;
                    case EntityNode.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_NODES_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_NODES, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 4;
                        break;
                    case EntityBackend.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_BACKENDS_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_BACKENDS, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 3;
                        break;
                    case EntityBusinessTransaction.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_BUSINESS_TRANSACTIONS, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 4;
                        break;
                    case EntityServiceEndpoint.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_SERVICE_ENDPOINTS, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 4;
                        break;
                    case EntityError.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_ERRORS_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_ERRORS, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 4;
                        break;
                    case EntityInformationPoint.ENTITY_FOLDER:
                        sheetName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_GRAPHS, metricMappingGroup.Key.Graph));
                        sheetEntityTableName = getShortenedNameForExcelSheet(String.Format(REPORT_METRICS_GRAPHS_TABLE_INFORMATION_POINTS, metricMappingGroup.Key.Graph));
                        columnsBeforeFirstHourRange = 3;
                        break;
                    default:
                        break;
                }

                #endregion

                #region Create sheet and put it in the right place

                // Add new sheet for this graph
                ExcelWorksheet sheetGraphs = excelReportMetrics.Workbook.Worksheets.Add(sheetName);
                sheetGraphs.Cells[1, 1].Value = "TOC";
                sheetGraphs.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheetGraphs.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheetGraphs.Cells[2, 1].Value = "See Data";
                sheetGraphs.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS);
                sheetGraphs.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheetGraphs.Cells[3, 1].Value = "Controller";
                sheetGraphs.Cells[3, 2].Value = jobTarget.Controller;
                sheetGraphs.Cells[4, 1].Value = "Application";
                sheetGraphs.Cells[4, 2].Value = jobTarget.Application;
                sheetGraphs.Cells[5, 1].Value = "Type";
                sheetGraphs.Cells[5, 2].Value = entityType;

                sheetGraphs.View.FreezePanes(REPORT_METRICS_GRAPHS_GRAPH_SHEET_START_TABLE_AT + 1, columnsBeforeFirstHourRange + 1);

                // Move before all the Metrics sheets
                excelReportMetrics.Workbook.Worksheets.MoveBefore(sheetName, REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS);

                #endregion

                #region Add outlines and time range labels for each of the hourly ranges

                for (int i = 0; i < jobConfiguration.Input.HourlyTimeRanges.Count; i++)
                {
                    JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[i];

                    int columnIndexTimeRangeStart = columnsBeforeFirstHourRange + 1 + i * columnsBetweenHourRanges + i * numCellsPerHourRange;
                    int columnIndexTimeRangeEnd = columnIndexTimeRangeStart + numCellsPerHourRange;
                    for (int columnIndex = columnIndexTimeRangeStart; columnIndex < columnIndexTimeRangeEnd; columnIndex++)
                    {
                        sheetGraphs.Column(columnIndex).OutlineLevel = 1;
                    }

                    sheetGraphs.Cells[1, columnIndexTimeRangeStart + 1].Value = "From";
                    sheetGraphs.Cells[1, columnIndexTimeRangeStart + 4].Value = "To";
                    sheetGraphs.Cells[2, columnIndexTimeRangeStart].Value = "Local";
                    sheetGraphs.Cells[3, columnIndexTimeRangeStart].Value = "UTC";
                    sheetGraphs.Cells[2, columnIndexTimeRangeStart + 1].Value = jobTimeRange.From.ToLocalTime().ToString("G");
                    sheetGraphs.Cells[2, columnIndexTimeRangeStart + 4].Value = jobTimeRange.To.ToLocalTime().ToString("G");
                    sheetGraphs.Cells[3, columnIndexTimeRangeStart + 1].Value = jobTimeRange.From.ToString("G");
                    sheetGraphs.Cells[3, columnIndexTimeRangeStart + 4].Value = jobTimeRange.To.ToString("G");
                }

                // Output table headers for the entities
                int entityTableHeaderRow = REPORT_METRICS_GRAPHS_GRAPH_SHEET_START_TABLE_AT;
                switch (entityFolderName)
                {
                    case EntityApplication.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "ApplicationName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "HasActivity";
                        break;
                    case EntityTier.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "AgentType";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "HasActivity";
                        break;
                    case EntityNode.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "NodeName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "AgentType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityBackend.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "BackendName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "BackendType";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "HasActivity";
                        break;
                    case EntityBusinessTransaction.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "BTName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "BTType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityServiceEndpoint.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "SEPName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "SEPType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityError.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "ErrorName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "ErrorType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityInformationPoint.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "IPName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "IPType";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "HasActivity";
                        break;
                    default:
                        break;
                }
                int currentMaxRow = entityTableHeaderRow + 1;

                #endregion

                // Output entity one at a time
                for (int indexOfEntity = 0; indexOfEntity < entityList.Count; indexOfEntity++)
                {
                    EntityBase entity = entityList[indexOfEntity];

                    string entityNameForExcelTable = getShortenedEntityNameForExcelTable(entity.EntityName, entity.EntityID);

                    bool entityHasActivity = false;

                    // Output graphs for every hour range one at a time
                    for (int indexOfTimeRange = 0; indexOfTimeRange < jobConfiguration.Input.HourlyTimeRanges.Count; indexOfTimeRange++)
                    {
                        JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[indexOfTimeRange];

                        ExcelChart chartPrimaryAxis = null;
                        ExcelChart chartSecondaryAxis = null;

                        // Output metrics into numbers row and graphs one at a time
                        for (int indexOfMetricMapping = 0; indexOfMetricMapping < entityMetricExtractMappingForThisGraph.Count; indexOfMetricMapping++)
                        {
                            MetricExtractMapping metricExtractMapping = entityMetricExtractMappingForThisGraph[indexOfMetricMapping];

                            #region Headers and legend for each range

                            // Output headers for each of the metrics
                            // Calculate where the index of the column value (ART, Total etc) are going to be output
                            // Sum of (Offset of tables + offset of the time range + number of columns between + the number of the metric
                            int columnIndexOfCurrentRangeBegin = columnsBeforeFirstHourRange + 1 + indexOfTimeRange * columnsBetweenHourRanges + indexOfTimeRange * numCellsPerHourRange;
                            int columnIndexOfValueOfCurrentMetric = columnIndexOfCurrentRangeBegin + indexOfMetricMapping * 2;
                            sheetGraphs.Cells[entityTableHeaderRow - 1, columnIndexOfValueOfCurrentMetric].Value = metricExtractMapping.MetricName;
                            sheetGraphs.Cells[entityTableHeaderRow - 1, columnIndexOfValueOfCurrentMetric].StyleName = "MetricNameStyle";
                            sheetGraphs.Cells[entityTableHeaderRow, columnIndexOfValueOfCurrentMetric].Value = "Sum";
                            sheetGraphs.Cells[entityTableHeaderRow, columnIndexOfValueOfCurrentMetric + 1].Value = "Avg";

                            // Output legend at the top for each of the metrics that we will display
                            sheetGraphs.Cells[entityTableHeaderRow - 2, columnIndexOfValueOfCurrentMetric].Value = LEGEND_THICK_LINE;
                            sheetGraphs.Cells[entityTableHeaderRow - 2, columnIndexOfValueOfCurrentMetric].Style.Font.Color.SetColor(getColorFromHexString(metricExtractMapping.LineColor));

                            #endregion

                            // Get indexed table location mapping for this specific metric/entity/timerange combo
                            List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForThisMetric = entityMetricValuesLocations.Where(m => 
                                m.MetricName == metricExtractMapping.MetricName && 
                                m.EntityID == entity.EntityID && 
                                m.FromUtc >= jobTimeRange.From && 
                                m.ToUtc < jobTimeRange.To).ToList();
                            if (entityMetricValuesLocationsForThisMetric != null && entityMetricValuesLocationsForThisMetric.Count > 0)
                            {
                                // We must have some activity here
                                entityHasActivity = true;

                                // Output the numeric values
                                ExcelTable tableMetrics = sheetMetrics.Tables[String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityFolderName, metricExtractMapping.FolderName)];
                                if (tableMetrics != null)
                                {
                                    // Should be only metric index for this value 1 in here
                                    EntityHourlyMetricValueLocation entityMetricValuesLocationForThisMetric = entityMetricValuesLocationsForThisMetric[0];

                                    // Get the range that contains the Sum column of the metric
                                    ExcelRangeBase rangeMetricValuesForSum = getSingleColumnRangeFromTable(tableMetrics, "Sum", entityMetricValuesLocationForThisMetric.RowStart, entityMetricValuesLocationForThisMetric.RowEnd);
                                    if (rangeMetricValuesForSum != null)
                                    {
                                        sheetGraphs.Cells[currentMaxRow, columnIndexOfValueOfCurrentMetric].Formula = String.Format(@"=SUM({0})", rangeMetricValuesForSum.FullAddress);

                                        if (metricExtractMapping.RangeRollupType == RANGE_ROLLUP_TYPE_AVERAGE)
                                        {
                                            ExcelRangeBase rangeMetricValuesForCount = getSingleColumnRangeFromTable(tableMetrics, "Count", entityMetricValuesLocationForThisMetric.RowStart, entityMetricValuesLocationForThisMetric.RowEnd);
                                            if (rangeMetricValuesForCount != null)
                                            {
                                                sheetGraphs.Cells[currentMaxRow, columnIndexOfValueOfCurrentMetric + 1].Formula = String.Format(@"=ROUND(SUM({0})/SUM({1}), 0)", rangeMetricValuesForSum.FullAddress, rangeMetricValuesForCount.FullAddress);
                                            }
                                        }
                                        else if (metricExtractMapping.RangeRollupType == RANGE_ROLLUP_TYPE_SUM)
                                        {
                                            int duration = (int)(jobTimeRange.To - jobTimeRange.From).Duration().TotalMinutes;
                                            sheetGraphs.Cells[currentMaxRow, columnIndexOfValueOfCurrentMetric + 1].Formula = String.Format(@"=ROUND(SUM({0})/{1}, 0)", rangeMetricValuesForSum.FullAddress, duration);
                                        }
                                    }

                                    // Get reference to or create graphs if they don't exist
                                    // Always create primary chart
                                    ExcelChart chart = null;
                                    if (chartPrimaryAxis == null)
                                    {
                                        chartPrimaryAxis = sheetGraphs.Drawings.AddChart(String.Format(REPORT_METRICS_GRAPHS_METRIC_GRAPH, entityType, jobTimeRange.From, entityNameForExcelTable), eChartType.XYScatterLinesNoMarkers);
                                        chartPrimaryAxis.SetPosition(currentMaxRow, 0, columnIndexOfCurrentRangeBegin - 1, 0);
                                        chartPrimaryAxis.SetSize(1020, 200);
                                        chartPrimaryAxis.Style = eChartStyle.Style17;
                                        DateTime intervalStartTime = new DateTime(
                                            jobTimeRange.From.Year,
                                            jobTimeRange.From.Month,
                                            jobTimeRange.From.Day,
                                            jobTimeRange.From.Hour,
                                            0,
                                            0,
                                            DateTimeKind.Utc);
                                        DateTime intervalEndTime = intervalStartTime.AddHours(1);
                                        chartPrimaryAxis.Legend.Remove();
                                        chartPrimaryAxis.XAxis.MinValue = intervalStartTime.ToLocalTime().ToOADate();
                                        chartPrimaryAxis.XAxis.MaxValue = intervalEndTime.ToLocalTime().ToOADate();
                                        chartPrimaryAxis.XAxis.MajorUnit = FIVE_MINUTES;
                                    }
                                    chart = chartPrimaryAxis;

                                    // Create secondary axis only if needed
                                    if (metricExtractMapping.Axis == METRIC_GRAPH_AXIS_SECONDARY)
                                    {
                                        if (chartSecondaryAxis == null)
                                        {
                                            chartSecondaryAxis = chartPrimaryAxis.PlotArea.ChartTypes.Add(eChartType.XYScatterLinesNoMarkers);
                                            chartSecondaryAxis.UseSecondaryAxis = true;
                                            chartSecondaryAxis.Legend.Remove();
                                            chartSecondaryAxis.XAxis.MinValue = chartPrimaryAxis.XAxis.MinValue;
                                            chartSecondaryAxis.XAxis.MaxValue = chartPrimaryAxis.XAxis.MaxValue;
                                            chartSecondaryAxis.XAxis.MajorUnit = chartPrimaryAxis.XAxis.MajorUnit;
                                        }
                                        chart = chartSecondaryAxis;
                                    }

                                    // Output metrics
                                    if (chart != null)
                                    {
                                        // The order of extracted metrics is sorted in EntityID, MetricsID, EventTime
                                        // Therefore all the metrics for single item will stick together
                                        // We want the full hour range indexed, including the beginning of the next hour in this hour's window
                                        // therefore we have to advance 1 extra, but only for all the time ranges except the last one
                                        int advanceToNextHourExtra = 1;
                                        if (indexOfTimeRange == jobConfiguration.Input.HourlyTimeRanges.Count - 1)
                                        {
                                            advanceToNextHourExtra = 0;
                                        }

                                        ExcelRangeBase rangeYValues = getSingleColumnRangeFromTable(tableMetrics, "Value", entityMetricValuesLocationForThisMetric.RowStart, entityMetricValuesLocationForThisMetric.RowEnd + advanceToNextHourExtra);
                                        ExcelRangeBase rangeXTime = getSingleColumnRangeFromTable(tableMetrics, "EventTime", entityMetricValuesLocationForThisMetric.RowStart, entityMetricValuesLocationForThisMetric.RowEnd + advanceToNextHourExtra);
                                        if (rangeYValues != null && rangeXTime != null)
                                        {
                                            ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                                            series.Header = metricExtractMapping.MetricName;
                                            ((ExcelScatterChartSerie)series).LineColor = getColorFromHexString(metricExtractMapping.LineColor);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    #region Output entity detail in table

                    // Output the first row
                    switch (entityFolderName)
                    {
                        case EntityApplication.ENTITY_FOLDER:
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entity.ApplicationName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityHasActivity;
                            break;
                        case EntityTier.ENTITY_FOLDER:
                            EntityTier entityTier = (EntityTier)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityTier.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityTier.TierType;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityHasActivity;
                            break;
                        case EntityNode.ENTITY_FOLDER:
                            EntityNode entityNode = (EntityNode)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityNode.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityNode.NodeName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityNode.AgentType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityBackend.ENTITY_FOLDER:
                            EntityBackend entityBackend = (EntityBackend)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityBackend.BackendName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityBackend.BackendType;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityHasActivity;
                            break;
                        case EntityBusinessTransaction.ENTITY_FOLDER:
                            EntityBusinessTransaction entityBusinessTransaction = (EntityBusinessTransaction)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityBusinessTransaction.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityBusinessTransaction.BTName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityBusinessTransaction.BTType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityServiceEndpoint.ENTITY_FOLDER:
                            EntityServiceEndpoint entityServiceEndpoint = (EntityServiceEndpoint)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityServiceEndpoint.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityServiceEndpoint.SEPName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityServiceEndpoint.SEPType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityError.ENTITY_FOLDER:
                            EntityError entityError = (EntityError)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityError.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityError.ErrorName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityError.ErrorType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityInformationPoint.ENTITY_FOLDER:
                            EntityInformationPoint entityInformationPoint = (EntityInformationPoint)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityInformationPoint.IPName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityInformationPoint.IPType;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityHasActivity;
                            break;
                        default:
                            break;
                    }

                    // Make copes of the first entity row in gray color if the graphs were output, to support filtering
                    if (entityHasActivity == true)
                    {
                        for (int rowIndex = 1; rowIndex <= 10; rowIndex++)
                        {
                            for (int columnIndex = 1; columnIndex <= columnsBeforeFirstHourRange; columnIndex++)
                            {
                                sheetGraphs.Cells[currentMaxRow + rowIndex, columnIndex].Value = sheetGraphs.Cells[currentMaxRow, columnIndex].Value;
                                sheetGraphs.Cells[currentMaxRow + rowIndex, columnIndex].StyleName = "GrayTextStyle";
                            }
                        }
                        currentMaxRow = currentMaxRow + 10;
                    }
                    currentMaxRow++;

                    #endregion
                }

                #region Create tables for entities

                //logger.Info("{0} {1} Sheet Graphs ({2} rows)", entityType, metricMappingGroup.Key.Graph, sheetGraphs.Dimension.Rows);
                //loggerConsole.Info("{0} {1} Sheet Graphs ({2} rows)", entityType, metricMappingGroup.Key.Graph, sheetGraphs.Dimension.Rows);
                if (sheetGraphs.Dimension.Rows > entityTableHeaderRow)
                {
                    ExcelRangeBase range = sheetGraphs.Cells[entityTableHeaderRow, 1, sheetGraphs.Dimension.Rows, columnsBeforeFirstHourRange];
                    ExcelTable table = sheetGraphs.Tables.Add(range, sheetEntityTableName);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.None;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    for (int i = 1; i < columnsBeforeFirstHourRange; i++)
                    {
                        sheetGraphs.Column(i).Width = 20;
                    }
                }

                #endregion
            }

            return;
        }

        private static void fillTransactionalScatterPlotsForEntityType(
            ExcelPackage excelReportMetrics,
            List<MetricExtractMapping> entityMetricExtractMappingList,
            List<EntityBase> entityList,
            JobConfiguration jobConfiguration,
            JobTarget jobTarget,
            string metricsIndexFolderPath,
            string entityFolderName,
            string entityType)
        {
            ExcelWorksheet sheetMetrics = excelReportMetrics.Workbook.Worksheets[REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS];

            // Load metric index locations file for later use
            string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, entityFolderName, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
            List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = FileIOHelper.readListFromCSVFile<EntityHourlyMetricValueLocation>(metricsLocationIndexFilePath, new EntityHourlyMetricValueLocationReportMap());

            // Process metrics in the CPM, ART and EPM group
            List<MetricExtractMapping> entityMetricExtractMappingListFiltered = entityMetricExtractMappingList.Where(m => m.EntityType == entityType && m.Graph == TRANSACTIONS_METRICS_SET).ToList();

            if (entityMetricExtractMappingListFiltered.Count > 0)
            {
                #region Set variables for the sheet output based on Entity Type

                string sheetName = String.Empty;
                string sheetEntityTableName = String.Empty;
                int columnsBetweenHourRanges = 1;
                int columnsBeforeFirstHourRange = 0;
                int numCellsPerHourRange = 5;

                switch (entityFolderName)
                {
                    case EntityApplication.ENTITY_FOLDER:
                        sheetName = REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_SCATTER;
                        sheetEntityTableName = REPORT_METRICS_GRAPHS_TABLE_APPLICATIONS_SCATTER;
                        columnsBeforeFirstHourRange = 2;
                        break;
                    case EntityTier.ENTITY_FOLDER:
                        sheetName = REPORT_METRICS_GRAPHS_SHEET_TIERS_SCATTER;
                        sheetEntityTableName = REPORT_METRICS_GRAPHS_TABLE_TIERS_SCATTER;
                        columnsBeforeFirstHourRange = 3;
                        break;
                    case EntityNode.ENTITY_FOLDER:
                        sheetName = REPORT_METRICS_GRAPHS_SHEET_NODES_SCATTER;
                        sheetEntityTableName = REPORT_METRICS_GRAPHS_TABLE_NODES_SCATTER;
                        columnsBeforeFirstHourRange = 4;
                        break;
                    case EntityBackend.ENTITY_FOLDER:
                        sheetName = REPORT_METRICS_GRAPHS_SHEET_BACKENDS_SCATTER;
                        sheetEntityTableName = REPORT_METRICS_GRAPHS_TABLE_BACKENDS_SCATTER;
                        columnsBeforeFirstHourRange = 3;
                        break;
                    case EntityBusinessTransaction.ENTITY_FOLDER:
                        sheetName = REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_SCATTER;
                        sheetEntityTableName = REPORT_METRICS_GRAPHS_TABLE_BUSINESS_TRANSACTIONS_SCATTER;
                        columnsBeforeFirstHourRange = 4;
                        break;
                    case EntityServiceEndpoint.ENTITY_FOLDER:
                        sheetName = REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_SCATTER;
                        sheetEntityTableName = REPORT_METRICS_GRAPHS_TABLE_SERVICE_ENDPOINTS_SCATTER;
                        columnsBeforeFirstHourRange = 4;
                        break;
                    case EntityError.ENTITY_FOLDER:
                        return;
                    case EntityInformationPoint.ENTITY_FOLDER:
                        sheetName = REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_SCATTER;
                        sheetEntityTableName = REPORT_METRICS_GRAPHS_TABLE_INFORMATION_POINTS_SCATTER;
                        columnsBeforeFirstHourRange = 3;
                        break;
                    default:
                        break;
                }

                // Get the trusty trio of metrics from the mapping. Should always be there, but best to check
                MetricExtractMapping memART = entityMetricExtractMappingListFiltered.Where(m => m.MetricName == METRIC_ART_FULLNAME).FirstOrDefault();
                MetricExtractMapping memCPM = entityMetricExtractMappingListFiltered.Where(m => m.MetricName == METRIC_CPM_FULLNAME).FirstOrDefault();
                MetricExtractMapping memEPM = entityMetricExtractMappingListFiltered.Where(m => m.MetricName == METRIC_EPM_FULLNAME).FirstOrDefault();

                if (memART == null && memCPM == null && memEPM == null) return;

                #endregion

                #region Create sheet and put it in the right place

                // Add new sheet for this graph
                ExcelWorksheet sheetGraphs = excelReportMetrics.Workbook.Worksheets.Add(sheetName);
                sheetGraphs.Cells[1, 1].Value = "TOC";
                sheetGraphs.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheetGraphs.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheetGraphs.Cells[2, 1].Value = "See Data";
                sheetGraphs.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_ENTITIES_METRICS);
                sheetGraphs.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheetGraphs.Cells[3, 1].Value = "Controller";
                sheetGraphs.Cells[3, 2].Value = jobTarget.Controller;
                sheetGraphs.Cells[4, 1].Value = "Application";
                sheetGraphs.Cells[4, 2].Value = jobTarget.Application;
                sheetGraphs.Cells[5, 1].Value = "Type";
                sheetGraphs.Cells[5, 2].Value = entityType;

                sheetGraphs.View.FreezePanes(REPORT_METRICS_GRAPHS_GRAPH_SHEET_START_TABLE_AT + 1, columnsBeforeFirstHourRange + 1);

                // Move before all the Graphs sheets
                excelReportMetrics.Workbook.Worksheets.MoveAfter(sheetName, REPORT_METRICS_GRAPHS_SHEET_CONTROLLERS);

                #endregion

                #region Add outlines and time range labels for each of the hourly ranges

                for (int i = 0; i < jobConfiguration.Input.HourlyTimeRanges.Count; i++)
                {
                    JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[i];

                    int columnIndexTimeRangeStart = columnsBeforeFirstHourRange + 1 + i * columnsBetweenHourRanges + i * numCellsPerHourRange;
                    int columnIndexTimeRangeEnd = columnIndexTimeRangeStart + numCellsPerHourRange;
                    for (int columnIndex = columnIndexTimeRangeStart; columnIndex < columnIndexTimeRangeEnd; columnIndex++)
                    {
                        sheetGraphs.Column(columnIndex).OutlineLevel = 1;
                    }

                    sheetGraphs.Cells[1, columnIndexTimeRangeStart + 1].Value = "From";
                    sheetGraphs.Cells[1, columnIndexTimeRangeStart + 4].Value = "To";
                    sheetGraphs.Cells[2, columnIndexTimeRangeStart].Value = "Local";
                    sheetGraphs.Cells[3, columnIndexTimeRangeStart].Value = "UTC";
                    sheetGraphs.Cells[2, columnIndexTimeRangeStart + 1].Value = jobTimeRange.From.ToLocalTime().ToString("G");
                    sheetGraphs.Cells[2, columnIndexTimeRangeStart + 4].Value = jobTimeRange.To.ToLocalTime().ToString("G");
                    sheetGraphs.Cells[3, columnIndexTimeRangeStart + 1].Value = jobTimeRange.From.ToString("G");
                    sheetGraphs.Cells[3, columnIndexTimeRangeStart + 4].Value = jobTimeRange.To.ToString("G");
                }

                // Output table headers for the entities
                int entityTableHeaderRow = REPORT_METRICS_GRAPHS_GRAPH_SHEET_START_TABLE_AT;
                switch (entityFolderName)
                {
                    case EntityApplication.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "ApplicationName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "HasActivity";
                        break;
                    case EntityTier.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "AgentType";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "HasActivity";
                        break;
                    case EntityNode.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "NodeName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "AgentType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityBackend.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "BackendName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "BackendType";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "HasActivity";
                        break;
                    case EntityBusinessTransaction.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "BTName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "BTType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityServiceEndpoint.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "SEPName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "SEPType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityError.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "TierName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "ErrorName";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "ErrorType";
                        sheetGraphs.Cells[entityTableHeaderRow, 4].Value = "HasActivity";
                        break;
                    case EntityInformationPoint.ENTITY_FOLDER:
                        sheetGraphs.Cells[entityTableHeaderRow, 1].Value = "IPName";
                        sheetGraphs.Cells[entityTableHeaderRow, 2].Value = "IPType";
                        sheetGraphs.Cells[entityTableHeaderRow, 3].Value = "HasActivity";
                        break;
                    default:
                        break;
                }
                int currentMaxRow = entityTableHeaderRow + 1;

                #endregion

                // Output entity one at a time
                for (int indexOfEntity = 0; indexOfEntity < entityList.Count; indexOfEntity++)
                {
                    EntityBase entity = entityList[indexOfEntity];

                    string entityNameForExcelTable = getShortenedEntityNameForExcelTable(entity.EntityName, entity.EntityID);

                    bool entityHasActivity = false;

                    // Output graphs for every hour range one at a time
                    for (int indexOfTimeRange = 0; indexOfTimeRange < jobConfiguration.Input.HourlyTimeRanges.Count; indexOfTimeRange++)
                    {
                        JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[indexOfTimeRange];

                        #region Headers and legend for each range

                        int columnIndexOfCurrentRangeBegin = columnsBeforeFirstHourRange + 1 + indexOfTimeRange * columnsBetweenHourRanges + indexOfTimeRange * numCellsPerHourRange;

                        #endregion

                        // Get indexed table location mapping for this specific metric/entity/timerange combo
                        EntityHourlyMetricValueLocation entityMetricValuesLocationsForART = entityMetricValuesLocations.Where(m =>
                            m.MetricName == memART.MetricName &&
                            m.EntityID == entity.EntityID &&
                            m.FromUtc >= jobTimeRange.From &&
                            m.ToUtc < jobTimeRange.To).FirstOrDefault();

                        EntityHourlyMetricValueLocation entityMetricValuesLocationsForCPM = entityMetricValuesLocations.Where(m =>
                            m.MetricName == memCPM.MetricName &&
                            m.EntityID == entity.EntityID &&
                            m.FromUtc >= jobTimeRange.From &&
                            m.ToUtc < jobTimeRange.To).FirstOrDefault();

                        EntityHourlyMetricValueLocation entityMetricValuesLocationsForEPM = entityMetricValuesLocations.Where(m =>
                            m.MetricName == memEPM.MetricName &&
                            m.EntityID == entity.EntityID &&
                            m.FromUtc >= jobTimeRange.From &&
                            m.ToUtc < jobTimeRange.To).FirstOrDefault();

                        // Get ranges with the metrics
                        ExcelRangeBase rangeARTValues = null;
                        ExcelRangeBase rangeCPMValues = null;
                        ExcelRangeBase rangeEPMValues = null;

                        if (entityMetricValuesLocationsForART != null)
                        {
                            ExcelTable tableMetrics = sheetMetrics.Tables[String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityFolderName, memART.FolderName)];
                            if (tableMetrics != null)
                            {
                                rangeARTValues = getSingleColumnRangeFromTable(tableMetrics, "Value", entityMetricValuesLocationsForART.RowStart, entityMetricValuesLocationsForART.RowEnd);
                            }
                        }

                        if (entityMetricValuesLocationsForCPM != null)
                        {
                            ExcelTable tableMetrics = sheetMetrics.Tables[String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityFolderName, memCPM.FolderName)];
                            if (tableMetrics != null)
                            {
                                rangeCPMValues = getSingleColumnRangeFromTable(tableMetrics, "Value", entityMetricValuesLocationsForCPM.RowStart, entityMetricValuesLocationsForCPM.RowEnd);
                            }
                        }

                        if (entityMetricValuesLocationsForEPM != null)
                        {
                            ExcelTable tableMetrics = sheetMetrics.Tables[String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityFolderName, memEPM.FolderName)];
                            if (tableMetrics != null)
                            {
                                rangeEPMValues = getSingleColumnRangeFromTable(tableMetrics, "Value", entityMetricValuesLocationsForEPM.RowStart, entityMetricValuesLocationsForEPM.RowEnd);
                            }
                        }

                        if ((rangeARTValues != null && rangeCPMValues != null) || 
                            (rangeARTValues != null && rangeEPMValues != null))
                        {
                            // We must have some activity here
                            entityHasActivity = true;

                            ExcelChart chart = sheetGraphs.Drawings.AddChart(String.Format(REPORT_METRICS_GRAPHS_METRIC_ARTCPMEPM_SCATTER, entityType, jobTimeRange.From, entityNameForExcelTable), eChartType.XYScatter);
                            ExcelScatterChart chart1 = (ExcelScatterChart)chart;
                            chart.SetPosition(currentMaxRow - 1, 0, columnIndexOfCurrentRangeBegin - 1, 0);
                            chart.SetSize(300, 300);
                            chart.Legend.Remove();
                            chart.XAxis.Title.Text = memART.MetricName;
                            chart.XAxis.Title.Font.Size = 8;
                            chart.YAxis.Title.Text = memCPM.MetricName;
                            chart.YAxis.Title.Font.Size = 8;
                            chart.Style = eChartStyle.Style10;

                            if (rangeARTValues != null && rangeCPMValues != null)
                            {
                                ExcelChartSerie series = chart.Series.Add(rangeCPMValues, rangeARTValues);
                                ExcelScatterChartSerie series1 = (ExcelScatterChartSerie)series;
                                series.Header = String.Format("{0} vs {1}", memART.MetricName, memCPM.MetricName);
                                series1.DataLabel.ShowValue = true;
                                series1.DataLabel.ShowCategory = true;
                                series1.DataLabel.ShowValue = false;
                                series1.DataLabel.ShowCategory = false;
                                series1.DataLabel.Position = eLabelPosition.Top;
                                series1.MarkerColor = getColorFromHexString(memCPM.LineColor);
                                series1.Marker = eMarkerStyle.Circle;
                                ExcelChartTrendline tl = series1.TrendLines.Add(eTrendLine.Linear);
                                tl.DisplayEquation = false;
                                tl.DisplayRSquaredValue = false;
                            }

                            if (rangeARTValues != null && rangeEPMValues != null)
                            {
                                ExcelChartSerie series = chart.Series.Add(rangeEPMValues, rangeARTValues);
                                ExcelScatterChartSerie series1 = (ExcelScatterChartSerie)series;
                                series.Header = String.Format("{0} vs {1}", memART.MetricName, memEPM.MetricName);
                                series1.DataLabel.ShowValue = true;
                                series1.DataLabel.ShowCategory = true;
                                series1.DataLabel.ShowValue = false;
                                series1.DataLabel.ShowCategory = false;
                                series1.DataLabel.Position = eLabelPosition.Top;
                                series1.MarkerColor = getColorFromHexString(memEPM.LineColor);
                                series1.Marker = eMarkerStyle.Circle;
                                ExcelChartTrendline tl = series1.TrendLines.Add(eTrendLine.Linear);
                                tl.DisplayEquation = false;
                                tl.DisplayRSquaredValue = false;
                            }
                        }
                    }

                    #region Output entity detail in table

                    // Output the first row
                    switch (entityFolderName)
                    {
                        case EntityApplication.ENTITY_FOLDER:
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entity.ApplicationName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityHasActivity;
                            break;
                        case EntityTier.ENTITY_FOLDER:
                            EntityTier entityTier = (EntityTier)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityTier.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityTier.TierType;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityHasActivity;
                            break;
                        case EntityNode.ENTITY_FOLDER:
                            EntityNode entityNode = (EntityNode)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityNode.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityNode.NodeName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityNode.AgentType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityBackend.ENTITY_FOLDER:
                            EntityBackend entityBackend = (EntityBackend)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityBackend.BackendName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityBackend.BackendType;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityHasActivity;
                            break;
                        case EntityBusinessTransaction.ENTITY_FOLDER:
                            EntityBusinessTransaction entityBusinessTransaction = (EntityBusinessTransaction)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityBusinessTransaction.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityBusinessTransaction.BTName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityBusinessTransaction.BTType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityServiceEndpoint.ENTITY_FOLDER:
                            EntityServiceEndpoint entityServiceEndpoint = (EntityServiceEndpoint)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityServiceEndpoint.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityServiceEndpoint.SEPName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityServiceEndpoint.SEPType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityError.ENTITY_FOLDER:
                            EntityError entityError = (EntityError)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityError.TierName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityError.ErrorName;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityError.ErrorType;
                            sheetGraphs.Cells[currentMaxRow, 4].Value = entityHasActivity;
                            break;
                        case EntityInformationPoint.ENTITY_FOLDER:
                            EntityInformationPoint entityInformationPoint = (EntityInformationPoint)entity;
                            sheetGraphs.Cells[currentMaxRow, 1].Value = entityInformationPoint.IPName;
                            sheetGraphs.Cells[currentMaxRow, 2].Value = entityInformationPoint.IPType;
                            sheetGraphs.Cells[currentMaxRow, 3].Value = entityHasActivity;
                            break;
                        default:
                            break;
                    }

                    // Make copes of the first entity row in gray color if the graphs were output, to support filtering
                    if (entityHasActivity == true)
                    {
                        for (int rowIndex = 1; rowIndex <= 14; rowIndex++)
                        {
                            for (int columnIndex = 1; columnIndex <= columnsBeforeFirstHourRange; columnIndex++)
                            {
                                sheetGraphs.Cells[currentMaxRow + rowIndex, columnIndex].Value = sheetGraphs.Cells[currentMaxRow, columnIndex].Value;
                                sheetGraphs.Cells[currentMaxRow + rowIndex, columnIndex].StyleName = "GrayTextStyle";
                            }
                        }
                        currentMaxRow = currentMaxRow + 14;
                    }
                    currentMaxRow++;

                    #endregion
                }

                #region Create tables for entities

                if (sheetGraphs.Dimension.Rows > entityTableHeaderRow)
                {
                    ExcelRangeBase range = sheetGraphs.Cells[entityTableHeaderRow, 1, sheetGraphs.Dimension.Rows, columnsBeforeFirstHourRange];
                    ExcelTable table = sheetGraphs.Tables.Add(range, sheetEntityTableName);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.None;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    for (int i = 1; i < columnsBeforeFirstHourRange; i++)
                    {
                        sheetGraphs.Column(i).Width = 20;
                    }
                }

                #endregion
            }
        }

        private static void addScatterChartToEntityMetricSheet(ExcelWorksheet sheet, ExcelTable table, string labelColumnName, string graphName)
        {
            int columnIndexART = table.Columns["ART"].Position;
            ExcelRangeBase rangeART = table.WorkSheet.Cells[
                table.Address.Start.Row + 1,
                table.Address.Start.Column + columnIndexART,
                table.Address.End.Row,
                table.Address.Start.Column + columnIndexART];

            int columnIndexCPM = table.Columns["CPM"].Position;
            ExcelRangeBase rangeCPM = table.WorkSheet.Cells[
                table.Address.Start.Row + 1,
                table.Address.Start.Column + columnIndexCPM,
                table.Address.End.Row,
                table.Address.Start.Column + columnIndexCPM];

            int columnIndexLabels = table.Columns[labelColumnName].Position;
            ExcelRangeBase rangeLabels = table.WorkSheet.Cells[
                table.Address.Start.Row + 1,
                table.Address.Start.Column + columnIndexLabels,
                table.Address.End.Row,
                table.Address.Start.Column + columnIndexLabels];

            //Scatter plot of activities
            ExcelChart chart = sheet.Drawings.AddChart(graphName, eChartType.XYScatter);
            ExcelScatterChart chart1 = (ExcelScatterChart)chart;
            chart.SetPosition(0, 0, 2, 0);
            chart.SetSize(800, 300);
            chart.Legend.Remove();
            chart.XAxis.Title.Text = "ART";
            chart.XAxis.Title.Font.Size = 8;
            chart.YAxis.Title.Text = "CPM";
            chart.YAxis.Title.Font.Size = 8;
            chart.VaryColors = true;
            //chart1.BubbleScale = 50;

            ExcelChartSerie series = chart.Series.Add(rangeCPM, rangeART);
            ExcelScatterChartSerie series1 = (ExcelScatterChartSerie)series;
            series.Header = "ARTvsCPM";
            series1.DataLabel.ShowValue = true;
            series1.DataLabel.ShowCategory = true;
            series1.DataLabel.ShowValue = false;
            series1.DataLabel.ShowCategory = false;
            series1.DataLabel.Position = eLabelPosition.Top;
            series1.MarkerSize = 10;
            series1.Marker = eMarkerStyle.Diamond;

            #region Update scatter to include nice Tier labels

            // This is what the Chart looks looks like
            //<ser xmlns="http://schemas.openxmlformats.org/drawingml/2006/chart">
            //    <c:idx val="0" />
            //    <c:order val="0" />
            //    <c:tx>
            //        <c:v>ARTvsCPM</c:v>
            //    </c:tx>
            //    <c:dLbls>
            //        <c:dLblPos val="ctr" />
            //        <c:showLegendKey val="0" />
            //        <c:showVal val="1" />
            //        <c:showCatName val="1" />
            //        <c:showSerName val="0" />
            //        <c:showPercent val="0" />
            //        <c:showBubbleSize val="0" />
            //        <c:separator>
            //        </c:separator>
            //        <c:showLeaderLines val="0" />
            //        <c:extLst>   
            //            <c:ext uri="{CE6537A1-D6FC-4f65-9D91-7224C49458BB}" xmlns:c15="http://schemas.microsoft.com/office/drawing/2012/chart">  <<< Magic GUID!!!!! Ai caramba
            //                <c15:showDataLabelsRange val="1"/>   <<<< This is the thing that turns on the data labels range
            //                <c15:showLeaderLines val="0"/>
            //            </c:ext>
            //        </c:extLst>
            //    </c:dLbls>
            //    <c:spPr>
            //        <a:ln w="28575">
            //            <a:noFill />
            //        </a:ln>
            //    </c:spPr>
            //    <c:xVal>
            //        <c:numRef>
            //            <c:f>'5.Tiers.Hourly'!$F$19:$F$40</c:f>
            //        </c:numRef>
            //    </c:xVal>
            //    <c:yVal>
            //        <c:numRef>
            //            <c:f>'5.Tiers.Hourly'!$I$19:$I$40</c:f>
            //        </c:numRef>
            //    </c:yVal>
            //    <c:smooth val="0" />
            //    <c:extLst>
            //        <c:ext uri="{02D57815-91ED-43cb-92C2-25804820EDAC}" xmlns:c15="http://schemas.microsoft.com/office/drawing/2012/chart">   <<< Magic GUID!!!!! Ai caramba
            //            <c15:datalabelsRange>
            //                <c15:f>'5.Tiers.Hourly'!$C$19:$C$40</c15:f>  <<<<< This is what specifies the range
            //            </c15:datalabelsRange>
            //        </c:ext>
            //    </c:extLst>
            //</ser>

            XmlDocument chartXMLdoc = chart.ChartXml;
            XmlNamespaceManager manager = new XmlNamespaceManager(chartXMLdoc.NameTable);
            manager.AddNamespace("c", "http://schemas.openxmlformats.org/drawingml/2006/chart");
            manager.AddNamespace("c15", "http://schemas.microsoft.com/office/drawing/2012/chart");

            XmlNode seriesXmlNode = chartXMLdoc.GetElementsByTagName("ser")[0];

            // Turn on labels
            // /ser/c:dLbls/c:extLst/c:ext/c15:showDataLabelsRange
            XmlNode labelXmlNode = seriesXmlNode.SelectSingleNode("c:dLbls", manager);
            XmlNode extLstXmlNode = chartXMLdoc.CreateElement("c:extLst", "http://schemas.openxmlformats.org/drawingml/2006/chart");
            labelXmlNode.AppendChild(extLstXmlNode);
            XmlNode extXmlNode = chartXMLdoc.CreateElement("c:ext", "http://schemas.openxmlformats.org/drawingml/2006/chart");
            XmlAttribute attribXmlAttribute = chartXMLdoc.CreateAttribute("uri");
            attribXmlAttribute.Value = "{CE6537A1-D6FC-4f65-9D91-7224C49458BB}";
            extXmlNode.Attributes.Append(attribXmlAttribute);
            extLstXmlNode.AppendChild(extXmlNode);
            XmlNode showDataLabelsRangeXmlNode = chartXMLdoc.CreateElement("showDataLabelsRange", "http://schemas.microsoft.com/office/drawing/2012/chart");
            attribXmlAttribute = chartXMLdoc.CreateAttribute("val");
            attribXmlAttribute.Value = "1";
            showDataLabelsRangeXmlNode.Attributes.Append(attribXmlAttribute);
            extXmlNode.AppendChild(showDataLabelsRangeXmlNode);

            // Specify label range
            // /ser/c:extLst/c:ext/c15:datalabelsRange/c15:f
            extLstXmlNode = chartXMLdoc.CreateElement("c:extLst", "http://schemas.openxmlformats.org/drawingml/2006/chart");
            seriesXmlNode.AppendChild(extLstXmlNode);
            extXmlNode = chartXMLdoc.CreateElement("c:ext", "http://schemas.openxmlformats.org/drawingml/2006/chart");
            attribXmlAttribute = chartXMLdoc.CreateAttribute("uri");
            attribXmlAttribute.Value = "{02D57815-91ED-43cb-92C2-25804820EDAC}";
            extXmlNode.Attributes.Append(attribXmlAttribute);
            extLstXmlNode.AppendChild(extXmlNode);
            XmlNode datalabelsRangeXmlNode = chartXMLdoc.CreateElement("datalabelsRange", "http://schemas.microsoft.com/office/drawing/2012/chart");
            extXmlNode.AppendChild(datalabelsRangeXmlNode);
            XmlNode fXmlNode = chartXMLdoc.CreateElement("f", "http://schemas.microsoft.com/office/drawing/2012/chart");
            fXmlNode.InnerText = rangeLabels.FullAddress;
            datalabelsRangeXmlNode.AppendChild(fXmlNode);

            #endregion
        }

        #endregion

        #region Entity Detail report functions

        private static ExcelPackage createIndividualEntityDetailReportTemplate(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget)
        {
            #region Target step variables

            string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);

            // Various folders
            string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));

            // Report files
            string controllerReportFilePath = Path.Combine(controllerIndexFolderPath, CONVERT_ENTITY_CONTROLLER_FILE_NAME);

            #endregion

            #region Prepare the report package

            // Prepare package
            ExcelPackage excelEntityDetail = new ExcelPackage();
            excelEntityDetail.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
            excelEntityDetail.Workbook.Properties.Title = "AppDynamics DEXTER Entity Detail Report";
            excelEntityDetail.Workbook.Properties.Subject = programOptions.JobName;

            excelEntityDetail.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

            #endregion

            #region Parameters sheet

            // Parameters sheet
            ExcelWorksheet sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

            var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
            hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
            hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

            fillReportParametersSheet(sheet, jobConfiguration, "AppDynamics DEXTER Entities Detail Report");
            
            #endregion

            #region TOC sheet

            // Navigation sheet with link to other sheets
            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

            #endregion

            #region Controller sheet

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_CONTROLLERS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            ExcelRangeBase range = readCSVFileIntoExcelRange(controllerReportFilePath, 0, sheet, REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1);
            if (range != null)
            {
                ExcelTable table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_CONTROLLERS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
            }

            #endregion

            #region Other sheets

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SUMMARY);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_TIMELINE);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT + 1, 6);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_EVENTS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            #endregion

            return excelEntityDetail;
        }

        private static void fillIndividualEntityMetricReportForEntity(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            ExcelPackage excelEntityDetail, 
            EntityBase entity,
            List<MetricExtractMapping> entityMetricExtractMappingList,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList)
        {
            #region Target step variables

            // Major folders
            string indexFolderPath = Path.Combine(programOptions.OutputJobFolderPath, INDEX_FOLDER_NAME);

            // Various folders and files
            string controllerIndexFolderPath = Path.Combine(indexFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationIndexFolderPath = Path.Combine(controllerIndexFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesIndexFolderPath = Path.Combine(applicationIndexFolderPath, ENTITIES_FOLDER_NAME);
            string eventsIndexFolderPath = Path.Combine(applicationIndexFolderPath, EVENTS_FOLDER_NAME);
            string snapshotsIndexFolderPath = Path.Combine(applicationIndexFolderPath, SNAPSHOTS_FOLDER_NAME);
            string metricsIndexFolderPath = Path.Combine(applicationIndexFolderPath, METRICS_FOLDER_NAME);
            string activityGridIndexFolderPath = Path.Combine(applicationIndexFolderPath, ACTIVITYGRID_FOLDER_NAME);
            string metricsEntityFolderTypePath = Path.Combine(metricsIndexFolderPath, entity.FolderName);
            string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderTypePath, CONVERT_ENTITIES_METRICS_SUMMARY_FULLRANGE_FILE_NAME);
            string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderTypePath, CONVERT_ENTITIES_METRICS_SUMMARY_HOURLY_FILE_NAME);
            string activityGridEntityFolderTypePath = Path.Combine(activityGridIndexFolderPath, entity.FolderName);
            string activityGridEntityFolderPath = String.Empty;

            int fromRow = 1;

            // Report tables and ranges
            ExcelRangeBase range;
            ExcelTable table;

            ExcelTable tableEvents = null;
            ExcelTable tableSnapshots = null;

            #endregion

            #region Parameter sheet

            ExcelWorksheet sheet = excelEntityDetail.Workbook.Worksheets[REPORT_SHEET_PARAMETERS];

            int l = sheet.Dimension.Rows + 2;
            sheet.Cells[l, 1].Value = "Type";
            sheet.Cells[l, 2].Value = entity.EntityType;
            l++;
            sheet.Cells[l, 1].Value = "Name";
            sheet.Cells[l, 2].Value = entity.EntityName;

            #endregion

            #region Entity Metrics Summary and Activty Grid sheets

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SUMMARY];

            #region Filter things by type of entity 

            MemoryStream memoryStreamEntitiesFullRange = null;
            MemoryStream memoryStreamEntitiesHourlyRanges = null;

            if (entity.EntityType == EntityApplication.ENTITY_TYPE)
            {
                List<EntityApplication> entitiesFullRangeFiltered = FileIOHelper.readListFromCSVFile<EntityApplication>(entityFullRangeReportFilePath, new ApplicationMetricReportMap());
                List<EntityApplication> entitiesHourRangeFiltered = FileIOHelper.readListFromCSVFile<EntityApplication>(entityHourlyRangeReportFilePath, new ApplicationMetricReportMap());

                memoryStreamEntitiesFullRange = FileIOHelper.writeListToMemoryStream(entitiesFullRangeFiltered, new ApplicationMetricReportMap());
                memoryStreamEntitiesHourlyRanges = FileIOHelper.writeListToMemoryStream(entitiesHourRangeFiltered, new ApplicationMetricReportMap());

                activityGridEntityFolderPath = activityGridEntityFolderTypePath;
            }
            else if (entity.EntityType == EntityTier.ENTITY_TYPE)
            {
                List<EntityTier> entitiesFullRangeFiltered = FileIOHelper.readListFromCSVFile<EntityTier>(entityFullRangeReportFilePath, new TierMetricReportMap()).Where(e => e.TierID == entity.EntityID).ToList();
                List<EntityTier> entitiesHourRangeFiltered = FileIOHelper.readListFromCSVFile<EntityTier>(entityHourlyRangeReportFilePath, new TierMetricReportMap()).Where(e => e.TierID == entity.EntityID).ToList();

                memoryStreamEntitiesFullRange = FileIOHelper.writeListToMemoryStream(entitiesFullRangeFiltered, new TierMetricReportMap());
                memoryStreamEntitiesHourlyRanges = FileIOHelper.writeListToMemoryStream(entitiesHourRangeFiltered, new TierMetricReportMap());

                activityGridEntityFolderPath = Path.Combine(
                    activityGridEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID));
            }
            else if (entity.EntityType == EntityNode.ENTITY_TYPE)
            {
                List<EntityNode> entitiesFullRangeFiltered = FileIOHelper.readListFromCSVFile<EntityNode>(entityFullRangeReportFilePath, new NodeMetricReportMap()).Where(e => e.NodeID == entity.EntityID).ToList();
                List<EntityNode> entitiesHourRangeFiltered = FileIOHelper.readListFromCSVFile<EntityNode>(entityHourlyRangeReportFilePath, new NodeMetricReportMap()).Where(e => e.NodeID == entity.EntityID).ToList();

                memoryStreamEntitiesFullRange = FileIOHelper.writeListToMemoryStream(entitiesFullRangeFiltered, new NodeMetricReportMap());
                memoryStreamEntitiesHourlyRanges = FileIOHelper.writeListToMemoryStream(entitiesHourRangeFiltered, new NodeMetricReportMap());

                activityGridEntityFolderPath = Path.Combine(
                    activityGridEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(((EntityNode)entity).TierName, ((EntityNode)entity).TierID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID));
            }
            else if (entity.EntityType == EntityBackend.ENTITY_TYPE)
            {
                List<EntityBackend> entitiesFullRangeFiltered = FileIOHelper.readListFromCSVFile<EntityBackend>(entityFullRangeReportFilePath, new BackendMetricReportMap()).Where(e => e.BackendID == entity.EntityID).ToList();
                List<EntityBackend> entitiesHourRangeFiltered = FileIOHelper.readListFromCSVFile<EntityBackend>(entityHourlyRangeReportFilePath, new BackendMetricReportMap()).Where(e => e.BackendID == entity.EntityID).ToList();

                memoryStreamEntitiesFullRange = FileIOHelper.writeListToMemoryStream(entitiesFullRangeFiltered, new BackendMetricReportMap());
                memoryStreamEntitiesHourlyRanges = FileIOHelper.writeListToMemoryStream(entitiesHourRangeFiltered, new BackendMetricReportMap());

                activityGridEntityFolderPath = Path.Combine(
                    activityGridEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID));
            }
            else if (entity.EntityType == EntityBusinessTransaction.ENTITY_TYPE)
            {
                List<EntityBusinessTransaction> entitiesFullRangeFiltered = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(entityFullRangeReportFilePath, new BusinessTransactionMetricReportMap()).Where(e => e.BTID == entity.EntityID).ToList();
                List<EntityBusinessTransaction> entitiesHourRangeFiltered = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(entityHourlyRangeReportFilePath, new BusinessTransactionMetricReportMap()).Where(e => e.BTID == entity.EntityID).ToList();

                memoryStreamEntitiesFullRange = FileIOHelper.writeListToMemoryStream(entitiesFullRangeFiltered, new BusinessTransactionMetricReportMap());
                memoryStreamEntitiesHourlyRanges = FileIOHelper.writeListToMemoryStream(entitiesHourRangeFiltered, new BusinessTransactionMetricReportMap());
                
                activityGridEntityFolderPath = Path.Combine(
                    activityGridEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(((EntityBusinessTransaction)entity).TierName, ((EntityBusinessTransaction)entity).TierID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID));
            }
            else if (entity.EntityType == EntityServiceEndpoint.ENTITY_TYPE)
            {
                List<EntityServiceEndpoint> entitiesFullRangeFiltered = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(entityFullRangeReportFilePath, new ServiceEndpointMetricReportMap()).Where(e => e.SEPID == entity.EntityID).ToList();
                List<EntityServiceEndpoint> entitiesHourRangeFiltered = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(entityHourlyRangeReportFilePath, new ServiceEndpointMetricReportMap()).Where(e => e.SEPID == entity.EntityID).ToList();

                memoryStreamEntitiesFullRange = FileIOHelper.writeListToMemoryStream(entitiesFullRangeFiltered, new ServiceEndpointMetricReportMap());
                memoryStreamEntitiesHourlyRanges = FileIOHelper.writeListToMemoryStream(entitiesHourRangeFiltered, new ServiceEndpointMetricReportMap());
                
                activityGridEntityFolderPath = Path.Combine(
                    activityGridEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(((EntityServiceEndpoint)entity).TierName, ((EntityServiceEndpoint)entity).TierID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID));
            }
            else if (entity.EntityType == EntityError.ENTITY_TYPE)
            {
                List<EntityError> entitiesFullRangeFiltered = FileIOHelper.readListFromCSVFile<EntityError>(entityFullRangeReportFilePath, new ErrorMetricReportMap()).Where(e => e.ErrorID == entity.EntityID).ToList();
                List<EntityError> entitiesHourRangeFiltered = FileIOHelper.readListFromCSVFile<EntityError>(entityHourlyRangeReportFilePath, new ErrorMetricReportMap()).Where(e => e.ErrorID == entity.EntityID).ToList();

                memoryStreamEntitiesFullRange = FileIOHelper.writeListToMemoryStream(entitiesFullRangeFiltered, new ErrorMetricReportMap());
                memoryStreamEntitiesHourlyRanges = FileIOHelper.writeListToMemoryStream(entitiesHourRangeFiltered, new ErrorMetricReportMap());
            }

            #endregion

            #region Output Calls and Response sheet Full range

            string relativePathToReportsToRemoveFromLinks = Path.Combine(
                getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID));

            // Full range table
            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (memoryStreamEntitiesFullRange != null)
            {
                range = readCSVFileIntoExcelRange(memoryStreamEntitiesFullRange, 0, sheet, fromRow, 1);
                if (range != null)
                {
                    table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL);

                    // Now loop through all lines and strip out references from Flame link
                    if (table.Columns["FlameGraphLink"] != null)
                    {
                        for (int i = range.Start.Row + 1; i <= range.End.Row; i++)
                        {
                            sheet.Cells[i, table.Columns["FlameGraphLink"].Position + 1].Formula = sheet.Cells[i, table.Columns["FlameGraphLink"].Position + 1].Formula.Replace(relativePathToReportsToRemoveFromLinks, "..");
                        }
                    }
                    if (table.Columns["MetricGraphLink"] != null)
                    {
                        for (int i = range.Start.Row + 1; i <= range.End.Row; i++)
                        {
                            sheet.Cells[i, table.Columns["MetricGraphLink"].Position + 1].Formula = sheet.Cells[i, table.Columns["MetricGraphLink"].Position + 1].Formula.Replace(relativePathToReportsToRemoveFromLinks, "..");
                        }
                    }

                    fromRow = fromRow + range.Rows + 2;
                }

                memoryStreamEntitiesFullRange.Close();
                memoryStreamEntitiesFullRange.Dispose();
            }

            #endregion

            #region Output Calls and Response sheet Hourly ranges

            // Hourly table
            sheet.Cells[fromRow - 1, 1].Value = "Hourly";

            if (memoryStreamEntitiesHourlyRanges != null)
            {
                range = readCSVFileIntoExcelRange(memoryStreamEntitiesHourlyRanges, 0, sheet, fromRow, 1);
                if (range != null)
                {
                    table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY);

                    // Now loop through all lines and strip out references from Flame link
                    if (table.Columns["FlameGraphLink"] != null)
                    {
                        for (int i = range.Start.Row + 1; i <= range.End.Row; i++)
                        {
                            sheet.Cells[i, table.Columns["FlameGraphLink"].Position + 1].Formula = sheet.Cells[i, table.Columns["FlameGraphLink"].Position + 1].Formula.Replace(relativePathToReportsToRemoveFromLinks, "..");
                        }
                    }
                    if (table.Columns["MetricGraphLink"] != null)
                    {
                        for (int i = range.Start.Row + 1; i <= range.End.Row; i++)
                        {
                            sheet.Cells[i, table.Columns["MetricGraphLink"].Position + 1].Formula = sheet.Cells[i, table.Columns["MetricGraphLink"].Position + 1].Formula.Replace(relativePathToReportsToRemoveFromLinks, "..");
                        }
                    }
                }

                memoryStreamEntitiesHourlyRanges.Close();
                memoryStreamEntitiesHourlyRanges.Dispose();
            }

            #endregion

            #region Activity grid sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID];

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            string activityGridReportFileName = Path.Combine(activityGridEntityFolderPath, CONVERT_ACTIVITY_GRID_FILE_NAME);
            if (File.Exists(activityGridReportFileName) == true)
            {
                readCSVFileIntoExcelRange(activityGridReportFileName, 0, sheet, fromRow, 1);
            }

            #endregion

            #endregion

            #region Events sheet

            #region Filter events by type of entity 

            // Filter events if necessary
            List<Event> eventsFilteredList = null;

            switch (entity.EntityType)
            {
                case EntityApplication.ENTITY_TYPE:
                    // The Application report has all events
                    eventsFilteredList = eventsAllList;
                    break;

                case EntityTier.ENTITY_TYPE:
                    // Filter events for the Tier
                    if (eventsAllList != null)
                    {
                        eventsFilteredList = eventsAllList.Where(e => e.TierID == ((EntityTier)entity).TierID).ToList();
                    }
                    break;

                case EntityNode.ENTITY_TYPE:
                    // Filter events for the Node
                    if (eventsAllList != null)
                    {
                        eventsFilteredList = eventsAllList.Where(e => e.NodeID == ((EntityNode)entity).NodeID).ToList();
                    }
                    break;

                case EntityBusinessTransaction.ENTITY_TYPE:
                    // Filter events for the Business Transaction
                    if (eventsAllList != null)
                    {
                        eventsFilteredList = eventsAllList.Where(e => e.BTID == ((EntityBusinessTransaction)entity).BTID).ToList();
                    }
                    break;

                default:
                    // Display nothing
                    break;
            }

            #endregion

            #region Output Events sheet

            // Output events
            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (eventsFilteredList != null && eventsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EVENTS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(eventsFilteredList, new EventReportMap()))
                {
                    range = readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                    if (range != null && range.Rows > 1)
                    {
                        tableEvents = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_EVENTS);
                    }
                }
            }

            #endregion

            #endregion

            #region Snapshots, Segments, Exit Calls, Service Endpoint Calls, Business Data

            #region Filter events by type of entity

            List<Snapshot> snapshotsFilteredList = new List<Snapshot>();
            List<Segment> segmentsFilteredList = new List<Segment>();

            switch (entity.EntityType)
            {
                case EntityApplication.ENTITY_TYPE:
                    // The Application report has all snapshots, segments, call exits etc.
                    snapshotsFilteredList = snapshotsAllList;

                    break;

                case EntityTier.ENTITY_TYPE:
                    // Filter snapshots starting at this Tier
                    List<Snapshot> snapshotsStartingAtThisEntity = null;
                    if (snapshotsAllList != null)
                    {
                        snapshotsStartingAtThisEntity = snapshotsAllList.Where(s => s.TierID == ((EntityTier)entity).TierID).ToList();
                    }

                    // Filter snapshots that start elsewhere, but include this tier
                    List<Snapshot> snapshotsCrossingThisEntity = new List<Snapshot>();
                    segmentsFilteredList = new List<Segment>();
                    if (segmentsAllList != null && snapshotsAllList != null)
                    {
                        var uniqueSnapshotIDs = segmentsAllList.Where(s => s.TierID == ((EntityTier)entity).TierID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            Snapshot snapshotForThisRequest = snapshotsAllList.Find(s => s.RequestID == requestID);
                            if (snapshotForThisRequest != null)
                            {
                                snapshotsCrossingThisEntity.Add(snapshotForThisRequest);
                            }

                            List<Segment> segmentRowsForThisRequest = segmentsAllList.Where(s => s.RequestID == requestID).ToList();
                            segmentsFilteredList.AddRange(segmentRowsForThisRequest);
                        }
                    }

                    // Combine both and make them unique
                    snapshotsFilteredList = new List<Snapshot>();
                    if (snapshotsStartingAtThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsStartingAtThisEntity); }
                    if (snapshotsCrossingThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsCrossingThisEntity); }
                    snapshotsFilteredList = snapshotsFilteredList.Distinct().ToList();

                    break;

                case EntityNode.ENTITY_TYPE:
                    // Filter snapshots starting at this Tier and Node
                    snapshotsStartingAtThisEntity = null;
                    if (snapshotsAllList != null)
                    {
                        snapshotsStartingAtThisEntity = snapshotsAllList.Where(s => s.TierID == ((EntityNode)entity).TierID && s.NodeID == ((EntityNode)entity).NodeID).ToList();
                    }

                    // Filter snapshots starting elsewhere, but including this Tier and Node
                    snapshotsCrossingThisEntity = new List<Snapshot>();
                    segmentsFilteredList = new List<Segment>();
                    if (segmentsAllList != null && snapshotsAllList != null)
                    {
                        var uniqueSnapshotIDs = segmentsAllList.Where(s => s.TierID == ((EntityNode)entity).TierID && s.NodeID == ((EntityNode)entity).NodeID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            Snapshot snapshotForThisRequest = snapshotsAllList.Find(s => s.RequestID == requestID);
                            if (snapshotForThisRequest != null)
                            {
                                snapshotsCrossingThisEntity.Add(snapshotForThisRequest);
                            }

                            List<Segment> segmentsForThisRequestList = segmentsAllList.Where(s => s.RequestID == requestID).ToList();
                            segmentsFilteredList.AddRange(segmentsForThisRequestList);
                        }
                    }

                    // Combine both and make them unique
                    snapshotsFilteredList = new List<Snapshot>();
                    if (snapshotsStartingAtThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsStartingAtThisEntity); }
                    if (snapshotsCrossingThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsCrossingThisEntity); }
                    snapshotsFilteredList = snapshotsFilteredList.Distinct().ToList();

                    break;

                case EntityBackend.ENTITY_TYPE:
                    // Filter snapshots calling this Backend
                    if (exitCallsAllList != null)
                    {
                        var uniqueSnapshotIDs = exitCallsAllList.Where(e => e.ToEntityID == ((EntityBackend)entity).BackendID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            if (snapshotsAllList != null)
                            {
                                snapshotsFilteredList.AddRange(snapshotsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                        }
                    }

                    break;

                case EntityBusinessTransaction.ENTITY_TYPE:
                    // Filter everything by BTs 
                    if (snapshotsAllList != null)
                    {
                        snapshotsFilteredList = snapshotsAllList.Where(s => s.BTID == ((EntityBusinessTransaction)entity).BTID).ToList();
                    }

                    break;

                case EntityServiceEndpoint.ENTITY_TYPE:
                    // Filter snapshots that call this SEP
                    if (serviceEndpointCallsAllList != null)
                    {
                        var uniqueSnapshotIDs = serviceEndpointCallsAllList.Where(s => s.SEPID == ((EntityServiceEndpoint)entity).SEPID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            if (snapshotsAllList != null)
                            {
                                snapshotsFilteredList.AddRange(snapshotsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                        }
                    }

                    break;

                case EntityError.ENTITY_TYPE:
                    // Filter snapshots that had this error
                    if (detectedErrorsAllList != null)
                    {
                        var uniqueSnapshotIDs = detectedErrorsAllList.Where(e => e.ErrorID == ((EntityError)entity).ErrorID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            if (snapshotsAllList != null)
                            {
                                snapshotsFilteredList.AddRange(snapshotsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                        }
                    }

                    break;

                default:
                    // Will never hit here, because all the values are already taken care of
                    // But do nothing anyway
                    break;
            }

            #endregion

            #region Snapshots sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (snapshotsFilteredList != null && snapshotsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(snapshotsFilteredList, new SnapshotReportMap()))
                {
                    range = readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                    if (range != null && range.Rows > 1)
                    {
                        tableSnapshots = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS);
                    }
                }

            }

            #endregion

            #endregion

            #region Detail sheet with Graphs, Snapshots and Events

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_TIMELINE];

            ExcelWorksheet sheetMetrics = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_METRICS];
            
            #region Legend and other pretties

            // Names of entities
            sheet.Cells[2, 1].Value = "Type";
            sheet.Cells[2, 2].Value = entity.EntityType;
            sheet.Cells[3, 1].Value = "Name";
            sheet.Cells[3, 2].Value = entity.EntityName;

            // Legend
            sheet.Cells[5, 1].Value = LEGEND_THICK_LINE;
            sheet.Cells[5, 1].Style.Font.Color.SetColor(colorMetricART);
            sheet.Cells[5, 2].Value = METRIC_ART_FULLNAME;
            sheet.Cells[6, 1].Value = LEGEND_THICK_LINE;
            sheet.Cells[6, 1].Style.Font.Color.SetColor(colorMetricCPM);
            sheet.Cells[6, 2].Value = METRIC_CPM_FULLNAME;
            sheet.Cells[7, 1].Value = LEGEND_THICK_LINE;
            sheet.Cells[7, 1].Style.Font.Color.SetColor(colorMetricEPM);
            sheet.Cells[7, 2].Value = METRIC_EPM_FULLNAME;
            sheet.Cells[8, 1].Value = LEGEND_THICK_LINE;
            sheet.Cells[8, 1].Style.Font.Color.SetColor(colorMetricEXCPM);
            sheet.Cells[8, 2].Value = METRIC_EXCPM_FULLNAME;
            sheet.Cells[9, 1].Value = LEGEND_THICK_LINE;
            sheet.Cells[9, 1].Style.Font.Color.SetColor(colorMetricHTTPEPM);
            sheet.Cells[9, 2].Value = METRIC_HTTPEPM_FULLNAME;

            #endregion

            #region Prepare Styles 

            var minuteHeadingtyle = sheet.Workbook.Styles.CreateNamedStyle("MinuteHeadingStyle");
            minuteHeadingtyle.Style.Font.Size = 9;

            var eventHeadingStyle = sheet.Workbook.Styles.CreateNamedStyle("EventHeadingStyle");
            eventHeadingStyle.Style.Font.Size = 9;

            var infoEventLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("InfoEventLinkStyle");
            infoEventLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            infoEventLinkStyle.Style.Fill.BackgroundColor.SetColor(colorLightBlueForInfoEvents); // This is sort of Color.LightBlue, but I like it better
            infoEventLinkStyle.Style.Font.Color.SetColor(Color.White);
            infoEventLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var warnEventLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("WarnEventLinkStyle");
            warnEventLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            warnEventLinkStyle.Style.Fill.BackgroundColor.SetColor(colorOrangeForWarnEvents);
            warnEventLinkStyle.Style.Font.Color.SetColor(Color.Black);
            warnEventLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var errorEventLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("ErrorEventLinkStyle");
            errorEventLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            errorEventLinkStyle.Style.Fill.BackgroundColor.SetColor(colorRedForErrorEvents);
            errorEventLinkStyle.Style.Font.Color.SetColor(Color.Black);
            errorEventLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var normalSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("NormalSnapshotLinkStyle");
            normalSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            normalSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorGreenForNormalSnapshots);
            normalSnapshotLinkStyle.Style.Font.Color.SetColor(Color.White);
            normalSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var slowSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("SlowSnapshotLinkStyle");
            slowSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            slowSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorYellowForSlowSnapshots);
            slowSnapshotLinkStyle.Style.Font.Color.SetColor(Color.Black);
            slowSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var verySlowSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("VerySlowSnapshotLinkStyle");
            verySlowSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            verySlowSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorOrangeForVerySlowSnapshots);
            verySlowSnapshotLinkStyle.Style.Font.Color.SetColor(Color.Black);
            verySlowSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var stallSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("StallSnapshotLinkStyle");
            stallSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            stallSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorOrangeForStallSnapshots);
            stallSnapshotLinkStyle.Style.Font.Color.SetColor(Color.White);
            stallSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var errorSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("ErrorSnapshotLinkStyle");
            errorSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            errorSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorRedForErrorSnapshots);
            errorSnapshotLinkStyle.Style.Font.Color.SetColor(Color.Black);
            errorSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            #endregion

            #region Output headers for each of the hour ranges 

            ExcelWorksheet sheetDetails = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SUMMARY];
            ExcelTable tableDetails = sheetDetails.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY];

            // Prepare vertical section for each of the hours
            int columnOffsetBegin = 6;
            int columnOffsetBetweenRanges = 1;
            int numCellsPerHourRange = 60;
            for (int i = 0; i < jobConfiguration.Input.HourlyTimeRanges.Count; i++)
            {
                JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[i];

                // Adjust columns in sheet
                int columnIndexTimeRangeStart = columnOffsetBegin + i * columnOffsetBetweenRanges + i * numCellsPerHourRange;
                int columnIndexTimeRangeEnd = columnIndexTimeRangeStart + numCellsPerHourRange;
                int minuteNumber = 0;
                for (int columnIndex = columnIndexTimeRangeStart; columnIndex < columnIndexTimeRangeEnd; columnIndex++)
                {
                    sheet.Column(columnIndex).Width = 2.5;
                    sheet.Cells[REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT, columnIndex].Value = minuteNumber;
                    sheet.Cells[REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT, columnIndex].StyleName = "MinuteHeadingStyle";

                    sheet.Column(columnIndex).OutlineLevel = 1;
                    minuteNumber++;
                }

                // Add summaries from the hourly metric breakdowns
                if (tableDetails != null)
                {
                    if (entity.EntityType != EntityError.ENTITY_TYPE)
                    {
                        sheet.Cells[1, columnIndexTimeRangeStart + 0].Value = "Calls";
                        sheet.Cells[2, columnIndexTimeRangeStart + 0].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["Calls"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 6].Value = "CPM";
                        sheet.Cells[2, columnIndexTimeRangeStart + 6].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["CPM"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 12].Value = "ART";
                        sheet.Cells[2, columnIndexTimeRangeStart + 12].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["ART"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 18].Value = "Errors";
                        sheet.Cells[2, columnIndexTimeRangeStart + 18].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["Errors"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 24].Value = "EPM";
                        sheet.Cells[2, columnIndexTimeRangeStart + 24].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["EPM"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 30].Value = "Errors %";
                        sheet.Cells[2, columnIndexTimeRangeStart + 30].Value = String.Format("{0}%", sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["ErrorsPercentage"].Position + 1].Value.ToString());
                    }
                    else
                    {
                        sheet.Cells[1, columnIndexTimeRangeStart + 24].Value = "EPM";
                        sheet.Cells[2, columnIndexTimeRangeStart + 24].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["EPM"].Position + 1].Value.ToString();
                    }
                }

                sheet.Cells[4, columnIndexTimeRangeStart + 0].Value = "Calls";
                sheet.Cells[4, columnIndexTimeRangeStart + 0].StyleName = "MinuteHeadingStyle";
                sheet.Cells[4, columnIndexTimeRangeStart + 56].Value = "Response";
                sheet.Cells[4, columnIndexTimeRangeStart + 56].StyleName = "MinuteHeadingStyle";
                sheet.Cells[1, columnIndexTimeRangeStart + 40].Value = "From";
                sheet.Cells[1, columnIndexTimeRangeStart + 50].Value = "To";
                sheet.Cells[2, columnIndexTimeRangeStart + 37].Value = "Local";
                sheet.Cells[2, columnIndexTimeRangeStart + 40].Value = jobTimeRange.From.ToLocalTime().ToString("G");
                sheet.Cells[2, columnIndexTimeRangeStart + 50].Value = jobTimeRange.To.ToLocalTime().ToString("G");
                sheet.Cells[3, columnIndexTimeRangeStart + 37].Value = "UTC";
                sheet.Cells[3, columnIndexTimeRangeStart + 40].Value = jobTimeRange.From.ToString("G");
                sheet.Cells[3, columnIndexTimeRangeStart + 50].Value = jobTimeRange.To.ToString("G");
            }

            #endregion

            #region Output Metric Graphs

            // Load metric index locations file for later use
            string metricsLocationIndexFilePath = Path.Combine(metricsIndexFolderPath, entity.FolderName, CONVERT_ENTITIES_METRICS_LOCATIONS_FILE_NAME);
            List<EntityHourlyMetricValueLocation> entityMetricValuesLocations = FileIOHelper.readListFromCSVFile<EntityHourlyMetricValueLocation>(metricsLocationIndexFilePath, new EntityHourlyMetricValueLocationReportMap());

            // Output graphs for every hour range one at a time
            for (int indexOfTimeRange = 0; indexOfTimeRange < jobConfiguration.Input.HourlyTimeRanges.Count; indexOfTimeRange++)
            {
                JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[indexOfTimeRange];

                int columnIndexOfCurrentRangeBegin = columnOffsetBegin + indexOfTimeRange * columnOffsetBetweenRanges + indexOfTimeRange * numCellsPerHourRange;

                ExcelChart chartPrimaryAxis = null;
                ExcelChart chartSecondaryAxis = null;

                // Output metrics into numbers row and graphs one at a time
                for (int indexOfMetricMapping = 0; indexOfMetricMapping < entityMetricExtractMappingList.Count; indexOfMetricMapping++)
                {
                    MetricExtractMapping metricExtractMapping = entityMetricExtractMappingList[indexOfMetricMapping];

                    // Get indexed table location mapping for this specific metric/entity/timerange combo
                    List<EntityHourlyMetricValueLocation> entityMetricValuesLocationsForThisMetric = entityMetricValuesLocations.Where(m =>
                        m.MetricName == metricExtractMapping.MetricName &&
                        m.EntityID == entity.EntityID &&
                        m.FromUtc >= jobTimeRange.From &&
                        m.ToUtc < jobTimeRange.To).ToList();
                    if (entityMetricValuesLocationsForThisMetric != null && entityMetricValuesLocationsForThisMetric.Count > 0)
                    {
                        // Output the numeric values
                        ExcelTable tableMetrics = sheetMetrics.Tables[String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entity.FolderName, metricExtractMapping.FolderName)];
                        if (tableMetrics != null)
                        {
                            // Should be only metric index for this value 1 in here
                            EntityHourlyMetricValueLocation entityMetricValuesLocationForThisMetric = entityMetricValuesLocationsForThisMetric[0];

                            // Get reference to or create graphs if they don't exist
                            // Always create primary chart
                            ExcelChart chart = null;
                            if (chartPrimaryAxis == null)
                            {
                                chartPrimaryAxis = sheet.Drawings.AddChart(String.Format(REPORT_ENTITY_DETAILS_METRIC_GRAPH, entity.EntityType, jobTimeRange.From), eChartType.XYScatterLinesNoMarkers);
                                chartPrimaryAxis.SetPosition(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 0, columnIndexOfCurrentRangeBegin - 1, 0);
                                chartPrimaryAxis.SetSize(1020, 200);
                                chartPrimaryAxis.Style = eChartStyle.Style17;
                                DateTime intervalStartTime = new DateTime(
                                    jobTimeRange.From.Year,
                                    jobTimeRange.From.Month,
                                    jobTimeRange.From.Day,
                                    jobTimeRange.From.Hour,
                                    0,
                                    0,
                                    DateTimeKind.Utc);
                                DateTime intervalEndTime = intervalStartTime.AddHours(1);
                                chartPrimaryAxis.Legend.Remove();
                                chartPrimaryAxis.XAxis.MinValue = intervalStartTime.ToLocalTime().ToOADate();
                                chartPrimaryAxis.XAxis.MaxValue = intervalEndTime.ToLocalTime().ToOADate();
                                chartPrimaryAxis.XAxis.MajorUnit = FIVE_MINUTES;
                            }
                            chart = chartPrimaryAxis;

                            // Create secondary axis only if needed
                            if (metricExtractMapping.Axis == METRIC_GRAPH_AXIS_SECONDARY)
                            {
                                if (chartSecondaryAxis == null)
                                {
                                    chartSecondaryAxis = chartPrimaryAxis.PlotArea.ChartTypes.Add(eChartType.XYScatterLinesNoMarkers);
                                    chartSecondaryAxis.UseSecondaryAxis = true;
                                    chartSecondaryAxis.Legend.Remove();
                                    chartSecondaryAxis.XAxis.MinValue = chartPrimaryAxis.XAxis.MinValue;
                                    chartSecondaryAxis.XAxis.MaxValue = chartPrimaryAxis.XAxis.MaxValue;
                                    chartSecondaryAxis.XAxis.MajorUnit = chartPrimaryAxis.XAxis.MajorUnit;
                                }
                                chart = chartSecondaryAxis;
                            }

                            // Output metrics
                            if (chart != null)
                            {
                                // The order of extracted metrics is sorted in EntityID, MetricsID, EventTime
                                // Therefore all the metrics for single item will stick together
                                // We want the full hour range indexed, including the beginning of the next hour in this hour's window
                                // therefore we have to advance 1 extra, but only for all the time ranges except the last one
                                int advanceToNextHourExtra = 1;
                                if (indexOfTimeRange == jobConfiguration.Input.HourlyTimeRanges.Count - 1)
                                {
                                    advanceToNextHourExtra = 0;
                                }

                                ExcelRangeBase rangeYValues = getSingleColumnRangeFromTable(tableMetrics, "Value", entityMetricValuesLocationForThisMetric.RowStart, entityMetricValuesLocationForThisMetric.RowEnd + advanceToNextHourExtra);
                                ExcelRangeBase rangeXTime = getSingleColumnRangeFromTable(tableMetrics, "EventTime", entityMetricValuesLocationForThisMetric.RowStart, entityMetricValuesLocationForThisMetric.RowEnd + advanceToNextHourExtra);
                                if (rangeYValues != null && rangeXTime != null)
                                {
                                    ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                                    series.Header = metricExtractMapping.MetricName;
                                    ((ExcelScatterChartSerie)series).LineColor = getColorFromHexString(metricExtractMapping.LineColor);
                                }
                            }
                        }
                    }
                }
            }

            #endregion

            #region Output Events

            fromRow = REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT + 1;

            int rowTableStart = fromRow;
            if (eventsFilteredList != null)
            {
                // Group by type and subtype to break the overall list in manageable chunks
                var eventsAllGroupedByType = eventsFilteredList.GroupBy(e => new { e.Type, e.SubType });
                List<List<Event>> eventsAllGrouped = new List<List<Event>>();

                // Group by the additional columns for some of the events
                foreach (var eventsGroup in eventsAllGroupedByType)
                {
                    switch (eventsGroup.Key.Type)
                    {
                        case "RESOURCE_POOL_LIMIT":
                            var eventsGroup_RESOURCE_POOL_LIMIT = eventsGroup.ToList().GroupBy(e => e.TierName);
                            foreach (var eventsGrouping in eventsGroup_RESOURCE_POOL_LIMIT)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "APPLICATION_ERROR":
                            var eventsGroup_APPLICATION_ERROR = eventsGroup.ToList().GroupBy(e => e.TierName);
                            foreach (var eventsGrouping in eventsGroup_APPLICATION_ERROR)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "DIAGNOSTIC_SESSION":
                            var eventsGroup_DIAGNOSTIC_SESSION = eventsGroup.ToList().GroupBy(e => new { e.TierName, e.BTName });
                            foreach (var eventsGrouping in eventsGroup_DIAGNOSTIC_SESSION)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "CUSTOM":
                            var eventsGroup_CUSTOM = eventsGroup.ToList().GroupBy(e => e.TierName);
                            foreach (var eventsGrouping in eventsGroup_CUSTOM)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "POLICY_OPEN_WARNING":
                        case "POLICY_OPEN_CRITICAL":
                        case "POLICY_CLOSE_WARNING":
                        case "POLICY_CLOSE_CRITICAL":
                        case "POLICY_UPGRADED":
                        case "POLICY_DOWNGRADED":
                        case "POLICY_CANCELED_WARNING":
                        case "POLICY_CANCELED_CRITICAL":
                        case "POLICY_CONTINUES_CRITICAL":
                        case "POLICY_CONTINUES_WARNING":
                            var eventsGroup_POLICY_ALL = eventsGroup.ToList().GroupBy(e => new { e.TriggeredEntityName, e.TierName });
                            foreach (var eventsGrouping in eventsGroup_POLICY_ALL)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        default:
                            eventsAllGrouped.Add(eventsGroup.ToList());
                            break;
                    }
                }

                // At this point we have the events partitioned just the way we want them
                // Each entry is guaranteed to have at least one item

                sheet.Cells[fromRow, 1].Value = "Type";
                sheet.Cells[fromRow, 2].Value = "SubType";
                sheet.Cells[fromRow, 3].Value = EntityTier.ENTITY_TYPE;
                sheet.Cells[fromRow, 4].Value = "BT";
                sheet.Cells[fromRow, 5].Value = "Trigger";

                fromRow++;
                for (int i = 0; i < eventsAllGrouped.Count; i++)
                {
                    int toRow = fromRow;

                    // Go through each hour range at a time
                    for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                    {
                        JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                        List<Event> eventsInThisTimeRangeList = eventsAllGrouped[i].Where(e => e.OccurredUtc >= jobTimeRange.From && e.OccurredUtc < jobTimeRange.To).ToList();

                        // Now we finally have all the events for this type in this hour. Output
                        int columnIndexTimeRangeStart = columnOffsetBegin + j * columnOffsetBetweenRanges + j * numCellsPerHourRange;
                        foreach (Event interestingEvent in eventsInThisTimeRangeList)
                        {
                            // Find Column
                            int columnInThisTimeRange = columnIndexTimeRangeStart + interestingEvent.OccurredUtc.Minute;
                            // Find Row
                            int rowToOutputThisEventTo = fromRow;
                            while (true)
                            {
                                if (sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Value == null && sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula == String.Empty)
                                {
                                    break;
                                }
                                else
                                {
                                    rowToOutputThisEventTo++;
                                }
                            }
                            if (rowToOutputThisEventTo > fromRow && rowToOutputThisEventTo > toRow)
                            {
                                toRow = rowToOutputThisEventTo;
                            }

                            int rowIndexOfThisEvent = eventsFilteredList.FindIndex(e => e.EventID == interestingEvent.EventID);

                            // Finally output the value
                            switch (interestingEvent.Severity)
                            {
                                case "INFO":
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""I"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "InfoEventLinkStyle";
                                    break;
                                case "WARN":
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""W"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "WarnEventLinkStyle";
                                    break;
                                case "ERROR":
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""E"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "ErrorEventLinkStyle";
                                    break;
                                default:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""?"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "ErrorEventLinkStyle";
                                    break;
                            }

                            // Add tooltip
                            ExcelComment comment = sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].AddComment(interestingEvent.Summary, interestingEvent.EventID.ToString());
                            comment.AutoFit = true;

                            // Is there more than one event in this time range
                            if (rowToOutputThisEventTo > fromRow)
                            {
                                // Yes, then indicate that it has a few by underline
                                sheet.Cells[fromRow, columnInThisTimeRange].Style.Font.UnderLine = true;
                            }
                        }
                    }

                    // Output headings in the event heading columns columns
                    Event firstEvent = eventsAllGrouped[i][0];
                    for (int j = fromRow; j <= toRow; j++)
                    {
                        sheet.Cells[j, 1].Value = firstEvent.Type;
                        if (firstEvent.SubType != String.Empty) { sheet.Cells[j, 2].Value = firstEvent.SubType; }
                        if (firstEvent.TierName != String.Empty) { sheet.Cells[j, 3].Value = firstEvent.TierName; }
                        if (firstEvent.BTName != String.Empty) { sheet.Cells[j, 4].Value = firstEvent.BTName; }
                        if (firstEvent.TriggeredEntityName != String.Empty) { sheet.Cells[j, 5].Value = firstEvent.TriggeredEntityName; }
                        sheet.Cells[j, 1].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 2].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 3].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 4].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 5].StyleName = "EventHeadingStyle";
                        if (j == fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 1;
                        }
                        else if (j > fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 2;
                        }
                    }

                    fromRow = toRow;
                    fromRow++;
                }
            }
            int rowTableEnd = fromRow - 1;

            if (rowTableStart < rowTableEnd)
            {
                // Insert the table
                range = sheet.Cells[rowTableStart, 1, rowTableEnd, 5];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_EVENTS_IN_TIMELINE);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.None;
                //table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;
            }

            #endregion

            #region Output Snapshots

            fromRow++;
            rowTableStart = fromRow;

            if (snapshotsFilteredList != null)
            {
                // Group by Tier and BT to break list into manageable chunks
                //var snapshotsAllGroupedByType = snapshotsFilteredList.GroupBy(s => new { s.TierName, s.BTName });
                var snapshotsAllGroupedByType = snapshotsFilteredList.OrderBy(s => s.TierName).ThenBy(s => s.BTName).GroupBy(s => new { s.TierName, s.BTName });
                List<List<Snapshot>> snapshotsAllGrouped = new List<List<Snapshot>>();

                // Group by the user experience
                foreach (var snapshotsGroup in snapshotsAllGroupedByType)
                {
                    List<Snapshot> snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_NORMAL).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_SLOW).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_VERY_SLOW).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_STALL).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_ERROR).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                }

                // At this point we have the snapshots partitioned just the way we want them
                // Each entry is guaranteed to have at least one item

                sheet.Cells[fromRow, 1].Value = EntityTier.ENTITY_TYPE;
                sheet.Cells[fromRow, 2].Value = "BT";
                sheet.Cells[fromRow, 3].Value = " ";
                sheet.Cells[fromRow, 4].Value = "  ";
                sheet.Cells[fromRow, 5].Value = "Experience";

                fromRow++;
                for (int i = 0; i < snapshotsAllGrouped.Count; i++)
                {
                    int toRow = fromRow;

                    // Go through each hour range at a time
                    for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                    {
                        JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                        List<Snapshot> snapshotsInThisTimeRangeList = snapshotsAllGrouped[i].Where(s => s.OccurredUtc >= jobTimeRange.From && s.OccurredUtc < jobTimeRange.To).ToList();

                        // Now we finally have all the events for this type in this hour. Output
                        int columnIndexTimeRangeStart = columnOffsetBegin + j * columnOffsetBetweenRanges + j * numCellsPerHourRange;
                        foreach (Snapshot interestingSnapshot in snapshotsInThisTimeRangeList)
                        {
                            // Find Column
                            int columnInThisTimeRange = columnIndexTimeRangeStart + interestingSnapshot.OccurredUtc.Minute;
                            // Find Row
                            int rowToOutputThisEventTo = fromRow;
                            while (true)
                            {
                                if (sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Value == null && sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula == String.Empty)
                                {
                                    break;
                                }
                                else
                                {
                                    rowToOutputThisEventTo++;
                                }
                            }
                            if (rowToOutputThisEventTo > fromRow && rowToOutputThisEventTo > toRow)
                            {
                                toRow = rowToOutputThisEventTo;
                            }

                            // Finally output the value
                            int rowIndexOfThisSnapshot = snapshotsFilteredList.FindIndex(s => s.RequestID == interestingSnapshot.RequestID);
                            switch (interestingSnapshot.UserExperience)
                            {
                                case SNAPSHOT_UX_NORMAL:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""N"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "NormalSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_SLOW:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""S"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "SlowSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_VERY_SLOW:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""V"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "VerySlowSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_STALL:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""X"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "StallSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_ERROR:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""E"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "ErrorSnapshotLinkStyle";
                                    break;
                                default:
                                    break;
                            }

                            // Add tooltip with core details
                            ExcelComment comment = sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].AddComment(
                                String.Format("Duration: {0}\nURL: {1}\nSegments: {2}\nCall Graph: {3}\nCall Chain:\n{4}",
                                    interestingSnapshot.Duration,
                                    interestingSnapshot.URL,
                                    interestingSnapshot.NumSegments,
                                    interestingSnapshot.CallGraphType,
                                    interestingSnapshot.CallChains),
                                interestingSnapshot.RequestID);

                            if (interestingSnapshot.UserExperience == SNAPSHOT_UX_ERROR)
                            {
                                comment.Text = String.Format("{0}\n{1}", comment.Text, interestingSnapshot.TakenSummary);
                            }

                            comment.AutoFit = true;

                            // Is there more than one event in this time range
                            if (rowToOutputThisEventTo > fromRow)
                            {
                                // Yes, then indicate that it has a few by underline
                                sheet.Cells[fromRow, columnInThisTimeRange].Style.Font.UnderLine = true;
                            }
                        }
                    }

                    // Output headings in the event heading columns columns
                    Snapshot firstSnapshot = snapshotsAllGrouped[i][0];
                    for (int j = fromRow; j <= toRow; j++)
                    {
                        sheet.Cells[j, 1].Value = firstSnapshot.TierName;
                        sheet.Cells[j, 2].Value = firstSnapshot.BTName;
                        sheet.Cells[j, 5].Value = firstSnapshot.UserExperience;
                        sheet.Cells[j, 1].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 2].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 5].StyleName = "EventHeadingStyle";
                        if (j == fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 1;
                        }
                        else if (j > fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 2;
                        }
                    }

                    fromRow = toRow;
                    fromRow++;
                }
            }
            rowTableEnd = fromRow - 1;

            if (rowTableStart < rowTableEnd)
            {
                // Insert the table
                range = sheet.Cells[rowTableStart, 1, rowTableEnd, 5];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS_IN_TIMELINE);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.None;
                //table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;
            }

            sheet.OutLineSummaryBelow = false;
            sheet.OutLineSummaryRight = true;

            #endregion

            #endregion
        }

        private static bool finalizeAndSaveIndividualEntityMetricReport(ExcelPackage excelEntityDetail, string entityType, string reportFilePath)
        {
            logger.Info("Finalize Entity Metrics Report File {0}", reportFilePath);

            ExcelWorksheet sheet;
            ExcelRangeBase range;
            ExcelTable table;

            #region Summary sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SUMMARY];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY];
                if (table != null)
                {
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;
                }
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL];
                if (table != null)
                {
                    table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL];
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(entityType, sheet, table);

                    // Remove DetailLink column because this document would be pointing to relative location from the overall metric reports, and the link would be invalid
                    sheet.DeleteColumn(table.Columns["DetailLink"].Position + 1);
                }
            }

            #endregion

            #region Timeline sheet

            sheet.Column(1).Width = 12;
            sheet.Column(2).Width = 12;
            sheet.Column(3).Width = 12;
            sheet.Column(4).Width = 12;
            sheet.Column(5).Width = 12;

            #endregion

            #region Activity Flow sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_ACTIVITY_GRID);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["CallType"].Position + 1).Width = 10;
                sheet.Column(table.Columns["FromName"].Position + 1).Width = 35;
                sheet.Column(table.Columns["ToName"].Position + 1).Width = 35;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }

            #endregion

            #region Events sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EVENTS];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_EVENTS];
                if (table != null)
                {
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EventID"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Summary"].Position + 1).Width = 35;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SubType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityName"].Position + 1).Width = 20;
                }
            }

            #endregion

            #region Snapshots sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS];
            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS];
                if (table != null)
                {
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["UserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["UserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["UserExperience"].Position + 1);
                    addUserExperienceConditionalFormatting(sheet, cfAddressUserExperience);

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallGraphs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallGraphs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

            }

            #endregion

            #region TOC sheet

            // TOC sheet again
            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_SHEET_TOC];
            sheet.Cells[1, 1].Value = "Sheet Name";
            sheet.Cells[1, 2].Value = "# Entities";
            sheet.Cells[1, 3].Value = "Link";
            int rowNum = 1;
            foreach (ExcelWorksheet s in excelEntityDetail.Workbook.Worksheets)
            {
                rowNum++;
                sheet.Cells[rowNum, 1].Value = s.Name;
                sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                if (s.Tables.Count == 1)
                {
                    sheet.Cells[rowNum, 2].Value =  s.Tables[0].Address.Rows - 1;
                }
                else if (s.Tables.Count > 0)
                {
                    sheet.Cells[rowNum, 2].Value = String.Format("{0} tables", s.Tables.Count);
                }
            }
            range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
            table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_TOC);
            table.ShowHeader = true;
            table.TableStyle = TableStyles.Medium2;
            table.ShowFilter = true;
            table.ShowTotal = false;

            sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
            sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

            #endregion
            
            #region Save file 

            // Report files
            logger.Info("Saving Excel report {0}", reportFilePath);
            //loggerConsole.Info("Saving Excel report {0}", reportFilePath);

            string folderPath = Path.GetDirectoryName(reportFilePath);
            if (Directory.Exists(folderPath) == false)
            {
                Directory.CreateDirectory(folderPath);
            }

            try
            {
                // Save full report Excel files
                excelEntityDetail.SaveAs(new FileInfo(reportFilePath));
            }
            catch (InvalidOperationException ex)
            {
                logger.Warn("Unable to save Excel file {0}", reportFilePath);
                logger.Warn(ex);
                loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);

                return false;
            }

            #endregion

            return true;
        }

        private static void adjustColumnsOfEntityRowTableInMetricReport(string entityType, ExcelWorksheet sheet, ExcelTable table)
        {
            if (entityType == EntityApplication.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
            else if (entityType == EntityTier.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
            else if (entityType == EntityNode.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
            else if (entityType == EntityBackend.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BackendName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BackendType"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
            else if (entityType == EntityBusinessTransaction.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
            else if (entityType == EntityServiceEndpoint.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
            else if (entityType == EntityError.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
            else if (entityType == EntityInformationPoint.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["IPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["IPType"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 20;
                sheet.Column(table.Columns["To"].Position + 1).Width = 20;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;
            }
        }

        private static void adjustColumnsOfActivityFlowRowTableInMetricReport(string entityType, ExcelWorksheet sheet, ExcelTable table)
        {
            sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
            sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
            sheet.Column(table.Columns["CallType"].Position + 1).Width = 10;
            sheet.Column(table.Columns["FromName"].Position + 1).Width = 35;
            sheet.Column(table.Columns["ToName"].Position + 1).Width = 35;
            sheet.Column(table.Columns["From"].Position + 1).Width = 20;
            sheet.Column(table.Columns["To"].Position + 1).Width = 20;
            sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 20;
            sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 20;

            if (entityType == EntityApplication.ENTITY_TYPE)
            {
            }
            else if (entityType == EntityTier.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
            }
            else if (entityType == EntityNode.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
            }
            else if (entityType == EntityBackend.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["BackendName"].Position + 1).Width = 20;
            }
            else if (entityType == EntityBusinessTransaction.ENTITY_TYPE)
            {
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
            }
        }

        private static void addConditionalFormattingToTableInMetricReport(string entityType, ExcelWorksheet sheet, ExcelTable table)
        {
            if (entityType == EntityApplication.ENTITY_TYPE ||
                entityType == EntityTier.ENTITY_TYPE ||
                entityType == EntityNode.ENTITY_TYPE ||
                entityType == EntityBackend.ENTITY_TYPE ||
                entityType == EntityBusinessTransaction.ENTITY_TYPE ||
                entityType == EntityServiceEndpoint.ENTITY_TYPE ||
                entityType == EntityInformationPoint.ENTITY_TYPE)
            {
                ExcelAddress cfAddressErrorPercentage = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["ErrorsPercentage"].Position + 1, sheet.Dimension.Rows, table.Columns["ErrorsPercentage"].Position + 1);
                var cfErrorPercentage = sheet.ConditionalFormatting.AddDatabar(cfAddressErrorPercentage, colorRedForDatabars);
                cfErrorPercentage.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;
                cfErrorPercentage.LowValue.Value = 0;
                cfErrorPercentage.HighValue.Type = eExcelConditionalFormattingValueObjectType.Num;
                cfErrorPercentage.HighValue.Value = 100;

                ExcelAddress cfAddressART = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["ART"].Position + 1, sheet.Dimension.Rows, table.Columns["ART"].Position + 1);
                var cfART = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressART);
                cfART.LowValue.Color = colorGreenFor3ColorScales;
                cfART.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfART.MiddleValue.Value = 70;
                cfART.MiddleValue.Color = colorYellowFor3ColorScales;
                cfART.HighValue.Color = colorRedFor3ColorScales;

                ExcelAddress cfAddressCPM = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["CPM"].Position + 1, sheet.Dimension.Rows, table.Columns["CPM"].Position + 1);
                var cfCPM = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressCPM);
                cfCPM.LowValue.Color = colorGreenFor3ColorScales;
                cfCPM.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfCPM.MiddleValue.Value = 70;
                cfCPM.MiddleValue.Color = colorYellowFor3ColorScales;
                cfCPM.HighValue.Color = colorRedFor3ColorScales;

                ExcelAddress cfAddressEPM = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["EPM"].Position + 1, sheet.Dimension.Rows, table.Columns["EPM"].Position + 1);
                var cfEPM = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressEPM);
                cfEPM.LowValue.Color = colorGreenFor3ColorScales;
                cfEPM.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfEPM.MiddleValue.Value = 70;
                cfEPM.MiddleValue.Color = colorYellowFor3ColorScales;
                cfEPM.HighValue.Color = colorRedFor3ColorScales;
            }
            else if (entityType == EntityError.ENTITY_TYPE)
            {
                ExcelAddress cfAddressEPM = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT - 13 + 1, table.Columns["EPM"].Position + 1, sheet.Dimension.Rows, table.Columns["EPM"].Position + 1);
                var cfEPM = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressEPM);
                cfEPM.LowValue.Color = colorGreenFor3ColorScales;
                cfEPM.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfEPM.MiddleValue.Value = 70;
                cfEPM.MiddleValue.Color = colorYellowFor3ColorScales;
                cfEPM.HighValue.Color = colorRedFor3ColorScales;
            }
        }

        private static int[,] getLocationsOfHourlyTimeRangesFromMetricValues(List<MetricValue> metricValues, List<JobTimeRange> jobTimeRanges)
        {
            // Element 0 of each row is index of time range Start
            // Element 1 of each row is index of time range End
            int[,] timeRangePartitionData = new int[jobTimeRanges.Count, 2];
            int fromIndexColumn = 0;
            int toIndexColumn = 1;
            int metricValuesCount = metricValues.Count;

            // First pass - scroll through and bucketize each our into invidual hour chunk
            int currentMetricValueRowIndex = 0;
            for (int i = 0; i < jobTimeRanges.Count; i++)
            {
                JobTimeRange jobTimeRange = jobTimeRanges[i];

                timeRangePartitionData[i, fromIndexColumn] = -1;
                timeRangePartitionData[i, toIndexColumn] = -1;

                while (currentMetricValueRowIndex < metricValuesCount)
                {
                    if (metricValues[currentMetricValueRowIndex].EventTimeStampUtc >= jobTimeRange.From &&
                        metricValues[currentMetricValueRowIndex].EventTimeStampUtc < jobTimeRange.To)
                    {
                        if (timeRangePartitionData[i, fromIndexColumn] == -1)
                        {
                            // Found From
                            timeRangePartitionData[i, fromIndexColumn] = currentMetricValueRowIndex;
                            timeRangePartitionData[i, toIndexColumn] = currentMetricValueRowIndex;
                        }
                        else
                        {
                            // Found potential To
                            timeRangePartitionData[i, toIndexColumn] = currentMetricValueRowIndex;
                        }
                        currentMetricValueRowIndex++;
                    }
                    else
                    {
                        break;
                    }
                }
            }

            // Second pass - adjust end times to overlap with the on-the-hour entries from subsequent ones because we're going to want those entries on the graphs
            // But don't adjust last entry 
            for (int i = 0; i < jobTimeRanges.Count - 1; i++)
            {
                JobTimeRange jobTimeRange = jobTimeRanges[i];

                if (timeRangePartitionData[i, fromIndexColumn] != -1 && 
                    timeRangePartitionData[i, toIndexColumn] != -1 &&
                    timeRangePartitionData[i + 1, fromIndexColumn] != -1 &&
                    timeRangePartitionData[i + 1, toIndexColumn] != -1)
                {
                    if (metricValues[timeRangePartitionData[i + 1, fromIndexColumn]].EventTimeStampUtc == jobTimeRange.To)
                    {
                        timeRangePartitionData[i, toIndexColumn] = timeRangePartitionData[i + 1, fromIndexColumn];
                    }
                }
            }

            return timeRangePartitionData;
        }

        private static ExcelRangeBase getRangeMetricDataTableForThisHourDateTimeSeries(ExcelTable table, int rowIndexStart, int rowIndexEnd)
        {
            // Find index of the important columns
            int columnIndexEventTime = table.Columns["EventTime"].Position;

            if (rowIndexStart != -1 && rowIndexEnd != -1)
            {
                return table.WorkSheet.Cells[
                    table.Address.Start.Row + rowIndexStart + 1,
                    table.Address.Start.Column + columnIndexEventTime,
                    table.Address.Start.Row + rowIndexEnd + 1,
                    table.Address.Start.Column + columnIndexEventTime];
            }

            return null;
        }

        private static ExcelRangeBase getRangeMetricDataTableForThisHourValueSeries(ExcelTable table, int rowIndexStart, int rowIndexEnd)
        {
            // Find index of the important columns
            int columnIndexEventTime = table.Columns["Value"].Position;

            if (rowIndexStart != -1 && rowIndexEnd != -1)
            {
                return table.WorkSheet.Cells[
                    table.Address.Start.Row + rowIndexStart + 1,
                    table.Address.Start.Column + columnIndexEventTime,
                    table.Address.Start.Row + rowIndexEnd + 1,
                    table.Address.Start.Column + columnIndexEventTime];
            }

            return null;
        }

        private static ExcelRangeBase getSingleColumnRangeFromTable(ExcelTable table, string columnName, int rowIndexStart, int rowIndexEnd)
        {
            // Find index of the important columns
            int columnIndexEventTime = table.Columns[columnName].Position;

            if (rowIndexStart != -1 && rowIndexEnd != -1)
            {
                return table.WorkSheet.Cells[
                    table.Address.Start.Row + rowIndexStart + 1,
                    table.Address.Start.Column + columnIndexEventTime,
                    table.Address.Start.Row + rowIndexEnd + 1,
                    table.Address.Start.Column + columnIndexEventTime];
            }

            return null;
        }

        private static ExcelRangeBase getRangeEventDataTableThisEvent(ExcelTable table, int rowIndex)
        {
            return table.WorkSheet.Cells[
                table.Address.Start.Row + rowIndex + 1,
                table.Address.Start.Column,
                table.Address.Start.Row + rowIndex + 1,
                table.Address.End.Column];
        }

        #endregion

        #region Snapshot report functions

        private static void addUserExperienceConditionalFormatting(ExcelWorksheet sheet, ExcelAddress cfAddressUserExperience)
        {
            var cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
            cfUserExperience.Style.Font.Color.Color = Color.White;
            cfUserExperience.Style.Fill.BackgroundColor.Color = colorGreenForNormalSnapshots;
            cfUserExperience.Formula = @"=""NORMAL""";

            cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
            cfUserExperience.Style.Font.Color.Color = Color.Black;
            cfUserExperience.Style.Fill.BackgroundColor.Color = colorYellowForSlowSnapshots;
            cfUserExperience.Formula = @"=""SLOW""";

            cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
            cfUserExperience.Style.Font.Color.Color = Color.Black;
            cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForVerySlowSnapshots;
            cfUserExperience.Formula = @"=""VERY_SLOW""";

            cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
            cfUserExperience.Style.Font.Color.Color = Color.White;
            cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForStallSnapshots;
            cfUserExperience.Formula = @"=""STALL""";

            cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
            cfUserExperience.Style.Font.Color.Color = Color.Black;
            cfUserExperience.Style.Fill.BackgroundColor.Color = colorRedForErrorSnapshots;
            cfUserExperience.Formula = @"=""ERROR""";
        }

        #endregion

        #region Flame Graph report functions

        private static string getFlameGraphReportFilePath(EntityBase entity, JobConfiguration jobConfiguration, JobTarget jobTarget, string reportFolderPath)
        {
            string reportFileName = String.Empty;
            string reportFilePath = String.Empty;

            if (entity is EntityApplication)
            {
                reportFileName = String.Format(
                    REPORT_FLAME_GRAPH_APPLICATION_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityTier)
            {
                reportFileName = String.Format(
                    REPORT_FLAME_GRAPH_TIER_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }
            else if (entity is EntityNode)
            {
                reportFileName = String.Format(
                    REPORT_FLAME_GRAPH_NODE_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
                reportFilePath = Path.Combine(
                    reportFolderPath,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    EntityNode.ENTITY_FOLDER,
                    reportFileName);
            }
            else if (entity is EntityBusinessTransaction)
            {
                reportFileName = String.Format(
                    REPORT_FLAME_GRAPH_BUSINESS_TRANSACTION_FILE_NAME,
                    getFileSystemSafeString(new Uri(entity.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    getShortenedEntityNameForFileSystem(entity.EntityName, entity.EntityID),
                    jobConfiguration.Input.TimeRange.From,
                    jobConfiguration.Input.TimeRange.To);
            }

            if (reportFileName.Length > 0)
            {
                reportFilePath = Path.Combine(
                    reportFolderPath,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entity.ApplicationName, entity.ApplicationID),
                    entity.FolderName,
                    reportFileName);
            }

            return reportFilePath;
        }

        private static string getFlameGraphReportFilePath(Snapshot snapshot, JobTarget jobTarget, string reportFolderPath)
        {
            string reportFileName = String.Format(
                REPORT_FLAME_GRAPH_SNAPSHOT_FILE_NAME, 
                snapshot.UserExperience, 
                snapshot.OccurredUtc, 
                snapshot.RequestID);

            string reportFilePath = Path.Combine(
                reportFolderPath,
                getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                getShortenedEntityNameForFileSystem(snapshot.ApplicationName, snapshot.ApplicationID),
                SNAPSHOTS_FOLDER_NAME,
                getShortenedEntityNameForFileSystem(snapshot.TierName, snapshot.TierID),
                getShortenedEntityNameForFileSystem(snapshot.BTName, snapshot.BTID),
                reportFileName);

            return reportFilePath;
        }

        private static int reportFlameGraphsSnapshots(
            ProgramOptions programOptions,
            JobConfiguration jobConfiguration,
            JobTarget jobTarget, 
            List<Snapshot> snapshotsList, 
            string snapshotsIndexFolderPath, 
            string flameGraphTemplateString,
            Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary,
            bool progressToConsole)
        {
            int j = 0;

            string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORT_FOLDER_NAME);

            foreach (Snapshot snapshot in snapshotsList)
            {
                string snapshotFolderPath = Path.Combine(
                    snapshotsIndexFolderPath,
                    getShortenedEntityNameForFileSystem(snapshot.TierName, snapshot.TierID),
                    getShortenedEntityNameForFileSystem(snapshot.BTName, snapshot.BTID),
                    String.Format("{0:yyyyMMddHH}", snapshot.OccurredUtc),
                    userExperienceFolderNameMapping[snapshot.UserExperience],
                    String.Format(SNAPSHOT_FOLDER_NAME, snapshot.RequestID, snapshot.OccurredUtc));

                string snapshotFoldedCallStacksFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_FOLDED_CALL_STACKS_FILE_NAME);

                if (File.Exists(snapshotFoldedCallStacksFileName) == true)
                {
                    createFlameGraph(
                        snapshotFoldedCallStacksFileName,
                        getFlameGraphReportFilePath(snapshot, jobTarget, reportFolderPath),
                        String.Format("{0}/{1}/{2}, BT {3} {4:G} {5} {6}", snapshot.Controller, snapshot.ApplicationName, snapshot.TierName, snapshot.BTName, snapshot.Occurred, snapshot.UserExperience, snapshot.RequestID),
                        flameGraphTemplateString,
                        methodCallLineClassToFrameworkTypeMappingDictionary,
                        progressToConsole);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 1000 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return snapshotsList.Count;
        }

        /// <summary>
        /// Review http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html
        /// Review http://techblog.netflix.com/2015/07/java-in-flames.html
        /// Review http://techblog.netflix.com/2014/11/nodejs-in-flames.html
        /// Implementation courtesy of learning how https://github.com/davepacheco/node-stackvis does it, which in itself is reimplementing Brendan's work
        /// </summary>
        /// <param name="foldedStackFilePath"></param>
        /// <param name="flameGraphFilePath"></param>
        /// <param name="descriptionText"></param>
        /// <param name="flameGraphTemplate"></param>
        /// <returns></returns>
        private static bool createFlameGraph(
            string foldedStackFilePath, 
            string flameGraphFilePath, 
            string descriptionText, 
            string flameGraphTemplate,
            Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary,
            bool progressToConsole)
        {
            // If it already been rendered, bail
            if (File.Exists(flameGraphFilePath) == true)
            {
                return false;
            }

            // Check to see if the input data exists
            if (File.Exists(foldedStackFilePath) == false)
            {
                logger.Warn("Flame graph file {0} does not exist", foldedStackFilePath);
                return false;
            }

            logger.Trace("Rendering flame graph {0} from {1}", flameGraphFilePath, foldedStackFilePath);

            #region Brendan Gregg's Perl version

            if (false)
            {
                string foldedStackPerlFilePath = String.Format("{0}.pl.svg", flameGraphFilePath);

                // Use Brendan Gregg's script but only in debug mode
                // http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html
                if (File.Exists(foldedStackPerlFilePath) == false)
                {
                    Process p = new Process();
                    // Redirect the output stream of the child process.
                    p.StartInfo.UseShellExecute = false;
                    p.StartInfo.RedirectStandardOutput = true;
                    p.StartInfo.RedirectStandardError = true;
                    p.StartInfo.FileName = @"C:\Perl64\bin\perl.exe";
                    p.StartInfo.Arguments = String.Format(@"""C:\appdynamics\FlameGraph\FlameGraph-master\flamegraph.pl"" -width 1600 --title ""{1}"" ""{0}""", foldedStackFilePath, descriptionText);
                    p.Start();
                    string output = p.StandardOutput.ReadToEnd();
                    p.WaitForExit();

                    if (output.Contains("ERROR:") == true)
                    {
                        // Do nothing
                        return false;
                    }
                    else
                    {
                        FileIOHelper.saveFileToPath(output, foldedStackPerlFilePath);
                    }
                }
            }

            #endregion

            #region Create object representation of Flame Graph

            // Read folded call stacks with counts of occurrences
            List<FoldedStackLine> foldedCallStacksList = FileIOHelper.readListFromCSVFile<FoldedStackLine>(foldedStackFilePath, new FoldedStackLineReportMap());
            if (foldedCallStacksList.Count == 0)
            {
                logger.Warn("Flame graph file {0} contains no folded frames", foldedStackFilePath);
                return false;
            }

            // Sort the call stacks by the string portion alphabetically
            List<FoldedStackLine> sortedFoldedCallStacksList = foldedCallStacksList.OrderBy(s => s.FoldedStack).ToList();

            // Depth of the tallest call stack, used to measure the height of final canvas
            int maxFrameDepth = 0;
            // Width of the samples, used to measure the width of the frames relative to width of the final canvas
            int maxSampleWidth = 0;
            // List of boxes that last call stack consists of, to compare the current call stack with
            List<FlameGraphBox> lastCallStack = new List<FlameGraphBox>();
            // All boxes that should be displayed on the Flame Graph. Assume 15 frames per call stack on average
            List<FlameGraphBox> flameGraphBoxes = new List<FlameGraphBox>(sortedFoldedCallStacksList.Count * 15);

            // Process call stacks one by one, stacking frames from left to right in alphabetical order, and stacking them from bottom up
            foreach (FoldedStackLine foldedStackLine in sortedFoldedCallStacksList)
            {
                // Add an empty frame for frame representing "all samples" frame. 
                // Parse the folded stack into array of frames, prepended with empty frame to account for all items
                string[] stackFrames = String.Format("all;{0}", foldedStackLine.FoldedStack).Split(';');

                // Calculate maximum depth for later measurement of the overall canvas
                if (stackFrames.Length > maxFrameDepth)
                {
                    maxFrameDepth = stackFrames.Length;
                }

                // This becomes the current call stack
                List<FlameGraphBox> thisCallStack = new List<FlameGraphBox>(stackFrames.Length);

                // If not the first stack processed, compare this new stack frames to the previous stack frames, going up 
                // Keep comparing until you see no differences or hit the top
                // measure that height 
                int depthOfSameFrames = 0;
                for (int i = 0; i < lastCallStack.Count && i < stackFrames.Length; i++)
                {
                    // Compare frames at the same level
                    if (String.Compare(lastCallStack[i].FullName, stackFrames[i], true) == 0)
                    {
                        // Same frame. Make it wider by adding the number of samples to the already existing flame graph box
                        FlameGraphBox flameGraphBox = lastCallStack[i];
                        flameGraphBox.Samples = flameGraphBox.Samples + foldedStackLine.NumSamples;
                        if (i > 0)
                        {
                            flameGraphBox.Duration = flameGraphBox.Duration + foldedStackLine.StackTimingArray[i - 1];
                        }

                        // Add this frame to the current call stack
                        thisCallStack.Add(flameGraphBox);

                        // Measure the depth of the frames that are the same 
                        depthOfSameFrames++;
                    }
                    else
                    {
                        // Not the same level, time to break out to move to next step
                        break;
                    }
                }

                // Each of these stack frames was present in previous stack but not this one
                // Using last frame output, go from height measured in step 3 down to the bottom, and mark them as ended
                for (int i = lastCallStack.Count - 1; i >= depthOfSameFrames; i--)
                {
                    FlameGraphBox flameGraphBox = lastCallStack[i];
                }

                // Each of these frames was not present in the previous stack, so start them
                // Using this frame output, go from height measured in step 3 up to the top, marking them as having started
                for (int i = depthOfSameFrames; i < stackFrames.Length; i++)
                {
                    FlameGraphBox flameGraphBox = new FlameGraphBox();
                    // We will output XML, and occasionally the bad characters will trip us up. But I don't want to encode everything
                    try
                    {
                        flameGraphBox.FullName = XmlConvert.VerifyXmlChars(stackFrames[i]);
                    }
                    catch (XmlException ex)
                    {
                        // When this is thrown, that means that there are invalid characters. Encode the string then.
                        flameGraphBox.FullName = XmlConvert.EncodeName(stackFrames[i]);
                    }
                    flameGraphBox.Start = maxSampleWidth;
                    flameGraphBox.Samples = foldedStackLine.NumSamples;
                    if (i > 0)
                    {
                        flameGraphBox.Duration = flameGraphBox.Duration + foldedStackLine.StackTimingArray[i - 1];
                    }

                    flameGraphBox.Depth = i;

                    // Add this frame to the current call stack
                    thisCallStack.Add(flameGraphBox);

                    // Add it to all boxes
                    flameGraphBoxes.Add(flameGraphBox);
                }

                // If items at the same level are idenfical in MethodCall, make the leftmost item wider in adding this 
                // frames' number of samples to the leftmost. Discard the new frame, and use the left one, wider instead
                // If items at the same level are not identical in MethodCall, use this frame, adjusting its start to be
                // right after the leftmost one's end

                // Move the starting point for next call stack right by the value of the current call stack sample rate
                maxSampleWidth = maxSampleWidth + foldedStackLine.NumSamples;

                // Make this call stack last and move on to next folded call stack
                lastCallStack = thisCallStack;
            }

            #endregion

            #region Output Flame Graph SVG file

            // Height of the single frame
            int frameHeight = 16;
            // Minimum width of the frame, beyond which it isn't output
            decimal minFrameWidth = 0.1m;

            // Area to pad from the top to get the frames
            int flameGraphHeightPaddingTop = 30;
            // Area to pad from the bottom to get the frames
            int flameGraphHeightPaddingBottom = 30;

            // The height of the flame graph
            int flameGraphHeight = maxFrameDepth * frameHeight + flameGraphHeightPaddingTop + flameGraphHeightPaddingBottom;

            // Width of 1 sample relative to the total width
            decimal widthPerSample = 1600 / (decimal)maxSampleWidth;

            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.Indent = true;

            XmlReaderSettings xmlReaderSettings = new XmlReaderSettings();
            xmlReaderSettings.DtdProcessing = DtdProcessing.Parse;
            xmlReaderSettings.IgnoreComments = false;

            FileIOHelper.createFolder(Path.GetDirectoryName(flameGraphFilePath));

            using (StringReader stringReader = new StringReader(flameGraphTemplate))
            {
                using (XmlReader xmlReader = XmlReader.Create(stringReader, xmlReaderSettings))
                {
                    using (XmlWriter xmlWriter = XmlWriter.Create(flameGraphFilePath, xmlWriterSettings))
                    {
                        xmlWriter.WriteDocType("svg", "-//W3C//DTD SVG 1.1//EN", "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd", null);
                        while (xmlReader.Read())
                        {
                            // Adjust SVG element
                            if (xmlReader.IsStartElement("svg") == true)
                            {
                                xmlWriter.WriteStartElement("svg", "http://www.w3.org/2000/svg");

                                while (xmlReader.MoveToNextAttribute())
                                {
                                    if (xmlReader.LocalName == "height")
                                    {
                                        xmlWriter.WriteAttributeString("height", flameGraphHeight.ToString());
                                    }
                                    else if (xmlReader.LocalName == "viewBox")
                                    {
                                        xmlWriter.WriteAttributeString("viewBox", xmlReader.Value.Replace("1200", flameGraphHeight.ToString()));
                                    }
                                    else if (xmlReader.LocalName == "xmlns")
                                    {
                                        // Skip that one
                                    }
                                    else
                                    {
                                        XmlWriterHelper.WriteShallowNode(xmlReader, xmlWriter);
                                    }
                                }
                            }
                            // Adjust the size of the background rectangle
                            else if (xmlReader.IsStartElement("rect") == true && xmlReader.GetAttribute("id") == "background")
                            {
                                xmlWriter.WriteStartElement("rect");

                                while (xmlReader.MoveToNextAttribute())
                                {
                                    if (xmlReader.LocalName == "height")
                                    {
                                        xmlWriter.WriteAttributeString("height", flameGraphHeight.ToString());
                                    }
                                    else
                                    {
                                        XmlWriterHelper.WriteShallowNode(xmlReader, xmlWriter);
                                    }
                                }

                                xmlWriter.WriteEndElement();
                            }
                            // Set Title
                            else if (xmlReader.IsStartElement("text") == true && xmlReader.GetAttribute("id") == "title")
                            {
                                xmlWriter.WriteStartElement(xmlReader.LocalName);
                                while (xmlReader.MoveToNextAttribute())
                                {
                                    XmlWriterHelper.WriteShallowNode(xmlReader, xmlWriter);
                                }
                                xmlWriter.WriteString(descriptionText);
                                xmlWriter.WriteEndElement();

                                // Read the template string and closing /text tag to move the reader forward
                                xmlReader.Read();
                                xmlReader.Read();
                            }
                            // Set Mouseover Function display area location
                            else if (xmlReader.IsStartElement("text") == true && xmlReader.GetAttribute("id") == "details")
                            {
                                xmlWriter.WriteStartElement(xmlReader.LocalName);
                                while (xmlReader.MoveToNextAttribute())
                                {
                                    if (xmlReader.LocalName == "y")
                                    {
                                        xmlWriter.WriteAttributeString("y", (flameGraphHeight - 12).ToString());
                                    }
                                    else
                                    {
                                        XmlWriterHelper.WriteShallowNode(xmlReader, xmlWriter);
                                    }
                                }
                                xmlReader.Read();

                                XmlWriterHelper.WriteShallowNode(xmlReader, xmlWriter);
                                xmlWriter.WriteEndElement();

                                // Read the template string and closing /text tag to move the reader forward
                                xmlReader.Read();
                            }
                            // Adjust version
                            else if (xmlReader.IsStartElement("text") == true && xmlReader.GetAttribute("id") == "version")
                            {
                                xmlWriter.WriteStartElement(xmlReader.LocalName);
                                while (xmlReader.MoveToNextAttribute())
                                {
                                    if (xmlReader.LocalName == "y")
                                    {
                                        xmlWriter.WriteAttributeString("y", (flameGraphHeight - 12).ToString());
                                    }
                                    else
                                    {
                                        XmlWriterHelper.WriteShallowNode(xmlReader, xmlWriter);
                                    }
                                }
                                xmlReader.Read();

                                xmlWriter.WriteString(String.Format(xmlReader.Value, Assembly.GetEntryAssembly().GetName().Version));
                                xmlWriter.WriteEndElement();

                                // Read the template string and closing /text tag to move the reader forward
                                xmlReader.Read();
                            }
                            // Found content placeholder, let's output all the flame graphs
                            else if (xmlReader.IsStartElement("g") == true && xmlReader.GetAttribute("id") == "contentPlaceholder")
                            {
                                if (progressToConsole == true && flameGraphBoxes.Count >= 10000)
                                {
                                    loggerConsole.Info("Outputing Flame Graph Boxes {0}", flameGraphBoxes.Count);
                                }

                                // Output each flame graph element one by one
                                //<g onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
                                //  <title>AALevel4 (4 samples, 22.22%)</title>
                                //  <rect x="403.3" y="69" width="262.3" height="15.0" fill="rgb(237,67,16)" rx="2" ry="2" />
                                //  <text text-anchor="" x="406.33" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)">AALevel4</text>
                                //</g>
                                for (int i = 0; i < flameGraphBoxes.Count; i++)
                                {
                                    FlameGraphBox flameGraphBox = flameGraphBoxes[i];

                                    // Measure the flame graph frame
                                    decimal x1 = Math.Round(flameGraphBox.Start * widthPerSample, 2);
                                    decimal y1 = flameGraphHeight - flameGraphHeightPaddingBottom - (flameGraphBox.Depth + 1) * frameHeight + 1;
                                    decimal x2 = Math.Round(flameGraphBox.End * widthPerSample, 2);
                                    decimal y2 = flameGraphHeight - flameGraphHeightPaddingBottom - flameGraphBox.Depth * frameHeight;

                                    decimal boxWidth = x2 - x1;

                                    // Is the sample very narrow?
                                    if (boxWidth <= minFrameWidth)
                                    {
                                        // Skip this really narrow frame
                                        continue;
                                    }

                                    // Output container with mouseover and mouseout
                                    xmlWriter.WriteStartElement("g");
                                    xmlWriter.WriteAttributeString("class", "func_g");
                                    xmlWriter.WriteAttributeString("id", String.Format("flameGraphBox_{0}", i));
                                    xmlWriter.WriteAttributeString("onmouseover", "s(this)");
                                    xmlWriter.WriteAttributeString("onmouseout", "c()");
                                    xmlWriter.WriteAttributeString("onclick", "zoom(this)");

                                    // Output mouseover hint
                                    xmlWriter.WriteStartElement("title");
                                    long averageDuration = (long)Math.Round(flameGraphBox.Duration / (decimal)flameGraphBox.Samples, 0);
                                    xmlWriter.WriteString(String.Format("{0} (Duration Total {1}, Average {2}, {3} samples, {4:P})", flameGraphBox.FullName, flameGraphBox.Duration, averageDuration, flameGraphBox.Samples, flameGraphBox.Samples / (decimal)maxSampleWidth));
                                    xmlWriter.WriteEndElement();                                   

                                    // Determine the color for the box, using the framework lookup
                                    MethodCallLineClassTypeMapping methodCallLineClassTypeMapping = getMethodCallLineClassTypeMappingFromClassOrFunctionName(flameGraphBox.FullName, methodCallLineClassToFrameworkTypeMappingDictionary);
                                    Color colorStart = colorFlameGraphStackStart;
                                    Color colorEnd = colorFlameGraphStackEnd;

                                    // No mapping
                                    if (methodCallLineClassTypeMapping == null)
                                    {
                                        // Could this be Node.JS?
                                        // it has :: and .js in it
                                        if (flameGraphBox.FullName.Contains("::") == true &&
                                            flameGraphBox.FullName.Contains(".js") == true)
                                        {
                                            colorStart = colorFlameGraphStackNodeJSStart;
                                            colorEnd = colorFlameGraphStackNodeJSEnd;
                                        }
                                    }
                                    else if (methodCallLineClassTypeMapping.FlameGraphColorStart.Length != 0 || methodCallLineClassTypeMapping.FlameGraphColorEnd.Length != 0)
                                    {
                                        colorStart = getColorFromHexString(methodCallLineClassTypeMapping.FlameGraphColorStart);
                                        colorEnd = getColorFromHexString(methodCallLineClassTypeMapping.FlameGraphColorEnd);
                                    }

                                    // Output the rectangle with pretty colors
                                    xmlWriter.WriteStartElement("rect");
                                    xmlWriter.WriteAttributeString("x", x1.ToString());
                                    xmlWriter.WriteAttributeString("y", y1.ToString());
                                    xmlWriter.WriteAttributeString("width", (x2 - x1).ToString());
                                    xmlWriter.WriteAttributeString("height", (y2 - y1).ToString());
                                    xmlWriter.WriteAttributeString("fill", getFlameGraphBoxColorAsRGBString(flameGraphBox.Depth, maxFrameDepth, colorStart, colorEnd));
                                    xmlWriter.WriteAttributeString("rx", "2");
                                    xmlWriter.WriteAttributeString("ry", "2");

                                    if (flameGraphBox.Duration > 0 && averageDuration > 100)
                                    {
                                        xmlWriter.WriteAttributeString("stroke", "#BF0000");
                                        if (averageDuration <= 250)
                                        {
                                            xmlWriter.WriteAttributeString("stroke-width", "1");
                                        }
                                        else if (averageDuration <= 500)
                                        {
                                            xmlWriter.WriteAttributeString("stroke-width", "2");
                                        }
                                        else if (averageDuration <= 1000)
                                        {
                                            xmlWriter.WriteAttributeString("stroke-width", "3");
                                        }
                                        else if (averageDuration <= 5000)
                                        {
                                            xmlWriter.WriteAttributeString("stroke-width", "4");
                                        }
                                        else if (averageDuration <= 10000)
                                        {
                                            xmlWriter.WriteAttributeString("stroke-width", "5");
                                        }
                                        else
                                        {
                                            xmlWriter.WriteAttributeString("stroke-width", "6");
                                        }
                                    }

                                    xmlWriter.WriteEndElement();

                                    // Output text label that is visible and positioned right over the rectanlge
                                    xmlWriter.WriteStartElement("text");
                                    xmlWriter.WriteAttributeString("text-anchor", "left");
                                    xmlWriter.WriteAttributeString("x", (x1 + 2).ToString());
                                    xmlWriter.WriteAttributeString("y", (y1 + 11).ToString());
                                    xmlWriter.WriteAttributeString("font-size", "11");
                                    xmlWriter.WriteAttributeString("font-family", "monospace");
                                    // Is the box big enough for the text?
                                    if (boxWidth > 25)
                                    {
                                        // Measure the text and put .. if it won't fit
                                        int numberOfCharactersThatWillFit = (int)Math.Round(Decimal.Divide(boxWidth, 8.4m), 0);

                                        if (flameGraphBox.FullName.Length > numberOfCharactersThatWillFit)
                                        {
                                            xmlWriter.WriteString(String.Format("{0}..", flameGraphBox.FullName.Substring(0, numberOfCharactersThatWillFit)));
                                        }
                                        else
                                        {
                                            xmlWriter.WriteString(XmlConvert.EncodeName(flameGraphBox.FullName));
                                        }
                                    }
                                    else
                                    {
                                        xmlWriter.WriteString(String.Empty);
                                    }
                                    xmlWriter.WriteEndElement();

                                    xmlWriter.WriteEndElement();

                                    // Show progress
                                    if (progressToConsole == true)
                                    {
                                        if (i != 0 && i % 10000 == 0)
                                        {
                                            Console.Write("[{0}].", i);
                                        }
                                    }
                                }

                                if (progressToConsole == true && flameGraphBoxes.Count >= 10000)
                                {
                                    Console.WriteLine();
                                }

                                // Move off the content placeholder
                                xmlReader.Read();
                                xmlReader.Read();
                            }
                            // All other nodes
                            else
                            {
                                XmlWriterHelper.WriteShallowNode(xmlReader, xmlWriter);
                            }
                        }
                    }
                }
            }

            #endregion

            return true;
        }

        private static string getFlameGraphBoxColorAsRGBString(int thisDepth, int maxDepth, Color startColor, Color endColor)
        {
            double rStep = (endColor.R - startColor.R) / (double)maxDepth;
            double gStep = (endColor.G - startColor.G) / (double)maxDepth;
            double bStep = (endColor.B - startColor.B) / (double)maxDepth;

            var rActual = startColor.R + (int)(rStep * thisDepth);
            var gActual = startColor.G + (int)(gStep * thisDepth);
            var bActual = startColor.B + (int)(bStep * thisDepth);

            // Make color in RGBA format, where A (Alpha) is exactly half 2/3 of the way to 255
            return String.Format("#{0:X2}{1:X2}{2:X2}B8", rActual, gActual, bActual);
        }

        private static Color getColorFromHexString(string hexColorString)
        {
            int r = Convert.ToInt32(hexColorString.Substring(0, 2), 16);
            int g = Convert.ToInt32(hexColorString.Substring(2, 2), 16);
            int b = Convert.ToInt32(hexColorString.Substring(4, 2), 16);

            return Color.FromArgb(r, g, b);
        }

        public static MethodCallLineClassTypeMapping getMethodCallLineClassTypeMappingFromClassOrFunctionName(string classOrFunctionName, Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary)
        {
            if (classOrFunctionName.Length > 0)
            {
                // Find mapping
                string keyLetterOfMappingList = classOrFunctionName.Substring(0, 1).ToLower();
                if (methodCallLineClassToFrameworkTypeMappingDictionary.ContainsKey(keyLetterOfMappingList) == true)
                {
                    List<MethodCallLineClassTypeMapping> methodCallLineClassToFrameworkTypeMappingList = methodCallLineClassToFrameworkTypeMappingDictionary[keyLetterOfMappingList];
                    foreach (MethodCallLineClassTypeMapping mapping in methodCallLineClassToFrameworkTypeMappingList)
                    {
                        if (classOrFunctionName.StartsWith(mapping.ClassPrefix, StringComparison.InvariantCultureIgnoreCase) == true)
                        {
                            return mapping;
                        }
                    }
                }
            }

            return null;
        }

        #endregion


        #region Helper function to render Parameters sheet

        private static void fillReportParametersSheet(ExcelWorksheet sheet, JobConfiguration jobConfiguration, string reportName)
        {

            int l = 1;
            sheet.Cells[l, 1].Value = "Table of Contents";
            sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[l, 2].StyleName = "HyperLinkStyle";
            l++; l++;
            sheet.Cells[l, 1].Value = reportName;
            l++;
            sheet.Cells[l, 1].Value = "Version";
            sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
            l++; l++;
            sheet.Cells[l, 2].Value = "From";
            sheet.Cells[l, 3].Value = "To";
            l++;
            sheet.Cells[l, 1].Value = "Local";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToLocalTime().ToString("G");
            sheet.Cells[l, 3].Value = jobConfiguration.Input.TimeRange.To.ToLocalTime().ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "UTC";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
            sheet.Cells[l, 3].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Number of Hours Intervals";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
            l++;
            sheet.Cells[l, 1].Value = "Export Metrics";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
            l++;
            sheet.Cells[l, 1].Value = "Export Snapshots";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
            l++;
            sheet.Cells[l, 1].Value = "Export Flowmaps";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
            l++;
            sheet.Cells[l, 1].Value = "Export Configuration";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
            l++;
            sheet.Cells[l, 1].Value = "Export Events";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
            l++;
            sheet.Cells[l, 1].Value = "Targets:";
            l++; l++;
            ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                        select new
                                                                        {
                                                                            Controller = jobTarget.Controller,
                                                                            UserName = jobTarget.UserName,
                                                                            Application = jobTarget.Application,
                                                                            ApplicationID = jobTarget.ApplicationID,
                                                                        }, true);
            ExcelTable table = sheet.Tables.Add(range, REPORT_TABLE_PARAMETERS_TARGETS);
            table.ShowHeader = true;
            table.TableStyle = TableStyles.Medium2;
            table.ShowFilter = true;
            table.ShowTotal = false;

            sheet.Column(1).Width = 25;
            sheet.Column(2).Width = 25;
            sheet.Column(3).Width = 25;

            return;
        }

        #endregion

        #region Helper functions to build Pivot tables in Excel

        private static void setDefaultPivotTableSettings(ExcelPivotTable pivot)
        {
            pivot.ApplyWidthHeightFormats = false;
            pivot.DataOnRows = false;
        }

        private static void addFilterFieldToPivot(ExcelPivotTable pivot, string fieldName)
        {
            addFilterFieldToPivot(pivot, fieldName, eSortType.None);
        }
        private static void addFilterFieldToPivot(ExcelPivotTable pivot, string fieldName, eSortType sort)
        {
            ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields[fieldName]);
            fieldF.Sort = sort;
        }

        private static void addRowFieldToPivot(ExcelPivotTable pivot, string fieldName)
        {
            addRowFieldToPivot(pivot, fieldName, eSortType.None);
        }

        private static void addRowFieldToPivot(ExcelPivotTable pivot, string fieldName, eSortType sort)
        {
            ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields[fieldName]);
            fieldR.Compact = false;
            fieldR.Outline = false;
            fieldR.SubTotalFunctions = eSubTotalFunctions.None;
            fieldR.Sort = sort;
        }

        private static void addColumnFieldToPivot(ExcelPivotTable pivot, string fieldName)
        {
            addColumnFieldToPivot(pivot, fieldName, eSortType.None);
        }

        private static void addColumnFieldToPivot(ExcelPivotTable pivot, string fieldName, eSortType sort)
        {
            ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields[fieldName]);
            fieldC.Compact = false;
            fieldC.Outline = false;
            fieldC.SubTotalFunctions = eSubTotalFunctions.None;
            fieldC.Sort = sort;
        }

        private static void addDataFieldToPivot(ExcelPivotTable pivot, string fieldName, DataFieldFunctions function)
        {
            addDataFieldToPivot(pivot, fieldName, function, String.Empty);
        }

        private static void addDataFieldToPivot(ExcelPivotTable pivot, string fieldName, DataFieldFunctions function, string displayName)
        {
            ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields[fieldName]);
            fieldD.Function = function;
            if (displayName.Length != 0)
            {
                fieldD.Name = displayName;
            }
        }

        #endregion

        #region Helper functions for reading CSV into Excel worksheet

        private static ExcelRangeBase readCSVFileIntoExcelRange(MemoryStream csvStream, int skipLinesFromBeginning, ExcelWorksheet sheet, int startRow, int startColumn)
        {
            logger.Trace("Reading CSV file from memory stream to Excel Worksheet {0} at (row {1}, column {2})", sheet.Name, startRow, startColumn);

            try
            {
                using (StreamReader sr = new StreamReader(csvStream))
                {
                    return readCSVIntoExcelRage(sr, skipLinesFromBeginning, sheet, startRow, startColumn);
                }
            }
            catch (Exception ex)
            {
                logger.Error("Unable to read CSV from memory stream");
                logger.Error(ex);
            }

            return null;
        }

        private static ExcelRangeBase readCSVFileIntoExcelRange(string csvFilePath, int skipLinesFromBeginning, ExcelWorksheet sheet, int startRow, int startColumn)
        {
            logger.Trace("Reading CSV file {0} to Excel Worksheet {1} at (row {2}, column {3})", csvFilePath, sheet.Name, startRow, startColumn);

            if (File.Exists(csvFilePath) == false)
            {
                logger.Warn("Unable to find file {0}", csvFilePath);

                return null;
            }

            try
            {
                using (StreamReader sr = File.OpenText(csvFilePath))
                {
                    return readCSVIntoExcelRage(sr, skipLinesFromBeginning, sheet, startRow, startColumn);
                }
            }
            catch (Exception ex)
            {
                logger.Error("Unable to read CSV from file {0}", csvFilePath);
                logger.Error(ex);
            }

            return null;
        }

        private static ExcelRangeBase readCSVIntoExcelRage(StreamReader sr, int skipLinesFromBeginning, ExcelWorksheet sheet, int startRow, int startColumn)
        {
            int csvRowIndex = -1;
            int numColumnsInCSV = 0;
            string[] headerRowValues = null;

            CsvParser csvParser = new CsvParser(sr);

            // Read all rows
            while (true)
            {
                string[] rowValues = csvParser.Read();
                if (rowValues == null)
                {
                    break;
                }
                csvRowIndex++;

                // Grab the headers
                if (csvRowIndex == 0)
                {
                    headerRowValues = rowValues;
                    numColumnsInCSV = headerRowValues.Length;
                }

                // Should we skip?
                if (csvRowIndex < skipLinesFromBeginning)
                {
                    // Skip this line
                    continue;
                }

                // Read row one field at a time
                int csvFieldIndex = 0;
                try
                {
                    foreach (string fieldValue in rowValues)
                    {
                        ExcelRange cell = sheet.Cells[csvRowIndex + startRow - skipLinesFromBeginning, csvFieldIndex + startColumn];
                        if (fieldValue.StartsWith("=") == true)
                        {
                            cell.Formula = fieldValue;

                            if (fieldValue.StartsWith("=HYPERLINK") == true)
                            {
                                cell.StyleName = "HyperLinkStyle";
                            }
                        }
                        else if (fieldValue.StartsWith("http://") == true || fieldValue.StartsWith("https://") == true)
                        {
                            // If it is in the column ending in Link, I want it to be hyperlinked and use the column name
                            if (headerRowValues[csvFieldIndex] == "Link")
                            {
                                // This is the ART summary table, those links are OK, there are not that many of them
                                cell.Hyperlink = new Uri(fieldValue);
                                cell.Value = "<Go>";
                                cell.StyleName = "HyperLinkStyle";
                            }
                            // Temporarily commenting out until I figure the large number of rows leading to hyperlink corruption thing
                            //else if (headerRowValues[csvFieldIndex].EndsWith("Link"))
                            //{
                            //    cell.Hyperlink = new Uri(fieldValue);
                            //    string linkName = String.Format("<{0}>", headerRowValues[csvFieldIndex].Replace("Link", ""));
                            //    if (linkName == "<>") linkName = "<Go>";
                            //    cell.Value = linkName;
                            //    cell.StyleName = "HyperLinkStyle";
                            //}
                            else
                            {
                                // Otherwise dump it as text
                                cell.Value = fieldValue;
                            }
                        }
                        else
                        {
                            Double numValue;
                            bool boolValue;
                            DateTime dateValue;

                            // Try some casting
                            if (Double.TryParse(fieldValue, NumberStyles.Any, NumberFormatInfo.InvariantInfo, out numValue) == true)
                            {
                                // Number
                                cell.Value = numValue;
                            }
                            else if (Boolean.TryParse(fieldValue, out boolValue) == true)
                            {
                                // Boolean
                                cell.Value = boolValue;
                            }
                            else if (DateTime.TryParse(fieldValue, out dateValue))
                            {
                                // DateTime
                                cell.Value = dateValue;
                                if (headerRowValues[csvFieldIndex] == "EventTime")
                                {
                                    cell.Style.Numberformat.Format = "hh:mm";
                                }
                                else
                                {
                                    cell.Style.Numberformat.Format = "mm/dd/yyyy hh:mm:ss";
                                }
                            }
                            else
                            {
                                // Something else, dump as is

                                // https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3
                                // Total number of characters that a cell can contain 32,767 characters
                                // Must cut off cell value if it is too big, or risk Excel complaining during sheet load

                                if (fieldValue.Length > 32000)
                                {
                                    cell.Value = fieldValue.Substring(0, 32000);
                                }
                                else
                                {
                                    cell.Value = fieldValue;
                                }
                            }
                        }
                        csvFieldIndex++;
                    }
                }
                catch (ArgumentException ex)
                {
                    if (ex.Message == "Row out of range")
                    {
                        logger.Warn("Max number of rows in sheet {0} reached", sheet.Name);
                        break;
                    }
                    else
                    {
                        throw;
                    }
                }
            }

            return sheet.Cells[startRow, startColumn, startRow + csvRowIndex, startColumn + numColumnsInCSV - 1];
        }

        #endregion

        #region Helper function for various entity naming

        private static string getShortenedEntityNameForFileSystem(string entityName, long entityID)
        {
            string originalEntityName = entityName;

            // First, strip out unsafe characters
            entityName = getFileSystemSafeString(entityName);

            // Second, shorten the string 
            if (entityName.Length > 12) entityName = entityName.Substring(0, 12);

            return String.Format("{0}.{1}", entityName, entityID);
        }

        private static string getFileSystemSafeString(string fileOrFolderNameToClear)
        {
            foreach (var c in Path.GetInvalidFileNameChars())
            {
                fileOrFolderNameToClear = fileOrFolderNameToClear.Replace(c, '-');
            }

            return fileOrFolderNameToClear;
        }

        private static string getShortenedEntityNameForExcelTable(string entityName, long entityID)
        {
            // First, strip out unsafe characters
            entityName = getExcelTableOrSheetSafeString(entityName);

            // Second, shorten the string 
            if (entityName.Length > 50) entityName = entityName.Substring(0, 50);

            return String.Format("{0}.{1}", entityName, entityID);
        }

        private static string getShortenedEntityNameForExcelSheet(string entityName, int entityID, int maxLength)
        {
            // First, strip out unsafe characters
            entityName = getExcelTableOrSheetSafeString(entityName);

            // Second, measure the unique ID length and shorten the name of string down
            maxLength = maxLength - 1 - entityID.ToString().Length;

            // Third, shorten the string 
            if (entityName.Length > maxLength) entityName = entityName.Substring(0, maxLength);

            return String.Format("{0}.{1}", entityName, entityID);
        }

        private static string getShortenedNameForExcelSheet(string sheetName)
        {
            // First, strip out unsafe characters
            sheetName = getFileSystemSafeString(sheetName);

            // Second, shorten the string 
            if (sheetName.Length > 32) sheetName = sheetName.Substring(0, 32);

            return sheetName;
        }

        private static string getExcelTableOrSheetSafeString(string stringToClear)
        {
            char[] excelTableInvalidChars = { ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '=', ',', '/', '\\', '[', ']', ':', '?', '|', '"', '<', '>'};
            foreach (var c in excelTableInvalidChars)
            {
                stringToClear = stringToClear.Replace(c, '-');
            }
            // Apparently it is possible to have a NUL character as a BT name courtesy of penetration testing somehow
            stringToClear = stringToClear.Replace("\u0000", "NULL");

            return stringToClear;
        }

        #endregion

        #region Helper functions for Unix time handling

        /// <summary>
        /// Converts UNIX timestamp to DateTime
        /// </summary>
        /// <param name="timestamp"></param>
        /// <returns></returns>
        private static DateTime convertFromUnixTimestamp(long timestamp)
        {
            DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            return origin.AddMilliseconds(timestamp);
        }

        /// <summary>
        /// Converts DateTime to Unix timestamp
        /// </summary>
        /// <param name="date"></param>
        /// <returns></returns>
        private static long convertToUnixTimestamp(DateTime date)
        {
            DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            TimeSpan diff = date.ToUniversalTime() - origin;
            return (long)Math.Floor(diff.TotalMilliseconds);
        }

        #endregion
    }
}