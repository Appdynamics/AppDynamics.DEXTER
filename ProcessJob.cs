using AppDynamics.Dexter.DataObjects;
using AppDynamics.Dexter.Extensions;
using CsvHelper;
using Newtonsoft.Json.Linq;
using NLog;
using OfficeOpenXml;
using OfficeOpenXml.ConditionalFormatting;
using OfficeOpenXml.Drawing.Chart;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;
using OfficeOpenXml.Table.PivotTable;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;

namespace AppDynamics.Dexter
{
    public class ProcessJob
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();
        private static Logger loggerConsole = LogManager.GetLogger("AppDynamics.Dexter.Console");

        #region Constants for metric retrieval

        private const string METRIC_TIME_MS = "Time (ms)";

        // Constants for metric naming
        private const string METRIC_ART_FULLNAME = "Average Response Time (ms)";
        private const string METRIC_CPM_FULLNAME = "Calls per Minute";
        private const string METRIC_EPM_FULLNAME = "Errors per Minute";
        private const string METRIC_EXCPM_FULLNAME = "Exceptions per Minute";
        private const string METRIC_HTTPEPM_FULLNAME = "HTTP Error Codes per Minute";

        // Overall Application Performance|Calls per Minute
        private const string METRIC_PATH_APPLICATION = "Overall Application Performance|{0}";

        // Overall Application Performance|Web|Calls per Minute
        // Overall Application Performance|*|Calls per Minute
        private const string METRIC_PATH_TIER = "Overall Application Performance|{0}|{1}";

        // Overall Application Performance|Web|Individual Nodes|*|Calls per Minute
        // Overall Application Performance|*|Individual Nodes|*|Calls per Minute
        private const string METRIC_PATH_NODE = "Overall Application Performance|{0}|Individual Nodes|{1}|{2}";

        // Business Transaction Performance|Business Transactions|Web|AppHttpHandler ashx services|Calls per Minute
        // Business Transaction Performance|Business Transactions|*|AppHttpHandler ashx services|Calls per Minute
        // Business Transaction Performance|Business Transactions|*|*|Calls per Minute
        private const string METRIC_PATH_BUSINESS_TRANSACTION = "Business Transaction Performance|Business Transactions|{0}|{1}|{2}";

        // Business Transaction Performance|Business Transactions|Web|AppHttpHandler ashx services|Individual Nodes|*|Calls per Minute
        // Business Transaction Performance|Business Transactions|*|AppHttpHandler ashx services|Individual Nodes|*|Calls per Minute
        // Not going to support that one

        // Backends|Discovered backend call - Azure ACS OAuth CloudSync-login.windows.net-443|Calls per Minute
        // Backends|*|Calls per Minute
        private const string METRIC_PATH_BACKEND_DISCOVERED_BACKEND_PREFIX = "Backends|Discovered backend call - {0}|{1}";
        private const string METRIC_PATH_BACKEND = "Backends|{0}|{1}";

        // Overall Application Performance|Web|External Calls|Call-HTTP to Discovered backend call - Azure ACS OAuth CloudSync-login.windows.net-443|Calls per Minute
        // Overall Application Performance|Web|Individual Nodes|*|External Calls|Call-HTTP to Discovered backend call - Azure ACS OAuth CloudSync-login.windows.net-443|Calls per Minute
        // Overall Application Performance|*|Individual Nodes|*|External Calls|Call-HTTP to Discovered backend call - Azure ACS OAuth CloudSync-login.windows.net-443|Calls per Minute
        // Not going to support that one

        //Errors|Web|CrmException|Errors per Minute
        //Errors|*|*|Errors per Minute
        private const string METRIC_PATH_ERROR = "Errors|{0}|{1}|{2}";

        // Errors|Web|CrmException|Individual Nodes|*|Errors per Minute
        // Not going to support that one

        // Service Endpoints|Web|CrmAction.Execute|Calls per Minute
        // Service Endpoints|*|*|Calls per Minute
        private const string METRIC_PATH_SERVICE_ENDPOINT = "Service Endpoints|{0}|{1}|{2}";

        // Service Endpoints|Web|CrmAction.Execute|Individual Nodes|*|Calls per Minute
        // Service Endpoints|*|CrmAction.Execute|Individual Nodes|*|Calls per Minute
        // Not going to support that one

        // Service Endpoints|Web|CrmAction.Execute|Calls per Minute
        // Service Endpoints|*|*|Calls per Minute
        private const string METRIC_PATH_INFORMATION_POINT = "Information Points|{0}|{1}";

        #endregion

        #region Constants for the folder and file names of data extract

        // Parent Folder names
        private const string ENTITIES_FOLDER_NAME = "ENT";
        private const string CONFIGURATION_FOLDER_NAME = "CFG";
        private const string METRICS_FOLDER_NAME = "METR";
        private const string SNAPSHOTS_FOLDER_NAME = "SNAP";
        private const string SNAPSHOT_FOLDER_NAME = "{0}.{1:yyyyMMddHHmmss}";
        private const string EVENTS_FOLDER_NAME = "EVT";

        // Folder names for entity types
        private const string APPLICATION_TYPE_SHORT = "APP";
        private const string TIERS_TYPE_SHORT = "TIER";
        private const string NODES_TYPE_SHORT = "NODE";
        private const string BACKENDS_TYPE_SHORT = "BACK";
        private const string BUSINESS_TRANSACTIONS_TYPE_SHORT = "BT";
        private const string SERVICE_ENDPOINTS_TYPE_SHORT = "SEP";
        private const string ERRORS_TYPE_SHORT = "ERR";
        private const string INFORMATION_POINTS_TYPE_SHORT = "IP";

        // Metric folder names
        private const string METRIC_ART_SHORTNAME = "ART";
        private const string METRIC_CPM_SHORTNAME = "CPM";
        private const string METRIC_EPM_SHORTNAME = "EPM";
        private const string METRIC_EXCPM_SHORTNAME = "EXCPM";
        private const string METRIC_HTTPEPM_SHORTNAME = "HTTPEPM";

        private static Dictionary<string, string> metricNameToShortMetricNameMapping = new Dictionary<string, string>()
        {
            {METRIC_ART_FULLNAME, METRIC_ART_SHORTNAME},
            {METRIC_CPM_FULLNAME, METRIC_CPM_SHORTNAME},
            {METRIC_EPM_FULLNAME, METRIC_EPM_SHORTNAME},
            {METRIC_EXCPM_FULLNAME, METRIC_EXCPM_SHORTNAME},
            {METRIC_HTTPEPM_FULLNAME, METRIC_HTTPEPM_SHORTNAME},
        };

        // Metadata file names
        private const string EXTRACT_CONFIGURATION_APPLICATION_FILE_NAME = "configuration.xml";
        private const string EXTRACT_CONFIGURATION_CONTROLLER_FILE_NAME = "settings.json";
        private const string EXTRACT_ENTITY_APPLICATIONS_FILE_NAME = "applications.json";
        private const string EXTRACT_ENTITY_APPLICATION_FILE_NAME = "application.json";
        private const string EXTRACT_ENTITY_TIERS_FILE_NAME = "tiers.json";
        private const string EXTRACT_ENTITY_NODES_FILE_NAME = "nodes.json";
        private const string EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME = "businesstransactions.json";
        private const string EXTRACT_ENTITY_BACKENDS_FILE_NAME = "backends.json";
        private const string EXTRACT_ENTITY_BACKENDS_DETAIL_FILE_NAME = "backendsdetail.json";
        private const string EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME = "serviceendpoints.json";
        private const string EXTRACT_ENTITY_SERVICE_ENDPOINTS_DETAIL_FILE_NAME = "serviceendpointsdetail.json";
        private const string EXTRACT_ENTITY_ERRORS_FILE_NAME = "errors.json";
        private const string EXTRACT_ENTITY_INFORMATION_POINTS_FILE_NAME = "informationpoints.json";
        private const string EXTRACT_ENTITY_INFORMATION_POINTS_DETAIL_FILE_NAME = "informationpointsdetail.json";

        // Metric data file names
        private const string EXTRACT_METRIC_FULL_FILE_NAME = "full.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";
        private const string EXTRACT_METRIC_HOUR_FILE_NAME = "hour.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";

        // Flowmap file names
        private const string EXTRACT_ENTITY_FLOWMAP_FILE_NAME = "flowmap.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";

        // List of Snapshots file names
        private const string EXTRACT_SNAPSHOTS_FILE_NAME = "snapshots.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";
        private const int SNAPSHOTS_QUERY_PAGE_SIZE = 600;

        // Snapshot file names
        private const string EXTRACT_SNAPSHOT_FLOWMAP_FILE_NAME = "flowmap.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_FILE_NAME = "segments.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME = "segment.{0}.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_CALLGRAPH_FILE_NAME = "callgraph.{0}.json";
        private const string EXTRACT_SNAPSHOT_SEGMENT_ERROR_FILE_NAME = "error.{0}.json";

        private const string SNAPSHOT_UX_NORMAL = "NORMAL";
        private const string SNAPSHOT_UX_SLOW = "SLOW";
        private const string SNAPSHOT_UX_VERY_SLOW = "VERY_SLOW";
        private const string SNAPSHOT_UX_STALL = "STALL";
        private const string SNAPSHOT_UX_ERROR = "ERROR";

        // Mapping for snapshot folder names
        private static Dictionary<string, string> userExperienceFolderNameMapping = new Dictionary<string, string>
        {
            {SNAPSHOT_UX_NORMAL, "NM"},
            {SNAPSHOT_UX_SLOW, "SL"},
            {SNAPSHOT_UX_VERY_SLOW, "VS"},
            {SNAPSHOT_UX_STALL, "ST"},
            {SNAPSHOT_UX_ERROR, "ER"}
        };

        // Snapshots file names
        private const string HEALTH_RULE_VIOLATIONS_FILE_NAME = "healthruleviolations.{0:yyyyMMddHHmm}-{1:yyyyMMddHHmm}.json";
        private const string EVENTS_FILE_NAME = "{0}.{1:yyyyMMddHHmm}-{2:yyyyMMddHHmm}.json";

        // There are a bazillion types of events
        // Source C:\appdynamics\codebase\controller\controller-api\agent\src\main\java\com\singularity\ee\controller\api\constants\EventType.java
        // They are sort of documented here:
        //      https://docs.appdynamics.com/display/PRO42/Events+Reference
        //      https://docs.appdynamics.com/display/PRO43/Remediation+Scripts
        //      https://docs.appdynamics.com/display/PRO43/Build+a+Custom+Action
        // Choosing select few that I care about
        private static List<string> eventTypes = new List<string>
        {
            // Events UI: Application Changes
            // App Server Restart
            { "APP_SERVER_RESTART" },
            // Thrown when application parameters change, like JVM options, etc
            { "APPLICATION_CONFIG_CHANGE" },
            // This is injected by user / REST API.
            { "APPLICATION_DEPLOYMENT" },

            // Events UI: Code problems
            // Code deadlock detected by Agent
            { "DEADLOCK" },
            // This is thrown when any resource pool size is reached, thread pool, connection pool etc. fall into this category
            { "RESOURCE_POOL_LIMIT" },
                       
            // Events UI: Custom
            // Custom Events thrown by API calls using REST or machine agent API
            { "CUSTOM" },

            // Events UI: Server Crashes
            { "APPLICATION_CRASH" },
            // CLR Crash
            { "CLR_CRASH" },            

            // Events UI: Health Rule Violations
            // Health rules
            { "POLICY_OPEN_WARNING" },
            { "POLICY_OPEN_CRITICAL" },
            { "POLICY_CLOSE_WARNING" },
            { "POLICY_CLOSE_CRITICAL" },
            { "POLICY_UPGRADED" },
            { "POLICY_DOWNGRADED" },
            { "POLICY_CANCELED_WARNING" },
            { "POLICY_CANCELED_CRITICAL" },
            { "POLICY_CONTINUES_CRITICAL" },
            { "POLICY_CONTINUES_WARNING" },

            // Events UI: Error
            // This is thrown when the agent detects and error NOT during a BT (no BT id on thread)
            { "APPLICATION_ERROR" },

            // Events UI: Not possible - this is just a query here
            // Diagnostic session.  There are several subTypes for this.
            { "DIAGNOSTIC_SESSION" },

            // Bad events not visible in the UI
            { "AGENT_ADD_BLACKLIST_REG_LIMIT_REACHED" },
            { "AGENT_ASYNC_ADD_REG_LIMIT_REACHED" },
            { "AGENT_ERROR_ADD_REG_LIMIT_REACHED" },
            { "AGENT_METRIC_BLACKLIST_REG_LIMIT_REACHED" },
            { "AGENT_METRIC_REG_LIMIT_REACHED" },
            { "CONTROLLER_ASYNC_ADD_REG_LIMIT_REACHED" },
            { "CONTROLLER_ERROR_ADD_REG_LIMIT_REACHED" },
            { "CONTROLLER_EVENT_UPLOAD_LIMIT_REACHED" },
            { "CONTROLLER_METRIC_REG_LIMIT_REACHED" },
            { "CONTROLLER_RSD_UPLOAD_LIMIT_REACHED" },
            { "CONTROLLER_STACKTRACE_ADD_REG_LIMIT_REACHED" },

            // Others
            { "CONTROLLER_AGENT_VERSION_INCOMPATIBILITY" },
            { "LICENSE" }
        };

        private const string ENTITY_TYPE_APPLICATION = "APPLICATION";
        private const string ENTITY_TYPE_APPLICATION_MOBILE = "MOBILE_APPLICATION";
        private const string ENTITY_TYPE_TIER = "APPLICATION_COMPONENT";
        private const string ENTITY_TYPE_NODE = "APPLICATION_COMPONENT_NODE";
        private const string ENTITY_TYPE_MACHINE = "MACHINE_INSTANCE";
        private const string ENTITY_TYPE_BUSINESS_TRANSACTION = "BUSINESS_TRANSACTION";
        private const string ENTITY_TYPE_BACKEND = "BACKEND";
        private const string ENTITY_TYPE_HEALTH_RULE = "POLICY";

        // Mapping of long entity types to human readable ones
        private static Dictionary<string, string> entityTypeStringMapping = new Dictionary<string, string>
        {
            {ENTITY_TYPE_APPLICATION, "Application"},
            {ENTITY_TYPE_APPLICATION_MOBILE, "Mobile App"},
            {ENTITY_TYPE_TIER, "Tier"},
            {ENTITY_TYPE_NODE, "Node"},
            {ENTITY_TYPE_MACHINE, "Machine"},
            {ENTITY_TYPE_BUSINESS_TRANSACTION, "BT"},
            {ENTITY_TYPE_BACKEND, "Backend" },
            {ENTITY_TYPE_HEALTH_RULE, "Health Rule"}
        };

        #endregion

        #region Constants for the folder and file names of data index

        // Detected entity report conversion file names
        private const string CONVERT_ENTITY_CONTROLLER_FILE_NAME = "controller.csv";
        private const string CONVERT_ENTITY_CONTROLLERS_FILE_NAME = "controllers.csv";
        private const string CONVERT_ENTITY_APPLICATIONS_FILE_NAME = "applications.csv";
        private const string CONVERT_ENTITY_APPLICATION_FILE_NAME = "application.csv";
        private const string CONVERT_ENTITY_TIERS_FILE_NAME = "tiers.csv";
        private const string CONVERT_ENTITY_NODES_FILE_NAME = "nodes.csv";
        private const string CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME = "businesstransactions.csv";
        private const string CONVERT_ENTITY_BACKENDS_FILE_NAME = "backends.csv";
        private const string CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME = "serviceendpoints.csv";
        private const string CONVERT_ENTITY_ERRORS_FILE_NAME = "errors.csv";
        private const string CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME = "informationpoints.csv";

        // Metric report conversion file name
        private const string CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME = "entities.full.csv";
        private const string CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME = "entities.hour.csv";
        private const string CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME = "entity.full.csv";
        private const string CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME = "entity.hour.csv";
        private const string CONVERT_METRIC_VALUES_FILE_NAME = "metric.values.csv";
        private const string CONVERT_METRIC_SUMMARY_FILE_NAME = "metric.summary.csv";
        private const string CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME = "{0}.entities.full.csv";
        private const string CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME = "{0}.entities.hour.csv";

        // Flow map to flow grid conversion file name
        private const string CONVERT_ACTIVITY_GRID_FILE_NAME = "activitygrid.full.csv";

        // Events list
        private const string CONVERT_APPLICATION_EVENTS_FILE_NAME = "application.events.csv";
        private const string CONVERT_EVENTS_FILE_NAME = "events.csv";
        private const string CONVERT_HEALTH_RULE_EVENTS_FILE_NAME = "hrviolationevents.csv";

        // Snapshot files
        private const string CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME = "application.snapshots.csv";
        private const string CONVERT_SNAPSHOTS_FILE_NAME = "snapshots.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME = "snapshots.segments.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME = "snapshots.exits.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME = "snapshots.serviceendpoints.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME = "snapshots.errors.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME = "snapshots.businessdata.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME = "snapshots.methodcalllines.csv";
        private const string CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME = "snapshots.methodcalllinesoccurrences.csv";

        private const string CONVERT_SNAPSHOT_FILE_NAME = "snapshot.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_FILE_NAME = "snapshot.segments.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_EXIT_CALLS_FILE_NAME = "snapshot.exits.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_SERVICE_ENDPOINT_CALLS_FILE_NAME = "snapshot.serviceendpoints.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_DETECTED_ERRORS_FILE_NAME = "snapshot.errors.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_BUSINESS_DATA_FILE_NAME = "snapshot.businessdata.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_FILE_NAME = "snapshot.methodcalllines.csv";
        private const string CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME = "snapshot.methodcalllinesoccurrences.csv";

        // Settings report list
        private const string CONTROLLER_SETTINGS_FILE_NAME = "controller.settings.csv";
        private const string APPLICATION_CONFIGURATION_FILE_NAME = "application.configuration.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME = "btdiscovery.rules.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME = "btdiscovery.rules.2.0.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME = "btentry.rules.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME = "btentry.rules.2.0.csv";
        private const string APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME = "btentry.scopes.csv";
        private const string APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME = "backend.rules.csv";
        private const string APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME = "customexit.rules.csv";
        private const string APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME = "infopoints.csv";
        private const string APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME = "agent.properties.csv";
        private const string APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME = "datacollectors.midc.csv";
        private const string APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME = "datacollectors.http.csv";
        private const string APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME = "tiers.configuration.csv";
        private const string APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME = "bts.configuration.csv";
        private const string APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME = "callgraphs.configuration.csv";
        private const string APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME = "healthrules.csv";

        // Settings for method and call mapping
        private const string METHOD_CALL_LINES_TO_FRAMEWORK_TYPE_MAPPING_FILE_NAME = "MethodNamespaceTypeMapping.csv";

        #endregion

        #region Constants for the folder and file names of data reports

        private const string REPORTS_FOLDER_NAME = "Report";
        private const string REPORTS_ENTITY_DETAILS_FOLDER_NAME = "ENT";
        private const string REPORTS_SNAPSHOT_DETAILS_FOLDER_NAME = "SNAP";

        // Report file names
        private const string REPORT_DETECTED_ENTITIES_FILE_NAME = "DetectedEntities.{0}.{1:yyyyMMddHH}-{2:yyyyMMddHH}.xlsx";
        private const string REPORT_METRICS_ALL_ENTITIES_FILE_NAME = "EntityMetrics.{0}.{1:yyyyMMddHH}-{2:yyyyMMddHH}.xlsx";
        private const string REPORT_DETECTED_EVENTS_FILE_NAME = "Events.{0}.{1:yyyyMMddHH}-{2:yyyyMMddHH}.xlsx";
        private const string REPORT_SNAPSHOTS_FILE_NAME = "Snapshots.{0}.{1:yyyyMMddHH}-{2:yyyyMMddHH}.xlsx";
        private const string REPORT_SNAPSHOTS_METHOD_CALL_LINES_FILE_NAME = "Snapshots.MethodCallLines.{0}.{1:yyyyMMddHH}-{2:yyyyMMddHH}.xlsx";
        private const string REPORT_CONFIGURATION_FILE_NAME = "Configuration.{0}.{1:yyyyMMddHH}-{2:yyyyMMddHH}.xlsx";

        // Per entity report names
        private const string REPORT_ENTITY_DETAILS_APPLICATION_FILE_NAME = "{0}.{1}.{2:yyyyMMddHH}-{3:yyyyMMddHH}.xlsx";
        private const string REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME = "{0}.{1}.{2}.{3:yyyyMMddHH}-{4:yyyyMMddHH}.xlsx";
        private const string REPORT_METRICS_GRAPHS_FILE_NAME = "EntityMetricGraphs.{0}.{1}.{2:yyyyMMddHH}-{3:yyyyMMddHH}.xlsx";
        private const string REPORT_SNAPSHOT_DETAILS_FILE_NAME = "{3}.{4}.{5}.{6}.{7:yyyyMMddHHmmss}.{8}.{0}.{1:yyyyMMddHH}-{2:yyyyMMddHH}.xlsx";

        #endregion

        #region Constants for Common Reports sheets

        private const string REPORT_SHEET_PARAMETERS = "1.Parameters";
        private const string REPORT_SHEET_TOC = "2.Contents";

        #endregion

        #region Constants for Detected Entities Report contents

        private const string REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST = "4.Applications";
        private const string REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST = "5.Tiers";
        private const string REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT = "5.Tiers.Pivot";
        private const string REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST = "6.Nodes";
        private const string REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT = "6.Nodes.Type.AppAgent";
        private const string REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT = "6.Nodes.Type.MachineAgent";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST = "7.Backends";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT = "7.Backends.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT = "7.Backends.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST = "8.Business Transactions";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT = "8.BTs.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT = "8.BTs.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST = "9.SEPs";
        private const string REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT = "9.SEPs.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT = "9.SEPs.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST = "10.Errors";
        private const string REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT = "10.Errors.Type";
        private const string REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION = "10.Errors.Location";
        private const string REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST = "11.Information Points";
        private const string REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT = "11.Information Points.Type";

        private const string REPORT_DETECTED_ENTITIES_TABLE_TOC = "t_TOC";
        private const string REPORT_DETECTED_ENTITIES_TABLE_PARAMETERS_TARGETS = "t_InputTargets";
        private const string REPORT_DETECTED_ENTITIES_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_DETECTED_ENTITIES_TABLE_APPLICATIONS = "t_Applications";
        private const string REPORT_DETECTED_ENTITIES_TABLE_TIERS = "t_Tiers";
        private const string REPORT_DETECTED_ENTITIES_TABLE_NODES = "t_Nodes";
        private const string REPORT_DETECTED_ENTITIES_TABLE_BACKENDS = "t_Backends";
        private const string REPORT_DETECTED_ENTITIES_TABLE_BUSINESS_TRANSACTIONS = "t_BusinessTransactions";
        private const string REPORT_DETECTED_ENTITIES_TABLE_SERVICE_ENDPOINTS = "t_ServiceEndpoints";
        private const string REPORT_DETECTED_ENTITIES_TABLE_ERRORS = "t_Errors";
        private const string REPORT_DETECTED_ENTITIES_TABLE_INFORMATION_POINTS = "t_InformationPoints";

        private const string REPORT_DETECTED_ENTITIES_PIVOT_TIERS = "p_Tiers";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT = "p_NodesTypeAppAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT = "p_NodesTypeMachineAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE = "p_BackendsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_LOCATION = "p_BackendsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE = "p_BusinessTransactionsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_LOCATION_SHEET = "p_BusinessTransactionsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE = "p_ServiceEndpointsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_LOCATION = "p_ServiceEndpointsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE = "p_ErrorsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_LOCATION = "p_ErrorsLocation";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE = "p_InformationPointsType";

        private const string REPORT_DETECTED_ENTITIES_PIVOT_TIERS_GRAPH = "g_Tiers";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT_GRAPH = "g_NodesTypeAppAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT_GRAPH = "g_NodesTypeMachineAgent";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE_GRAPH = "g_BackendsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE_GRAPH = "g_BusinessTransactionsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE_GRAPH = "g_ServiceEndpointsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE_GRAPH = "g_ErrorsType";
        private const string REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE_GRAPH = "g_InformationPointsType";

        private const int REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT = 7;
        private const int REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Entity Metrics Report contents

        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL = "4.Applications";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY = "4.Applications.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL = "5.Tiers";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY = "5.Tiers.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL = "6.Nodes";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY = "6.Nodes.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL = "7.Backends";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY = "7.Backends.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL = "8.BTs";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY = "8.BTs.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL = "9.SEPs";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY = "9.SEPs.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL = "10.Errors";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY = "10.Errors.Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL = "11.Information Points";
        private const string REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY = "11.Information Points.Hourly";

        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_TOC = "t_TOC";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_PARAMETERS_TARGETS = "t_InputTargets";

        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_FULL = "t_Applications_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_HOURLY = "t_Applications_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_FULL = "t_Tiers_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_HOURLY = "t_Tiers_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_FULL = "t_Nodes_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_HOURLY = "t_Nodes_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_FULL = "t_Backends_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_HOURLY = "t_Backends_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_FULL = "t_BusinessTransactions_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_HOURLY = "t_BusinessTransactions_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_FULL = "t_ServiceEndpoints_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_HOURLY = "t_ServiceEndpoints_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_FULL = "t_Errors_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_HOURLY = "t_Errors_Hourly";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_FULL = "t_InformationPoints_Full";
        private const string REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_HOURLY = "t_InformationPoints_Hourly";

        private const int REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT = 4;

        #endregion

        #region Constants for Entity Metric Graphs Reports

        private const string REPORT_METRICS_GRAPHS_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_METRICS = "4.Applications.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_GRAPHS = "4.Applications.Graphs";
        private const string REPORT_METRICS_GRAPHS_SHEET_TIERS_METRICS = "5.Tiers.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_TIERS_GRAPHS = "5.Tiers.Graphs";
        private const string REPORT_METRICS_GRAPHS_SHEET_NODES_METRICS = "6.Nodes.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_NODES_GRAPHS = "6.Nodes.Graphs";
        private const string REPORT_METRICS_GRAPHS_SHEET_BACKENDS_METRICS = "7.Backends.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_BACKENDS_GRAPHS = "7.Backends.Graphs";
        private const string REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_METRICS = "8.BTs.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_GRAPHS = "8.BTs.Graphs";
        private const string REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_METRICS = "9.SEPs.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_GRAPHS = "9.SEPs.Graphs";
        private const string REPORT_METRICS_GRAPHS_SHEET_ERRORS_METRICS = "10.Errors.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_ERRORS_GRAPHS = "10.Errors.Graphs";
        private const string REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_METRICS = "11.Information Points.Metrics";
        private const string REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_GRAPHS = "11.Information Points.Graphs";

        private const string REPORT_METRICS_GRAPHS_TABLE_TOC = "t_TOC";
        private const string REPORT_METRICS_GRAPHS_TABLE_PARAMETERS_TARGETS = "t_InputTargets";
        private const string REPORT_METRICS_GRAPHS_TABLE_CONTROLLERS = "t_Controllers";

        // Description tables from metric.summary.csv
        private const string REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_DESCRIPTION = "t_Metric_Description_{0}_{1}_{2}";
        // Metric data tables from metric.values.csv
        private const string REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES = "t_Metric_Values_{0}_{1}_{2}";

        // Hourly graph data
        private const string REPORT_METRICS_GRAPHS_METRIC_GRAPH = "g_Metrics_{0}_{1:yyyyMMddHHss}_{2}";

        private const int REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT = 4;

        #endregion

        #region Constants for Detected Events and Health Rule Violations Report contents

        private const string REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS = "4.Applications";

        private const string REPORT_DETECTED_EVENTS_SHEET_EVENTS = "5.Events";
        private const string REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT = "5.Events.Type";
        private const string REPORT_DETECTED_EVENTS_SHEET_EVENTS_DURATION_PIVOT = "5.Events.Duration";

        private const string REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS = "6.Health Rule Violations";
        private const string REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT = "6.Health Rule Violations.Type";

        private const string REPORT_DETECTED_EVENTS_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_DETECTED_EVENTS_TABLE_APPLICATIONS = "t_Applications";

        private const string REPORT_DETECTED_EVENTS_TABLE_TOC = "t_TOC";
        private const string REPORT_DETECTED_EVENTS_TABLE_PARAMETERS_TARGETS = "t_InputTargets";

        private const string REPORT_DETECTED_EVENTS_TABLE_EVENTS = "t_Events";
        private const string REPORT_DETECTED_EVENTS_TABLE_HEALTH_RULE_VIOLATION_EVENTS = "t_HealthRuleViolationEvents";

        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE = "p_EventsType";
        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_DURATION = "p_EventsDuration";
        private const string REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE = "p_HealthRuleViolationEventsType";

        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE_GRAPH = "g_EventsType";
        private const string REPORT_DETECTED_EVENTS_PIVOT_EVENTS_DURATION_GRAPH = "g_EventsDuration";
        private const string REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE_GRAPH = "g_HealthRuleViolationEventsType";

        private const int REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT = 7;
        private const int REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Entity Metric Details Report contents

        private const string REPORT_ENTITY_DETAILS_SHEET_CONTROLLERS = "3.Controllers";

        // Metric summaries full, hourly
        private const string REPORT_ENTITY_DETAILS_SHEET_SUMMARY = "4.Summary";
        // Raw metric data
        private const string REPORT_ENTITY_DETAILS_SHEET_METRICS = "6.Metric Detail";
        // Flowmap in grid view
        private const string REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID = "7.Activity Flow";
        // Event data 
        private const string REPORT_ENTITY_DETAILS_SHEET_EVENTS = "8.Events";
        private const string REPORT_ENTITY_DETAILS_SHEET_EVENTS_PIVOT = "8.Events.Type";
        // Health rule 
        private const string REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS = "9.Health Rule Violations";
        private const string REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT = "9.Health Rule Violations.Type";
        // Snapshots and segments
        private const string REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS = "10.Snapshots";
        private const string REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS_PIVOT = "10.Snapshots.Type";
        private const string REPORT_ENTITY_DETAILS_SHEET_SEGMENTS = "11.Segments";
        private const string REPORT_ENTITY_DETAILS_SHEET_SEGMENTS_PIVOT = "11.Segments.Type";
        private const string REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS = "12.Exit Calls";
        private const string REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS_PIVOT = "12.Exit Calls.Type";
        private const string REPORT_ENTITY_DETAILS_SHEET_SERVICE_ENDPOINT_CALLS = "12.Service Endpoint Calls";
        private const string REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS = "13.Errors";
        private const string REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS_PIVOT = "13.Errors.Type";
        private const string REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA = "14.Business Data";
        private const string REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA_PIVOT = "14.Business Data.Type";
        // Graphs, snapshots and events all lined up in timeline
        private const string REPORT_ENTITY_DETAILS_SHEET_TIMELINE = "5.Timeline";

        private const string REPORT_ENTITY_DETAILS_TABLE_TOC = "t_TOC";
        private const string REPORT_ENTITY_DETAILS_TABLE_CONTROLLERS = "t_Controllers";

        // Full and hourly metric data
        private const string REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL = "t_Metric_Summary_Full";
        private const string REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY = "t_Metric_Summary_Hourly";
        // Description tables from metric.summary.csv
        private const string REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_DESCRIPTION = "t_Metric_Description_{0}_{1}";
        // Metric data tables from metric.values.csv
        private const string REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_VALUES = "t_Metric_Values_{0}_{1}";
        // Grid data
        private const string REPORT_ENTITY_DETAILS_ACTIVITY_GRID = "t_Activity";
        // Events from events.csv and hrviolationevents.csv
        private const string REPORT_ENTITY_DETAILS_TABLE_EVENTS = "t_Events";
        private const string REPORT_ENTITY_DETAILS_TABLE_HEALTH_RULE_VIOLATION_EVENTS = "t_EventsHealthRuleViolations";
        // Snapshot data
        private const string REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS = "t_Snapshots";
        private const string REPORT_ENTITY_DETAILS_TABLE_SEGMENTS = "t_Segment";
        private const string REPORT_ENTITY_DETAILS_TABLE_EXIT_CALLS = "t_ExitCalls";
        private const string REPORT_ENTITY_DETAILS_TABLE_SERVICE_ENDPOINT_CALLS = "t_ServiceEndpointCalls";
        private const string REPORT_ENTITY_DETAILS_TABLE_DETECTED_ERRORS = "t_DetectedErrors";
        private const string REPORT_ENTITY_DETAILS_TABLE_BUSINESS_DATA = "t_BusinessData";

        // Hourly graph data
        private const string REPORT_ENTITY_DETAILS_METRIC_GRAPH = "g_Metrics_{0}_{1:yyyyMMddHHss}";

        private const string REPORT_ENTITY_DETAILS_PIVOT_EVENTS = "p_Events";
        private const string REPORT_ENTITY_DETAILS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS = "p_Events_HR";

        private const string REPORT_ENTITY_DETAILS_PIVOT_SNAPSHOTS = "p_Snapshots";
        private const string REPORT_ENTITY_DETAILS_PIVOT_SEGMENTS = "p_Segments";
        private const string REPORT_ENTITY_DETAILS_PIVOT_EXIT_CALLS = "p_ExitCalls";
        private const string REPORT_ENTITY_DETAILS_CALLS_DETAILS_DURATION = "p_ExitCallsDetailsDuration";
        private const string REPORT_ENTITY_DETAILS_PIVOT_DETECTED_ERRORS = "p_DetectedErrors";
        private const string REPORT_ENTITY_DETAILS_PIVOT_BUSINESS_DATA = "p_BusinessData";

        private const int REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT = 15;
        private const int REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT = 7;

        private const string REPORT_ENTITY_DETAILS_TABLE_EVENTS_IN_TIMELINE = "t_EventsTimelineHeaders";
        private const string REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS_IN_TIMELINE = "t_SnapshotsTimelineHeaders";

        #endregion

        #region Constants for Snapshots Report contents

        private const string REPORT_SNAPSHOTS_SHEET_CONTROLLERS = "3.Controllers";
        private const string REPORT_SNAPSHOTS_SHEET_APPLICATIONS = "4.Applications";

        private const string REPORT_SNAPSHOTS_SHEET_SNAPSHOTS = "5.Snapshots";
        private const string REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_PIVOT = "5.Snapshots.Type";
        private const string REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_DURATION_PIVOT = "5.Snapshots.Duration";

        private const string REPORT_SNAPSHOTS_SHEET_SEGMENTS = "6.Segments";
        private const string REPORT_SNAPSHOTS_SHEET_SEGMENTS_PIVOT = "6.Segments.Type";
        private const string REPORT_SNAPSHOTS_SHEET_SEGMENTS_DURATION_PIVOT = "6.Segments.Duration";

        private const string REPORT_SNAPSHOTS_SHEET_EXIT_CALLS = "7.Exit Calls";
        private const string REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_PIVOT = "7.Exit Calls.Type";
        private const string REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_DURATION_PIVOT = "7.Exit Calls.Duration";

        private const string REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS = "8.Service Endpoint Calls";

        private const string REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS = "9.Errors";
        private const string REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_PIVOT = "9.Errors.Type";

        private const string REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA = "10.Business Data";
        private const string REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_PIVOT = "10.Business Data.Type";

        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES = "11.Method Calls";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_PIVOT = "11.Method Calls.Type";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_PIVOT = "11.Method Calls.Location";

        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES = "12.Method Occurrences";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT = "12.Method Occurrences.Type";
        private const string REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_LOCATION_PIVOT = "12.Method Occurrences.Location";

        private const string REPORT_SNAPSHOTS_TABLE_TOC = "t_TOC";
        private const string REPORT_SNAPSHOTS_TABLE_PARAMETERS_TARGETS = "t_InputTargets";

        private const string REPORT_SNAPSHOTS_TABLE_CONTROLLERS = "t_Controllers";
        private const string REPORT_SNAPSHOTS_TABLE_APPLICATIONS = "t_Applications";

        private const string REPORT_SNAPSHOTS_TABLE_SNAPSHOTS = "t_Snapshots";
        private const string REPORT_SNAPSHOTS_TABLE_SEGMENTS = "t_Segments";
        private const string REPORT_SNAPSHOTS_TABLE_EXIT_CALLS = "t_ExitCalls";
        private const string REPORT_SNAPSHOTS_TABLE_SERVICE_ENDPOINT_CALLS = "t_ServiceEndpointCalls";
        private const string REPORT_SNAPSHOTS_TABLE_DETECTED_ERRORS = "t_DetectedErrors";
        private const string REPORT_SNAPSHOTS_TABLE_BUSINESS_DATA = "t_BusinessData";
        private const string REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES = "t_MethodCallLines";
        private const string REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES_OCCURRENCES = "t_MethodCallLinesOccurrences";

        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS = "p_Snapshots";
        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_DURATION = "p_SnapshotsDuration";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS = "p_Segments";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS_DURATION = "p_SegmentsDuration";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS = "p_ExitCalls";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_DURATION = "p_ExitCallsDuration";
        private const string REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS = "p_DetectedErrors";
        private const string REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA = "p_BusinessData";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_TYPE = "p_MethodCallLinesType";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_LOCATION = "p_MethodCallLinesDuration";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_TYPE = "p_MethodCallLinesOccurrencesType";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_LOCATION = "p_MethodCallLinesOccurrencesLocation";

        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_GRAPH = "g_Snapshots";
        private const string REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_DURATION_GRAPH = "g_SnapshotsDuration";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS_GRAPH = "g_Segments";
        private const string REPORT_SNAPSHOTS_PIVOT_SEGMENTS_DURATION_GRAPH = "g_SegmentsDuration";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_GRAPH = "g_ExitCalls";
        private const string REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_DURATION_GRAPH = "g_ExitCallsDuration";
        private const string REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_GRAPH = "g_DetectedErrors";
        private const string REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_GRAPH = "g_BusinessData";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_TYPE = "g_MethodCallLinesType";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_LOCATION = "g_MethodCallLinesLocation";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_GRAPH_TYPE = "g_MethodCallLinesOccurrencesType";
        private const string REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_GRAPH_LOCATION = "g_MethodCallLinesOccurrencesLocation";

        private const int REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT = 8;
        private const int REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Configuration Report contents

        private const string REPORT_CONFIGURATION_SHEET_CONTROLLERS = "3.Controllers";

        private const string REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS = "4.Controller Settings";
        private const string REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION = "5.Application Configuration";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES = "6.BT Discovery Rules";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES = "7.BT Entry Rules";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE = "7.BT Entry Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION = "7.BT Entry Rules.Location";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES = "8.BT Scopes";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20 = "9.BT Discovery Rules 2.0";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20 = "9.BT Entry Rules 2.0";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE = "9.BT Entry Rules 2.0.Type";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION = "9.BT Entry Rules 2.0.Location";
        private const string REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES = "10.Backend Discovery Rules";
        private const string REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT = "10.Backend Discovery Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES = "11.Custom Exit Rules";
        private const string REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT = "11.Custom Exit Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_HEALTH_RULES = "12.Health Rules";
        private const string REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT = "12.Health Rules.Type";
        private const string REPORT_CONFIGURATION_SHEET_TIER_SETTINGS = "13.Tier Settings";
        private const string REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS = "14.BT Settings";
        private const string REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES = "15.Agent Properties";
        private const string REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT = "15.Agent Properties.Type";
        private const string REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES = "16.Information Points";
        private const string REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS = "17.MIDCs";
        private const string REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS = "18.HTTP DCs";
        private const string REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS = "19.Call Graph Settings";

        private const string REPORT_CONFIGURATION_DETAILS_TABLE_TOC = "t_TOC";
        private const string REPORT_CONFIGURATION_TABLE_PARAMETERS_TARGETS = "t_InputTargets";
        private const string REPORT_CONFIGURATION_DETAILS_TABLE_CONTROLLERS = "t_Controllers";

        // Full and hourly metric data
        private const string REPORT_CONFIGURATION_TABLE_CONTROLLER_SETTINGS = "t_ControllerSettings";
        private const string REPORT_CONFIGURATION_TABLE_APPLICATION_CONFIGURATION = "t_ApplicationConfiguration";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES = "t_BTDiscoveryRules";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES = "t_BTEntryRules";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SCOPES = "t_BTScopes";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES_20 = "t_BTDiscoveryRules20";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES_20 = "t_BTEntryRules20";
        private const string REPORT_CONFIGURATION_TABLE_BACKEND_DISCOVERY_RULES = "t_BackendDiscoveryRules";
        private const string REPORT_CONFIGURATION_TABLE_CUSTOM_EXIT_RULES = "t_CustomExitRules";
        private const string REPORT_CONFIGURATION_TABLE_AGENT_CONFIGURATION_PROPERTIES = "t_AgentProperties";
        private const string REPORT_CONFIGURATION_TABLE_INFORMATION_POINT_RULES = "t_InformationPointRules";
        private const string REPORT_CONFIGURATION_TABLE_METHOD_INVOCATION_DATA_COLLECTORS = "t_MIDCs";
        private const string REPORT_CONFIGURATION_TABLE_HTTP_DATA_COLLECTORS = "t_HTTPDCs";
        private const string REPORT_CONFIGURATION_TABLE_HEALTH_RULES = "t_HealthRules";
        private const string REPORT_CONFIGURATION_TABLE_TIER_SETTINGS = "t_Tiers";
        private const string REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SETTINGS = "t_BusinessTransactions";
        private const string REPORT_CONFIGURATION_TABLE_AGENT_CALL_GRAPH_SETTINGS = "t_AgentCallGraphSettings";

        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE = "p_BTEntryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_LOCATION = "p_BTEntryRulesLocation";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE = "p_BTEntryRules20Type";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_20_LOCATION = "p_BTEntryRules20Location";
        private const string REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE = "p_BackendDiscoveryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE = "p_CustomExitRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE = "p_AgentPropertiesType";
        private const string REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE = "p_HealthRulesType";

        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE_GRAPH = "g_BTEntryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE_GRAPH = "g_BTEntryRules20Type";
        private const string REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE_GRAPH = "g_BackendDiscoveryRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE_GRAPH = "g_CustomExitRulesType";
        private const string REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE_GRAPH = "g_AgentPropertiesType";
        private const string REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE_GRAPH = "g_HealthRulesType";

        private const int REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT = 4;
        private const int REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT = 7;
        private const int REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT = 14;

        #endregion

        #region Constants for Step Timing report

        private const string TIMING_REPORT_FILE_NAME = "StepDurations.csv";

        #endregion

        #region Constants for various report colors

        // This color is from the default theme that seems to be associated with the blueish tables I've picked out
        private static Color colorLightBlueForDatabars = Color.FromArgb(0x63, 0x8E, 0xC6);
        private static Color colorRedForDatabars = Color.FromArgb(0xFF, 0x69, 0x69);

        private static Color colorGreenFor3ColorScales = Color.LightGreen;
        private static Color colorYellowFor3ColorScales = Color.LightYellow;
        private static Color colorRedFor3ColorScales = Color.FromArgb(0xFF, 0x69, 0x69);

        // Snapshot colors
        // This color is assigned to the Normal snapshots in the timeline view and list of Snapshots
        private static Color colorGreenForNormalSnapshots = Color. FromArgb(0x00, 0x99, 0x0);
        // This color is assigned to the Slow snapshots in the timeline view and list of Snapshots
        private static Color colorYellowForSlowSnapshots = Color.Yellow;
        // This color is assigned to the Slow snapshots in the timeline view and list of Snapshots. Similar to Color.Orange
        private static Color colorOrangeForVerySlowSnapshots = Color.FromArgb(0xFF, 0xC0, 0x0);
        // This color is assigned to the Stall snapshots in the timeline view and list of Snapshots. Similar to Color.Purple
        private static Color colorOrangeForStallSnapshots = Color.FromArgb(0x99, 0x33, 0xFF);
        // This color is assigned to the Error snapshots in the timeline view and list of Snapshots. Similar Color.IndianRed
        private static Color colorRedForErrorSnapshots = Color.FromArgb(0xFF, 0x69, 0x69);

        // Event colors
        // This color is close to Color.LightBlue
        private static Color colorLightBlueForInfoEvents = Color.FromArgb(0x0, 0x70, 0xC0);
        // This color is orange
        private static Color colorOrangeForWarnEvents = Color.FromArgb(0xFF, 0xC0, 0x0);
        // This color is close to Color.IndianRed
        private static Color colorRedForErrorEvents = Color.FromArgb(0xFF, 0x69, 0x69);

        // Hyperlink colors
        private static Color colorBlueForHyperlinks = Color.Blue;

        // Metric colors
        private static Color colorMetricART = Color.Green;
        private static Color colorMetricCPM = Color.Blue;
        private static Color colorMetricEPM = Color.Red;
        private static Color colorMetricEXCPM = Color.Orange;
        private static Color colorMetricHTTPEPM = Color.Pink;

        #endregion

        #region Constants for Deeplinks

        private const string DEEPLINK_CONTROLLER = @"{0}/controller/#/location=AD_HOME_OVERVIEW&timeRange={1}";
        private const string DEEPLINK_APPLICATION = @"{0}/controller/#/location=APP_DASHBOARD&timeRange={2}&application={1}&dashboardMode=force";
        private const string DEEPLINK_TIER = @"{0}/controller/#/location=APP_COMPONENT_MANAGER&timeRange={3}&application={1}&component={2}&dashboardMode=force";
        private const string DEEPLINK_NODE = @"{0}/controller/#/location=APP_NODE_MANAGER&timeRange={3}&application={1}&node={2}&dashboardMode=force";
        private const string DEEPLINK_BACKEND = @"{0}/controller/#/location=APP_BACKEND_DASHBOARD&timeRange={3}&application={1}&backendDashboard={2}&dashboardMode=force";
        private const string DEEPLINK_BUSINESS_TRANSACTION = @"{0}/controller/#/location=APP_BT_DETAIL&timeRange={3}&application={1}&businessTransaction={2}&dashboardMode=force";
        private const string DEEPLINK_SERVICE_ENDPOINT = @"{0}/controller/#/location=APP_SERVICE_ENDPOINT_DETAIL&timeRange={4}&application={1}&component={2}&serviceEndpoint={3}";
        private const string DEEPLINK_ERROR = @"{0}/controller/#/location=APP_ERROR_DASHBOARD&timeRange={3}&application={1}&error={2}";
        private const string DEEPLINK_INFORMATION_POINT = @"{0}/controller/#/location=APP_INFOPOINT_DASHBOARD&timeRange={3}&application={1}&infoPoint={2}";
        private const string DEEPLINK_APPLICATION_MOBILE = @"{0}/controller/#/location=EUM_MOBILE_MAIN_DASHBOARD&timeRange={3}&application={1}&mobileApp={2}";
        private const string DEEPLINK_HEALTH_RULE = @"{0}/controller/#/location=ALERT_RESPOND_HEALTH_RULES&timeRange={3}&application={1}";
        private const string DEEPLINK_INCIDENT = @"{0}/controller/#/location=APP_INCIDENT_DETAIL_MODAL&timeRange={4}&application={1}&incident={2}&incidentTime={3}";
        private const string DEEPLINK_SNAPSHOT_OVERVIEW = @"{0}/controller/#/location=APP_SNAPSHOT_VIEWER&rsdTime={3}&application={1}&requestGUID={2}&tab=overview&dashboardMode=force";
        private const string DEEPLINK_SNAPSHOT_SEGMENT = @"{0}/controller/#/location=APP_SNAPSHOT_VIEWER&rsdTime={4}&application={1}&requestGUID={2}&tab={3}&dashboardMode=force";

        private const string DEEPLINK_METRIC = @"{0}/controller/#/location=METRIC_BROWSER&timeRange={3}&application={1}&metrics={2}";
        private const string DEEPLINK_TIMERANGE_LAST_15_MINUTES = "last_15_minutes.BEFORE_NOW.-1.-1.15";
        private const string DEEPLINK_TIMERANGE_BETWEEN_TIMES = "Custom_Time_Range.BETWEEN_TIMES.{0}.{1}.{2}";
        private const string DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID = "APPLICATION.{0}.{1}";
        private const string DEEPLINK_METRIC_TIER_TARGET_METRIC_ID = "APPLICATION_COMPONENT.{0}.{1}";
        private const string DEEPLINK_METRIC_NODE_TARGET_METRIC_ID = "APPLICATION_COMPONENT_NODE.{0}.{1}";

        #endregion

        #region Constants for parallelization of processes

        private const int FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 20;
        private const int FLOWMAP_EXTRACT_NUMBER_OF_THREADS = 5;

        private const int EVENTS_EXTRACT_NUMBER_OF_THREADS = 5;

        private const int SNAPSHOTS_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 50;
        private const int SNAPSHOTS_EXTRACT_NUMBER_OF_THREADS = 5;

        private const int SNAPSHOTS_INDEX_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 100;

        private const int METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD = 10;

        #endregion


        #region Job steps router

        internal static void startOrContinueJob(ProgramOptions programOptions)
        {
            JobConfiguration jobConfiguration = FileIOHelper.readJobConfigurationFromFile(programOptions.OutputJobFilePath);
            if (jobConfiguration == null)
            {
                loggerConsole.Error("Unable to load job input file {0}", programOptions.InputJobFilePath);

                return;
            }

            List<JobStatus> jobSteps = new List<JobStatus>
            {
                // Get data
                JobStatus.ExtractControllerApplicationsAndEntities,
                JobStatus.ExtractControllerAndApplicationConfiguration,
                JobStatus.ExtractApplicationAndEntityMetrics,
                JobStatus.ExtractApplicationAndEntityFlowmaps,
                JobStatus.ExtractEventsAndHealthRuleViolations,
                JobStatus.ExtractSnapshots,

                // Process data
                JobStatus.IndexControllersApplicationsAndEntities,
                JobStatus.IndexControllerAndApplicationConfiguration,
                JobStatus.IndexApplicationAndEntityMetrics,
                JobStatus.IndexApplicationAndEntityFlowmaps,
                JobStatus.IndexEventsAndHealthRuleViolations,
                JobStatus.IndexSnapshots,

                // Report data
                JobStatus.ReportControlerApplicationsAndEntities,
                JobStatus.ReportControllerAndApplicationConfiguration,
                JobStatus.ReportApplicationAndEntityMetrics,
                JobStatus.ReportApplicationAndEntityMetricGraphs,
                JobStatus.ReportEventsAndHealthRuleViolations,
                JobStatus.ReportSnapshots,
                JobStatus.ReportSnapshotsMethodCallLines,
                JobStatus.ReportIndividualApplicationAndEntityDetails,
                //JobStatus.ReportFlameGraphs,

                // Done 
                JobStatus.Done,

                JobStatus.Error
            };
            LinkedList<JobStatus> jobStepsLinked = new LinkedList<JobStatus>(jobSteps);

            #region Output diagnostic parameters to log

            loggerConsole.Info("Job status {0}({0:d})", jobConfiguration.Status);
            logger.Info("Job status {0}({0:d})", jobConfiguration.Status);
            logger.Info("Job input: TimeRange.From='{0:o}', TimeRange.To='{1:o}', ExpandedTimeRange.From='{2:o}', ExpandedTimeRange.To='{3:o}', Time ranges='{4}', Flowmaps='{5}', Metrics='{6}', Snapshots='{7}', Configuration='{8}'", jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To, jobConfiguration.Input.HourlyTimeRanges.Count, jobConfiguration.Input.Flowmaps, jobConfiguration.Input.Metrics, jobConfiguration.Input.Snapshots, jobConfiguration.Input.Configuration);
            logger.Info("Job output: DetectedEntities='{0}', EntityMetrics='{1}', EntityDetails='{2}', Snapshots='{3}', Configuration='{4}', Events='{5}'", jobConfiguration.Output.DetectedEntities, jobConfiguration.Output.EntityMetrics, jobConfiguration.Output.EntityDetails, jobConfiguration.Output.Snapshots, jobConfiguration.Output.Configuration, jobConfiguration.Output.Events);

            foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
            {
                logger.Info("Expanded time ranges: From='{0:o}', To='{1:o}'", jobTimeRange.From, jobTimeRange.To);
            }

            #endregion

            // Run the step and move to next until things are done
            while (jobConfiguration.Status != JobStatus.Done && jobConfiguration.Status != JobStatus.Error)
            {
                switch (jobConfiguration.Status)
                {
                    case JobStatus.ExtractControllerApplicationsAndEntities:
                        if (stepExtractControllerApplicationsAndEntities(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                        }
                        else
                        {
                            jobConfiguration.Status = JobStatus.Error;
                        }
                        break;

                    case JobStatus.ExtractControllerAndApplicationConfiguration:
                        if (jobConfiguration.Input.Configuration == true)
                        {
                            if (stepExtractControllerAndApplicationConfiguration(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of configuration");
                        }
                        break;

                    case JobStatus.ExtractApplicationAndEntityMetrics:
                        if (jobConfiguration.Input.Metrics == true)
                        {
                            if (stepExtractApplicationAndEntityMetrics(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of entity metrics");
                        }
                        break;

                    case JobStatus.ExtractApplicationAndEntityFlowmaps:
                        if (jobConfiguration.Input.Flowmaps == true)
                        {
                            if (stepExtractApplicationAndEntityFlowmaps(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of entity flowmaps");
                        }
                        break;

                    case JobStatus.ExtractSnapshots:
                        if (jobConfiguration.Input.Snapshots == true)
                        {
                            if (stepExtractSnapshots(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of snapshots");
                        }
                        break;

                    case JobStatus.ExtractEventsAndHealthRuleViolations:
                        if (jobConfiguration.Input.Events == true)
                        {
                            if (stepExtractEventsAndHealthRuleViolations(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping export of events");
                        }
                        break;

                    case JobStatus.IndexControllersApplicationsAndEntities:
                        if (stepIndexControllersApplicationsAndEntities(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                        }
                        else
                        {
                            jobConfiguration.Status = JobStatus.Error;
                        }
                        break;

                    case JobStatus.IndexControllerAndApplicationConfiguration:
                        if (jobConfiguration.Input.Configuration == true)
                        {
                            if (stepIndexControllerAndApplicationConfiguration(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of configuration");
                        }
                        break;

                    case JobStatus.IndexApplicationAndEntityMetrics:
                        if (jobConfiguration.Input.Metrics == true)
                        {
                            if (stepIndexApplicationAndEntityMetrics(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of entity metrics");
                        }
                        break;

                    case JobStatus.IndexApplicationAndEntityFlowmaps:
                        if (jobConfiguration.Input.Flowmaps == true)
                        {
                            if (stepIndexApplicationAndEntityFlowmaps(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of entity flowmaps");
                        }
                        break;

                    case JobStatus.IndexSnapshots:
                        if (jobConfiguration.Input.Snapshots == true)
                        {
                            if (stepIndexSnapshots(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of snapshots");
                        }
                        break;

                    case JobStatus.IndexEventsAndHealthRuleViolations:
                        if (jobConfiguration.Input.Events == true)
                        {
                            if (stepIndexEventsAndHealthRuleViolations(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping index of events");
                        }
                        break;

                    case JobStatus.ReportControlerApplicationsAndEntities:
                        if (jobConfiguration.Output.DetectedEntities == true)
                        {
                            if (stepReportControlerApplicationsAndEntities(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of detected entities");
                        }
                        break;

                    case JobStatus.ReportControllerAndApplicationConfiguration:
                        if (jobConfiguration.Input.Configuration == true && jobConfiguration.Output.Configuration == true)
                        {
                            if (stepReportControllerAndApplicationConfiguration(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of configuration");
                        }
                        break;

                    case JobStatus.ReportEventsAndHealthRuleViolations:
                        if (jobConfiguration.Input.Events == true && jobConfiguration.Output.Events == true)
                        {
                            if (stepReportEventsAndHealthRuleViolations(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of events and health rule violations");
                        }
                        break;

                    case JobStatus.ReportApplicationAndEntityMetrics:
                        if (jobConfiguration.Input.Metrics == true && jobConfiguration.Output.EntityMetrics == true)
                        {
                            if (stepReportApplicationAndEntityMetrics(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of entity metrics");
                        }
                        break;

                    case JobStatus.ReportApplicationAndEntityMetricGraphs:
                        if (jobConfiguration.Input.Metrics == true && jobConfiguration.Output.EntityMetrics == true)
                        {
                            if (stepReportApplicationAndEntityMetricGraphs(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of entity metric graphs");
                        }
                        break;

                    case JobStatus.ReportSnapshots:
                        if (jobConfiguration.Input.Snapshots == true && jobConfiguration.Output.Snapshots == true)
                        {
                            if (stepReportSnapshots(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of snapshots");
                        }
                        break;

                    case JobStatus.ReportSnapshotsMethodCallLines:
                        if (jobConfiguration.Input.Snapshots == true && jobConfiguration.Output.Snapshots == true)
                        {
                            if (stepReportSnapshotsMethodCallLines(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of snapshots");
                        }
                        break;

                    case JobStatus.ReportIndividualApplicationAndEntityDetails:
                        if ((jobConfiguration.Input.Metrics == true ||
                            jobConfiguration.Input.Events == true ||
                            jobConfiguration.Input.Flowmaps == true ||
                            jobConfiguration.Input.Snapshots == true) && jobConfiguration.Output.EntityDetails == true)
                        {
                            if (stepReportIndividualApplicationAndEntityDetails(programOptions, jobConfiguration, jobConfiguration.Status) == true)
                            {
                                jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;
                            }
                            else
                            {
                                jobConfiguration.Status = JobStatus.Error;
                            }
                        }
                        else
                        {
                            jobConfiguration.Status = jobStepsLinked.Find(jobConfiguration.Status).Next.Value;

                            loggerConsole.Debug("Skipping report of entity detail reports");
                        }
                        break;


                    default:
                        jobConfiguration.Status = JobStatus.Error;
                        break;
                }

                // Save the resulting JSON file to the job target folder
                if (FileIOHelper.writeJobConfigurationToFile(jobConfiguration, programOptions.OutputJobFilePath) == false)
                {
                    loggerConsole.Error("Unable to write job input file {0}", programOptions.OutputJobFilePath);

                    return;
                }
            }
        }

        #endregion


        #region Extract steps

        private static bool stepExtractControllerApplicationsAndEntities(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    stepTimingTarget.NumEntities = 1;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);

                        // Entity files
                        string applicationsFilePath = Path.Combine(controllerFolderPath, EXTRACT_ENTITY_APPLICATIONS_FILE_NAME);
                        string applicationFilePath = Path.Combine(applicationFolderPath, EXTRACT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string backendsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string backendsDetailFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BACKENDS_DETAIL_FILE_NAME);
                        string businessTransactionsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndPointsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string serviceEndPointsDetailFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_DETAIL_FILE_NAME);
                        string errorsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_FILE_NAME);
                        string informationPointsDetailFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_DETAIL_FILE_NAME);

                        #endregion

                        #region Applications

                        // Only do it once per controller, if processing multiple applications
                        if (File.Exists(applicationsFilePath) != true)
                        {
                            loggerConsole.Info("List of Applications");

                            string applicationsJSON = controllerApi.GetListOfApplications();
                            if (applicationsJSON != String.Empty) FileIOHelper.saveFileToFolder(applicationsJSON, applicationsFilePath);
                        }

                        #endregion

                        #region Application

                        loggerConsole.Info("This Application");

                        string applicationJSON = controllerApi.GetSingleApplication(jobTarget.ApplicationID);
                        if (applicationJSON != String.Empty) FileIOHelper.saveFileToFolder(applicationJSON, applicationFilePath);

                        #endregion

                        #region Tiers

                        loggerConsole.Info("List of Tiers");

                        string tiersJSON = controllerApi.GetListOfTiers(jobTarget.ApplicationID);
                        if (tiersJSON != String.Empty) FileIOHelper.saveFileToFolder(tiersJSON, tiersFilePath);

                        #endregion

                        #region Nodes

                        loggerConsole.Info("List of Nodes");

                        string nodesJSON = controllerApi.GetListOfNodes(jobTarget.ApplicationID);
                        if (nodesJSON != String.Empty) FileIOHelper.saveFileToFolder(nodesJSON, nodesFilePath);

                        #endregion

                        #region Backends

                        loggerConsole.Info("List of Backends");

                        string backendsJSON = controllerApi.GetListOfBackends(jobTarget.ApplicationID);
                        if (backendsJSON != String.Empty) FileIOHelper.saveFileToFolder(backendsJSON, backendsFilePath);

                        controllerApi.PrivateApiLogin();
                        backendsJSON = controllerApi.GetListOfBackendsAdditionalDetail(jobTarget.ApplicationID);
                        if (backendsJSON != String.Empty) FileIOHelper.saveFileToFolder(backendsJSON, backendsDetailFilePath);
                        
                        #endregion

                        #region Business Transactions

                        loggerConsole.Info("List of Business Transactions");

                        string businessTransactionsJSON = controllerApi.GetListOfBusinessTransactions(jobTarget.ApplicationID);
                        if (businessTransactionsJSON != String.Empty) FileIOHelper.saveFileToFolder(businessTransactionsJSON, businessTransactionsFilePath);

                        #endregion

                        #region Service Endpoints

                        loggerConsole.Info("List of Service Endpoints");

                        string serviceEndPointsJSON = controllerApi.GetListOfServiceEndpoints(jobTarget.ApplicationID);
                        if (serviceEndPointsJSON != String.Empty) FileIOHelper.saveFileToFolder(serviceEndPointsJSON, serviceEndPointsFilePath);

                        controllerApi.PrivateApiLogin();
                        serviceEndPointsJSON = controllerApi.GetListOfServiceEndpointsAdditionalDetail(jobTarget.ApplicationID);
                        if (serviceEndPointsJSON != String.Empty) FileIOHelper.saveFileToFolder(serviceEndPointsJSON, serviceEndPointsDetailFilePath);

                        #endregion

                        #region Errors

                        loggerConsole.Info("List of Errors");

                        string errorsJSON = controllerApi.GetListOfErrors(jobTarget.ApplicationID);
                        if (errorsJSON != String.Empty) FileIOHelper.saveFileToFolder(errorsJSON, errorsFilePath);

                        #endregion

                        #region Information Points

                        loggerConsole.Info("List of Information Points");

                        string informationPointsJSON = controllerApi.GetListOfInformationPoints(jobTarget.ApplicationID);
                        if (informationPointsJSON != String.Empty) FileIOHelper.saveFileToFolder(informationPointsJSON, informationPointsFilePath);

                        controllerApi.PrivateApiLogin();
                        informationPointsJSON = controllerApi.GetListOfInformationPointsAdditionalDetail(jobTarget.ApplicationID);
                        if (informationPointsJSON != String.Empty) FileIOHelper.saveFileToFolder(informationPointsJSON, informationPointsDetailFilePath);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractControllerAndApplicationConfiguration(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    stepTimingTarget.NumEntities = 1;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string configFolderPath = Path.Combine(applicationFolderPath, CONFIGURATION_FOLDER_NAME);

                        // Entity files
                        string applicationsFilePath = Path.Combine(controllerFolderPath, EXTRACT_ENTITY_APPLICATIONS_FILE_NAME);
                        string applicationConfigFilePath = Path.Combine(configFolderPath, EXTRACT_CONFIGURATION_APPLICATION_FILE_NAME);
                        string controllerSettingsFilePath = Path.Combine(controllerFolderPath, EXTRACT_CONFIGURATION_CONTROLLER_FILE_NAME);

                        #endregion

                        #region Controller

                        if (File.Exists(controllerSettingsFilePath) != true)
                        {
                            loggerConsole.Info("Controller Settings");

                            string controllerSettingsJSON = controllerApi.GetControllerConfiguration();
                            if (controllerSettingsJSON != String.Empty) FileIOHelper.saveFileToFolder(controllerSettingsJSON, controllerSettingsFilePath);
                        }

                        #endregion

                        #region Application

                        loggerConsole.Info("Application Configuration");

                        // Application configuration
                        string applicationConfigXml = controllerApi.GetApplicationConfiguration(jobTarget.ApplicationID);
                        if (applicationConfigXml != String.Empty) FileIOHelper.saveFileToFolder(applicationConfigXml, applicationConfigFilePath);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractApplicationAndEntityMetrics(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    stepTimingTarget.NumEntities = 8;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string metricsFolderPath = Path.Combine(applicationFolderPath, METRICS_FOLDER_NAME);

                        // Entity files
                        string tiersFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string backendsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndPointsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_ERRORS_FILE_NAME);

                        #endregion

                        #region Application

                        loggerConsole.Info("Extract Metrics for Application ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        string metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            APPLICATION_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_EXCPM_FULLNAME), METRIC_EXCPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_HTTPEPM_FULLNAME), METRIC_HTTPEPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_EXCPM_FULLNAME), METRIC_EXCPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_APPLICATION, METRIC_HTTPEPM_FULLNAME), METRIC_HTTPEPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion

                        #region Tiers

                        loggerConsole.Info("Extract Metrics for Tiers ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            TIERS_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_EXCPM_FULLNAME), METRIC_EXCPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_HTTPEPM_FULLNAME), METRIC_HTTPEPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_EXCPM_FULLNAME), METRIC_EXCPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_TIER, "*", METRIC_HTTPEPM_FULLNAME), METRIC_HTTPEPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion

                        #region Nodes

                        loggerConsole.Info("Extract Metrics for Nodes ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            NODES_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_EXCPM_FULLNAME), METRIC_EXCPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_HTTPEPM_FULLNAME), METRIC_HTTPEPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_EXCPM_FULLNAME), METRIC_EXCPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_NODE, "*", "*", METRIC_HTTPEPM_FULLNAME), METRIC_HTTPEPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion

                        #region Backends

                        loggerConsole.Info("Extract Metrics for Backends ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            BACKENDS_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BACKEND, "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BACKEND, "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BACKEND, "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BACKEND, "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BACKEND, "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BACKEND, "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion

                        #region Business Transactions

                        loggerConsole.Info("Extract Metrics for Business Transactions ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            BUSINESS_TRANSACTIONS_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, "*", "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, "*", "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, "*", "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, "*", "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion

                        #region Service Endpoints

                        loggerConsole.Info("Extract Metrics for Service Endpoints ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            SERVICE_ENDPOINTS_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_SERVICE_ENDPOINT, "*", "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_SERVICE_ENDPOINT, "*", "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_SERVICE_ENDPOINT, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_SERVICE_ENDPOINT, "*", "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_SERVICE_ENDPOINT, "*", "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_SERVICE_ENDPOINT, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion

                        #region Errors

                        loggerConsole.Info("Extract Metrics for Errors ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            ERRORS_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_ERROR, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_ERROR, "*", "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion

                        #region Information Points

                        loggerConsole.Info("Extract Metrics for Information Points ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count + 1);

                        metricsEntityFolderPath = Path.Combine(
                            metricsFolderPath,
                            INFORMATION_POINTS_TYPE_SHORT);

                        if (programOptions.ProcessSequentially == false)
                        {
                            Parallel.Invoke(
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_INFORMATION_POINT, "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_INFORMATION_POINT, "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false),
                                () => getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_INFORMATION_POINT, "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, false)
                            );
                        }
                        else
                        {
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_INFORMATION_POINT, "*", METRIC_ART_FULLNAME), METRIC_ART_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_INFORMATION_POINT, "*", METRIC_CPM_FULLNAME), METRIC_CPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);
                            getMetricDataForMetricForAllRanges(controllerApi, jobTarget, String.Format(METRIC_PATH_INFORMATION_POINT, "*", METRIC_EPM_FULLNAME), METRIC_EPM_FULLNAME, jobConfiguration, metricsEntityFolderPath, true);

                            Console.WriteLine();
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractApplicationAndEntityFlowmaps(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string metricsFolderPath = Path.Combine(applicationFolderPath, METRICS_FOLDER_NAME);

                        // Entity files
                        string tiersFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string backendsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndPointsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);

                        #endregion

                        // Login into private API
                        controllerApi.PrivateApiLogin();

                        #region Prepare time range

                        long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.From);
                        long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.To);
                        long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);

                        #endregion

                        #region Application

                        loggerConsole.Info("Extract Flowmap for Application");

                        stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + 1;

                        extractFlowmapsApplication(jobConfiguration, jobTarget, controllerApi, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes);

                        #endregion

                        #region Tiers

                        List<AppDRESTTier> tiersList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTTier>(tiersFilePath);
                        if (tiersList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Tiers ({0} entities)", tiersList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + tiersList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var tiersListChunks = tiersList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTTier>, int>(
                                    tiersListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (tiersListChunk, loop, subtotal) =>
                                    {
                                        subtotal += extractFlowmapsTiers(jobConfiguration, jobTarget, controllerApi, tiersListChunk, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        numEntities = Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            else
                            {
                                numEntities = extractFlowmapsTiers(jobConfiguration, jobTarget, controllerApi, tiersList, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion

                        #region Nodes

                        List<AppDRESTNode> nodesList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTNode>(nodesFilePath);
                        if (nodesList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Nodes ({0} entities)", nodesList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + nodesList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var nodesListChunks = nodesList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTNode>, int>(
                                    nodesListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (nodesListChunk, loop, subtotal) =>
                                    {
                                        subtotal += extractFlowmapsNodes(jobConfiguration, jobTarget, controllerApi, nodesListChunk, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        numEntities = Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            else
                            {
                                numEntities = extractFlowmapsNodes(jobConfiguration, jobTarget, controllerApi, nodesList, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion

                        #region Backends

                        List<AppDRESTBackend> backendsList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBackend>(backendsFilePath);
                        if (backendsList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Backends ({0} entities)", backendsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + backendsList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var backendsListChunks = backendsList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTBackend>, int>(
                                    backendsListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (backendsListChunk, loop, subtotal) =>
                                    {
                                        subtotal += extractFlowmapsBackends(jobConfiguration, jobTarget, controllerApi, backendsListChunk, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        numEntities = Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            else
                            {
                                numEntities = extractFlowmapsBackends(jobConfiguration, jobTarget, controllerApi, backendsList, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion

                        #region Business Transactions

                        List<AppDRESTBusinessTransaction> businessTransactionsList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBusinessTransaction>(businessTransactionsFilePath);
                        if (businessTransactionsList != null)
                        {
                            loggerConsole.Info("Extract Flowmaps for Business Transactions ({0} entities)", businessTransactionsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + businessTransactionsList.Count;

                            int numEntities = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var businessTransactionsListChunks = businessTransactionsList.BreakListIntoChunks(FLOWMAP_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<AppDRESTBusinessTransaction>, int>(
                                    businessTransactionsListChunks,
                                    new ParallelOptions { MaxDegreeOfParallelism = FLOWMAP_EXTRACT_NUMBER_OF_THREADS },
                                    () => 0,
                                    (businessTransactionsListChunk, loop, subtotal) =>
                                    {
                                        subtotal += extractFlowmapsBusinessTransactions(jobConfiguration, jobTarget, controllerApi, businessTransactionsListChunk, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        numEntities = Interlocked.Add(ref numEntities, finalResult);
                                        Console.Write("[{0}].", numEntities);
                                    }
                                );
                            }
                            {
                                numEntities = extractFlowmapsBusinessTransactions(jobConfiguration, jobTarget, controllerApi, businessTransactionsList, metricsFolderPath, fromTimeUnix, toTimeUnix, differenceInMinutes, true);
                            }

                            loggerConsole.Info("{0} entities", numEntities);
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractEventsAndHealthRuleViolations(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string eventsFolderPath = Path.Combine(applicationFolderPath, EVENTS_FOLDER_NAME);

                        #endregion

                        #region Health Rule violations

                        loggerConsole.Info("Extract List of Health Rule Violations ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count);

                        JArray listOfHealthRuleViolations = new JArray();
                        int totalHealthRuleViolationsFound = 0;
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                            long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);

                            string healthRuleViolationsJSON = controllerApi.GetHealthRuleViolations(jobTarget.ApplicationID, fromTimeUnix, toTimeUnix);
                            if (healthRuleViolationsJSON != String.Empty)
                            {
                                // Load health rule violations
                                JArray healthRuleViolationsInHour = JArray.Parse(healthRuleViolationsJSON);
                                foreach (JObject healthRuleViolation in healthRuleViolationsInHour)
                                {
                                    listOfHealthRuleViolations.Add(healthRuleViolation);
                                }
                                totalHealthRuleViolationsFound = totalHealthRuleViolationsFound + healthRuleViolationsInHour.Count;
                            }
                        }

                        if (listOfHealthRuleViolations.Count > 0)
                        {
                            string healthRuleViolationsFilePath = Path.Combine(
                                eventsFolderPath,
                                String.Format(HEALTH_RULE_VIOLATIONS_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                            FileIOHelper.writeJArrayToFile(listOfHealthRuleViolations, healthRuleViolationsFilePath);

                            logger.Info("{0} health rule violations from {1:o} to {2:o}", listOfHealthRuleViolations.Count, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);
                            loggerConsole.Info("{0} health rule violations", listOfHealthRuleViolations.Count);
                        }

                        #endregion

                        #region Events

                        int numEventsTotal = 0;

                        if (programOptions.ProcessSequentially == false)
                        {
                            loggerConsole.Info("Extract {0} event types ({1} time ranges)", eventTypes.Count, jobConfiguration.Input.HourlyTimeRanges.Count);

                            Parallel.ForEach(
                                eventTypes,
                                new ParallelOptions { MaxDegreeOfParallelism = EVENTS_EXTRACT_NUMBER_OF_THREADS },
                                () => 0,
                                (eventType, loop, subtotal) =>
                                {
                                    int numEventsInType = extractEvents(jobConfiguration, jobTarget, controllerApi, eventsFolderPath, eventType, false);
                                    subtotal = subtotal + numEventsInType;
                                    return subtotal;
                                },
                                (finalResult) =>
                                {
                                    numEventsTotal = Interlocked.Add(ref numEventsTotal, finalResult);
                                    Console.Write("[{0}].", numEventsTotal);
                                }
                            );
                        }
                        else
                        {
                            foreach (string eventType in eventTypes)
                            {
                                int numEventsInType = extractEvents(jobConfiguration, jobTarget, controllerApi, eventsFolderPath, eventType, true);
                                numEventsTotal = numEventsTotal + numEventsInType;
                            }

                        }
                        loggerConsole.Info("{0} events total", numEventsTotal);

                        stepTimingTarget.NumEntities = numEventsTotal;

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepExtractSnapshots(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Set up controller access
                        ControllerApi controllerApi = new ControllerApi(jobTarget.Controller, jobTarget.UserName, AESEncryptionHelper.Decrypt(jobTarget.UserPassword));

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string snapshotsFolderPath = Path.Combine(applicationFolderPath, SNAPSHOTS_FOLDER_NAME);

                        // Entity files
                        string tiersFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string businessTransactionsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);

                        #endregion

                        #region List of Snapshots in time ranges

                        // Login into private API
                        controllerApi.PrivateApiLogin();

                        loggerConsole.Info("Extract List of Snapshots ({0} time ranges)", jobConfiguration.Input.HourlyTimeRanges.Count);

                        // Get list of snapshots in each time range
                        int totalSnapshotsFound = 0;
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            loggerConsole.Info("Extract List of Snapshots from {0:o} to {1:o}", jobTimeRange.From, jobTimeRange.To);

                            string snapshotsFilePath = Path.Combine(snapshotsFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));

                            int differenceInMinutes = (int)(jobTimeRange.To - jobTimeRange.From).TotalMinutes;

                            if (File.Exists(snapshotsFilePath) == false)
                            {
                                JArray listOfSnapshots = new JArray();

                                // Extract snapshot list
                                long serverCursorId = 0;
                                string serverCursorIdType = String.Empty;
                                do
                                {
                                    string snapshotsJSON = String.Empty;
                                    if (serverCursorId == 0)
                                    {

                                        // Extract first page of snapshots
                                        snapshotsJSON = controllerApi.GetListOfSnapshotsFirstPage(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE);
                                    }
                                    else
                                    {
                                        // If there are more snapshots on the server, the server cursor would be non-0 
                                        switch (serverCursorIdType)
                                        {
                                            case "scrollId":
                                                // Sometimes - >4.3.3? the value of scroll is in scrollId, not rsdScrollId
                                                // "serverCursor" : {
                                                //    "scrollId" : 1509543646696
                                                //  }
                                                snapshotsJSON = controllerApi.GetListOfSnapshotsNextPage_Type_scrollId(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE, serverCursorId);

                                                break;

                                            case "rsdScrollId":
                                                // "serverCursor" : {
                                                //    "rsdScrollId" : 1509543646696
                                                //  }
                                                snapshotsJSON = controllerApi.GetListOfSnapshotsNextPage_Type_rsdScrollId(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE, serverCursorId);

                                                break;

                                            case "fetchMoreDataHandle":
                                                // Seen this on 4.2.3.0 Controller. Maybe that's how it used to be?
                                                // "fetchMoreDataHandle":1509626881987
                                                // Can't seem to make it load more than 600 items
                                                snapshotsJSON = controllerApi.GetListOfSnapshotsNextPage_Type_handle(jobTarget.ApplicationID, jobTimeRange.From, jobTimeRange.To, differenceInMinutes, SNAPSHOTS_QUERY_PAGE_SIZE, serverCursorId);

                                                break;

                                            default:
                                                logger.Warn("Unknown type of serverCursorIdType={0}, not going to retrieve any snapshots", serverCursorIdType);

                                                break;
                                        }
                                    }

                                    // Assume we have no more pages
                                    serverCursorId = 0;

                                    // Process retrieved snapshots and check if we actually have more pages
                                    if (snapshotsJSON != String.Empty)
                                    {
                                        Console.Write(".");

                                        // Load snapshots into array
                                        JObject snapshotsParsed = JObject.Parse(snapshotsJSON);
                                        JArray snapshots = (JArray)snapshotsParsed["requestSegmentDataListItems"];
                                        foreach (JObject snapshot in snapshots)
                                        {
                                            listOfSnapshots.Add(snapshot);
                                        }

                                        // Check whether we have more snapshots and if yes, get continuation type and cursor ID
                                        JToken fetchMoreDataHandleObj = snapshotsParsed["fetchMoreDataHandle"];
                                        JToken serverCursorObj = snapshotsParsed["serverCursor"];
                                        if (serverCursorObj != null)
                                        {
                                            JToken scrollIdObj = serverCursorObj["scrollId"];
                                            JToken rsdScrollIdObj = serverCursorObj["rsdScrollId"];

                                            if (scrollIdObj != null)
                                            {
                                                serverCursorIdType = "scrollId";
                                                // Parse the cursor ID 
                                                if (Int64.TryParse(scrollIdObj.ToString(), out serverCursorId) == false)
                                                {
                                                    // Nope, not going to go forward
                                                    serverCursorId = 0;
                                                }
                                            }
                                            else if (rsdScrollIdObj != null)
                                            {
                                                serverCursorIdType = "rsdScrollId";
                                                // Parse the cursor ID 
                                                if (Int64.TryParse(rsdScrollIdObj.ToString(), out serverCursorId) == false)
                                                {
                                                    // Nope, not going to go forward
                                                    serverCursorId = 0;
                                                }
                                            }
                                        }
                                        else if (fetchMoreDataHandleObj != null)
                                        {
                                            serverCursorIdType = "fetchMoreDataHandle";
                                            // Parse the cursor ID 
                                            if (Int64.TryParse(fetchMoreDataHandleObj.ToString(), out serverCursorId) == false)
                                            {
                                                // Nope, not going to go forward
                                                serverCursorId = 0;
                                            }
                                        }
                                        else
                                        {
                                            logger.Warn("Snapshot list retrival call unexpectedly did not have any evidence of continuation CursorId");
                                        }

                                        logger.Info("Retrieved snapshots from Controller {0}, Application {1}, From {2:o}, To {3:o}', number of snapshots {4}, continuation type {5}, continuation CursorId {6}", jobTarget.Controller, jobTarget.Application, jobTimeRange.From, jobTimeRange.To, snapshots.Count, serverCursorIdType, serverCursorId);

                                        // Move to next loop
                                        Console.Write("+{0}", listOfSnapshots.Count);
                                    }
                                }
                                while (serverCursorId > 0);

                                Console.WriteLine();

                                FileIOHelper.writeJArrayToFile(listOfSnapshots, snapshotsFilePath);

                                totalSnapshotsFound = totalSnapshotsFound + listOfSnapshots.Count;

                                logger.Info("{0} snapshots from {1:o} to {2:o}", listOfSnapshots.Count, jobTimeRange.From, jobTimeRange.To);
                                loggerConsole.Info("{0} snapshots from {1:o} to {2:o}", listOfSnapshots.Count, jobTimeRange.From, jobTimeRange.To);
                            }
                        }

                        logger.Info("{0} snapshots in all time ranges", totalSnapshotsFound);
                        loggerConsole.Info("{0} snapshots in all time ranges", totalSnapshotsFound);

                        #endregion

                        #region Individual Snapshots

                        // Extract individual snapshots
                        loggerConsole.Info("Extract Individual Snapshots");

                        // Identify Node.JS tiers that will extact call graph using a different call
                        List<AppDRESTTier> tiersList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTTier>(tiersFilePath);
                        List<AppDRESTTier> tiersNodeJSList = null;
                        if (tiersList != null)
                        {
                            tiersNodeJSList = tiersList.Where(t => t.agentType == "NODEJS_APP_AGENT").ToList();
                        }

                        // Process each hour at a time
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            string snapshotsFilePath = Path.Combine(snapshotsFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
                            JArray listOfSnapshotsInHour = FileIOHelper.loadJArrayFromFile(snapshotsFilePath);
                            if (listOfSnapshotsInHour != null && listOfSnapshotsInHour.Count > 0)
                            {
                                loggerConsole.Info("Extract Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHour.Count);

                                stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + listOfSnapshotsInHour.Count;

                                int numSnapshots = 0;

                                if (programOptions.ProcessSequentially == false)
                                {
                                    var listOfSnapshotsInHourChunks = listOfSnapshotsInHour.BreakListIntoChunks(SNAPSHOTS_EXTRACT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                    Parallel.ForEach<List<JToken>, int>(
                                        listOfSnapshotsInHourChunks,
                                        new ParallelOptions { MaxDegreeOfParallelism = SNAPSHOTS_EXTRACT_NUMBER_OF_THREADS },
                                        () => 0,
                                        (listOfSnapshotsInHourChunk, loop, subtotal) =>
                                        {
                                            subtotal += extractSnapshots(jobConfiguration, jobTarget, controllerApi, listOfSnapshotsInHourChunk, tiersNodeJSList, snapshotsFolderPath, false);
                                            return subtotal;
                                        },
                                        (finalResult) =>
                                        {
                                            numSnapshots = Interlocked.Add(ref numSnapshots, finalResult);
                                            Console.Write("[{0}].", numSnapshots);
                                        }
                                    );
                                }
                                else
                                {
                                    numSnapshots = extractSnapshots(jobConfiguration, jobTarget, controllerApi, listOfSnapshotsInHour.ToList<JToken>(), tiersNodeJSList, snapshotsFolderPath, true);
                                }

                                loggerConsole.Info("{0} snapshots", numSnapshots);
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        #endregion

        #region Indexing steps

        private static bool stepIndexControllersApplicationsAndEntities(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string configFolderPath = Path.Combine(applicationFolderPath, CONFIGURATION_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                        string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);

                        // Entity files
                        string applicationsFilePath = Path.Combine(controllerFolderPath, EXTRACT_ENTITY_APPLICATIONS_FILE_NAME);
                        string applicationConfigFilePath = Path.Combine(configFolderPath, EXTRACT_CONFIGURATION_APPLICATION_FILE_NAME);
                        string tiersFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_TIERS_FILE_NAME);
                        string nodesFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_NODES_FILE_NAME);
                        string businessTransactionsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string backendsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BACKENDS_FILE_NAME);
                        string backendsDetailFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_BACKENDS_DETAIL_FILE_NAME);
                        string serviceEndPointsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string serviceEndPointsDetailFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_SERVICE_ENDPOINTS_DETAIL_FILE_NAME);
                        string errorsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_FILE_NAME);
                        string informationPointsDetailFilePath = Path.Combine(entitiesFolderPath, EXTRACT_ENTITY_INFORMATION_POINTS_DETAIL_FILE_NAME);

                        // Report files
                        string controllerReportFilePath = Path.Combine(controllerFolderPath, CONVERT_ENTITY_CONTROLLER_FILE_NAME);
                        string applicationsReportFilePath = Path.Combine(controllerFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);
                        string applicationReportFilePath = Path.Combine(applicationFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        // Report files for All
                        string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                        string applicationsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);
                        string tiersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        #endregion

                        #region Controller

                        List<AppDRESTApplication> applicationsRESTList = null;

                        loggerConsole.Info("Index List of Controllers");

                        // Create this row 
                        EntityController controller = new EntityController();
                        controller.Controller = jobTarget.Controller;
                        controller.ControllerLink = String.Format(DEEPLINK_CONTROLLER, controller.Controller, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                        controller.UserName = jobTarget.UserName;

                        // Lookup number of applications
                        // Load JSON file from the file system in case we are continuing the step after stopping
                        applicationsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTApplication>(applicationsFilePath);
                        if (applicationsRESTList != null)
                        {
                            controller.NumApps = applicationsRESTList.Count;
                        }

                        // Lookup version
                        // Load the configuration.xml from the child to parse the version
                        XmlDocument configXml = FileIOHelper.loadXmlDocumentFromFile(applicationConfigFilePath);
                        if (configXml != null)
                        {
                            string controllerVersion = configXml.SelectSingleNode("application").Attributes["controller-version"].Value;
                            // The version is in 
                            // <application controller-version="004-002-005-001">
                            string[] controllerVersionArray = controllerVersion.Split('-');
                            int[] controllerVersionArrayNum = new int[controllerVersionArray.Length];
                            for (int j = 0; j < controllerVersionArray.Length; j++)
                            {
                                controllerVersionArrayNum[j] = Convert.ToInt32(controllerVersionArray[j]);
                            }
                            controllerVersion = String.Join(".", controllerVersionArrayNum);
                            controller.Version = controllerVersion;
                        }
                        else
                        {
                            controller.Version = "No config data";
                        }

                        // Output single controller report CSV
                        List<EntityController> controllerList = new List<EntityController>(1);
                        controllerList.Add(controller);

                        if (File.Exists(controllerReportFilePath) == false)
                        {
                            FileIOHelper.writeListToCSVFile(controllerList, new ControllerEntityReportMap(), controllerReportFilePath);
                        }

                        #endregion

                        #region Nodes

                        List<AppDRESTNode> nodesRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTNode>(nodesFilePath);
                        List<EntityNode> nodesList = null;
                        if (nodesRESTList != null)
                        {
                            loggerConsole.Info("Index List of Nodes ({0} entities)", nodesRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + nodesRESTList.Count;

                            nodesList = new List<EntityNode>(nodesRESTList.Count);

                            foreach (AppDRESTNode node in nodesRESTList)
                            {
                                EntityNode nodeRow = new EntityNode();
                                nodeRow.NodeID = node.id;
                                nodeRow.AgentPresent = node.appAgentPresent;
                                nodeRow.AgentType = node.agentType;
                                nodeRow.AgentVersion = node.appAgentVersion;
                                nodeRow.ApplicationName = jobTarget.Application;
                                nodeRow.ApplicationID = jobTarget.ApplicationID;
                                nodeRow.Controller = jobTarget.Controller;
                                nodeRow.MachineAgentPresent = node.machineAgentPresent;
                                nodeRow.MachineAgentVersion = node.machineAgentVersion;
                                nodeRow.MachineID = node.machineId;
                                nodeRow.MachineName = node.machineName;
                                nodeRow.MachineOSType = node.machineOSType;
                                nodeRow.NodeName = node.name;
                                nodeRow.TierID = node.tierId;
                                nodeRow.TierName = node.tierName;
                                nodeRow.MachineType = node.type;
                                if (nodeRow.AgentVersion != String.Empty)
                                {
                                    // Java agent looks like that
                                    //Server Agent v4.2.3.2 GA #12153 r13c5eb6a7acbfea4d6da465a3ae47412715e26fa 59-4.2.3.next-build
                                    //Server Agent v3.7.16.0 GA #2014-02-26_21-19-08 raf61d5f54753290c983f95173e74e6865f6ad123 130-3.7.16
                                    //Server Agent v4.2.7.1 GA #13005 rc04adaef4741dbb8f2e7c206bdb2a6614046798a 11-4.2.7.next-analytics
                                    //Server Agent v4.0.6.0 GA #2015-05-11_20-44-33 r7cb8945756a0779766bf1b4c32e49a96da7b8cfe 10-4.0.6.next
                                    //Server Agent v3.8.3.0 GA #2014-06-06_17-06-05 r34b2744775df248f79ffb2da2b4515b1f629aeb5 7-3.8.3.next
                                    //Server Agent v3.9.3.0 GA #2014-09-23_22-14-15 r05918cd8a4a8a63504a34f0f1c85511e207049b3 20-3.9.3.next
                                    //Server Agent v4.1.7.1 GA #9949 ra4a2721d52322207b626e8d4c88855c846741b3d 18-4.1.7.next-build
                                    //Server Agent v3.7.11.1 GA #2013-10-23_17-07-44 r41149afdb8ce39025051c25382b1cf77e2a7fed0 21
                                    //Server Agent v4.1.8.5 GA #10236 r8eca32e4695e8f6a5902d34a66bfc12da1e12241 45-4.1.8.next-controller

                                    // Apache agent looks like this
                                    // Proxy v4.2.5.1 GA SHA-1:.ad6c804882f518b3350f422489866ea2008cd664 #13146 35-4.2.5.next-build

                                    Regex regexVersion = new Regex(@"(?i).*v(\d*\.\d*\.\d*\.\d*).*", RegexOptions.IgnoreCase);
                                    Match match = regexVersion.Match(nodeRow.AgentVersion);
                                    if (match != null)
                                    {
                                        if (match.Groups.Count > 1)
                                        {
                                            nodeRow.AgentVersionRaw = nodeRow.AgentVersion;
                                            nodeRow.AgentVersion = match.Groups[1].Value;
                                        }
                                    }
                                }
                                if (nodeRow.MachineAgentVersion != String.Empty)
                                {
                                    // Machine agent looks like that 
                                    //Machine Agent v4.2.3.2 GA Build Date 2016 - 07 - 11 10:26:01
                                    //Machine Agent v3.7.16.0 GA Build Date 2014 - 02 - 26 21:20:29
                                    //Machine Agent v4.2.3.2 GA Build Date 2016 - 07 - 11 10:17:54
                                    //Machine Agent v4.0.6.0 GA Build Date 2015 - 05 - 11 20:56:44
                                    //Machine Agent v3.8.3.0 GA Build Date 2014 - 06 - 06 17:09:13
                                    //Machine Agent v4.1.7.1 GA Build Date 2015 - 11 - 24 20:49:24

                                    Regex regexVersion = new Regex(@"(?i).*Machine Agent.*v(\d*\.\d*\.\d*\.\d*).*", RegexOptions.IgnoreCase);
                                    Match match = regexVersion.Match(nodeRow.MachineAgentVersion);
                                    if (match != null)
                                    {
                                        if (match.Groups.Count > 1)
                                        {
                                            nodeRow.MachineAgentVersionRaw = nodeRow.MachineAgentVersion;
                                            nodeRow.MachineAgentVersion = match.Groups[1].Value;
                                        }
                                    }
                                }

                                updateEntityWithDeeplinks(nodeRow);

                                nodesList.Add(nodeRow);
                            }

                            // Sort them
                            nodesList = nodesList.OrderBy(o => o.TierName).ThenBy(o => o.NodeName).ToList();

                            updateEntitiesWithReportDetailLinksNodes(programOptions, jobConfiguration, jobTarget, nodesList);

                            FileIOHelper.writeListToCSVFile(nodesList, new NodeEntityReportMap(), nodesReportFilePath);
                        }

                        #endregion

                        #region Backends

                        List<AppDRESTBackend> backendsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBackend>(backendsFilePath);
                        List<AppDRESTTier> tiersRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTTier>(tiersFilePath);
                        List<EntityBackend> backendsList = null;
                        if (backendsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Backends ({0} entities)", backendsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + backendsRESTList.Count;

                            backendsList = new List<EntityBackend>(backendsRESTList.Count);

                            JObject backendsDetailsContainer = FileIOHelper.loadJObjectFromFile(backendsDetailFilePath);
                            JArray backendsDetails = null;
                            if (backendsDetailsContainer != null)
                            {
                                backendsDetails = (JArray)backendsDetailsContainer["backendListEntries"];
                            }

                            foreach (AppDRESTBackend backend in backendsRESTList)
                            {
                                EntityBackend backendRow = new EntityBackend();
                                backendRow.ApplicationName = jobTarget.Application;
                                backendRow.ApplicationID = jobTarget.ApplicationID;
                                backendRow.BackendID = backend.id;
                                backendRow.BackendName = backend.name;
                                backendRow.BackendType = backend.exitPointType;
                                backendRow.Controller = jobTarget.Controller;
                                backendRow.NodeID = backend.applicationComponentNodeId;
                                if (backendRow.NodeID > 0)
                                {
                                    // Look it up
                                    AppDRESTNode node = nodesRESTList.Where<AppDRESTNode>(n => n.id == backendRow.NodeID).FirstOrDefault();
                                    if (node != null) backendRow.NodeName = node.name;
                                }
                                backendRow.NumProps = backend.properties.Count;
                                if (backend.properties.Count >= 1)
                                {
                                    backendRow.Prop1Name = backend.properties[0].name;
                                    backendRow.Prop1Value = backend.properties[0].value;
                                }
                                if (backend.properties.Count >= 2)
                                {
                                    backendRow.Prop2Name = backend.properties[1].name;
                                    backendRow.Prop2Value = backend.properties[1].value;
                                }
                                if (backend.properties.Count >= 3)
                                {
                                    backendRow.Prop3Name = backend.properties[2].name;
                                    backendRow.Prop3Value = backend.properties[2].value;
                                }
                                if (backend.properties.Count >= 4)
                                {
                                    backendRow.Prop4Name = backend.properties[3].name;
                                    backendRow.Prop4Value = backend.properties[3].value;
                                }
                                if (backend.properties.Count >= 5)
                                {
                                    backendRow.Prop5Name = backend.properties[4].name;
                                    backendRow.Prop5Value = backend.properties[4].value;
                                }
                                if (backend.properties.Count >= 6)
                                {
                                    backendRow.Prop6Name = backend.properties[5].name;
                                    backendRow.Prop6Value = backend.properties[5].value;
                                }
                                if (backend.properties.Count >= 7)
                                {
                                    backendRow.Prop7Name = backend.properties[6].name;
                                    backendRow.Prop7Value = backend.properties[6].value;
                                }
                                backendRow.TierID = backend.tierId;
                                if (backendRow.TierID > 0)
                                {
                                    // Look it up
                                    AppDRESTTier tier = tiersRESTList.Where<AppDRESTTier>(t => t.id == backendRow.TierID).FirstOrDefault();
                                    if (tier != null) backendRow.TierName = tier.name;
                                }

                                // Look up the type in the callInfo\metaInfo
                                if (backendsDetails != null)
                                {
                                    JObject backendDetail = (JObject)backendsDetails.Where(b => (long)b["id"] == backendRow.BackendID).FirstOrDefault();
                                    if (backendDetail != null)
                                    {
                                        JArray metaInfoArray = (JArray)backendDetail["callInfo"]["metaInfo"];
                                        JToken metaInfoExitPoint = metaInfoArray.Where(m => m["name"].ToString() == "exit-point-type").FirstOrDefault();
                                        if (metaInfoExitPoint != null)
                                        {
                                            string betterBackendType = metaInfoExitPoint["value"].ToString();
                                            if (betterBackendType != backendRow.BackendType)
                                            {
                                                backendRow.BackendType = betterBackendType;
                                            }
                                        }
                                    }
                                }

                                updateEntityWithDeeplinks(backendRow);

                                backendsList.Add(backendRow);
                            }
                            // Sort them
                            backendsList = backendsList.OrderBy(o => o.BackendType).ThenBy(o => o.BackendName).ToList();

                            updateEntitiesWithReportDetailLinksBackends(programOptions, jobConfiguration, jobTarget, backendsList);

                            FileIOHelper.writeListToCSVFile(backendsList, new BackendEntityReportMap(), backendsReportFilePath);
                        }

                        #endregion

                        #region Business Transactions

                        List<AppDRESTBusinessTransaction> businessTransactionsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTBusinessTransaction>(businessTransactionsFilePath);
                        List<EntityBusinessTransaction> businessTransactionList = null;
                        if (businessTransactionsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Business Transactions ({0} entities)", businessTransactionsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + businessTransactionsRESTList.Count;

                            businessTransactionList = new List<EntityBusinessTransaction>(businessTransactionsRESTList.Count);

                            foreach (AppDRESTBusinessTransaction businessTransaction in businessTransactionsRESTList)
                            {
                                EntityBusinessTransaction businessTransactionRow = new EntityBusinessTransaction();
                                businessTransactionRow.ApplicationID = jobTarget.ApplicationID;
                                businessTransactionRow.ApplicationName = jobTarget.Application;
                                businessTransactionRow.BTID = businessTransaction.id;
                                businessTransactionRow.BTName = businessTransaction.name;
                                businessTransactionRow.BTNameOriginal = businessTransaction.internalName;
                                businessTransactionRow.IsRenamed = !(businessTransaction.name == businessTransaction.internalName);
                                if (businessTransactionRow.BTName == "_APPDYNAMICS_DEFAULT_TX_")
                                {
                                    businessTransactionRow.BTType = "OVERFLOW";
                                }
                                else
                                {
                                    businessTransactionRow.BTType = businessTransaction.entryPointType;
                                }
                                businessTransactionRow.Controller = jobTarget.Controller;
                                businessTransactionRow.TierID = businessTransaction.tierId;
                                businessTransactionRow.TierName = businessTransaction.tierName;

                                updateEntityWithDeeplinks(businessTransactionRow);

                                businessTransactionList.Add(businessTransactionRow);
                            }

                            // Sort them
                            businessTransactionList = businessTransactionList.OrderBy(o => o.TierName).ThenBy(o => o.BTName).ToList();

                            updateEntitiesWithReportDetailLinksBusinessTransactions(programOptions, jobConfiguration, jobTarget, businessTransactionList);

                            FileIOHelper.writeListToCSVFile(businessTransactionList, new BusinessTransactionEntityReportMap(), businessTransactionsReportFilePath);
                        }

                        #endregion

                        #region Service Endpoints

                        List<AppDRESTMetric> serviceEndpointsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(serviceEndPointsFilePath);
                        List<EntityServiceEndpoint> serviceEndpointsList = null;
                        if (serviceEndpointsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Service Endpoints ({0} entities)", serviceEndpointsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + serviceEndpointsRESTList.Count;

                            serviceEndpointsList = new List<EntityServiceEndpoint>(serviceEndpointsRESTList.Count);

                            JObject serviceEndpointsDetailsContainer = FileIOHelper.loadJObjectFromFile(serviceEndPointsDetailFilePath);
                            JArray serviceEndpointsDetails = null;
                            if (serviceEndpointsDetailsContainer != null)
                            {
                                serviceEndpointsDetails = (JArray)serviceEndpointsDetailsContainer["serviceEndpointListEntries"];
                            }

                            foreach (AppDRESTMetric serviceEndpoint in serviceEndpointsRESTList)
                            {
                                EntityServiceEndpoint serviceEndpointRow = new EntityServiceEndpoint();
                                serviceEndpointRow.ApplicationID = jobTarget.ApplicationID;
                                serviceEndpointRow.ApplicationName = jobTarget.Application;
                                serviceEndpointRow.Controller = jobTarget.Controller;

                                // metricName
                                // BTM|Application Diagnostic Data|SEP:4855|Calls per Minute
                                //                                     ^^^^
                                //                                     ID
                                serviceEndpointRow.SEPID = Convert.ToInt32(serviceEndpoint.metricName.Split('|')[2].Split(':')[1]);

                                // metricPath
                                // Service Endpoints|ECommerce-Services|/appdynamicspilot/rest|Calls per Minute
                                //                                      ^^^^^^^^^^^^^^^^^^^^^^
                                //                                      SEP Name
                                serviceEndpointRow.SEPName = serviceEndpoint.metricPath.Split('|')[2];

                                serviceEndpointRow.TierName = serviceEndpoint.metricPath.Split('|')[1];
                                if (tiersRESTList != null)
                                {
                                    // metricPath
                                    // Service Endpoints|ECommerce-Services|/appdynamicspilot/rest|Calls per Minute
                                    //                   ^^^^^^^^^^^^^^^^^^
                                    //                   Tier
                                    AppDRESTTier tierForThisEntity = tiersRESTList.Where(tier => tier.name == serviceEndpointRow.TierName).FirstOrDefault();
                                    if (tierForThisEntity != null)
                                    {
                                        serviceEndpointRow.TierID = tierForThisEntity.id;
                                    }
                                }

                                JObject serviceEndpointDetail = (JObject)serviceEndpointsDetails.Where(s => (long)s["id"] == serviceEndpointRow.SEPID).FirstOrDefault();
                                if (serviceEndpointDetail != null)
                                {
                                    serviceEndpointRow.SEPType = serviceEndpointDetail["type"].ToString();
                                }

                                updateEntityWithDeeplinks(serviceEndpointRow);

                                serviceEndpointsList.Add(serviceEndpointRow);
                            }

                            // Sort them
                            serviceEndpointsList = serviceEndpointsList.OrderBy(o => o.TierName).ThenBy(o => o.SEPName).ToList();

                            updateEntitiesWithReportDetailLinksServiceEndpoints(programOptions, jobConfiguration, jobTarget, serviceEndpointsList);

                            FileIOHelper.writeListToCSVFile(serviceEndpointsList, new ServiceEndpointEntityReportMap(), serviceEndpointsReportFilePath);
                        }

                        #endregion

                        #region Errors

                        List<AppDRESTMetric> errorsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(errorsFilePath);
                        List<EntityError> errorList = null;
                        if (errorsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Errors ({0} entities)", errorsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + errorsRESTList.Count;

                            errorList = new List<EntityError>(errorsRESTList.Count);

                            foreach (AppDRESTMetric error in errorsRESTList)
                            {
                                EntityError errorRow = new EntityError();
                                errorRow.ApplicationID = jobTarget.ApplicationID;
                                errorRow.ApplicationName = jobTarget.Application;
                                errorRow.Controller = jobTarget.Controller;

                                // metricName
                                // BTM|Application Diagnostic Data|Error:11626|Errors per Minute
                                //                                       ^^^^^
                                //                                       ID
                                errorRow.ErrorID = Convert.ToInt32(error.metricName.Split('|')[2].Split(':')[1]);

                                // metricPath
                                // Errors|ECommerce-Services|CommunicationsException : EOFException|Errors per Minute
                                //                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                //                           Error Name
                                errorRow.ErrorName = error.metricPath.Split('|')[2];

                                errorRow.ErrorType = "Error";
                                // Do some analysis of the error type based on their name
                                if (errorRow.ErrorName.IndexOf("exception", 0, StringComparison.OrdinalIgnoreCase) >= 0)
                                {
                                    errorRow.ErrorType = "Exception";
                                }
                                // For things like 
                                // CommunicationException : IOException : CommunicationException : SocketException
                                // ServletException : RollbackException : DatabaseException : SQLNestedException : NoSuchElementException
                                string[] errorTokens = errorRow.ErrorName.Split(':');
                                for (int j = 0; j < errorTokens.Length; j++)
                                {
                                    errorTokens[j] = errorTokens[j].Trim();
                                }
                                if (errorTokens.Length >= 1)
                                {
                                    errorRow.ErrorLevel1 = errorTokens[0];
                                }
                                if (errorTokens.Length >= 2)
                                {
                                    errorRow.ErrorLevel2 = errorTokens[1];
                                }
                                if (errorTokens.Length >= 3)
                                {
                                    errorRow.ErrorLevel3 = errorTokens[2];
                                }
                                if (errorTokens.Length >= 4)
                                {
                                    errorRow.ErrorLevel4 = errorTokens[3];
                                }
                                if (errorTokens.Length >= 5)
                                {
                                    errorRow.ErrorLevel5 = errorTokens[4];
                                }
                                errorRow.ErrorDepth = errorTokens.Length;

                                // Check if last thing is a 3 digit number, then cast it and see what comes out
                                if (errorTokens[errorTokens.Length - 1].Length == 3)
                                {
                                    int httpCode = -1;
                                    if (Int32.TryParse(errorTokens[errorTokens.Length - 1], out httpCode) == true)
                                    {
                                        // Hmm, likely to be a HTTP code
                                        errorRow.ErrorType = "HTTP";
                                        errorRow.HttpCode = httpCode;
                                    }
                                }

                                errorRow.TierName = error.metricPath.Split('|')[1];
                                if (tiersRESTList != null)
                                {
                                    // metricPath
                                    // Errors|ECommerce-Services|CommunicationsException : EOFException|Errors per Minute
                                    //        ^^^^^^^^^^^^^^^^^^
                                    //        Tier
                                    AppDRESTTier tierForThisEntity = tiersRESTList.Where(tier => tier.name == errorRow.TierName).FirstOrDefault();
                                    if (tierForThisEntity != null)
                                    {
                                        errorRow.TierID = tierForThisEntity.id;
                                    }
                                }

                                updateEntityWithDeeplinks(errorRow);

                                errorList.Add(errorRow);
                            }

                            // Sort them
                            errorList = errorList.OrderBy(o => o.TierName).ThenBy(o => o.ErrorName).ToList();

                            updateEntitiesWithReportDetailLinksErrors(programOptions, jobConfiguration, jobTarget, errorList);

                            FileIOHelper.writeListToCSVFile(errorList, new ErrorEntityReportMap(), errorsReportFilePath);
                        }

                        #endregion

                        #region Information Points

                        List<AppDRESTMetric> informationPointsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(informationPointsFilePath);
                        List<EntityInformationPoint> informationPointsList = null;
                        if (informationPointsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Information points ({0} entities)", informationPointsRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + informationPointsRESTList.Count;

                            informationPointsList = new List<EntityInformationPoint>(informationPointsRESTList.Count);

                            JObject informationPointsDetailsContainer = FileIOHelper.loadJObjectFromFile(informationPointsDetailFilePath);
                            JArray informationPointsDetails = null;
                            if (informationPointsDetailsContainer != null)
                            {
                                informationPointsDetails = (JArray)informationPointsDetailsContainer["informationPointsListViewEntries"];
                            }

                            foreach (AppDRESTMetric informationPoint in informationPointsRESTList)
                            {
                                EntityInformationPoint informationPointRow = new EntityInformationPoint();
                                informationPointRow.ApplicationID = jobTarget.ApplicationID;
                                informationPointRow.ApplicationName = jobTarget.Application;
                                informationPointRow.Controller = jobTarget.Controller;

                                if (informationPoint.metricName == "METRIC DATA NOT FOUND")
                                {
                                    informationPointRow.IPID = -1;
                                }
                                else
                                {
                                    // metricName
                                    // BTM|IPs|IP:5|Calls per Minute
                                    //            ^
                                    //            ID

                                    informationPointRow.IPID = Convert.ToInt32(informationPoint.metricName.Split('|')[2].Split(':')[1]);
                                }

                                // metricPath
                                // Information Points|Delete Cart|Calls per Minute
                                //                    ^^^^^^^^^^^
                                //                    IP Name
                                informationPointRow.IPName = informationPoint.metricPath.Split('|')[1];

                                if (informationPointRow.IPID != -1)
                                {
                                    JObject informationPointDetail = (JObject)informationPointsDetails.Where(e => (long)e["id"] == informationPointRow.IPID).FirstOrDefault();
                                    if (informationPointDetail != null)
                                    {
                                        informationPointRow.IPType = informationPointDetail["agentType"].ToString();
                                    }
                                }
                                else
                                {
                                    JObject informationPointDetail = (JObject)informationPointsDetails.Where(e => (string)e["name"] == informationPointRow.IPName).FirstOrDefault();
                                    if (informationPointDetail != null)
                                    {
                                        informationPointRow.IPType = informationPointDetail["agentType"].ToString();
                                        informationPointRow.IPID = (long)informationPointDetail["id"];
                                    }
                                }

                                updateEntityWithDeeplinks(informationPointRow);

                                informationPointsList.Add(informationPointRow);
                            }

                            // Sort them
                            informationPointsList = informationPointsList.OrderBy(o => o.IPName).ToList();

                            updateEntitiesWithReportDetailLinksInformationPoints(programOptions, jobConfiguration, jobTarget, informationPointsList);

                            FileIOHelper.writeListToCSVFile(informationPointsList, new InformationPointEntityReportMap(), informationPointsReportFilePath);
                        }

                        #endregion

                        #region Tiers

                        List<EntityTier> tiersList = null;
                        if (tiersRESTList != null)
                        {
                            loggerConsole.Info("Index List of Tiers ({0} entities)", tiersRESTList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + tiersRESTList.Count;

                            tiersList = new List<EntityTier>(tiersRESTList.Count);

                            foreach (AppDRESTTier tier in tiersRESTList)
                            {
                                EntityTier tierRow = new EntityTier();
                                tierRow.AgentType = tier.agentType;
                                tierRow.ApplicationID = jobTarget.ApplicationID;
                                tierRow.ApplicationName = jobTarget.Application;
                                tierRow.Description = tier.description;
                                tierRow.Controller = jobTarget.Controller;
                                tierRow.TierID = tier.id;
                                tierRow.TierName = tier.name;
                                tierRow.TierType = tier.type;
                                tierRow.NumNodes = tier.numberOfNodes;
                                if (businessTransactionsRESTList != null)
                                {
                                    tierRow.NumBTs = businessTransactionsRESTList.Where<AppDRESTBusinessTransaction>(b => b.tierId == tierRow.TierID).Count();
                                }
                                if (serviceEndpointsList != null)
                                {
                                    tierRow.NumSEPs = serviceEndpointsList.Where<EntityServiceEndpoint>(s => s.TierID == tierRow.TierID).Count();
                                }
                                if (errorList != null)
                                {
                                    tierRow.NumErrors = errorList.Where<EntityError>(s => s.TierID == tierRow.TierID).Count();
                                }

                                updateEntityWithDeeplinks(tierRow);

                                tiersList.Add(tierRow);
                            }

                            // Sort them
                            tiersList = tiersList.OrderBy(o => o.TierName).ToList();

                            updateEntitiesWithReportDetailLinksTiers(programOptions, jobConfiguration, jobTarget, tiersList);

                            FileIOHelper.writeListToCSVFile(tiersList, new TierEntityReportMap(), tiersReportFilePath);
                        }

                        #endregion

                        #region Application

                        if (applicationsRESTList != null)
                        {
                            loggerConsole.Info("Index List of Applications");

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + 1;

                            List<EntityApplication> applicationsList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationsReportFilePath, new ApplicationEntityReportMap());

                            if (applicationsList == null || applicationsList.Count == 0)
                            {
                                // First time, let's output these rows
                                applicationsList = new List<EntityApplication>(applicationsRESTList.Count);
                                foreach (AppDRESTApplication application in applicationsRESTList)
                                {
                                    EntityApplication applicationsRow = new EntityApplication();
                                    applicationsRow.ApplicationName = application.name;
                                    applicationsRow.Description = application.description;
                                    applicationsRow.ApplicationID = application.id;
                                    applicationsRow.Controller = jobTarget.Controller;

                                    updateEntityWithDeeplinks(applicationsRow);

                                    applicationsList.Add(applicationsRow);
                                }
                            }

                            // Update counts of entities for this application row
                            EntityApplication applicationRow = applicationsList.Where(a => a.ApplicationID == jobTarget.ApplicationID).FirstOrDefault();
                            if (applicationRow != null)
                            {
                                if (tiersList != null) applicationRow.NumTiers = tiersList.Count;
                                if (nodesList != null) applicationRow.NumNodes = nodesList.Count;
                                if (backendsList != null) applicationRow.NumBackends = backendsList.Count;
                                if (businessTransactionList != null) applicationRow.NumBTs = businessTransactionList.Count;
                                if (serviceEndpointsList != null) applicationRow.NumSEPs = serviceEndpointsList.Count;
                                if (errorList != null) applicationRow.NumErrors = errorList.Count;
                                if (informationPointsList != null) applicationRow.NumIPs = informationPointsList.Count;

                                List<EntityApplication> applicationRows = new List<EntityApplication>(1);
                                applicationRows.Add(applicationRow);

                                // Write just this row for this application
                                FileIOHelper.writeListToCSVFile(applicationRows, new ApplicationEntityReportMap(), applicationReportFilePath);
                            }

                            // Sort them
                            applicationsList = applicationsList.OrderBy(o => o.Controller).ThenBy(o => o.ApplicationName).ToList();

                            updateEntitiesWithReportDetailLinksApplication(programOptions, jobConfiguration, jobTarget, applicationsList);

                            FileIOHelper.writeListToCSVFile(applicationsList, new ApplicationEntityReportMap(), applicationsReportFilePath);
                        }

                        #endregion

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(entitiesAllFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(entitiesAllFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(tiersAllReportFilePath, tiersReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(nodesAllReportFilePath, nodesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendsAllReportFilePath, backendsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionsAllReportFilePath, businessTransactionsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(serviceEndpointsAllReportFilePath, serviceEndpointsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(errorsAllReportFilePath, errorsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(informationPointsAllReportFilePath, informationPointsReportFilePath);

                        // If it is the last one, let's append all Applications
                        if (i == jobConfiguration.Target.Count - 1)
                        {
                            var controllers = jobConfiguration.Target.GroupBy(t => t.Controller);
                            foreach (var controllerGroup in controllers)
                            {
                                controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(controllerGroup.Key).Host));

                                controllerReportFilePath = Path.Combine(controllerFolderPath, CONVERT_ENTITY_CONTROLLER_FILE_NAME);
                                applicationsReportFilePath = Path.Combine(controllerFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);

                                FileIOHelper.appendTwoCSVFiles(applicationsAllReportFilePath, applicationsReportFilePath);
                                FileIOHelper.appendTwoCSVFiles(controllersAllReportFilePath, controllerReportFilePath);
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexControllerAndApplicationConfiguration(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                List<string> listOfControllersAlreadyProcessed = new List<string>(jobConfiguration.Target.Count);

                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    stepTimingTarget.NumEntities = 1;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string configFolderPath = Path.Combine(applicationFolderPath, CONFIGURATION_FOLDER_NAME);
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                        string configAllFolderPath = Path.Combine(reportFolderPath, CONFIGURATION_FOLDER_NAME);

                        // Entity files
                        string controllerSettingsFilePath = Path.Combine(controllerFolderPath, EXTRACT_CONFIGURATION_CONTROLLER_FILE_NAME);
                        string applicationConfigFilePath = Path.Combine(configFolderPath, EXTRACT_CONFIGURATION_APPLICATION_FILE_NAME);

                        // Report files from previous report
                        string tiersReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);

                        // Report files
                        string controllerSettingsReportFilePath = Path.Combine(controllerFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                        string applicationConfigurationReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_FILE_NAME);
                        string businessTransactionDiscoveryRulesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME);
                        string businessTransactionEntryRulesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME);

                        string businessTransactionEntryScopesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME);
                        string businessTransactionDiscoveryRules20ReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME);
                        string businessTransactionEntryRules20ReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME);

                        string backendDiscoveryRulesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME);
                        string customExitRulesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME);
                        string informationPointRulesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME);
                        string agentConfigurationPropertiesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME);
                        string methodInvocationDataCollectorsReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                        string httpDataCollectorsReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME);
                        string entityTierConfigurationsReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME);
                        string entityBusinessTransactionConfigurationsReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string agentCallGraphSettingsReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME);
                        string healthRulesReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME);

                        // Report files for All
                        string controllerSettingsAllReportFilePath = Path.Combine(configAllFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                        string applicationConfigurationAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_FILE_NAME);
                        string businessTransactionDiscoveryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME);
                        string businessTransactionEntryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME);
                        string businessTransactionEntryScopesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME);
                        string businessTransactionDiscoveryRules20AllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME);
                        string businessTransactionEntryRules20AllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME);
                        string backendDiscoveryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME);
                        string customExitRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME);
                        string informationPointRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME);
                        string agentConfigurationPropertiesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME);
                        string methodInvocationDataCollectorsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                        string httpDataCollectorsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME);
                        string entityTierConfigurationsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME);
                        string entityBusinessTransactionConfigurationsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string agentCallGraphSettingsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME);
                        string healthRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME);

                        #endregion

                        #region Controller Settings

                        // Only output this once per controller
                        if (listOfControllersAlreadyProcessed.Contains(jobTarget.Controller) == false)
                        {
                            listOfControllersAlreadyProcessed.Add(jobTarget.Controller);

                            loggerConsole.Info("Controller Settings");

                            List<ControllerSetting> controllerSettingsList = new List<ControllerSetting>();
                            List<AppDRESTControllerSetting> controllerSettingsRESTList = FileIOHelper.loadListOfObjectsFromFile<AppDRESTControllerSetting>(controllerSettingsFilePath);
                            if (controllerSettingsRESTList != null)
                            {
                                foreach (AppDRESTControllerSetting controllerSetting in controllerSettingsRESTList)
                                {
                                    ControllerSetting controllerSettingRow = new ControllerSetting();

                                    controllerSettingRow.Controller = jobTarget.Controller;
                                    controllerSettingRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, controllerSettingRow.Controller, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                                    controllerSettingRow.Name = controllerSetting.name;
                                    controllerSettingRow.Description = controllerSetting.description;
                                    controllerSettingRow.Value = controllerSetting.value;
                                    controllerSettingRow.Updateable = controllerSetting.updateable;
                                    controllerSettingRow.Scope = controllerSetting.scope;

                                    controllerSettingsList.Add(controllerSettingRow);
                                }
                            }

                            controllerSettingsList = controllerSettingsList.OrderBy(c => c.Name).ToList();
                            FileIOHelper.writeListToCSVFile(controllerSettingsList, new ControllerSettingReportMap(), controllerSettingsReportFilePath);
                        }

                        #endregion

                        #region Preload list of detected entities

                        // For later cross-reference
                        List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersReportFilePath, new TierEntityReportMap());
                        List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsReportFilePath, new BackendEntityReportMap());
                        List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsReportFilePath, new BusinessTransactionEntityReportMap());

                        #endregion

                        #region Application Summary

                        loggerConsole.Info("Load Configuration file");

                        XmlDocument configXml = FileIOHelper.loadXmlDocumentFromFile(applicationConfigFilePath);
                        if (configXml == null)
                        {
                            logger.Warn("No application configuration in {0} file", applicationConfigFilePath);
                            continue;
                        }

                        EntityApplicationConfiguration applicationConfiguration = new EntityApplicationConfiguration();
                        applicationConfiguration.Controller = jobTarget.Controller;
                        applicationConfiguration.ControllerLink = String.Format(DEEPLINK_CONTROLLER, applicationConfiguration.Controller, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                        applicationConfiguration.ApplicationName = configXml.SelectSingleNode("application/name").InnerText;
                        applicationConfiguration.ApplicationID = jobTarget.ApplicationID;
                        applicationConfiguration.ApplicationLink = String.Format(DEEPLINK_APPLICATION, applicationConfiguration.Controller, applicationConfiguration.ApplicationID, DEEPLINK_TIMERANGE_LAST_15_MINUTES);
                        applicationConfiguration.ApplicationDescription = configXml.SelectSingleNode("application/description").InnerText;

                        XmlAttribute mdsEnabledAttribute = configXml.SelectSingleNode("application").Attributes["mds-config-enabled"];
                        if (mdsEnabledAttribute != null)
                        {
                            applicationConfiguration.IsBT20ConfigEnabled = Convert.ToBoolean(mdsEnabledAttribute.Value);
                        }

                        if (configXml.SelectSingleNode("application/configuration/application-instrumentation-level").InnerText != "PRODUCTION")
                        {
                            applicationConfiguration.IsDeveloperModeEnabled = true;
                        }

                        applicationConfiguration.SnapshotEvalInterval = getIntegerValueFromXmlNode(configXml.SelectSingleNode("application/configuration/snapshot-evaluation-interval"));
                        applicationConfiguration.SnapshotQuietTime = getIntegerValueFromXmlNode(configXml.SelectSingleNode("application/configuration/snapshot-quiet-time-post-sla-failure"));
                        applicationConfiguration.IsHREngineEnabled = getBoolValueFromXmlNode(configXml.SelectSingleNode("application/configuration/policy-engine-enabled"));
                        applicationConfiguration.IsBTLockdownEnabled = getBoolValueFromXmlNode(configXml.SelectSingleNode("application/configuration/bt-discovery-locked"));
                        applicationConfiguration.IsAsyncSupported = getBoolValueFromXmlNode(configXml.SelectSingleNode("application/configuration/async-activity-supported"));

                        applicationConfiguration.BTSLAConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/sla"));
                        applicationConfiguration.BTSnapshotCollectionConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/business-transaction-config/snapshot-collection-policy"));
                        applicationConfiguration.BTRequestThresholdConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/business-transaction-config/bt-request-thresholds"));
                        applicationConfiguration.BTBackgroundSnapshotCollectionConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/background-business-transaction-config/snapshot-collection-policy"));
                        applicationConfiguration.BTBackgroundRequestThresholdConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/configuration/background-business-transaction-config/bt-request-thresholds"));

                        applicationConfiguration.EUMConfigExclude = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/exclude-config"));
                        applicationConfiguration.EUMConfigPage = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/page-config"));
                        applicationConfiguration.EUMConfigMobilePage = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/mobile-page-config"));
                        applicationConfiguration.EUMConfigMobileAgent = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/eum-cloud-config/eum-mobile-agent-config"));

                        applicationConfiguration.AnalyticsConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/analytics-dynamic-service-configurations"));
                        applicationConfiguration.WorkflowsConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/workflows"));
                        applicationConfiguration.TasksConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/tasks"));
                        applicationConfiguration.BTGroupsConfig = makeXMLFormattedAndIndented(configXml.SelectSingleNode("application/business-transaction-groups"));

                        applicationConfiguration.MetricBaselinesConfig = makeXMLFormattedAndIndented(configXml.SelectNodes("application/metric-baselines/metric-baseline"));
                        applicationConfiguration.NumBaselines = configXml.SelectNodes("application/metric-baselines/metric-baseline").Count;

                        applicationConfiguration.ErrorAgentConfig = makeXMLFormattedAndIndented(configXml.SelectNodes("application/configuration/error-configuration"));
                        applicationConfiguration.NumErrorRules = configXml.SelectNodes("application/configuration/error-configuration").Count;

                        #endregion

                        #region Business Transaction Detection Rules

                        loggerConsole.Info("Business Transaction Detection Rules");

                        List<BusinessTransactionDiscoveryRule> businessTransactionDiscoveryRulesList = new List<BusinessTransactionDiscoveryRule>();

                        // Application level
                        // application
                        //      entry-match-point-configurations
                        //          entry-match-point-configuration[agentType=AGENT]
                        //              transaction-configurations
                        //                  configuration[transaction-entry-point-type=TYPE]
                        foreach (XmlNode entryMatchPointConfigurationNode in configXml.SelectNodes("application/entry-match-point-configurations/entry-match-point-configuration"))
                        {
                            foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                            {
                                BusinessTransactionDiscoveryRule businessTransactionDiscoveryRule = fillBusinessTransactionDiscoveryRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, applicationConfiguration, null);
                                businessTransactionDiscoveryRulesList.Add(businessTransactionDiscoveryRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              entry-match-point-configurations
                        //                  entry-match-point-configuration[agentType=AGENT]
                        //                      transaction-configurations
                        //                          configuration[transaction-entry-point-type=TYPE]
                        //                              override=true
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode entryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("entry-match-point-configurations/entry-match-point-configuration"))
                            {
                                foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                                {
                                    if (Convert.ToBoolean(entryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        BusinessTransactionDiscoveryRule businessTransactionDiscoveryRule = fillBusinessTransactionDiscoveryRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, applicationConfiguration, applicationComponentNode);
                                        businessTransactionDiscoveryRulesList.Add(businessTransactionDiscoveryRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBTDiscoveryRules = businessTransactionDiscoveryRulesList.Count;

                        businessTransactionDiscoveryRulesList = businessTransactionDiscoveryRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ToList();
                        FileIOHelper.writeListToCSVFile(businessTransactionDiscoveryRulesList, new BusinessTransactionDiscoveryRuleReportMap(), businessTransactionDiscoveryRulesReportFilePath);

                        #endregion

                        #region Business Transaction Rules
                    
                        loggerConsole.Info("Business Transaction Include and Exclude Rules");

                        List<BusinessTransactionEntryRule> businessTransactionEntryRulesList = new List<BusinessTransactionEntryRule>();

                        // Exclude rules first

                        // Application level
                        // application
                        //      entry-match-point-configurations
                        //          entry-match-point-configuration[agentType=AGENT]
                        //              transaction-configurations
                        //                  configuration[transaction-entry-point-type=TYPE]
                        //                      discovery-config
                        //                          excludes
                        foreach (XmlNode entryMatchPointConfigurationNode in configXml.SelectNodes("application/entry-match-point-configurations/entry-match-point-configuration"))
                        {
                            foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                            {
                                foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointTransactionConfigurationNode.SelectNodes("discovery-config/excludes/exclude"))
                                {
                                    BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionExcludeRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, null);
                                    businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                                }
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              entry-match-point-configurations
                        //                  entry-match-point-configuration[agentType=AGENT]
                        //                      transaction-configurations
                        //                          configuration[transaction-entry-point-type=TYPE]
                        //                              override=true
                        //                              discovery-config
                        //                                  excludes
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode entryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("entry-match-point-configurations/entry-match-point-configuration"))
                            {
                                foreach (XmlNode entryMatchPointTransactionConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("transaction-configurations/configuration"))
                                {
                                    foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointTransactionConfigurationNode.SelectNodes("discovery-config/excludes/exclude"))
                                    {
                                        if (Convert.ToBoolean(entryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                        {
                                            BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionExcludeRule(entryMatchPointConfigurationNode, entryMatchPointTransactionConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, applicationComponentNode);
                                            businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                                        }
                                    }
                                }
                            }
                        }

                        // Include rules

                        // Application level
                        // application
                        //      entry-match-point-configurations
                        //          entry-match-point-configuration[agentType=AGENT]
                        //              custom-match-point-definitions
                        //                  custom-match-point-definition[transaction-entry-point-type=TYPE]
                        //                      transaction-configurations
                        foreach (XmlNode entryMatchPointConfigurationNode in configXml.SelectNodes("application/entry-match-point-configurations/entry-match-point-configuration"))
                        {
                            foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("custom-match-point-definitions/custom-match-point-definition"))
                            {
                                BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionEntryRule(entryMatchPointConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, null, businessTransactionsList);
                                businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              entry-match-point-configurations
                        //                  entry-match-point-configuration[agentType=AGENT]
                        //                      custom-match-point-definitions
                        //                          custom-match-point-definition[transaction-entry-point-type=TYPE]
                        //                              transaction-configurations
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode entryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("entry-match-point-configurations/entry-match-point-configuration"))
                            {
                                foreach (XmlNode entryMatchPointCustomMatchPointConfigurationNode in entryMatchPointConfigurationNode.SelectNodes("custom-match-point-definitions/custom-match-point-definition"))
                                {
                                    if (Convert.ToBoolean(entryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        BusinessTransactionEntryRule businessTransactionEntryRule = fillBusinessTransactionEntryRule(entryMatchPointConfigurationNode, entryMatchPointCustomMatchPointConfigurationNode, applicationConfiguration, applicationComponentNode, businessTransactionsList);
                                        businessTransactionEntryRulesList.Add(businessTransactionEntryRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBTEntryRules = businessTransactionEntryRulesList.Where(b => b.IsExclusion == false).Count();
                        applicationConfiguration.NumBTExcludeRules = businessTransactionEntryRulesList.Count - applicationConfiguration.NumBTEntryRules;

                        businessTransactionEntryRulesList = businessTransactionEntryRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(businessTransactionEntryRulesList, new BusinessTransactionEntryRuleReportMap(), businessTransactionEntryRulesReportFilePath);

                        #endregion

                        #region MDS/Config 2.0 Scopes, BT Detection and BT Rules

                        if (applicationConfiguration.IsBT20ConfigEnabled == true)
                        {
                            loggerConsole.Info("Business Transaction Include and Exclude Rules - MDS 2.0");

                            List<BusinessTransactionEntryScope> businessTransactionEntryScopeList = new List<BusinessTransactionEntryScope>();

                            XmlNode scopeToRuleMappingConfigurationNode = configXml.SelectSingleNode("application/mds-data/mds-config-data/scope-rule-mapping-list");

                            foreach (XmlNode scopeConfigurationNode in configXml.SelectNodes("application/mds-data/mds-config-data/scope-list/scope"))
                            {
                                BusinessTransactionEntryScope businessTransactionEntryRuleScope = fillBusinessTransactionEntryScope(scopeConfigurationNode, scopeToRuleMappingConfigurationNode, applicationConfiguration);
                                businessTransactionEntryScopeList.Add(businessTransactionEntryRuleScope);
                            }

                            applicationConfiguration.NumBT20Scopes = businessTransactionEntryScopeList.Count;

                            businessTransactionEntryScopeList = businessTransactionEntryScopeList.OrderBy(b => b.ScopeType).ThenBy(b => b.ScopeName).ToList();
                            FileIOHelper.writeListToCSVFile(businessTransactionEntryScopeList, new BusinessTransactionEntryRuleScopeReportMap(), businessTransactionEntryScopesReportFilePath);


                            List<BusinessTransactionEntryRule20> businessTransactionEntryRules20List = new List<BusinessTransactionEntryRule20>();

                            foreach (XmlNode ruleConfigurationNode in configXml.SelectNodes("application/mds-data/mds-config-data/rule-list/rule"))
                            {
                                BusinessTransactionEntryRule20 businessTransactionEntryRule = fillBusinessTransactionEntryRule20(ruleConfigurationNode, scopeToRuleMappingConfigurationNode, applicationConfiguration, businessTransactionsList);
                                if (businessTransactionEntryRule != null)
                                {
                                    businessTransactionEntryRules20List.Add(businessTransactionEntryRule);
                                }
                            }

                            applicationConfiguration.NumBT20EntryRules = businessTransactionEntryRules20List.Where(b => b.IsExclusion == false).Count();
                            applicationConfiguration.NumBT20ExcludeRules = businessTransactionEntryRules20List.Count - applicationConfiguration.NumBT20EntryRules;

                            businessTransactionEntryRules20List = businessTransactionEntryRules20List.OrderBy(b => b.ScopeName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ThenBy(b => b.RuleName).ToList();
                            FileIOHelper.writeListToCSVFile(businessTransactionEntryRules20List, new BusinessTransactionEntryRule20ReportMap(), businessTransactionEntryRules20ReportFilePath);


                            List<BusinessTransactionDiscoveryRule20> businessTransactionDiscoveryRule20List = new List<BusinessTransactionDiscoveryRule20>();

                            foreach (XmlNode ruleConfigurationNode in configXml.SelectNodes("application/mds-data/mds-config-data/rule-list/rule"))
                            {
                                List<BusinessTransactionDiscoveryRule20> businessTransactionDiscoveryRuleList = fillBusinessTransactionDiscoveryRule20(ruleConfigurationNode, scopeToRuleMappingConfigurationNode, applicationConfiguration, businessTransactionsList);
                                if (businessTransactionDiscoveryRuleList != null)
                                {
                                    businessTransactionDiscoveryRule20List.AddRange(businessTransactionDiscoveryRuleList);
                                }
                            }

                            applicationConfiguration.NumBT20DiscoveryRules = businessTransactionEntryRules20List.Count;

                            businessTransactionEntryRules20List = businessTransactionEntryRules20List.OrderBy(b => b.ScopeName).ThenBy(b => b.AgentType).ThenBy(b => b.EntryPointType).ThenBy(b => b.RuleName).ToList();
                            FileIOHelper.writeListToCSVFile(businessTransactionDiscoveryRule20List, new BusinessTransactionDiscoveryRule20ReportMap(), businessTransactionDiscoveryRules20ReportFilePath);
                        }

                        #endregion

                        #region Backend Rules 

                        loggerConsole.Info("Backend Detection Rules");

                        List<BackendDiscoveryRule> backendDiscoveryRulesList = new List<BackendDiscoveryRule>();

                        // Application level
                        // application
                        //      backend-match-point-configurations
                        //          backend-match-point-configuration[agentType=AGENT]
                        //              backend-discovery-configurations
                        //                  backend-discovery-configuration
                        foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in configXml.SelectNodes("application/backend-match-point-configurations/backend-match-point-configuration"))
                        {
                            foreach (XmlNode backendDiscoveryConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("backend-discovery-configurations/backend-discovery-configuration"))
                            {
                                BackendDiscoveryRule backendDiscoveryRule = fillBackendDiscoveryRule(backendDiscoveryMatchPointConfigurationNode, backendDiscoveryConfigurationNode, applicationConfiguration, null, backendsList);
                                backendDiscoveryRulesList.Add(backendDiscoveryRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              backend-match-point-configurations
                        //                  backend-match-point-configuration[agentType=AGENT]
                        //                      backend-discovery-configurations
                        //                          backend-discovery-configuration
                        //                              override=true
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("backend-match-point-configurations/backend-match-point-configuration"))
                            {
                                foreach (XmlNode backendDiscoveryConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("backend-discovery-configurations/backend-discovery-configuration"))
                                {
                                    if (Convert.ToBoolean(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        BackendDiscoveryRule backendDiscoveryRule = fillBackendDiscoveryRule(backendDiscoveryMatchPointConfigurationNode, backendDiscoveryConfigurationNode, applicationConfiguration, applicationComponentNode, backendsList);
                                        backendDiscoveryRulesList.Add(backendDiscoveryRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBackendRules = backendDiscoveryRulesList.Count;

                        backendDiscoveryRulesList = backendDiscoveryRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.ExitType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(backendDiscoveryRulesList, new BackendDiscoveryRuleReportMap(), backendDiscoveryRulesReportFilePath);

                        #endregion

                        #region Custom Exit Rules 

                        loggerConsole.Info("Custom Exit Rules");

                        List<CustomExitRule> customExitRulesList = new List<CustomExitRule>();

                        // Application level
                        // application
                        //      backend-match-point-configurations
                        //          backend-match-point-configuration[agentType=AGENT]
                        //              custom-exit-point-definitions
                        //                  custom-exit-point-definition
                        foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in configXml.SelectNodes("application/backend-match-point-configurations/backend-match-point-configuration"))
                        {
                            foreach (XmlNode customExitConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("custom-exit-point-definitions/custom-exit-point-definition"))
                            {
                                CustomExitRule customExitRule = fillCustomExitRule(backendDiscoveryMatchPointConfigurationNode, customExitConfigurationNode, applicationConfiguration, null, backendsList);
                                customExitRulesList.Add(customExitRule);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              backend-match-point-configurations
                        //                  backend-match-point-configuration[agentType=AGENT]
                        //                      custom-exit-point-definition
                        //                          custom-exit-point-definition
                        //                              override=true
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode backendDiscoveryMatchPointConfigurationNode in applicationComponentNode.SelectNodes("backend-match-point-configurations/backend-match-point-configuration"))
                            {
                                foreach (XmlNode customExitConfigurationNode in backendDiscoveryMatchPointConfigurationNode.SelectNodes("custom-exit-point-definitions/custom-exit-point-definition"))
                                {
                                    if (Convert.ToBoolean(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        CustomExitRule customExitRule = fillCustomExitRule(backendDiscoveryMatchPointConfigurationNode, customExitConfigurationNode, applicationConfiguration, applicationComponentNode, backendsList);
                                        customExitRulesList.Add(customExitRule);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumBackendRules = applicationConfiguration.NumBackendRules + customExitRulesList.Count;

                        customExitRulesList = customExitRulesList.OrderBy(b => b.TierName).ThenBy(b => b.AgentType).ThenBy(b => b.ExitType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(customExitRulesList, new CustomExitRuleReportMap(), customExitRulesReportFilePath);

                        #endregion

                        #region Agent Configuration Properties 

                        loggerConsole.Info("Agent Configuration Properties");

                        List<AgentConfigurationProperty> agentConfigurationPropertiesList = new List<AgentConfigurationProperty>();

                        // Application level
                        // application
                        //      agent-configurations
                        //          agent_configuration[agentType=AGENT]
                        //              property-definitions
                        //                  property-definition
                        //              properties
                        //                  property
                        foreach (XmlNode agentConfigurationNode in configXml.SelectNodes("application/agent-configurations/agent_configuration"))
                        {
                            foreach (XmlNode agentPropertyDefinitionConfigurationNode in agentConfigurationNode.SelectNodes("property-definitions/property-definition"))
                            {
                                XmlNode agentPropertyValueConfigurationNode = agentConfigurationNode.SelectSingleNode(String.Format(@"properties/property/property-definition[. = ""{0}""]", agentPropertyDefinitionConfigurationNode.SelectSingleNode("name").InnerText)).ParentNode;

                                AgentConfigurationProperty agentConfigurationProperty = fillAgentConfigurationProperty(agentConfigurationNode, agentPropertyDefinitionConfigurationNode, agentPropertyValueConfigurationNode, applicationConfiguration, null);
                                agentConfigurationPropertiesList.Add(agentConfigurationProperty);
                            }
                        }

                        // Tier overrides
                        // application
                        //      application-components
                        //          application-component
                        //              agent-configurations
                        //                  agent_configuration[agentType=AGENT]
                        //                      property-definitions
                        //                          property-definition
                        //                      properties
                        //                          property
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode agentConfigurationNode in applicationComponentNode.SelectNodes("agent-configurations/agent_configuration"))
                            {
                                foreach (XmlNode agentPropertyDefinitionConfigurationNode in agentConfigurationNode.SelectNodes("property-definitions/property-definition"))
                                {
                                    if (Convert.ToBoolean(agentConfigurationNode.SelectSingleNode("override").InnerText) == true)
                                    {
                                        XmlNode agentPropertyValueConfigurationNode = agentConfigurationNode.SelectSingleNode(String.Format(@"properties/property/property-definition[. = ""{0}""]", agentPropertyDefinitionConfigurationNode.SelectSingleNode("name").InnerText)).ParentNode;

                                        AgentConfigurationProperty agentConfigurationProperty = fillAgentConfigurationProperty(agentConfigurationNode, agentPropertyDefinitionConfigurationNode, agentPropertyValueConfigurationNode, applicationConfiguration, applicationComponentNode);
                                        agentConfigurationPropertiesList.Add(agentConfigurationProperty);
                                    }
                                }
                            }
                        }

                        applicationConfiguration.NumAgentProps = agentConfigurationPropertiesList.Count;

                        agentConfigurationPropertiesList = agentConfigurationPropertiesList.OrderBy(p => p.TierName).ThenBy(p => p.AgentType).ThenBy(p => p.PropertyName).ToList();
                        FileIOHelper.writeListToCSVFile(agentConfigurationPropertiesList, new AgentConfigurationPropertyReportMap(), agentConfigurationPropertiesReportFilePath);

                        #endregion

                        #region Information Point Rules

                        List<InformationPointRule> informationPointRulesList = new List<InformationPointRule>();

                        // Application level
                        // application
                        //      info-point-gatherer-configs
                        //          info-point-gatherer-config
                        foreach (XmlNode informationPointConfigurationNode in configXml.SelectNodes("application/info-point-gatherer-configs/info-point-gatherer-config"))
                        {
                            InformationPointRule informationPointRule = fillInformationPointRule(informationPointConfigurationNode, applicationConfiguration);
                            informationPointRulesList.Add(informationPointRule);
                        }

                        applicationConfiguration.NumInfoPointRules = informationPointRulesList.Count;

                        informationPointRulesList = informationPointRulesList.OrderBy(b => b.AgentType).ThenBy(b => b.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(informationPointRulesList, new InformationPointRuleReportMap(), informationPointRulesReportFilePath);

                        #endregion

                        #region Detected Business Transaction and Assigned Data Collectors

                        loggerConsole.Info("Detected Business Transaction and Assigned Data Collectors");

                        List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList = new List<EntityBusinessTransactionConfiguration>();

                        // Tier settings
                        // application
                        //      application-components
                        //          application-component
                        //              business-transaction
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            foreach (XmlNode businessTransactionConfigurationtNode in applicationComponentNode.SelectNodes("business-transactions/business-transaction"))
                            {
                                EntityBusinessTransactionConfiguration entityBusinessTransactionConfiguration = fillEntityBusinessTransactionConfiguration(applicationComponentNode, businessTransactionConfigurationtNode, applicationConfiguration, tiersList, businessTransactionsList);
                                entityBusinessTransactionConfigurationsList.Add(entityBusinessTransactionConfiguration);
                            }
                        }

                        applicationConfiguration.NumBTs = entityBusinessTransactionConfigurationsList.Count;

                        entityBusinessTransactionConfigurationsList = entityBusinessTransactionConfigurationsList.OrderBy(b => b.TierName).ThenBy(b => b.BTType).ThenBy(b => b.BTName).ToList();
                        FileIOHelper.writeListToCSVFile(entityBusinessTransactionConfigurationsList, new EntityBusinessTransactionConfigurationReportMap(), entityBusinessTransactionConfigurationsReportFilePath);

                        #endregion

                        #region Tier Settings

                        loggerConsole.Info("Tier Settings");

                        List<EntityTierConfiguration> entityTierConfigurationsList = new List<EntityTierConfiguration>();

                        // Tier settings
                        // application
                        //      application-components
                        //          application-component
                        foreach (XmlNode applicationComponentNode in configXml.SelectNodes("application/application-components/application-component"))
                        {
                            EntityTierConfiguration entityTierConfiguration = fillEntityTierConfiguration(applicationComponentNode, applicationConfiguration, tiersList, entityBusinessTransactionConfigurationsList);
                            entityTierConfigurationsList.Add(entityTierConfiguration);
                        }

                        applicationConfiguration.NumTiers = entityTierConfigurationsList.Count;

                        entityTierConfigurationsList = entityTierConfigurationsList.OrderBy(p => p.TierName).ToList();
                        FileIOHelper.writeListToCSVFile(entityTierConfigurationsList, new EntityTierConfigurationReportMap(), entityTierConfigurationsReportFilePath);

                        #endregion

                        #region Data Collectors

                        loggerConsole.Info("Data Collectors");

                        // MIDCs
                        List<MethodInvocationDataCollector> methodInvocationDataCollectorsList = new List<MethodInvocationDataCollector>();

                        // Application level
                        // application
                        //      data-gatherer-configs
                        //          pojo-data-gatherer-config
                        foreach (XmlNode methodInvocationDataCollectorConfigurationNode in configXml.SelectNodes("application/data-gatherer-configs/pojo-data-gatherer-config"))
                        {
                            foreach (XmlNode dataGathererConfigurationNode in methodInvocationDataCollectorConfigurationNode.SelectNodes("method-invocation-data-gatherer-config"))
                            {
                                MethodInvocationDataCollector methodInvocationDataCollector = fillMethodInvocationDataCollector(methodInvocationDataCollectorConfigurationNode, dataGathererConfigurationNode, applicationConfiguration, entityBusinessTransactionConfigurationsList);
                                methodInvocationDataCollectorsList.Add(methodInvocationDataCollector);
                            }
                        }

                        applicationConfiguration.NumMIDCVariablesCollected = methodInvocationDataCollectorsList.Count;
                        applicationConfiguration.NumMIDCs = methodInvocationDataCollectorsList.GroupBy(m => m.CollectorName).Count();

                        methodInvocationDataCollectorsList = methodInvocationDataCollectorsList.OrderBy(b => b.CollectorName).ThenBy(b => b.DataGathererName).ToList();
                        FileIOHelper.writeListToCSVFile(methodInvocationDataCollectorsList, new MethodInvocationDataCollectorReportMap(), methodInvocationDataCollectorsReportFilePath);

                        // HTTP DCs

                        // Application level
                        // application
                        //      data-gatherer-configs
                        //          http-data-gatherer-config
                        List<HTTPDataCollector> httpDataCollectorsList = new List<HTTPDataCollector>();

                        // Application level
                        // application
                        //      data-gatherer-configs
                        //          pojo-data-gatherer-config
                        foreach (XmlNode httpDataCollectorConfigurationNode in configXml.SelectNodes("application/data-gatherer-configs/http-data-gatherer-config"))
                        {
                            if (httpDataCollectorConfigurationNode.SelectNodes("parameters/parameter").Count > 0)
                            {
                                foreach (XmlNode dataGathererConfigurationNode in httpDataCollectorConfigurationNode.SelectNodes("parameters/parameter"))
                                {
                                    HTTPDataCollector httpDataCollector = fillHTTPDataCollector(httpDataCollectorConfigurationNode, dataGathererConfigurationNode, applicationConfiguration, entityBusinessTransactionConfigurationsList);
                                    httpDataCollectorsList.Add(httpDataCollector);
                                }
                            }
                            else
                            {
                                HTTPDataCollector httpDataCollector = fillHTTPDataCollector(httpDataCollectorConfigurationNode, null, applicationConfiguration, entityBusinessTransactionConfigurationsList);
                                httpDataCollectorsList.Add(httpDataCollector);
                            }
                        }

                        applicationConfiguration.NumHTTPDCVariablesCollected = httpDataCollectorsList.Count;
                        applicationConfiguration.NumHTTPDCs = httpDataCollectorsList.GroupBy(m => m.CollectorName).Count(); 

                        httpDataCollectorsList = httpDataCollectorsList.OrderBy(b => b.CollectorName).ThenBy(b => b.DataGathererName).ToList();
                        FileIOHelper.writeListToCSVFile(httpDataCollectorsList, new HTTPDataCollectorReportMap(), httpDataCollectorsReportFilePath);

                        #endregion

                        #region Call Grapth Settings

                        loggerConsole.Info("Call Graph Settings");

                        // MIDCs
                        List<AgentCallGraphSetting> agentCallGraphSettingCollectorsList = new List<AgentCallGraphSetting>();

                        // Application level
                        // application
                        //      configuration
                        //          call-graph
                        foreach (XmlNode agentCallGraphSettingConfigurationNode in configXml.SelectNodes("application/configuration/call-graph"))
                        {
                            AgentCallGraphSetting agentCallGraphSetting = fillAgentCallGraphSetting(agentCallGraphSettingConfigurationNode, applicationConfiguration);
                            agentCallGraphSettingCollectorsList.Add(agentCallGraphSetting);
                        }

                        agentCallGraphSettingCollectorsList = agentCallGraphSettingCollectorsList.OrderBy(a => a.AgentType).ToList();
                        FileIOHelper.writeListToCSVFile(agentCallGraphSettingCollectorsList, new AgentCallGraphSettingReportMap(), agentCallGraphSettingsReportFilePath);

                        #endregion

                        #region Health Rules

                        loggerConsole.Info("Health Rules");

                        List<HealthRule> healthRulesList = new List<HealthRule>();

                        // Application level
                        // application
                        //      configuration
                        //          call-graph
                        foreach (XmlNode healthRuleConfigurationNode in configXml.SelectNodes("application/health-rules/health-rule"))
                        {
                            HealthRule healthRule = fillHealthRule(healthRuleConfigurationNode, applicationConfiguration);
                            healthRulesList.Add(healthRule);
                        }

                        applicationConfiguration.NumHealthRules = healthRulesList.Count;

                        healthRulesList = healthRulesList.OrderBy(h => h.RuleType).ThenBy(h => h.RuleName).ToList();
                        FileIOHelper.writeListToCSVFile(healthRulesList, new HealthRuleReportMap(), healthRulesReportFilePath);

                        #endregion

                        #region Application Settings

                        List<EntityApplicationConfiguration> applicationConfigurationsList = new List<EntityApplicationConfiguration>(1);
                        applicationConfigurationsList.Add(applicationConfiguration);
                        FileIOHelper.writeListToCSVFile(applicationConfigurationsList, new EntityApplicationConfigurationReportMap(), applicationConfigurationReportFilePath);

                        #endregion

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(configAllFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(configAllFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(applicationConfigurationAllReportFilePath, applicationConfigurationReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionDiscoveryRulesAllReportFilePath, businessTransactionDiscoveryRulesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionEntryRulesAllReportFilePath, businessTransactionEntryRulesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionEntryScopesAllReportFilePath, businessTransactionEntryScopesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionDiscoveryRules20AllReportFilePath, businessTransactionDiscoveryRules20ReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionEntryRules20AllReportFilePath, businessTransactionEntryRules20ReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendDiscoveryRulesAllReportFilePath, backendDiscoveryRulesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(customExitRulesAllReportFilePath, customExitRulesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(informationPointRulesAllReportFilePath, informationPointRulesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(agentConfigurationPropertiesAllReportFilePath, agentConfigurationPropertiesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(methodInvocationDataCollectorsAllReportFilePath, methodInvocationDataCollectorsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(httpDataCollectorsAllReportFilePath, httpDataCollectorsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(entityTierConfigurationsAllReportFilePath, entityTierConfigurationsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(entityBusinessTransactionConfigurationsAllReportFilePath, entityBusinessTransactionConfigurationsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(agentCallGraphSettingsAllReportFilePath, agentCallGraphSettingsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(healthRulesAllReportFilePath, healthRulesReportFilePath);

                        // If it is the last one, let's append all Controller settings
                        if (i == jobConfiguration.Target.Count - 1)
                        {
                            var controllers = jobConfiguration.Target.GroupBy(t => t.Controller);
                            foreach (var controllerGroup in controllers)
                            {
                                controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(controllerGroup.Key).Host));

                                controllerSettingsReportFilePath = Path.Combine(controllerFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                                FileIOHelper.appendTwoCSVFiles(controllerSettingsAllReportFilePath, controllerSettingsReportFilePath);
                            }
                        }

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexApplicationAndEntityMetrics(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string metricsFolderPath = Path.Combine(applicationFolderPath, METRICS_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                        string metricsAllFolderPath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME);

                        // Report files from previous steps
                        string applicationReportFilePath = Path.Combine(applicationFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        // Report files
                        string applicationFullReportFilePath = Path.Combine(metricsFolderPath, APPLICATION_TYPE_SHORT, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                        string applicationHourlyReportFilePath = Path.Combine(metricsFolderPath, APPLICATION_TYPE_SHORT, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                        string tiersFullReportFilePath = Path.Combine(metricsFolderPath, TIERS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        string tiersHourlyReportFilePath = Path.Combine(metricsFolderPath, TIERS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string nodesFullReportFilePath = Path.Combine(metricsFolderPath, NODES_TYPE_SHORT, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        string nodesHourlyReportFilePath = Path.Combine(metricsFolderPath, NODES_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string backendsFullReportFilePath = Path.Combine(metricsFolderPath, BACKENDS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        string backendsHourlyReportFilePath = Path.Combine(metricsFolderPath, BACKENDS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string businessTransactionsFullReportFilePath = Path.Combine(metricsFolderPath, BUSINESS_TRANSACTIONS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        string businessTransactionsHourlyReportFilePath = Path.Combine(metricsFolderPath, BUSINESS_TRANSACTIONS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string serviceEndpointsFullReportFilePath = Path.Combine(metricsFolderPath, SERVICE_ENDPOINTS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        string serviceEndpointsHourlyReportFilePath = Path.Combine(metricsFolderPath, SERVICE_ENDPOINTS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string errorsFullReportFilePath = Path.Combine(metricsFolderPath, ERRORS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        string errorsHourlyReportFilePath = Path.Combine(metricsFolderPath, ERRORS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string informationPointsFullReportFilePath = Path.Combine(metricsFolderPath, INFORMATION_POINTS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        string informationPointsHourlyReportFilePath = Path.Combine(metricsFolderPath, INFORMATION_POINTS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);

                        // Report files for All
                        string applicationsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, APPLICATION_TYPE_SHORT));
                        string applicationsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, APPLICATION_TYPE_SHORT));
                        string tiersAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, TIERS_TYPE_SHORT));
                        string tiersAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, TIERS_TYPE_SHORT));
                        string nodesAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, NODES_TYPE_SHORT));
                        string nodesAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, NODES_TYPE_SHORT));
                        string backendsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, BACKENDS_TYPE_SHORT));
                        string backendsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, BACKENDS_TYPE_SHORT));
                        string businessTransactionsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, BUSINESS_TRANSACTIONS_TYPE_SHORT));
                        string businessTransactionsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, BUSINESS_TRANSACTIONS_TYPE_SHORT));
                        string serviceEndpointsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, SERVICE_ENDPOINTS_TYPE_SHORT));
                        string serviceEndpointsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, SERVICE_ENDPOINTS_TYPE_SHORT));
                        string errorsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, ERRORS_TYPE_SHORT));
                        string errorsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, ERRORS_TYPE_SHORT));
                        string informationPointsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, INFORMATION_POINTS_TYPE_SHORT));
                        string informationPointsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, INFORMATION_POINTS_TYPE_SHORT));

                        string fullRangeMetricDataFileName = String.Format(EXTRACT_METRIC_FULL_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);

                        int numEntitiesTotal = 0;

                        #endregion

                        Parallel.Invoke(
                            () => 
                            {
                                #region Application

                                List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());
                                if (applicationList != null && applicationList.Count > 0)
                                {
                                    loggerConsole.Info("Index Metrics for Application ({0} entities)", applicationList.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        APPLICATION_TYPE_SHORT);

                                    string metricsEntityFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        APPLICATION_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EXCPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEXCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_HTTPEPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullHTTPEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    #endregion

                                    #region Full Range

                                    List<EntityApplication> applicationFullList = new List<EntityApplication>(1);
                                    EntityApplication applicationRow = applicationList[0].Clone();
                                    fillFullRangeMetricEntityRow(applicationRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_APPLICATION, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                    applicationFullList.Add(applicationRow);

                                    #endregion

                                    #region Hourly ranges

                                    List<EntityApplication> applicationHourlyList = new List<EntityApplication>(jobConfiguration.Input.HourlyTimeRanges.Count);

                                    for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                    {
                                        JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                        string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                        #region Load Hourly Range Metrics

                                        metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, hourlyRangeMetricDataFileName);
                                        List<AppDRESTMetric> metricDataHourlyART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                        metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                        List<AppDRESTMetric> metricDataHourlyCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                        metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                        List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                        metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EXCPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                        List<AppDRESTMetric> metricDataHourlyEXCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                        metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_HTTPEPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                        List<AppDRESTMetric> metricDataHourlyHTTPEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                        #endregion

                                        #region Hour Range

                                        applicationRow = applicationList[0].Clone();
                                        fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(applicationRow, jobTimeRange, String.Format(METRIC_PATH_APPLICATION, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                        applicationHourlyList.Add(applicationRow);

                                        #endregion
                                    }

                                    #endregion

                                    updateEntitiesWithReportDetailLinksApplication(programOptions, jobConfiguration, jobTarget, applicationFullList);
                                    updateEntitiesWithReportDetailLinksApplication(programOptions, jobConfiguration, jobTarget, applicationHourlyList);

                                    FileIOHelper.writeListToCSVFile(applicationFullList, new ApplicationMetricReportMap(), applicationFullReportFilePath);

                                    FileIOHelper.writeListToCSVFile(applicationHourlyList, new ApplicationMetricReportMap(), applicationHourlyReportFilePath);

                                    stepTimingTarget.NumEntities = Interlocked.Add(ref numEntitiesTotal, applicationList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Tier

                                List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersReportFilePath, new TierEntityReportMap());
                                if (tiersList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Tiers ({0} entities)", tiersList.Count);

                                    List<EntityTier> tiersFullList = new List<EntityTier>(tiersList.Count);
                                    List<EntityTier> tiersHourlyList = new List<EntityTier>(tiersList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        TIERS_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EXCPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEXCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_HTTPEPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullHTTPEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    #endregion

                                    int numEntities = 0;

                                    foreach (EntityTier tierRowOriginal in tiersList)
                                    {
                                        string metricsEntityFolderPath = Path.Combine(
                                            metricsFolderPath,
                                            TIERS_TYPE_SHORT,
                                            getShortenedEntityNameForFileSystem(tierRowOriginal.TierName, tierRowOriginal.TierID));

                                        #region Full Range

                                        List<EntityTier> tierFullList = new List<EntityTier>(1);
                                        EntityTier tierRow = tierRowOriginal.Clone();
                                        fillFullRangeMetricEntityRow(tierRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_TIER, tierRow.TierName, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                        tiersFullList.Add(tierRow);
                                        tierFullList.Add(tierRow);

                                        #endregion

                                        #region Hourly ranges

                                        List<EntityTier> tierHourlyList = new List<EntityTier>(jobConfiguration.Input.HourlyTimeRanges.Count);
                                        for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                            #region Load Hourly Range Metrics

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EXCPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEXCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_HTTPEPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyHTTPEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            #endregion

                                            #region Hour Range

                                            tierRow = tierRowOriginal.Clone();
                                            fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(tierRow, jobTimeRange, String.Format(METRIC_PATH_TIER, tierRow.TierName, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                            tiersHourlyList.Add(tierRow);
                                            tierHourlyList.Add(tierRow);

                                            #endregion
                                        }

                                        #endregion

                                        string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(tierFullList, new TierMetricReportMap(), entityFullRangeReportFilePath);

                                        string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(tierHourlyList, new TierMetricReportMap(), entityHourlyRangeReportFilePath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Tiers", numEntities);

                                    // Sort them
                                    tiersHourlyList = tiersHourlyList.OrderBy(o => o.TierName).ThenBy(o => o.From).ToList();

                                    updateEntitiesWithReportDetailLinksTiers(programOptions, jobConfiguration, jobTarget, tiersFullList);
                                    updateEntitiesWithReportDetailLinksTiers(programOptions, jobConfiguration, jobTarget, tiersHourlyList);

                                    FileIOHelper.writeListToCSVFile(tiersFullList, new TierMetricReportMap(), tiersFullReportFilePath);

                                    FileIOHelper.writeListToCSVFile(tiersHourlyList, new TierMetricReportMap(), tiersHourlyReportFilePath);

                                    numEntitiesTotal = Interlocked.Add(ref numEntitiesTotal, tiersList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Nodes

                                List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesReportFilePath, new NodeEntityReportMap());
                                if (nodesList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Nodes ({0} entities)", nodesList.Count);

                                    List<EntityNode> nodesFullList = new List<EntityNode>(nodesList.Count);
                                    List<EntityNode> nodesHourlyList = new List<EntityNode>(nodesList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        NODES_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EXCPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEXCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_HTTPEPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullHTTPEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    #endregion

                                    int numEntities = 0;

                                    foreach (EntityNode nodeRowOriginal in nodesList)
                                    {
                                        string metricsEntityFolderPath = Path.Combine(
                                            metricsFolderPath,
                                            NODES_TYPE_SHORT,
                                            getShortenedEntityNameForFileSystem(nodeRowOriginal.TierName, nodeRowOriginal.TierID),
                                            getShortenedEntityNameForFileSystem(nodeRowOriginal.NodeName, nodeRowOriginal.NodeID));

                                        #region Full Range

                                        List<EntityNode> nodeFullList = new List<EntityNode>(1);
                                        EntityNode nodeRow = nodeRowOriginal.Clone();
                                        fillFullRangeMetricEntityRow(nodeRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_NODE, nodeRow.TierName, nodeRow.NodeName, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                        nodesFullList.Add(nodeRow);
                                        nodeFullList.Add(nodeRow);

                                        #endregion

                                        #region Hourly ranges

                                        List<EntityNode> nodeHourlyList = new List<EntityNode>(jobConfiguration.Input.HourlyTimeRanges.Count);
                                        for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                            #region Load Hourly Range Metrics

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EXCPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEXCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_HTTPEPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyHTTPEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            #endregion

                                            #region Hour Range

                                            nodeRow = nodeRowOriginal.Clone();
                                            fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(nodeRow, jobTimeRange, String.Format(METRIC_PATH_NODE, nodeRow.TierName, nodeRow.NodeName, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                            nodesHourlyList.Add(nodeRow);
                                            nodeHourlyList.Add(nodeRow);

                                            #endregion
                                        }

                                        #endregion

                                        string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(nodeFullList, new NodeMetricReportMap(), entityFullRangeReportFilePath);

                                        string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(nodeHourlyList, new NodeMetricReportMap(), entityHourlyRangeReportFilePath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Nodes", numEntities);

                                    // Sort them
                                    nodesHourlyList = nodesHourlyList.OrderBy(o => o.TierName).ThenBy(o => o.NodeName).ThenBy(o => o.From).ToList();

                                    updateEntitiesWithReportDetailLinksNodes(programOptions, jobConfiguration, jobTarget, nodesFullList);
                                    updateEntitiesWithReportDetailLinksNodes(programOptions, jobConfiguration, jobTarget, nodesHourlyList);

                                    FileIOHelper.writeListToCSVFile(nodesFullList, new NodeMetricReportMap(), nodesFullReportFilePath);
                                    FileIOHelper.writeListToCSVFile(nodesHourlyList, new NodeMetricReportMap(), nodesHourlyReportFilePath);

                                    numEntitiesTotal = Interlocked.Add(ref numEntitiesTotal, nodesList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Backends

                                List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsReportFilePath, new BackendEntityReportMap());
                                if (backendsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Backends ({0} entities)", backendsList.Count);

                                    List<EntityBackend> backendsFullList = new List<EntityBackend>(backendsList.Count);
                                    List<EntityBackend> backendsHourlyList = new List<EntityBackend>(backendsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        BACKENDS_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    List<AppDRESTMetric> metricDataFullEXCPM = null;

                                    List<AppDRESTMetric> metricDataFullHTTPEPM = null;

                                    #endregion

                                    int numEntities = 0;

                                    foreach (EntityBackend backendRowOriginal in backendsList)
                                    {
                                        string metricsEntityFolderPath = Path.Combine(
                                            metricsFolderPath,
                                            BACKENDS_TYPE_SHORT,
                                            getShortenedEntityNameForFileSystem(backendRowOriginal.BackendName, backendRowOriginal.BackendID));

                                        #region Full Range

                                        List<EntityBackend> backendFullList = new List<EntityBackend>(1);
                                        EntityBackend backendRow = backendRowOriginal.Clone();
                                        fillFullRangeMetricEntityRow(backendRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_BACKEND_DISCOVERED_BACKEND_PREFIX, backendRow.BackendName, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                        backendsFullList.Add(backendRow);
                                        backendFullList.Add(backendRow);

                                        #endregion

                                        #region Hourly ranges

                                        List<EntityBackend> backendHourlyList = new List<EntityBackend>(jobConfiguration.Input.HourlyTimeRanges.Count);
                                        for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                            #region Load Hourly Range Metrics

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            List<AppDRESTMetric> metricDataHourlyEXCPM = null;

                                            List<AppDRESTMetric> metricDataHourlyHTTPEPM = null;

                                            #endregion

                                            #region Hour Range

                                            backendRow = backendRowOriginal.Clone();
                                            fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(backendRow, jobTimeRange, String.Format(METRIC_PATH_BACKEND_DISCOVERED_BACKEND_PREFIX, backendRow.BackendName, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                            backendsHourlyList.Add(backendRow);
                                            backendHourlyList.Add(backendRow);

                                            #endregion
                                        }

                                        #endregion

                                        string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(backendFullList, new BackendMetricReportMap(), entityFullRangeReportFilePath);

                                        string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(backendHourlyList, new BackendMetricReportMap(), entityHourlyRangeReportFilePath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Backends", numEntities);

                                    // Sort them
                                    backendsHourlyList = backendsHourlyList.OrderBy(o => o.BackendType).ThenBy(o => o.BackendName).ThenBy(o => o.From).ToList();

                                    updateEntitiesWithReportDetailLinksBackends(programOptions, jobConfiguration, jobTarget, backendsFullList);
                                    updateEntitiesWithReportDetailLinksBackends(programOptions, jobConfiguration, jobTarget, backendsHourlyList);

                                    FileIOHelper.writeListToCSVFile(backendsFullList, new BackendMetricReportMap(), backendsFullReportFilePath);
                                    FileIOHelper.writeListToCSVFile(backendsHourlyList, new BackendMetricReportMap(), backendsHourlyReportFilePath);

                                    numEntitiesTotal = Interlocked.Add(ref numEntitiesTotal, backendsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Business Transactions

                                List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsReportFilePath, new BusinessTransactionEntityReportMap());
                                if (businessTransactionsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Business Transactions ({0} entities)", businessTransactionsList.Count);

                                    List<EntityBusinessTransaction> businessTransactionsFullList = new List<EntityBusinessTransaction>(businessTransactionsList.Count);
                                    List<EntityBusinessTransaction> businessTransactionsHourlyList = new List<EntityBusinessTransaction>(businessTransactionsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        BUSINESS_TRANSACTIONS_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    List<AppDRESTMetric> metricDataFullEXCPM = null;

                                    List<AppDRESTMetric> metricDataFullHTTPEPM = null;

                                    #endregion

                                    int numEntities = 0;

                                    foreach (EntityBusinessTransaction businessTransactionRowOriginal in businessTransactionsList)
                                    {
                                        string metricsEntityFolderPath = Path.Combine(
                                            metricsFolderPath,
                                            BUSINESS_TRANSACTIONS_TYPE_SHORT,
                                            getShortenedEntityNameForFileSystem(businessTransactionRowOriginal.TierName, businessTransactionRowOriginal.TierID),
                                            getShortenedEntityNameForFileSystem(businessTransactionRowOriginal.BTName, businessTransactionRowOriginal.BTID));

                                        #region Full Range

                                        List<EntityBusinessTransaction> businessTransactionFullList = new List<EntityBusinessTransaction>(1);
                                        EntityBusinessTransaction businessTransactionRow = businessTransactionRowOriginal.Clone();
                                        fillFullRangeMetricEntityRow(businessTransactionRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, businessTransactionRow.TierName, businessTransactionRow.BTName, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                        businessTransactionsFullList.Add(businessTransactionRow);
                                        businessTransactionFullList.Add(businessTransactionRow);

                                        #endregion

                                        #region Hourly ranges

                                        List<EntityBusinessTransaction> businessTransactionHourlyList = new List<EntityBusinessTransaction>(jobConfiguration.Input.HourlyTimeRanges.Count);
                                        for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                            #region Load Hourly Range Metrics

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            List<AppDRESTMetric> metricDataHourlyEXCPM = null;

                                            List<AppDRESTMetric> metricDataHourlyHTTPEPM = null;

                                            #endregion

                                            #region Hour Range

                                            businessTransactionRow = businessTransactionRowOriginal.Clone();
                                            fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(businessTransactionRow, jobTimeRange, String.Format(METRIC_PATH_BUSINESS_TRANSACTION, businessTransactionRow.TierName, businessTransactionRow.BTName, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                            businessTransactionsHourlyList.Add(businessTransactionRow);
                                            businessTransactionHourlyList.Add(businessTransactionRow);

                                            #endregion
                                        }

                                        #endregion

                                        string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(businessTransactionFullList, new BusinessTransactionMetricReportMap(), entityFullRangeReportFilePath);

                                        string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(businessTransactionHourlyList, new BusinessTransactionMetricReportMap(), entityHourlyRangeReportFilePath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Business Transactions", numEntities);

                                    // Sort them
                                    businessTransactionsHourlyList = businessTransactionsHourlyList.OrderBy(o => o.TierName).ThenBy(o => o.BTName).ThenBy(o => o.From).ToList();

                                    updateEntitiesWithReportDetailLinksBusinessTransactions(programOptions, jobConfiguration, jobTarget, businessTransactionsFullList);
                                    updateEntitiesWithReportDetailLinksBusinessTransactions(programOptions, jobConfiguration, jobTarget, businessTransactionsHourlyList);

                                    FileIOHelper.writeListToCSVFile(businessTransactionsFullList, new BusinessTransactionMetricReportMap(), businessTransactionsFullReportFilePath);
                                    FileIOHelper.writeListToCSVFile(businessTransactionsHourlyList, new BusinessTransactionMetricReportMap(), businessTransactionsHourlyReportFilePath);

                                    numEntitiesTotal = Interlocked.Add(ref numEntitiesTotal, businessTransactionsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Service Endpoints

                                List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsReportFilePath, new ServiceEndpointEntityReportMap());
                                if (serviceEndpointsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Service Endpoints ({0} entities)", serviceEndpointsList.Count);

                                    List<EntityServiceEndpoint> serviceEndpointsFullList = new List<EntityServiceEndpoint>(serviceEndpointsList.Count);
                                    List<EntityServiceEndpoint> serviceEndpointsHourlyList = new List<EntityServiceEndpoint>(serviceEndpointsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        SERVICE_ENDPOINTS_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    List<AppDRESTMetric> metricDataFullEXCPM = null;

                                    List<AppDRESTMetric> metricDataFullHTTPEPM = null;

                                    #endregion

                                    int numEntities = 0;

                                    foreach (EntityServiceEndpoint serviceEndpointRowOriginal in serviceEndpointsList)
                                    {
                                        string metricsEntityFolderPath = Path.Combine(
                                            metricsFolderPath,
                                            SERVICE_ENDPOINTS_TYPE_SHORT,
                                            getShortenedEntityNameForFileSystem(serviceEndpointRowOriginal.TierName, serviceEndpointRowOriginal.TierID),
                                            getShortenedEntityNameForFileSystem(serviceEndpointRowOriginal.SEPName, serviceEndpointRowOriginal.SEPID));

                                        #region Full Range

                                        List<EntityServiceEndpoint> serviceEndpointFullList = new List<EntityServiceEndpoint>(1);
                                        EntityServiceEndpoint serviceEndpointRow = serviceEndpointRowOriginal.Clone();
                                        fillFullRangeMetricEntityRow(serviceEndpointRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_SERVICE_ENDPOINT, serviceEndpointRow.TierName, serviceEndpointRow.SEPName, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                        serviceEndpointsFullList.Add(serviceEndpointRow);
                                        serviceEndpointFullList.Add(serviceEndpointRow);

                                        #endregion

                                        #region Hourly ranges

                                        List<EntityServiceEndpoint> serviceEndpointHourlyList = new List<EntityServiceEndpoint>(jobConfiguration.Input.HourlyTimeRanges.Count);
                                        for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                            #region Load Hourly Range Metrics

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            List<AppDRESTMetric> metricDataHourlyEXCPM = null;

                                            List<AppDRESTMetric> metricDataHourlyHTTPEPM = null;

                                            #endregion

                                            #region Hour Range

                                            serviceEndpointRow = serviceEndpointRowOriginal.Clone();
                                            fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(serviceEndpointRow, jobTimeRange, String.Format(METRIC_PATH_SERVICE_ENDPOINT, serviceEndpointRow.TierName, serviceEndpointRow.SEPName, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                            serviceEndpointsHourlyList.Add(serviceEndpointRow);
                                            serviceEndpointHourlyList.Add(serviceEndpointRow);

                                            #endregion
                                        }

                                        #endregion

                                        string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(serviceEndpointFullList, new ServiceEndpointMetricReportMap(), entityFullRangeReportFilePath);

                                        string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(serviceEndpointHourlyList, new ServiceEndpointMetricReportMap(), entityHourlyRangeReportFilePath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Service Endpoints", numEntities);

                                    // Sort them
                                    serviceEndpointsHourlyList = serviceEndpointsHourlyList.OrderBy(o => o.TierName).ThenBy(o => o.SEPName).ThenBy(o => o.From).ToList();

                                    updateEntitiesWithReportDetailLinksServiceEndpoints(programOptions, jobConfiguration, jobTarget, serviceEndpointsFullList);
                                    updateEntitiesWithReportDetailLinksServiceEndpoints(programOptions, jobConfiguration, jobTarget, serviceEndpointsHourlyList);

                                    FileIOHelper.writeListToCSVFile(serviceEndpointsFullList, new ServiceEndpointMetricReportMap(), serviceEndpointsFullReportFilePath);
                                    FileIOHelper.writeListToCSVFile(serviceEndpointsHourlyList, new ServiceEndpointMetricReportMap(), serviceEndpointsHourlyReportFilePath);

                                    numEntitiesTotal = Interlocked.Add(ref numEntitiesTotal, serviceEndpointsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Errors

                                List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsReportFilePath, new ErrorEntityReportMap());
                                if (errorsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Errors ({0} entities)", errorsList.Count);

                                    List<EntityError> errorsFullList = new List<EntityError>(errorsList.Count);
                                    List<EntityError> errorsHourlyList = new List<EntityError>(errorsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        ERRORS_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    List<AppDRESTMetric> metricDataFullART = null;

                                    List<AppDRESTMetric> metricDataFullCPM = null;

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    List<AppDRESTMetric> metricDataFullEXCPM = null;

                                    List<AppDRESTMetric> metricDataFullHTTPEPM = null;

                                    #endregion

                                    int numEntities = 0;

                                    foreach (EntityError errorRowOriginal in errorsList)
                                    {
                                        string metricsEntityFolderPath = Path.Combine(
                                            metricsFolderPath,
                                            ERRORS_TYPE_SHORT,
                                            getShortenedEntityNameForFileSystem(errorRowOriginal.TierName, errorRowOriginal.TierID),
                                            getShortenedEntityNameForFileSystem(errorRowOriginal.ErrorName, errorRowOriginal.ErrorID));

                                        #region Full Range

                                        List<EntityError> errorFullList = new List<EntityError>(1);
                                        EntityError errorRow = errorRowOriginal.Clone();
                                        fillFullRangeMetricEntityRow(errorRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_ERROR, errorRow.TierName, errorRow.ErrorName, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                        errorsFullList.Add(errorRow);
                                        errorFullList.Add(errorRow);

                                        #endregion

                                        #region Hourly ranges

                                        List<EntityError> errorHourlyList = new List<EntityError>(jobConfiguration.Input.HourlyTimeRanges.Count);
                                        for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                            #region Load Hourly Range Metrics

                                            List<AppDRESTMetric> metricDataHourlyART = null;

                                            List<AppDRESTMetric> metricDataHourlyCPM = null;

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            List<AppDRESTMetric> metricDataHourlyEXCPM = null;

                                            List<AppDRESTMetric> metricDataHourlyHTTPEPM = null;

                                            #endregion

                                            #region Hour Range

                                            errorRow = errorRowOriginal.Clone();
                                            fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(errorRow, jobTimeRange, String.Format(METRIC_PATH_ERROR, errorRow.TierName, errorRow.ErrorName, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                            errorsHourlyList.Add(errorRow);
                                            errorHourlyList.Add(errorRow);

                                            #endregion
                                        }

                                        #endregion

                                        string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(errorFullList, new ErrorMetricReportMap(), entityFullRangeReportFilePath);

                                        string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(errorHourlyList, new ErrorMetricReportMap(), entityHourlyRangeReportFilePath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Errors", numEntities);

                                    // Sort them
                                    errorsHourlyList = errorsHourlyList.OrderBy(o => o.TierName).ThenBy(o => o.ErrorName).ThenBy(o => o.From).ToList();

                                    updateEntitiesWithReportDetailLinksErrors(programOptions, jobConfiguration, jobTarget, errorsFullList);
                                    updateEntitiesWithReportDetailLinksErrors(programOptions, jobConfiguration, jobTarget, errorsHourlyList);

                                    FileIOHelper.writeListToCSVFile(errorsFullList, new ErrorMetricReportMap(), errorsFullReportFilePath);
                                    FileIOHelper.writeListToCSVFile(errorsHourlyList, new ErrorMetricReportMap(), errorsHourlyReportFilePath);

                                    numEntitiesTotal = Interlocked.Add(ref numEntitiesTotal, errorsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Information Points

                                List<EntityInformationPoint> informationPointsList = FileIOHelper.readListFromCSVFile<EntityInformationPoint>(informationPointsReportFilePath, new InformationPointEntityReportMap());
                                if (informationPointsList != null)
                                {
                                    loggerConsole.Info("Index Metrics for Information Points ({0} entities)", informationPointsList.Count);

                                    List<EntityInformationPoint> informationPointsFullList = new List<EntityInformationPoint>(informationPointsList.Count);
                                    List<EntityInformationPoint> informationPointsHourlyList = new List<EntityInformationPoint>(informationPointsList.Count * jobConfiguration.Input.HourlyTimeRanges.Count);

                                    string metricsEntitiesFolderPath = Path.Combine(
                                        metricsFolderPath,
                                        INFORMATION_POINTS_TYPE_SHORT);

                                    #region Load Full Range Metrics

                                    string metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, fullRangeMetricDataFileName);
                                    List<AppDRESTMetric> metricDataFullEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                    List<AppDRESTMetric> metricDataFullEXCPM = null;

                                    List<AppDRESTMetric> metricDataFullHTTPEPM = null;

                                    #endregion

                                    int numEntities = 0;

                                    foreach (EntityInformationPoint informationPointRowOriginal in informationPointsList)
                                    {
                                        string metricsEntityFolderPath = Path.Combine(
                                            metricsFolderPath,
                                            INFORMATION_POINTS_TYPE_SHORT,
                                            getShortenedEntityNameForFileSystem(informationPointRowOriginal.IPName, informationPointRowOriginal.IPID));

                                        #region Full Range

                                        List<EntityInformationPoint> informationPointFullList = new List<EntityInformationPoint>(1);
                                        EntityInformationPoint informationPointRow = informationPointRowOriginal.Clone();
                                        fillFullRangeMetricEntityRow(informationPointRow, jobConfiguration.Input.ExpandedTimeRange, String.Format(METRIC_PATH_INFORMATION_POINT, informationPointRow.IPName, String.Empty), metricsEntityFolderPath, metricDataFullART, metricDataFullCPM, metricDataFullEPM, metricDataFullEXCPM, metricDataFullHTTPEPM);

                                        informationPointsFullList.Add(informationPointRow);
                                        informationPointFullList.Add(informationPointRow);

                                        #endregion

                                        #region Hourly ranges

                                        List<EntityInformationPoint> informationPointHourlyList = new List<EntityInformationPoint>(jobConfiguration.Input.HourlyTimeRanges.Count);
                                        for (int k = 0; k < jobConfiguration.Input.HourlyTimeRanges.Count; k++)
                                        {
                                            JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[k];

                                            string hourlyRangeMetricDataFileName = String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To);

                                            #region Load Hourly Range Metrics

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_ART_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyART = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_CPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyCPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            metricsDataFilePath = Path.Combine(metricsEntitiesFolderPath, METRIC_EPM_SHORTNAME, hourlyRangeMetricDataFileName);
                                            List<AppDRESTMetric> metricDataHourlyEPM = FileIOHelper.loadListOfObjectsFromFile<AppDRESTMetric>(metricsDataFilePath);

                                            List<AppDRESTMetric> metricDataHourlyEXCPM = null;

                                            List<AppDRESTMetric> metricDataHourlyHTTPEPM = null;

                                            #endregion

                                            #region Hour Range

                                            informationPointRow = informationPointRowOriginal.Clone();
                                            fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(informationPointRow, jobTimeRange, String.Format(METRIC_PATH_INFORMATION_POINT, informationPointRow.IPName, String.Empty), metricsEntityFolderPath, k, metricDataHourlyART, metricDataHourlyCPM, metricDataHourlyEPM, metricDataHourlyEXCPM, metricDataHourlyHTTPEPM);

                                            informationPointsHourlyList.Add(informationPointRow);
                                            informationPointHourlyList.Add(informationPointRow);

                                            #endregion
                                        }

                                        #endregion

                                        string entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(informationPointFullList, new InformationPointMetricReportMap(), entityFullRangeReportFilePath);

                                        string entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                                        FileIOHelper.writeListToCSVFile(informationPointHourlyList, new InformationPointMetricReportMap(), entityHourlyRangeReportFilePath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Information Points", numEntities);

                                    // Sort them
                                    informationPointsHourlyList = informationPointsHourlyList.OrderBy(o => o.IPName).ThenBy(o => o.From).ToList();

                                    updateEntitiesWithReportDetailLinksInformationPoints(programOptions, jobConfiguration, jobTarget, informationPointsFullList);
                                    updateEntitiesWithReportDetailLinksInformationPoints(programOptions, jobConfiguration, jobTarget, informationPointsHourlyList);

                                    FileIOHelper.writeListToCSVFile(informationPointsFullList, new InformationPointMetricReportMap(), informationPointsFullReportFilePath);
                                    FileIOHelper.writeListToCSVFile(informationPointsHourlyList, new InformationPointMetricReportMap(), informationPointsHourlyReportFilePath);

                                    numEntitiesTotal = Interlocked.Add(ref numEntitiesTotal, informationPointsList.Count);
                                }

                                #endregion
                            }
                        );

                        stepTimingTarget.NumEntities = numEntitiesTotal;

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(metricsAllFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(metricsAllFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(applicationsAllFullReportFilePath, applicationFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(applicationsAllHourlyReportFilePath, applicationHourlyReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(tiersAllFullReportFilePath, tiersFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(tiersAllHourlyReportFilePath, tiersHourlyReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(nodesAllFullReportFilePath, nodesFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(nodesAllHourlyReportFilePath, nodesHourlyReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendsAllFullReportFilePath, backendsFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(backendsAllHourlyReportFilePath, backendsHourlyReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionsAllFullReportFilePath, businessTransactionsFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessTransactionsAllHourlyReportFilePath, businessTransactionsHourlyReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(serviceEndpointsAllFullReportFilePath, serviceEndpointsFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(serviceEndpointsAllHourlyReportFilePath, serviceEndpointsHourlyReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(errorsAllFullReportFilePath, errorsFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(errorsAllHourlyReportFilePath, errorsHourlyReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(informationPointsAllFullReportFilePath, informationPointsFullReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(informationPointsAllHourlyReportFilePath, informationPointsHourlyReportFilePath);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexApplicationAndEntityFlowmaps(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string metricsFolderPath = Path.Combine(applicationFolderPath, METRICS_FOLDER_NAME);

                        // Report files
                        string applicationReportFilePath = Path.Combine(applicationFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);

                        int numEntitiesTotal = 0;

                        #endregion

                        Parallel.Invoke(
                            () =>
                            {
                                #region Application

                                List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());
                                if (applicationList != null && applicationList.Count > 0)
                                {
                                    loggerConsole.Info("Index Flowmap for Application");

                                    convertFlowmapApplication(programOptions, jobConfiguration, jobTarget, applicationList[0], metricsFolderPath);

                                    stepTimingTarget.NumEntities = Interlocked.Add(ref numEntitiesTotal, applicationList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Tiers

                                List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersReportFilePath, new TierEntityReportMap());
                                if (tiersList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Tiers ({0} entities)", tiersList.Count);

                                    int numEntities = 0;

                                    foreach (EntityTier tierRow in tiersList)
                                    {
                                        convertFlowmapTier(programOptions, jobConfiguration, jobTarget, tierRow, metricsFolderPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Tiers", numEntities);

                                    stepTimingTarget.NumEntities = Interlocked.Add(ref numEntitiesTotal, tiersList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Nodes

                                List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesReportFilePath, new NodeEntityReportMap());
                                if (nodesList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Nodes ({0} entities)", nodesList.Count);

                                    int numEntities = 0;

                                    foreach (EntityNode nodeRow in nodesList)
                                    {
                                        convertFlowmapNode(programOptions, jobConfiguration, jobTarget, nodeRow, metricsFolderPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Nodes", numEntities);

                                    stepTimingTarget.NumEntities = Interlocked.Add(ref numEntitiesTotal, nodesList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Backends

                                List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsReportFilePath, new BackendEntityReportMap());
                                if (backendsList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Backends ({0} entities)", backendsList.Count);

                                    int numEntities = 0;

                                    foreach (EntityBackend backendRow in backendsList)
                                    {
                                        convertFlowmapBackend(programOptions, jobConfiguration, jobTarget, backendRow, metricsFolderPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Backends", numEntities);

                                    stepTimingTarget.NumEntities = Interlocked.Add(ref numEntitiesTotal, backendsList.Count);
                                }

                                #endregion
                            },
                            () =>
                            {
                                #region Business Transactions

                                List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsReportFilePath, new BusinessTransactionEntityReportMap());
                                if (businessTransactionsList != null)
                                {
                                    loggerConsole.Info("Index Flowmap for Business Transactions ({0} entities)", businessTransactionsList.Count);

                                    int numEntities = 0;

                                    foreach (EntityBusinessTransaction businessTransactionRow in businessTransactionsList)
                                    {
                                        convertFlowmapsBusinessTransaction(programOptions, jobConfiguration, jobTarget, businessTransactionRow, metricsFolderPath);

                                        numEntities++;
                                        if (numEntities % 100 == 0)
                                        {
                                            Console.Write("[{0}].", numEntities);
                                        }
                                    }
                                    loggerConsole.Info("{0} Business Transactions", numEntities);

                                    stepTimingTarget.NumEntities = Interlocked.Add(ref numEntitiesTotal, businessTransactionsList.Count);
                                }

                                #endregion
                            }
                        );

                        stepTimingTarget.NumEntities = numEntitiesTotal;

                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexEventsAndHealthRuleViolations(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string eventsFolderPath = Path.Combine(applicationFolderPath, EVENTS_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                        string eventsAllFolderPath = Path.Combine(reportFolderPath, EVENTS_FOLDER_NAME);

                        // Previosly rendered report files
                        string applicationReportFilePath = Path.Combine(applicationFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);

                        // Report files
                        string applicationEventsSummaryReportFilePath = Path.Combine(eventsFolderPath, CONVERT_APPLICATION_EVENTS_FILE_NAME);
                        string healthRuleViolationEventsReportFilePath = Path.Combine(eventsFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                        string eventsReportFilePath = Path.Combine(eventsFolderPath, CONVERT_EVENTS_FILE_NAME);

                        // Report files for All
                        string applicationEventsSummaryAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_APPLICATION_EVENTS_FILE_NAME);
                        string healthRuleViolationEventsAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                        string eventsAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_EVENTS_FILE_NAME);

                        #endregion

                        #region Health Rule violations

                        loggerConsole.Info("Index health rule violations");

                        List<HealthRuleViolationEvent> healthRuleViolationList = new List<HealthRuleViolationEvent>();

                        long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.From);
                        long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.To);
                        long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
                        string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

                        string healthRuleViolationsDataFilePath = Path.Combine(
                            eventsFolderPath,
                            String.Format(HEALTH_RULE_VIOLATIONS_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                        if (File.Exists(healthRuleViolationsDataFilePath))
                        {
                            JArray eventsInHour = FileIOHelper.loadJArrayFromFile(healthRuleViolationsDataFilePath);
                            if (eventsInHour != null)
                            {
                                foreach (JObject interestingEvent in eventsInHour)
                                {
                                    HealthRuleViolationEvent eventRow = new HealthRuleViolationEvent();
                                    eventRow.Controller = jobTarget.Controller;
                                    eventRow.ApplicationName = jobTarget.Application;
                                    eventRow.ApplicationID = jobTarget.ApplicationID;

                                    eventRow.EventID = (long)interestingEvent["id"];
                                    eventRow.FromUtc = convertFromUnixTimestamp((long)interestingEvent["startTimeInMillis"]);
                                    eventRow.From = eventRow.FromUtc.ToLocalTime();
                                    if ((long)interestingEvent["endTimeInMillis"] > 0)
                                    {
                                        eventRow.ToUtc = convertFromUnixTimestamp((long)interestingEvent["endTimeInMillis"]);
                                        eventRow.To = eventRow.FromUtc.ToLocalTime();
                                    }
                                    eventRow.Status = interestingEvent["incidentStatus"].ToString();
                                    eventRow.Severity = interestingEvent["severity"].ToString();
                                    //eventRow.EventLink = interestingEvent["deepLinkUrl"].ToString();
                                    eventRow.EventLink = String.Format(DEEPLINK_INCIDENT, eventRow.Controller, eventRow.ApplicationID, eventRow.EventID, interestingEvent["startTimeInMillis"], DEEPLINK_THIS_TIMERANGE); ;

                                    eventRow.Description = interestingEvent["description"].ToString();

                                    if (interestingEvent["triggeredEntityDefinition"].HasValues == true)
                                    {
                                        eventRow.HealthRuleID = (int)interestingEvent["triggeredEntityDefinition"]["entityId"];
                                        eventRow.HealthRuleName = interestingEvent["triggeredEntityDefinition"]["name"].ToString();
                                        // TODO the health rule can't be hotlinked to until platform rewrites this nonsense from Flash
                                        eventRow.HealthRuleLink = String.Format(DEEPLINK_HEALTH_RULE, eventRow.Controller, eventRow.ApplicationID, eventRow.HealthRuleID, DEEPLINK_THIS_TIMERANGE);
                                    }

                                    if (interestingEvent["affectedEntityDefinition"].HasValues == true)
                                    {
                                        eventRow.EntityID = (int)interestingEvent["affectedEntityDefinition"]["entityId"];
                                        eventRow.EntityName = interestingEvent["affectedEntityDefinition"]["name"].ToString();

                                        string entityType = interestingEvent["affectedEntityDefinition"]["entityType"].ToString();
                                        if (entityTypeStringMapping.ContainsKey(entityType) == true)
                                        {
                                            eventRow.EntityType = entityTypeStringMapping[entityType];
                                        }
                                        else
                                        {
                                            eventRow.EntityType = entityType;
                                        }

                                        // Come up with links
                                        switch (entityType)
                                        {
                                            case ENTITY_TYPE_APPLICATION:
                                                eventRow.EntityLink = String.Format(DEEPLINK_APPLICATION, eventRow.Controller, eventRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_APPLICATION_MOBILE:
                                                eventRow.EntityLink = String.Format(DEEPLINK_APPLICATION_MOBILE, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_TIER:
                                                eventRow.EntityLink = String.Format(DEEPLINK_TIER, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_NODE:
                                                eventRow.EntityLink = String.Format(DEEPLINK_NODE, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_BUSINESS_TRANSACTION:
                                                eventRow.EntityLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            case ENTITY_TYPE_BACKEND:
                                                eventRow.EntityLink = String.Format(DEEPLINK_BACKEND, eventRow.Controller, eventRow.ApplicationID, eventRow.EntityID, DEEPLINK_THIS_TIMERANGE);
                                                break;

                                            default:
                                                logger.Warn("Unknown entity type {0} in affectedEntityDefinition in health rule violations", entityType);
                                                break;
                                        }
                                    }

                                    eventRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, eventRow.Controller, DEEPLINK_THIS_TIMERANGE);
                                    eventRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, eventRow.Controller, eventRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                                    healthRuleViolationList.Add(eventRow);
                                }
                            }
                        }

                        loggerConsole.Info("{0} events", healthRuleViolationList.Count);

                        stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + healthRuleViolationList.Count;

                        // Sort them
                        healthRuleViolationList = healthRuleViolationList.OrderBy(o => o.HealthRuleName).ThenBy(o => o.From).ThenBy(o => o.Severity).ToList();

                        FileIOHelper.writeListToCSVFile<HealthRuleViolationEvent>(healthRuleViolationList, new HealthRuleViolationEventReportMap(), healthRuleViolationEventsReportFilePath);

                        #endregion

                        #region Events

                        loggerConsole.Info("Index events");

                        List<Event> eventsList = new List<Event>();
                        foreach (string eventType in eventTypes)
                        {
                            loggerConsole.Info("Type {0} events", eventType);

                            string eventsDataFilePath = Path.Combine(
                                eventsFolderPath,
                                String.Format(EVENTS_FILE_NAME, eventType, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                            if (File.Exists(eventsDataFilePath))
                            {
                                JArray eventsInHour = FileIOHelper.loadJArrayFromFile(eventsDataFilePath);
                                if (eventsInHour != null)
                                {
                                    foreach (JObject interestingEvent in eventsInHour)
                                    {
                                        Event eventRow = new Event();
                                        eventRow.Controller = jobTarget.Controller;
                                        eventRow.ApplicationName = jobTarget.Application;
                                        eventRow.ApplicationID = jobTarget.ApplicationID;

                                        eventRow.EventID = (long)interestingEvent["id"];
                                        eventRow.OccurredUtc = convertFromUnixTimestamp((long)interestingEvent["eventTime"]);
                                        eventRow.Occurred = eventRow.OccurredUtc.ToLocalTime();
                                        eventRow.Type = interestingEvent["type"].ToString();
                                        eventRow.SubType = interestingEvent["subType"].ToString();
                                        eventRow.Severity = interestingEvent["severity"].ToString();
                                        eventRow.EventLink = interestingEvent["deepLinkUrl"].ToString();
                                        eventRow.Summary = interestingEvent["summary"].ToString();

                                        if (interestingEvent["triggeredEntity"].HasValues == true)
                                        {
                                            eventRow.TriggeredEntityID = (int)interestingEvent["triggeredEntity"]["entityId"];
                                            eventRow.TriggeredEntityName = interestingEvent["triggeredEntity"]["name"].ToString();
                                            string entityType = interestingEvent["triggeredEntity"]["entityType"].ToString();
                                            if (entityTypeStringMapping.ContainsKey(entityType) == true)
                                            {
                                                eventRow.TriggeredEntityType = entityTypeStringMapping[entityType];
                                            }
                                            else
                                            {
                                                eventRow.TriggeredEntityType = entityType;
                                            }
                                        }

                                        foreach (JObject affectedEntity in interestingEvent["affectedEntities"])
                                        {
                                            string entityType = affectedEntity["entityType"].ToString();
                                            switch (entityType)
                                            {
                                                case ENTITY_TYPE_APPLICATION:
                                                    // already have this data
                                                    break;

                                                case ENTITY_TYPE_TIER:
                                                    eventRow.TierID = (int)affectedEntity["entityId"];
                                                    eventRow.TierName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_NODE:
                                                    eventRow.NodeID = (int)affectedEntity["entityId"];
                                                    eventRow.NodeName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_MACHINE:
                                                    eventRow.MachineID = (int)affectedEntity["entityId"];
                                                    eventRow.MachineName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_BUSINESS_TRANSACTION:
                                                    eventRow.BTID = (int)affectedEntity["entityId"];
                                                    eventRow.BTName = affectedEntity["name"].ToString();
                                                    break;

                                                case ENTITY_TYPE_HEALTH_RULE:
                                                    eventRow.TriggeredEntityID = (int)affectedEntity["entityId"];
                                                    eventRow.TriggeredEntityType = entityTypeStringMapping[affectedEntity["entityType"].ToString()];
                                                    eventRow.TriggeredEntityName = affectedEntity["name"].ToString();
                                                    break;

                                                default:
                                                    logger.Warn("Unknown entity type {0} in affectedEntities in events", entityType);
                                                    break;
                                            }
                                        }

                                        eventRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, eventRow.Controller, DEEPLINK_THIS_TIMERANGE);
                                        eventRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, eventRow.Controller, eventRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                                        if (eventRow.TierID != 0)
                                        {
                                            eventRow.TierLink = String.Format(DEEPLINK_TIER, eventRow.Controller, eventRow.ApplicationID, eventRow.TierID, DEEPLINK_THIS_TIMERANGE);
                                        }
                                        if (eventRow.NodeID != 0)
                                        {
                                            eventRow.NodeLink = String.Format(DEEPLINK_NODE, eventRow.Controller, eventRow.ApplicationID, eventRow.NodeID, DEEPLINK_THIS_TIMERANGE);
                                        }
                                        if (eventRow.BTID != 0)
                                        {
                                            eventRow.BTLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, eventRow.Controller, eventRow.ApplicationID, eventRow.BTID, DEEPLINK_THIS_TIMERANGE);
                                        }

                                        eventsList.Add(eventRow);
                                    }
                                }
                            }
                        }
                        loggerConsole.Info("{0} events", eventsList.Count);

                        stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + eventsList.Count;

                        // Sort them
                        eventsList = eventsList.OrderBy(o => o.Type).ThenBy(o => o.Occurred).ThenBy(o => o.Severity).ToList();

                        FileIOHelper.writeListToCSVFile<Event>(eventsList, new EventReportMap(), eventsReportFilePath);

                        #endregion

                        #region Application

                        List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());
                        if (applicationList != null && applicationList.Count > 0)
                        {
                            EntityApplication applicationsRow = applicationList[0];

                            applicationsRow.NumEvents = eventsList.Count;
                            applicationsRow.NumEventsError = eventsList.Count(e => e.Severity == "ERROR");
                            applicationsRow.NumEventsWarning = eventsList.Count(e => e.Severity == "WARN");
                            applicationsRow.NumEventsInfo = eventsList.Count(e => e.Severity == "INFO");

                            applicationsRow.NumHRViolations = healthRuleViolationList.Count;
                            applicationsRow.NumHRViolationsCritical = healthRuleViolationList.Count(e => e.Severity == "CRITICAL");
                            applicationsRow.NumHRViolationsWarning = healthRuleViolationList.Count(e => e.Severity == "WARNING");

                            applicationsRow.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                            applicationsRow.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                            applicationsRow.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                            applicationsRow.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                            applicationsRow.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;

                            if (applicationsRow.NumEvents > 0 || applicationsRow.NumHRViolations > 0)
                            {
                                applicationsRow.HasActivity = true;
                            }

                            FileIOHelper.writeListToCSVFile(applicationList, new ApplicationEventReportMap(), applicationEventsSummaryReportFilePath);
                        }

                        #endregion

                        #region Combine All for Report CSV

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(eventsAllFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(eventsAllFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(applicationEventsSummaryAllReportFilePath, applicationEventsSummaryReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(healthRuleViolationEventsAllReportFilePath, healthRuleViolationEventsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(eventsAllReportFilePath, eventsReportFilePath);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepIndexSnapshots(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string snapshotsFolderPath = Path.Combine(applicationFolderPath, SNAPSHOTS_FOLDER_NAME);
                        string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                        string snapshotsAllFolderPath = Path.Combine(reportFolderPath, SNAPSHOTS_FOLDER_NAME);
                        string configFolderPath = Path.Combine(applicationFolderPath, CONFIGURATION_FOLDER_NAME);

                        // Previosly rendered report files
                        string applicationReportFilePath = Path.Combine(applicationFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string serviceEndpointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string methodInvocationDataCollectorsReportFilePath = Path.Combine(configFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                        string methodCallLinesToFrameworkTypeMappingFilePath = Path.Combine(programOptions.ProgramLocationFolderPath, METHOD_CALL_LINES_TO_FRAMEWORK_TYPE_MAPPING_FILE_NAME);

                        // Report files
                        string snapshotsReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                        string segmentsReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                        string callExitsReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                        string serviceEndpointCallsReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                        string detectedErrorsReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                        string businessDataReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                        string methodCallLinesReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                        string methodCallLinesOccurrencesReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);
                        string applicationSnapshotsSummaryReportFilePath = Path.Combine(snapshotsFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                        // Report files for All
                        string snapshotsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                        string segmentsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                        string callExitsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                        string serviceEndpointCallsAllReporFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                        string detectedErrorsAllReporFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                        string businessDataAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                        string methodCallLinesAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                        string methodCallLinesOccurrencesAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);
                        string applicationSnapshotsSummaryAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                        #endregion

                        #region Index Snapshots

                        // Process each hour at a time
                        loggerConsole.Info("Index Snapshots");

                        List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersReportFilePath, new TierEntityReportMap());
                        List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsReportFilePath, new BackendEntityReportMap());
                        List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsReportFilePath, new ServiceEndpointEntityReportMap());
                        List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsReportFilePath, new ErrorEntityReportMap());
                        List<MethodInvocationDataCollector> methodInvocationDataCollectorsList = FileIOHelper.readListFromCSVFile<MethodInvocationDataCollector>(methodInvocationDataCollectorsReportFilePath, new MethodInvocationDataCollectorReportMap());

                        // Load and bucketize the framework mappings
                        List<MethodCallLineClassTypeMapping> methodCallLineClassToFrameworkTypeMappingList = FileIOHelper.readListFromCSVFile<MethodCallLineClassTypeMapping>(methodCallLinesToFrameworkTypeMappingFilePath, new MethodCallLineClassTypeMappingReportMap());
                        methodCallLineClassToFrameworkTypeMappingList = methodCallLineClassToFrameworkTypeMappingList.OrderByDescending(m => m.ClassPrefix).ToList();
                        Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary = new Dictionary<string, List<MethodCallLineClassTypeMapping>>(26);
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("a", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "a").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("b", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "b").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("c", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "c").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("d", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "d").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("e", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "e").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("f", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "f").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("g", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "g").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("h", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "h").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("i", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "i").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("j", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "j").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("k", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "k").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("l", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "l").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("m", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "m").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("n", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "n").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("o", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "o").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("p", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "p").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("q", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "q").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("r", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "r").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("s", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "s").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("t", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "t").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("u", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "u").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("v", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "v").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("w", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "w").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("x", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "x").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("y", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "y").ToList());
                        methodCallLineClassToFrameworkTypeMappingDictionary.Add("z", methodCallLineClassToFrameworkTypeMappingList.Where(m => m.ClassPrefix.Substring(0, 1).ToLower() == "z").ToList());

                        int totalNumberOfSnapshots = 0;
                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            string snapshotsListFilePath = Path.Combine(snapshotsFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
                            JArray listOfSnapshotsInHour = FileIOHelper.loadJArrayFromFile(snapshotsListFilePath);

                            int j = 0;

                            if (listOfSnapshotsInHour != null && listOfSnapshotsInHour.Count > 0)
                            {
                                loggerConsole.Info("Index Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHour.Count);

                                stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + listOfSnapshotsInHour.Count;

                                if (programOptions.ProcessSequentially == false)
                                {
                                    var listOfSnapshotsInHourChunks = listOfSnapshotsInHour.BreakListIntoChunks(SNAPSHOTS_INDEX_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                    Parallel.ForEach<List<JToken>, int>(
                                        listOfSnapshotsInHourChunks, 
                                        () => 0,
                                        (listOfSnapshotsInHourChunk, loop, subtotal) =>
                                        {
                                            subtotal += indexSnapshots(programOptions, jobConfiguration, jobTarget, jobTimeRange, listOfSnapshotsInHourChunk, tiersList, backendsList, serviceEndpointsList, errorsList, methodInvocationDataCollectorsList, methodCallLineClassToFrameworkTypeMappingDictionary, false);
                                            return subtotal;
                                        },
                                        (finalResult) =>
                                        {
                                            j = Interlocked.Add(ref j, finalResult);
                                            Console.Write("[{0}].", j);
                                        }
                                    );
                                }
                                else
                                {
                                    j = indexSnapshots(programOptions, jobConfiguration, jobTarget, jobTimeRange, listOfSnapshotsInHour.ToList<JToken>(), tiersList, backendsList, serviceEndpointsList, errorsList, methodInvocationDataCollectorsList, methodCallLineClassToFrameworkTypeMappingDictionary, true);
                                }

                                loggerConsole.Info("{0} snapshots", j);
                                totalNumberOfSnapshots = totalNumberOfSnapshots + j;
                            }
                        }
                        loggerConsole.Info("{0} snapshots total", totalNumberOfSnapshots);

                        #endregion

                        #region Combine Snapshots, Segments, Call Exits, Service Endpoints and Business Data for this Application

                        // Assemble snapshot files into summary file for entire application
                        loggerConsole.Info("Combine Snapshots for This Application");

                        FileIOHelper.deleteFile(snapshotsReportFilePath);
                        FileIOHelper.deleteFile(segmentsReportFilePath);
                        FileIOHelper.deleteFile(callExitsReportFilePath);
                        FileIOHelper.deleteFile(serviceEndpointCallsReportFilePath);
                        FileIOHelper.deleteFile(detectedErrorsReportFilePath);
                        FileIOHelper.deleteFile(businessDataReportFilePath);
                        FileIOHelper.deleteFile(methodCallLinesReportFilePath);
                        FileIOHelper.deleteFile(methodCallLinesOccurrencesReportFilePath);
                        FileIOHelper.deleteFile(applicationSnapshotsSummaryReportFilePath);

                        List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());
                        EntityApplication applicationsRow = null;
                        if (applicationList != null && applicationList.Count > 0)
                        {
                            applicationsRow = applicationList[0];

                            applicationsRow.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                            applicationsRow.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                            applicationsRow.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                            applicationsRow.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                            applicationsRow.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;
                        }

                        Hashtable requestIDs = new Hashtable(totalNumberOfSnapshots);

                        foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
                        {
                            int j = 0;

                            string snapshotsListFilePath = Path.Combine(snapshotsFolderPath, String.Format(EXTRACT_SNAPSHOTS_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
                            JArray listOfSnapshotsInHour = FileIOHelper.loadJArrayFromFile(snapshotsListFilePath);

                            if (listOfSnapshotsInHour != null && listOfSnapshotsInHour.Count > 0)
                            {
                                loggerConsole.Info("Combine Snapshots {0:o} to {1:o} ({2} snapshots)", jobTimeRange.From, jobTimeRange.To, listOfSnapshotsInHour.Count);

                                using (FileStream snapshotsReportFileStream = File.Open(snapshotsReportFilePath, FileMode.Append))
                                {
                                    using (FileStream segmentsReportFileStream = File.Open(segmentsReportFilePath, FileMode.Append))
                                    {
                                        using (FileStream callExitsReportFileStream = File.Open(callExitsReportFilePath, FileMode.Append))
                                        {
                                            using (FileStream serviceEndpointCallsReportFileStream = File.Open(serviceEndpointCallsReportFilePath, FileMode.Append))
                                            {
                                                using (FileStream detectedErrorsReportFileStream = File.Open(detectedErrorsReportFilePath, FileMode.Append))
                                                {
                                                    using (FileStream businessDataReportFileStream = File.Open(businessDataReportFilePath, FileMode.Append))
                                                    {
                                                        using (FileStream methodCallLinesReportFileStream = File.Open(methodCallLinesReportFilePath, FileMode.Append))
                                                        {
                                                            using (FileStream methodCallLinesOccurrencesReportFileStream = File.Open(methodCallLinesOccurrencesReportFilePath, FileMode.Append))
                                                            {
                                                                foreach (JToken snapshot in listOfSnapshotsInHour)
                                                                {
                                                                    if (requestIDs.ContainsKey(snapshot["requestGUID"].ToString()) == true)
                                                                    {
                                                                        logger.Warn("Snapshot {0} is a duplicate, skipping", snapshot["requestGUID"]);
                                                                        continue;
                                                                    }
                                                                    requestIDs.Add(snapshot["requestGUID"].ToString(), true);

                                                                    // Count the snapshot
                                                                    if (applicationsRow != null)
                                                                    {
                                                                        applicationsRow.NumSnapshots++;
                                                                        switch (snapshot["userExperience"].ToString())
                                                                        {
                                                                            case "NORMAL":
                                                                                applicationsRow.NumSnapshotsNormal++;
                                                                                break;

                                                                            case "SLOW":
                                                                                applicationsRow.NumSnapshotsSlow++;
                                                                                break;

                                                                            case "VERY_SLOW":
                                                                                applicationsRow.NumSnapshotsVerySlow++;
                                                                                break;

                                                                            case "STALL":
                                                                                applicationsRow.NumSnapshotsStall++;
                                                                                break;

                                                                            case "ERROR":
                                                                                applicationsRow.NumSnapshotsError++;
                                                                                break;

                                                                            default:
                                                                                break;
                                                                        }
                                                                    }

                                                                    DateTime snapshotTime = convertFromUnixTimestamp((long)snapshot["serverStartTime"]);

                                                                    string snapshotFolderPath = Path.Combine(
                                                                        snapshotsFolderPath,
                                                                        getShortenedEntityNameForFileSystem(snapshot["applicationComponentName"].ToString(), (long)snapshot["applicationComponentId"]),
                                                                        getShortenedEntityNameForFileSystem(snapshot["businessTransactionName"].ToString(), (long)snapshot["businessTransactionId"]),
                                                                        String.Format("{0:yyyyMMddHH}", snapshotTime),
                                                                        userExperienceFolderNameMapping[snapshot["userExperience"].ToString()],
                                                                        String.Format(SNAPSHOT_FOLDER_NAME, snapshot["requestGUID"], snapshotTime));

                                                                    string thisSnapshotSnapshotsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_FILE_NAME);
                                                                    string thisSnapshotSegmentsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_FILE_NAME);
                                                                    string thisSnapshotExitCallsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_EXIT_CALLS_FILE_NAME);
                                                                    string thisSnapshotServiceEndpointCallsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_SERVICE_ENDPOINT_CALLS_FILE_NAME);
                                                                    string thisSnapshotDetectedErrorsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                                                                    string thisSnapshotBusinessDataFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                                                                    string thisSnapshotMethodCallLinesFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                                                                    string thisSnapshotMethodCallOccurrencesLinesFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);

                                                                    FileIOHelper.appendTwoCSVFiles(snapshotsReportFileStream, thisSnapshotSnapshotsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(segmentsReportFileStream, thisSnapshotSegmentsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(callExitsReportFileStream, thisSnapshotExitCallsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(serviceEndpointCallsReportFileStream, thisSnapshotServiceEndpointCallsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(detectedErrorsReportFileStream, thisSnapshotDetectedErrorsFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(businessDataReportFileStream, thisSnapshotBusinessDataFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(methodCallLinesReportFileStream, thisSnapshotMethodCallLinesFileName);
                                                                    FileIOHelper.appendTwoCSVFiles(methodCallLinesOccurrencesReportFileStream, thisSnapshotMethodCallOccurrencesLinesFileName);

                                                                    j++;
                                                                    if (j % 200 == 0)
                                                                    {
                                                                        Console.Write("[{0}].", j);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            loggerConsole.Info("{0} snapshots", j);
                        }

                        if (applicationsRow != null)
                        {
                            if (applicationsRow.NumSnapshots > 0)
                            {
                                applicationsRow.HasActivity = true;
                            }
                        }
                        FileIOHelper.writeListToCSVFile(applicationList, new ApplicationSnapshotReportMap(), applicationSnapshotsSummaryReportFilePath);

                        #endregion

                        #region Combine All for Report CSV

                        loggerConsole.Info("Combine Snapshots for All Applications");

                        // If it is the first one, clear out the combined folder
                        if (i == 0)
                        {
                            FileIOHelper.deleteFolder(snapshotsAllFolderPath);
                            Thread.Sleep(1000);
                            FileIOHelper.createFolder(snapshotsAllFolderPath);
                        }

                        // Append all the individual application files into one
                        FileIOHelper.appendTwoCSVFiles(snapshotsAllReportFilePath, snapshotsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(segmentsAllReportFilePath, segmentsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(callExitsAllReportFilePath, callExitsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(serviceEndpointCallsAllReporFilePath, serviceEndpointCallsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(detectedErrorsAllReporFilePath, detectedErrorsReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(businessDataAllReportFilePath, businessDataReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(methodCallLinesAllReportFilePath, methodCallLinesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(methodCallLinesOccurrencesAllReportFilePath, methodCallLinesOccurrencesReportFilePath);
                        FileIOHelper.appendTwoCSVFiles(applicationSnapshotsSummaryAllReportFilePath, applicationSnapshotsSummaryReportFilePath);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        #endregion

        #region Reporting steps

        private static bool stepReportControlerApplicationsAndEntities(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Detected Entities Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Detected Entities Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                int l = 1;
                sheet.Cells[l, 1].Value = "Table of Contents";
                sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[l, 2].StyleName = "HyperLinkStyle";
                l++; l++;
                sheet.Cells[l, 1].Value = "AppDynamics DEXTER Detected Entities Report";
                l++;
                sheet.Cells[l, 1].Value = "Version";
                sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
                l++; l++;
                sheet.Cells[l, 1].Value = "From";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "To";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Number of Hours Intervals";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
                l++;
                sheet.Cells[l, 1].Value = "Export Metrics";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
                l++;
                sheet.Cells[l, 1].Value = "Export Snapshots";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
                l++;
                sheet.Cells[l, 1].Value = "Export Flowmaps";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
                l++;
                sheet.Cells[l, 1].Value = "Export Configuration";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
                l++;
                sheet.Cells[l, 1].Value = "Export Events";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
                l++;
                sheet.Cells[l, 1].Value = "Targets:";
                l++; l++;
                ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                            select new
                                                                            {
                                                                                Controller = jobTarget.Controller,
                                                                                UserName = jobTarget.UserName,
                                                                                Application = jobTarget.Application,
                                                                                ApplicationID = jobTarget.ApplicationID,
                                                                                Status = jobTarget.Status.ToString()
                                                                            }, true);
                ExcelTable table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_PARAMETERS_TARGETS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(1).Width = 25;                
                sheet.Column(2).Width = 25;
                sheet.Column(3).Width = 25;

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of App Agent";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Types of Machine Agent";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Backends";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Locations of Backends";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of BTs";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Location of BTs";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Type of SEPs";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Location of SEPs";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Errors by Type";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Location of Errors";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Information Points by Type";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                #endregion

                loggerConsole.Info("Fill Detected Entities Report File");

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string applicationsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_APPLICATIONS_FILE_NAME);
                string tiersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                string nodesAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                string backendsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                string businessTransactionsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                string serviceEndpointsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                string errorsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                string informationPointsAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                #endregion

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST];
                readCSVFileIntoExcelRange(applicationsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Tiers

                loggerConsole.Info("List of Tiers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST];
                readCSVFileIntoExcelRange(tiersAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Nodes

                loggerConsole.Info("List of Nodes");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST];
                readCSVFileIntoExcelRange(nodesAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Backends

                loggerConsole.Info("List of Backends");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST];
                readCSVFileIntoExcelRange(backendsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transactions

                loggerConsole.Info("List of Business Transactions");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST];
                readCSVFileIntoExcelRange(businessTransactionsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Service Endpoints

                loggerConsole.Info("List of Service Endpoints");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST];
                readCSVFileIntoExcelRange(serviceEndpointsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Errors

                loggerConsole.Info("List of Errors");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST];
                readCSVFileIntoExcelRange(errorsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Information Points

                loggerConsole.Info("List of Information Points");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST];
                readCSVFileIntoExcelRange(informationPointsAllReportFilePath, 0, sheet, REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Detected Entities Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_APPLICATIONS_LIST];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(APPLICATION_TYPE_SHORT, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumTiers"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumNodes"].Position + 1, sheet.Dimension.Rows, table.Columns["NumNodes"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumIPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumIPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Tiers

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_TIERS_LIST];
                logger.Info("Tiers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tiers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_TIERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(TIERS_TYPE_SHORT, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumNodes"].Position + 1, sheet.Dimension.Rows, table.Columns["NumNodes"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_TIERS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_TIERS);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["AgentType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["TierName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_TIERS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Nodes

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_LIST];
                logger.Info("Nodes Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Nodes Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_NODES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(NODES_TYPE_SHORT, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_APPAGENT_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["AgentPresent"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["NodeName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["AgentType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["AgentVersion"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["TierName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_APPAGENT_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_NODES_TYPE_MACHINEAGENT_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT);
                    fieldF = pivot.PageFields.Add(pivot.Fields["MachineAgentPresent"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["MachineName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["MachineAgentVersion"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    fieldD = pivot.DataFields.Add(pivot.Fields["TierName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_NODES_TYPE_MACHINEAGENT_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Backends

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LIST];
                logger.Info("Backends Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backends Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_BACKENDS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(BACKENDS_TYPE_SHORT, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BackendName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["BackendType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["BackendName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BACKENDS_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BACKENDS_LOCATION);
                    fieldR = pivot.RowFields.Add(pivot.Fields["BackendType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BackendName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["BackendName"]);
                    fieldD.Function = DataFieldFunctions.Count;
                }

                #endregion

                #region Business Transactions

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LIST];
                logger.Info("Business Transactions Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transactions Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_BUSINESS_TRANSACTIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(BUSINESS_TRANSACTIONS_TYPE_SHORT, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["BTType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["BTName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_BUSINESS_TRANSACTIONS_LOCATION_SHEET);
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["BTName"]);
                    fieldD.Function = DataFieldFunctions.Count;
                }

                #endregion

                #region Service Endpoints

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LIST];
                logger.Info("Service Endpoints Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Service Endpoints Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_SERVICE_ENDPOINTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(SERVICE_ENDPOINTS_TYPE_SHORT, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["SEPName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["SEPType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["SEPName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_SERVICE_ENDPOINTS_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_SERVICE_ENDPOINTS_LOCATION);
                    fieldR = pivot.RowFields.Add(pivot.Fields["SEPType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["SEPName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["SEPName"]);
                    fieldD.Function = DataFieldFunctions.Count;
                }

                #endregion

                #region Errors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LIST];
                logger.Info("Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_ERRORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(ERRORS_TYPE_SHORT, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ErrorName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["ErrorType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["ErrorName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_ERRORS_LOCATION_PIVOT_LOCATION];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_ERRORS_LOCATION);
                    fieldR = pivot.RowFields.Add(pivot.Fields["ErrorType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ErrorName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["ErrorName"]);
                    fieldD.Function = DataFieldFunctions.Count;
                }

                #endregion

                #region Errors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_LIST];
                logger.Info("Information Points Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Points Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_INFORMATION_POINTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInEntitiesReport(INFORMATION_POINTS_TYPE_SHORT, sheet, table);

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_ENTITIES_SHEET_INFORMATION_POINTS_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_ENTITIES_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_ENTITIES_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["IPName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["IPType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["IPName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_ENTITIES_PIVOT_INFORMATION_POINTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        sheet.Cells[rowNum, 2].Value = s.Tables[0].Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_DETECTED_ENTITIES_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_DETECTED_ENTITIES_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportControllerAndApplicationConfiguration(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Controller and Application Configuration Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Controller and Application Configuration  Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                int l = 1;
                sheet.Cells[l, 1].Value = "Table of Contents";
                sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                l++; l++;
                sheet.Cells[l, 1].Value = "AppDynamics DEXTER Controller and Application Configuration Report";
                l++;
                sheet.Cells[l, 1].Value = "Version";
                sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
                l++; l++;
                sheet.Cells[l, 1].Value = "From";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "To";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Number of Hours Intervals";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
                l++;
                sheet.Cells[l, 1].Value = "Export Metrics";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
                l++;
                sheet.Cells[l, 1].Value = "Export Snapshots";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
                l++;
                sheet.Cells[l, 1].Value = "Export Flowmaps";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
                l++;
                sheet.Cells[l, 1].Value = "Export Configuration";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
                l++;
                sheet.Cells[l, 1].Value = "Export Events";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
                l++;
                sheet.Cells[l, 1].Value = "Targets:";
                l++; l++;
                ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                            select new
                                                                            {
                                                                                Controller = jobTarget.Controller,
                                                                                UserName = jobTarget.UserName,
                                                                                Application = jobTarget.Application,
                                                                                ApplicationID = jobTarget.ApplicationID,
                                                                                Status = jobTarget.Status.ToString()
                                                                            }, true);
                ExcelTable table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_PARAMETERS_TARGETS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(1).Width = 25;
                sheet.Column(2).Width = 25;
                sheet.Column(3).Width = 25;

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of BT Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Locations BT Rules";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of BT Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "Locations BT Rules";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Backend Detection Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Custom Exit Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_HEALTH_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Health Rules";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_HEALTH_RULES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_TIER_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "Types of Agent Configuration Properties";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, 1);

                #endregion

                loggerConsole.Info("Fill Controller and Application Configuration Report File");

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string configAllFolderPath = Path.Combine(reportFolderPath, CONFIGURATION_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string controllerSettingsAllReportFilePath = Path.Combine(configAllFolderPath, CONTROLLER_SETTINGS_FILE_NAME);
                string applicationConfigurationAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_FILE_NAME);
                string businessTransactionDiscoveryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_FILE_NAME);
                string businessTransactionEntryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_FILE_NAME);
                string businessTransactionEntryScopesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_SCOPES_FILE_NAME);
                string businessTransactionDiscoveryRules20AllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_DISCOVERY_RULES_2_0_FILE_NAME);
                string businessTransactionEntryRules20AllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BUSINESS_TRANSACTION_ENTRY_RULES_2_0_FILE_NAME);
                string backendDiscoveryRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_BACKEND_DISCOVERY_RULES_FILE_NAME);
                string customExitRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_CUSTOM_EXIT_RULES_FILE_NAME);
                string informationPointRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_INFORMATION_POINT_RULES_FILE_NAME);
                string agentConfigurationPropertiesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_AGENT_CONFIGURATION_PROPERTIES_FILE_NAME);
                string methodInvocationDataCollectorsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_METHOD_INVOCATION_DATA_COLLECTORS_FILE_NAME);
                string httpDataCollectorsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_HTTP_DATA_COLLECTORS_FILE_NAME);
                string entityTierConfigurationsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_ENTITY_TIERS_FILE_NAME);
                string entityBusinessTransactionConfigurationsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                string agentCallGraphSettingsAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_AGENT_CALL_GRAPH_SETTINGS_FILE_NAME);
                string healthRulesAllReportFilePath = Path.Combine(configAllFolderPath, APPLICATION_CONFIGURATION_HEALTH_RULES_FILE_NAME);

                #endregion

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Controller Settings

                loggerConsole.Info("List of Controller Settings");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS];
                readCSVFileIntoExcelRange(controllerSettingsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Application Configuration

                loggerConsole.Info("List of Application Configuration");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION];
                readCSVFileIntoExcelRange(applicationConfigurationAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Detection Rules

                loggerConsole.Info("List of Business Transaction Detection Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES];
                readCSVFileIntoExcelRange(businessTransactionDiscoveryRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Entry Rules

                loggerConsole.Info("List of Business Transaction Entry Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES];
                readCSVFileIntoExcelRange(businessTransactionEntryRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Scopes

                loggerConsole.Info("List of Business Transaction Scopes");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES];
                readCSVFileIntoExcelRange(businessTransactionEntryScopesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Detection Rules 2.0

                loggerConsole.Info("List of Business Transaction 2.0 Detection Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20];
                readCSVFileIntoExcelRange(businessTransactionDiscoveryRules20AllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transaction Entry Rules 2.0

                loggerConsole.Info("List of Business Transaction 2.0 Entry Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20];
                readCSVFileIntoExcelRange(businessTransactionEntryRules20AllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Backend Discovery Rules

                loggerConsole.Info("List of Backend Detection Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES];
                readCSVFileIntoExcelRange(backendDiscoveryRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Custom Exit Rules

                loggerConsole.Info("List of Custom Exit Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES];
                readCSVFileIntoExcelRange(customExitRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Information Point Rules

                loggerConsole.Info("List of Information Point Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES];
                readCSVFileIntoExcelRange(informationPointRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Agent Configuration Properties

                loggerConsole.Info("List of Agent Configuration Properties");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES];
                readCSVFileIntoExcelRange(agentConfigurationPropertiesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Data Collectors

                loggerConsole.Info("List of Method Invocation Data Collectors");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS];
                readCSVFileIntoExcelRange(methodInvocationDataCollectorsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of HTTP Data Collectors");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS];
                readCSVFileIntoExcelRange(httpDataCollectorsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Tier Settings

                loggerConsole.Info("List of Tier Settings");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_TIER_SETTINGS];
                readCSVFileIntoExcelRange(entityTierConfigurationsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Detected Business Transaction and Assigned Data Collectors

                loggerConsole.Info("List of Detected Business Transaction and Assigned Data Collectors");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS];
                readCSVFileIntoExcelRange(entityBusinessTransactionConfigurationsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Agent Call Graph Settings

                loggerConsole.Info("List of Agent Call Graph Settings");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS];
                readCSVFileIntoExcelRange(agentCallGraphSettingsAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Health Rules

                loggerConsole.Info("List of Health Rules");

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HEALTH_RULES];
                readCSVFileIntoExcelRange(healthRulesAllReportFilePath, 0, sheet, REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Controller and Application Configuration Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_DETAILS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Controller Settings

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CONTROLLER_SETTINGS];
                logger.Info("Controller Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controller Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_CONTROLLER_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Name"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["Value"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Description"].Position + 1).Width = 30;
                }

                #endregion

                #region Application Configuration

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_APPLICATION_CONFIGURATION];
                logger.Info("Application Configuration Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Application Configuration Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_APPLICATION_CONFIGURATION);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTDiscoveryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTDiscoveryRules"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTEntryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTEntryRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTExcludeRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTExcludeRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20Scopes"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20Scopes"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20DiscoveryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20DiscoveryRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20EntryRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20EntryRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBT20ExcludeRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBT20ExcludeRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBackendRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBackendRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumInfoPointRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumInfoPointRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumAgentProps"].Position + 1, sheet.Dimension.Rows, table.Columns["NumAgentProps"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHealthRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHealthRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrorRules"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrorRules"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCVariablesCollected"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCVariablesCollected"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCVariablesCollected"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCVariablesCollected"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBaselines"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBaselines"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);


                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumBTs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumBTs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars); 
                }

                #endregion

                #region Business Transaction Detection Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES];
                logger.Info("Business Transaction Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["NamingConfigType"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["DiscoveryType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;
                }

                #endregion

                #region Business Transaction Entry Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES];
                logger.Info("Business Transaction Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_TYPE];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["IsExclusion"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsEnabled"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["AgentType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["EntryPointType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RuleName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_BT_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_PIVOT_LOCATION];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_LOCATION);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsExclusion"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsEnabled"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["AgentType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["EntryPointType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["RuleName"]);
                    fieldD.Function = DataFieldFunctions.Count;
                    fieldD.Name = "Number of Rules";
                    fieldD = pivot.DataFields.Add(pivot.Fields["NumDetectedBTs"]);
                    fieldD.Function = DataFieldFunctions.Sum;
                    fieldD.Name = "Number of Detected BTs";
                }

                #endregion

                #region Business Transaction Scopes

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SCOPES];
                logger.Info("Business Transaction Scopes Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction Scopes Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SCOPES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ScopeName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["ScopeType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["IncludedTiers"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["IncludedRules"].Position + 1).Width = 20;
                }

                #endregion

                #region Business Transaction Detection Rules 2.0

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_DISCOVERY_RULES_20];
                logger.Info("Business Transaction 2.0 Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction 2.0 Detection Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_DISCOVERY_RULES_20);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["ScopeName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["NamingConfigType"].Position + 1).Width = 15;
                }

                #endregion

                #region Business Transaction Entry Rules 2.0

                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20];
                logger.Info("Business Transaction 2.0 Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transaction 2.0 Entry Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_ENTRY_RULES_20);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EntryPointType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["ScopeName"].Position + 1).Width = 30;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_TYPE];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["IsExclusion"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsEnabled"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["AgentType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ScopeName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["EntryPointType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RuleName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_BT_RULES_20_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_ENTRY_RULES_20_PIVOT_LOCATION];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_CONFIGURATION_PIVOT_BT_RULES_20_LOCATION);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsExclusion"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsEnabled"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["AgentType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["EntryPointType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ScopeName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["RuleName"]);
                    fieldD.Function = DataFieldFunctions.Count;
                    fieldD.Name = "Number of Rules";
                    fieldD = pivot.DataFields.Add(pivot.Fields["NumDetectedBTs"]);
                    fieldD.Function = DataFieldFunctions.Sum;
                    fieldD.Name = "Number of Detected BTs";
                }

                #endregion

                #region Backend Discovery Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES];
                logger.Info("Backend Discovery Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backend Discovery Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BACKEND_DISCOVERY_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["ExitType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BACKEND_DISCOVERY_ENTRY_RULES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["IsEnabled"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["AgentType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["ExitType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RuleName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_BACKEND_DISCOVERY_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Custom Exit Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES];
                logger.Info("Custom Exit Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Custom Exit Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_CUSTOM_EXIT_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["ExitType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_CUSTOM_EXIT_RULES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["AgentType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["ExitType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RuleName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_CUSTOM_EXIT_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Information Point Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_INFORMATION_POINT_RULES];
                logger.Info("Information Point Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Point Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_INFORMATION_POINT_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleRawValue"].Position + 1).Width = 20;
                }

                #endregion

                #region Agent Configuration Properties

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES];
                logger.Info("Agent Configuration Properties Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Agent Configuration Properties Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_AGENT_CONFIGURATION_PROPERTIES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["PropertyName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["PropertyName"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["StringValue"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["IntegerValue"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["BooleanValue"].Position + 1).Width = 15;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CONFIGURATION_PROPERTIES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["IsDefault"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["AgentType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["PropertyName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["PropertyType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC.Sort = eSortType.Ascending;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["PropertyName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_AGENT_CONFIGURATION_PROPERTIES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Data Collectors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_METHOD_INVOCATION_DATA_COLLECTORS];
                logger.Info("Method Invocation Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Method Invocation Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_METHOD_INVOCATION_DATA_COLLECTORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["CollectorName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["MatchClass"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["MatchMethod"].Position + 1).Width = 20;
                }

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HTTP_DATA_COLLECTORS];
                logger.Info("HTTP Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("HTTP Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_HTTP_DATA_COLLECTORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["CollectorName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["DataGathererName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["DataGathererValue"].Position + 1).Width = 20;
                }

                #endregion

                #region Tier Settings

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_TIER_SETTINGS];
                logger.Info("Tier Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tier Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_TIER_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["TierType"].Position + 1).Width = 20;
                }

                #endregion

                #region Detected Business Transaction and Assigned Data Collectors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_BUSINESS_TRANSACTION_SETTINGS];
                logger.Info("Detected Business Transaction and Assigned Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Detected Business Transaction and Assigned Data Collectors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_BUSINESS_TRANSACTION_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AssignedMIDCs"].Position + 1).Width = 20;
                }

                #endregion

                #region Agent Call Graph Settings

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_AGENT_CALL_GRAPH_SETTINGS];
                logger.Info("Agent Call Graph Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Agent Call Graph Settings Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_AGENT_CALL_GRAPH_SETTINGS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;

                }

                #endregion

                #region Health Rules

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HEALTH_RULES];
                logger.Info("Health Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Health Rules Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_CONFIGURATION_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_CONFIGURATION_TABLE_HEALTH_RULES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RuleName"].Position + 1).Width = 30;
                    sheet.Column(table.Columns["RuleType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["AffectsEntityType"].Position + 1).Width = 15;

                    // Make pivot
                    sheet = excelReport.Workbook.Worksheets[REPORT_CONFIGURATION_SHEET_HEALTH_RULES_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_CONFIGURATION_PIVOT_SHEET_START_PIVOT_AT + REPORT_CONFIGURATION_PIVOT_SHEET_CHART_HEIGHT + 1, 1], range, REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["IsDefault"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsEnabled"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["IsAlwaysEnabled"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["RuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RuleName"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_CONFIGURATION_PIVOT_HEALTH_RULES_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        sheet.Cells[rowNum, 2].Value = s.Tables[0].Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_CONFIGURATION_DETAILS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_CONFIGURATION_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportApplicationAndEntityMetrics(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Entity Metrics Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Entity Metrics Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                int l = 1;
                sheet.Cells[l, 1].Value = "Table of Contents";
                sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                l++; l++;
                sheet.Cells[l, 1].Value = "AppDynamics DEXTER Entity Metrics Report";
                l++;
                sheet.Cells[l, 1].Value = "Version";
                sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
                l++; l++;
                sheet.Cells[l, 1].Value = "From";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "To";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Number of Hours Intervals";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
                l++;
                sheet.Cells[l, 1].Value = "Export Metrics";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
                l++;
                sheet.Cells[l, 1].Value = "Export Snapshots";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
                l++;
                sheet.Cells[l, 1].Value = "Export Flowmaps";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
                l++;
                sheet.Cells[l, 1].Value = "Export Configuration";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
                l++;
                sheet.Cells[l, 1].Value = "Export Events";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
                l++;
                sheet.Cells[l, 1].Value = "Targets:";
                l++; l++;
                ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                            select new
                                                                            {
                                                                                Controller = jobTarget.Controller,
                                                                                UserName = jobTarget.UserName,
                                                                                Application = jobTarget.Application,
                                                                                ApplicationID = jobTarget.ApplicationID,
                                                                                Status = jobTarget.Status.ToString()
                                                                            }, true);
                ExcelTable table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_PARAMETERS_TARGETS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(1).Width = 25;
                sheet.Column(2).Width = 25;
                sheet.Column(3).Width = 25;

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, 1);

                #endregion

                loggerConsole.Info("Fill Entity Metrics Report File");

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string metricsAllFolderPath = Path.Combine(reportFolderPath, METRICS_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string applicationsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, APPLICATION_TYPE_SHORT));
                string applicationsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, APPLICATION_TYPE_SHORT));
                string tiersAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, TIERS_TYPE_SHORT));
                string tiersAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, TIERS_TYPE_SHORT));
                string nodesAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, NODES_TYPE_SHORT));
                string nodesAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, NODES_TYPE_SHORT));
                string backendsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, BACKENDS_TYPE_SHORT));
                string backendsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, BACKENDS_TYPE_SHORT));
                string businessTransactionsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, BUSINESS_TRANSACTIONS_TYPE_SHORT));
                string businessTransactionsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, BUSINESS_TRANSACTIONS_TYPE_SHORT));
                string serviceEndpointsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, SERVICE_ENDPOINTS_TYPE_SHORT));
                string serviceEndpointsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, SERVICE_ENDPOINTS_TYPE_SHORT));
                string errorsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, ERRORS_TYPE_SHORT));
                string errorsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, ERRORS_TYPE_SHORT));
                string informationPointsAllFullReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_FULLRANGE_FILE_NAME, INFORMATION_POINTS_TYPE_SHORT));
                string informationPointsAllHourlyReportFilePath = Path.Combine(metricsAllFolderPath, String.Format(CONVERT_ENTITIES_ALL_METRICS_HOURLY_FILE_NAME, INFORMATION_POINTS_TYPE_SHORT));

                #endregion

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL];
                readCSVFileIntoExcelRange(applicationsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Applications (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY];
                readCSVFileIntoExcelRange(applicationsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Tiers

                loggerConsole.Info("List of Tiers (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL];
                readCSVFileIntoExcelRange(tiersAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Tiers (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY];
                readCSVFileIntoExcelRange(tiersAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Nodes

                loggerConsole.Info("List of Nodes (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL];
                readCSVFileIntoExcelRange(nodesAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Nodes (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY];
                readCSVFileIntoExcelRange(nodesAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Backends

                loggerConsole.Info("List of Backends (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL];
                readCSVFileIntoExcelRange(backendsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Backends (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY];
                readCSVFileIntoExcelRange(backendsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Transactions

                loggerConsole.Info("List of Business Transactions (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL];
                readCSVFileIntoExcelRange(businessTransactionsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Business Transactions (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY];
                readCSVFileIntoExcelRange(businessTransactionsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Service Endpoints

                loggerConsole.Info("List of Service Endpoints (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL];
                readCSVFileIntoExcelRange(serviceEndpointsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Service Endpoints (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY];
                readCSVFileIntoExcelRange(serviceEndpointsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Errors

                loggerConsole.Info("List of Errors (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL];
                readCSVFileIntoExcelRange(errorsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Errors (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY];
                readCSVFileIntoExcelRange(errorsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Information Points

                loggerConsole.Info("List of Information Points (Full)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL];
                readCSVFileIntoExcelRange(informationPointsAllFullReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                loggerConsole.Info("List of Information Points (Hourly)");

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY];
                readCSVFileIntoExcelRange(informationPointsAllHourlyReportFilePath, 0, sheet, REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Entity Metrics Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_FULL];
                logger.Info("Applications Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(APPLICATION_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(APPLICATION_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_APPLICATIONS_HOURLY];
                logger.Info("Applications Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_APPLICATIONS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(APPLICATION_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(APPLICATION_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region Tiers

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_FULL];
                logger.Info("Tiers Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tiers Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(TIERS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(TIERS_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_TIERS_HOURLY];
                logger.Info("Tiers Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Tiers Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_TIERS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(TIERS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(TIERS_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region Nodes

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_FULL];
                logger.Info("Nodes Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Nodes Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(NODES_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(NODES_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_NODES_HOURLY];
                logger.Info("Nodes Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Nodes Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_NODES_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(NODES_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(NODES_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region Backends

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_FULL];
                logger.Info("Backends Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backends Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(BACKENDS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(BACKENDS_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BACKENDS_HOURLY];
                logger.Info("Backends Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Backends Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BACKENDS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(BACKENDS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(BACKENDS_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region Business Transactions

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_FULL];
                logger.Info("Business Transactions Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transactions Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(BUSINESS_TRANSACTIONS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(BUSINESS_TRANSACTIONS_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_BUSINESS_TRANSACTIONS_HOURLY];
                logger.Info("Business Transactions Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Business Transactions Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_BUSINESS_TRANSACTIONS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(BUSINESS_TRANSACTIONS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(BUSINESS_TRANSACTIONS_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region Service Endpoints

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_FULL];
                logger.Info("Service Endpoints Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Service Endpoints Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(SERVICE_ENDPOINTS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(SERVICE_ENDPOINTS_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_SERVICE_ENDPOINTS_HOURLY];
                logger.Info("Service Endpoints Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Service Endpoints Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_SERVICE_ENDPOINTS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(SERVICE_ENDPOINTS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(SERVICE_ENDPOINTS_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region Errors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_FULL];
                logger.Info("Errors Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Errors Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(ERRORS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(ERRORS_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_ERRORS_HOURLY];
                logger.Info("Errors Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Errors Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_ERRORS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(ERRORS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(ERRORS_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region Information Points

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_FULL];
                logger.Info("Information Points Sheet Full ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Points Sheet Full ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_FULL);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(INFORMATION_POINTS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(INFORMATION_POINTS_TYPE_SHORT, sheet, table);
                }

                sheet = excelReport.Workbook.Worksheets[REPORT_METRICS_ALL_ENTITIES_SHEET_INFORMATION_POINTS_HOURLY];
                logger.Info("Information Points Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Information Points Sheet Hourly ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_INFORMATION_POINTS_HOURLY);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(INFORMATION_POINTS_TYPE_SHORT, sheet, table);
                    addConditionalFormattingToTableInMetricReport(INFORMATION_POINTS_TYPE_SHORT, sheet, table);
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Rows";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count == 1)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                    else if (s.Tables.Count > 0)
                    {
                        sheet.Cells[rowNum, 2].Value = String.Format("{0} tables", s.Tables.Count);
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_METRICS_ALL_ENTITIES_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Rows"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_METRICS_ALL_ENTITIES_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportApplicationAndEntityMetricGraphs(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Fill Metrics and Metric Graphs");

                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string metricsFolderPath = Path.Combine(applicationFolderPath, METRICS_FOLDER_NAME);

                        // Report files from previous steps
                        string applicationReportFilePath = Path.Combine(applicationFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);
                        string informationPointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_INFORMATION_POINTS_FILE_NAME);

                        string applicationHourlyReportFilePath = Path.Combine(metricsFolderPath, APPLICATION_TYPE_SHORT, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
                        string tiersHourlyReportFilePath = Path.Combine(metricsFolderPath, TIERS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string nodesHourlyReportFilePath = Path.Combine(metricsFolderPath, NODES_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string backendsHourlyReportFilePath = Path.Combine(metricsFolderPath, BACKENDS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string businessTransactionsHourlyReportFilePath = Path.Combine(metricsFolderPath, BUSINESS_TRANSACTIONS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string serviceEndpointsHourlyReportFilePath = Path.Combine(metricsFolderPath, SERVICE_ENDPOINTS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string errorsHourlyReportFilePath = Path.Combine(metricsFolderPath, ERRORS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);
                        string informationPointsHourlyReportFilePath = Path.Combine(metricsFolderPath, INFORMATION_POINTS_TYPE_SHORT, CONVERT_ENTITIES_METRICS_HOURLY_FILE_NAME);

                        // Metric files
                        string metricsEntityFolderPath = String.Empty;

                        List<EntityBase> entityMetricsHourly = null;

                        #endregion

                        loggerConsole.Info("Prepare Entity Metrics Graphs Report");

                        #region Prepare the report package

                        // Prepare package
                        ExcelPackage excelReport = createIndividualEntityMetricGraphsReportTemplate(programOptions, jobConfiguration);

                        #endregion

                        #region Load hourly metrics

                        loggerConsole.Info("Loading Metrics");

                        List<EntityApplication> applicationsMetricsHourly = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationHourlyReportFilePath, new ApplicationMetricReportMap());
                        List<EntityTier> tiersMetricsHourly = FileIOHelper.readListFromCSVFile<EntityTier>(tiersHourlyReportFilePath, new TierMetricReportMap());
                        List<EntityNode> nodesMetricsHourly = FileIOHelper.readListFromCSVFile<EntityNode>(nodesHourlyReportFilePath, new NodeMetricReportMap());
                        List<EntityBackend> backendsMetricsHourly = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsHourlyReportFilePath, new BackendMetricReportMap());
                        List<EntityBusinessTransaction> businessTransactionsMetricsHourly = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsHourlyReportFilePath, new BusinessTransactionMetricReportMap());
                        List<EntityServiceEndpoint> serviceEndpointsMetricsHourly = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsHourlyReportFilePath, new ServiceEndpointMetricReportMap());
                        List<EntityError> errorsMetricsHourly = FileIOHelper.readListFromCSVFile<EntityError>(errorsHourlyReportFilePath, new ErrorMetricReportMap());
                        List<EntityInformationPoint> informationPointsMetricsHourly = FileIOHelper.readListFromCSVFile<EntityInformationPoint>(informationPointsHourlyReportFilePath, new InformationPointMetricReportMap());

                        #endregion 

                        #region Application

                        loggerConsole.Info("Metrics and Graphs for Application");

                        List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());
                        if (applicationList != null && applicationList.Count > 0)
                        {
                            metricsEntityFolderPath = Path.Combine(
                                metricsFolderPath,
                                APPLICATION_TYPE_SHORT);

                            EntityApplication applicationRow = applicationList[0];

                            entityMetricsHourly = null;
                            if (applicationsMetricsHourly != null)
                            {
                                entityMetricsHourly = applicationsMetricsHourly.Cast<EntityBase>().ToList();
                            }

                            fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, APPLICATION_TYPE_SHORT, applicationRow, REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_METRICS, REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_GRAPHS);
                        }

                        #endregion

                        #region Tier

                        loggerConsole.Info("Metrics and Graphs for Tiers");

                        List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersReportFilePath, new TierEntityReportMap());
                        if (tiersList != null)
                        {
                            foreach (EntityTier tierRow in tiersList)
                            {
                                metricsEntityFolderPath = Path.Combine(
                                    metricsFolderPath,
                                    TIERS_TYPE_SHORT,
                                    getShortenedEntityNameForFileSystem(tierRow.TierName, tierRow.TierID));

                                List<EntityTier> entityTierMetricsHourly = tiersMetricsHourly.Where(e => e.Controller == tierRow.Controller && e.ApplicationID == tierRow.ApplicationID && e.TierID == tierRow.TierID).ToList();
                                entityMetricsHourly = null;
                                if (entityTierMetricsHourly != null)
                                {
                                    entityMetricsHourly = entityTierMetricsHourly.Cast<EntityBase>().ToList();
                                }

                                Console.Write(".");

                                fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, TIERS_TYPE_SHORT, tierRow, REPORT_METRICS_GRAPHS_SHEET_TIERS_METRICS, REPORT_METRICS_GRAPHS_SHEET_TIERS_GRAPHS);
                            }

                            Console.WriteLine();
                        }

                        #endregion

                        #region Nodes

                        loggerConsole.Info("Metrics and Graphs for Nodes");

                        List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesReportFilePath, new NodeEntityReportMap());
                        if (nodesList != null)
                        {
                            foreach (EntityNode nodeRow in nodesList)
                            {
                                metricsEntityFolderPath = Path.Combine(
                                    metricsFolderPath,
                                    NODES_TYPE_SHORT,
                                    getShortenedEntityNameForFileSystem(nodeRow.TierName, nodeRow.TierID),
                                    getShortenedEntityNameForFileSystem(nodeRow.NodeName, nodeRow.NodeID));

                                List<EntityNode> entityNodeMetricsHourly = nodesMetricsHourly.Where(e => e.Controller == nodeRow.Controller && e.ApplicationID == nodeRow.ApplicationID && e.TierID == nodeRow.TierID && e.NodeID == nodeRow.NodeID).ToList();
                                entityMetricsHourly = null;
                                if (entityNodeMetricsHourly != null)
                                {
                                    entityMetricsHourly = entityNodeMetricsHourly.Cast<EntityBase>().ToList();
                                }

                                Console.Write(".");

                                fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, NODES_TYPE_SHORT, nodeRow, REPORT_METRICS_GRAPHS_SHEET_NODES_METRICS, REPORT_METRICS_GRAPHS_SHEET_NODES_GRAPHS);
                            }

                            Console.WriteLine();
                        }

                        #endregion

                        #region Backends

                        loggerConsole.Info("Metrics and Graphs for Backends");

                        List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsReportFilePath, new BackendEntityReportMap());
                        if (backendsList != null)
                        {
                            foreach (EntityBackend backendRow in backendsList)
                            {
                                metricsEntityFolderPath = Path.Combine(
                                    metricsFolderPath,
                                    BACKENDS_TYPE_SHORT,
                                    getShortenedEntityNameForFileSystem(backendRow.BackendName, backendRow.BackendID));

                                List<EntityBackend> entityBackendMetricsHourly = backendsMetricsHourly.Where(e => e.Controller == backendRow.Controller && e.ApplicationID == backendRow.ApplicationID && e.BackendID == backendRow.BackendID).ToList();
                                entityMetricsHourly = null;
                                if (entityBackendMetricsHourly != null)
                                {
                                    entityMetricsHourly = entityBackendMetricsHourly.Cast<EntityBase>().ToList();
                                }

                                Console.Write(".");

                                fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, BACKENDS_TYPE_SHORT, backendRow, REPORT_METRICS_GRAPHS_SHEET_BACKENDS_METRICS, REPORT_METRICS_GRAPHS_SHEET_BACKENDS_GRAPHS);
                            }

                            Console.WriteLine();
                        }

                        #endregion

                        #region Business Transactions

                        loggerConsole.Info("Metrics and Graphs for Business Transactions");

                        List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsReportFilePath, new BusinessTransactionEntityReportMap());
                        if (businessTransactionsList != null)
                        {
                            foreach (EntityBusinessTransaction businessTransactionRow in businessTransactionsList)
                            {
                                metricsEntityFolderPath = Path.Combine(
                                    metricsFolderPath,
                                    BUSINESS_TRANSACTIONS_TYPE_SHORT,
                                    getShortenedEntityNameForFileSystem(businessTransactionRow.TierName, businessTransactionRow.TierID),
                                    getShortenedEntityNameForFileSystem(businessTransactionRow.BTName, businessTransactionRow.BTID));

                                List<EntityBusinessTransaction> entityBusinessTransactionMetricsHourly = businessTransactionsMetricsHourly.Where(e => e.Controller == businessTransactionRow.Controller && e.ApplicationID == businessTransactionRow.ApplicationID && e.TierID == businessTransactionRow.TierID && e.BTID == businessTransactionRow.BTID).ToList();
                                entityMetricsHourly = null;
                                if (entityBusinessTransactionMetricsHourly != null)
                                {
                                    entityMetricsHourly = entityBusinessTransactionMetricsHourly.Cast<EntityBase>().ToList();
                                }

                                Console.Write(".");

                                fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, BUSINESS_TRANSACTIONS_TYPE_SHORT, businessTransactionRow, REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_METRICS, REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_GRAPHS);
                            }

                            Console.WriteLine();
                        }

                        #endregion

                        #region Service Endpoints

                        loggerConsole.Info("Metrics and Graphs for Service Endpoints");

                        List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsReportFilePath, new ServiceEndpointEntityReportMap());
                        if (serviceEndpointsList != null)
                        {
                            foreach (EntityServiceEndpoint serviceEndpointRow in serviceEndpointsList)
                            {
                                metricsEntityFolderPath = Path.Combine(
                                    metricsFolderPath,
                                    SERVICE_ENDPOINTS_TYPE_SHORT,
                                    getShortenedEntityNameForFileSystem(serviceEndpointRow.TierName, serviceEndpointRow.TierID),
                                    getShortenedEntityNameForFileSystem(serviceEndpointRow.SEPName, serviceEndpointRow.SEPID));

                                List<EntityServiceEndpoint> entityServiceEndpointMetricsHourly = serviceEndpointsMetricsHourly.Where(e => e.Controller == serviceEndpointRow.Controller && e.ApplicationID == serviceEndpointRow.ApplicationID && e.TierID == serviceEndpointRow.TierID && e.SEPID == serviceEndpointRow.SEPID).ToList();
                                entityMetricsHourly = null;
                                if (entityServiceEndpointMetricsHourly != null)
                                {
                                    entityMetricsHourly = entityServiceEndpointMetricsHourly.Cast<EntityBase>().ToList();
                                }

                                Console.Write(".");

                                fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, SERVICE_ENDPOINTS_TYPE_SHORT, serviceEndpointRow, REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_METRICS, REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_GRAPHS);
                            }

                            Console.WriteLine();
                        }

                        #endregion

                        #region Errors

                        loggerConsole.Info("Metrics and Graphs for Errors");

                        List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsReportFilePath, new ErrorEntityReportMap());
                        if (errorsList != null)
                        {
                            foreach (EntityError errorRow in errorsList)
                            {
                                metricsEntityFolderPath = Path.Combine(
                                    metricsFolderPath,
                                    ERRORS_TYPE_SHORT,
                                    getShortenedEntityNameForFileSystem(errorRow.TierName, errorRow.TierID),
                                    getShortenedEntityNameForFileSystem(errorRow.ErrorName, errorRow.ErrorID));

                                List<EntityError> entityErrorMetricsHourly = errorsMetricsHourly.Where(e => e.Controller == errorRow.Controller && e.ApplicationID == errorRow.ApplicationID && e.TierID == errorRow.TierID && e.ErrorID == errorRow.ErrorID).ToList();
                                entityMetricsHourly = null;
                                if (entityErrorMetricsHourly != null)
                                {
                                    entityMetricsHourly = entityErrorMetricsHourly.Cast<EntityBase>().ToList();
                                }

                                Console.Write(".");

                                fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, ERRORS_TYPE_SHORT, errorRow, REPORT_METRICS_GRAPHS_SHEET_ERRORS_METRICS, REPORT_METRICS_GRAPHS_SHEET_ERRORS_GRAPHS);

                            }

                            Console.WriteLine();
                        }

                        #endregion

                        #region Information Points

                        loggerConsole.Info("Metrics and Graphs for Information Points");

                        List<EntityInformationPoint> informationPointsList = FileIOHelper.readListFromCSVFile<EntityInformationPoint>(informationPointsReportFilePath, new InformationPointEntityReportMap());
                        if (informationPointsList != null)
                        {
                            foreach (EntityInformationPoint informationPointRow in informationPointsList)
                            {
                                metricsEntityFolderPath = Path.Combine(
                                    metricsFolderPath,
                                    INFORMATION_POINTS_TYPE_SHORT,
                                    getShortenedEntityNameForFileSystem(informationPointRow.IPName, informationPointRow.IPID));

                                List<EntityInformationPoint> entityInformationPointMetricsHourly = informationPointsMetricsHourly.Where(e => e.Controller == informationPointRow.Controller && e.ApplicationID == informationPointRow.ApplicationID && e.IPID == informationPointRow.IPID).ToList();
                                entityMetricsHourly = null;
                                if (entityInformationPointMetricsHourly != null)
                                {
                                    entityMetricsHourly = entityInformationPointMetricsHourly.Cast<EntityBase>().ToList();
                                }

                                Console.Write(".");

                                fillMetricDetailAndMetricValuesTablesForEntity(jobConfiguration, excelReport, entityMetricsHourly, metricsEntityFolderPath, INFORMATION_POINTS_TYPE_SHORT, informationPointRow, REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_METRICS, REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_GRAPHS);

                            }

                            Console.WriteLine();
                        }

                        #endregion

                        string reportFileName = String.Format(
                            REPORT_METRICS_GRAPHS_FILE_NAME,
                            getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                            getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID),
                            jobConfiguration.Input.ExpandedTimeRange.From,
                            jobConfiguration.Input.ExpandedTimeRange.To);
                        string reportFilePath = Path.Combine(
                            programOptions.OutputJobFolderPath,
                            REPORTS_FOLDER_NAME,
                            getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                            getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID),
                            reportFileName);

                        finalizeAndSaveIndividualEntityMetricReport(excelReport, reportFilePath);
                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportEventsAndHealthRuleViolations(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Events and Health Rule Violations Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Events and Health Rule Violations Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                int l = 1;
                sheet.Cells[l, 1].Value = "Table of Contents";
                sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                l++; l++;
                sheet.Cells[l, 1].Value = "AppDynamics DEXTER Events and Health Rule Violations Report";
                l++;
                sheet.Cells[l, 1].Value = "Version";
                sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
                l++; l++;
                sheet.Cells[l, 1].Value = "From";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "To";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Number of Hours Intervals";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
                l++;
                sheet.Cells[l, 1].Value = "Export Metrics";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
                l++;
                sheet.Cells[l, 1].Value = "Export Snapshots";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
                l++;
                sheet.Cells[l, 1].Value = "Export Flowmaps";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
                l++;
                sheet.Cells[l, 1].Value = "Export Configuration";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
                l++;
                sheet.Cells[l, 1].Value = "Export Events";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
                l++;
                sheet.Cells[l, 1].Value = "Targets:";
                l++; l++;
                ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                            select new
                                                                            {
                                                                                Controller = jobTarget.Controller,
                                                                                UserName = jobTarget.UserName,
                                                                                Application = jobTarget.Application,
                                                                                ApplicationID = jobTarget.ApplicationID,
                                                                                Status = jobTarget.Status.ToString()
                                                                            }, true);
                ExcelTable table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_PARAMETERS_TARGETS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(1).Width = 25;
                sheet.Column(2).Width = 25;
                sheet.Column(3).Width = 25;

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivots

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_EVENTS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Duration";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS_DURATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_EVENTS_DURATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_EVENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 7, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                #endregion

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string eventsAllFolderPath = Path.Combine(reportFolderPath, EVENTS_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string applicationEventsSummaryAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_APPLICATION_EVENTS_FILE_NAME);
                string healthRuleViolationEventsAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                string eventsAllReportFilePath = Path.Combine(eventsAllFolderPath, CONVERT_EVENTS_FILE_NAME);

                #endregion

                loggerConsole.Info("Fill Events and Health Rule Violations Report File");

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS];
                readCSVFileIntoExcelRange(applicationEventsSummaryAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Events

                loggerConsole.Info("List of Events");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS];
                readCSVFileIntoExcelRange(eventsAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Health Rule Violation Events

                loggerConsole.Info("List of Health Rule Violation Events");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS];
                readCSVFileIntoExcelRange(healthRuleViolationEventsAllReportFilePath, 0, sheet, REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Events and Health Rule Violations Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(APPLICATION_TYPE_SHORT, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEvents"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEvents"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEventsInfo"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEventsInfo"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEventsWarning"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEventsWarning"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumEventsError"].Position + 1, sheet.Dimension.Rows, table.Columns["NumEventsError"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHRViolations"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHRViolations"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHRViolationsWarning"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHRViolationsWarning"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHRViolationsCritical"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHRViolationsCritical"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Events

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS];
                logger.Info("Events Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Events Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_EVENTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EventID"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Summary"].Position + 1).Width = 35;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SubType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityName"].Position + 1).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Type"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["SubType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["NodeName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["Severity"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["EventID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_EVENTS_PIVOT_EVENTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_EVENTS_DURATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT + 3, 1], range, REPORT_DETECTED_EVENTS_PIVOT_EVENTS_DURATION);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["ApplicationName"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["TierName"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["BTName"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["TriggeredEntityName"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["TriggeredEntityType"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["Severity"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["Type"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["SubType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["EventID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    chart = sheet.Drawings.AddChart(REPORT_DETECTED_EVENTS_PIVOT_EVENTS_DURATION_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Health Rule Violation Events

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS];
                logger.Info("Health Rule Events Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Health Rule Events Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_DETECTED_EVENTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_HEALTH_RULE_VIOLATION_EVENTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EventID"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["HealthRuleName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EntityName"].Position + 1).Width = 20;
        
                    sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_DETECTED_EVENTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_DETECTED_EVENTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Status"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["HealthRuleName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["EntityType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["EntityName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["Severity"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["EventID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_DETECTED_EVENTS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS_TYPE_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_DETECTED_EVENTS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_DETECTED_EVENTS_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportSnapshots(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Snapshots Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Snapshots Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);
                
                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                var timelineStyle = sheet.Workbook.Styles.CreateNamedStyle("TimelineStyle");
                timelineStyle.Style.Font.Name = "Consolas";
                timelineStyle.Style.Font.Size = 8;

                int l = 1;
                sheet.Cells[l, 1].Value = "Table of Contents";
                sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                l++; l++;
                sheet.Cells[l, 1].Value = "AppDynamics DEXTER Snapshots Report";
                l++;
                sheet.Cells[l, 1].Value = "Version";
                sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
                l++; l++;
                sheet.Cells[l, 1].Value = "From";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "To";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Number of Hours Intervals";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
                l++;
                sheet.Cells[l, 1].Value = "Export Metrics";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
                l++;
                sheet.Cells[l, 1].Value = "Export Snapshots";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
                l++;
                sheet.Cells[l, 1].Value = "Export Flowmaps";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
                l++;
                sheet.Cells[l, 1].Value = "Export Configuration";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
                l++;
                sheet.Cells[l, 1].Value = "Export Events";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
                l++; 
                sheet.Cells[l, 1].Value = "Targets:";
                l++; l++;
                ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                            select new
                                                                            {
                                                                                Controller = jobTarget.Controller,
                                                                                UserName = jobTarget.UserName,
                                                                                Application = jobTarget.Application,
                                                                                ApplicationID = jobTarget.ApplicationID,
                                                                                Status = jobTarget.Status.ToString()
                                                                            }, true);
                ExcelTable table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_PARAMETERS_TARGETS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(1).Width = 25;
                sheet.Column(2).Width = 25;
                sheet.Column(3).Width = 25;

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivot

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_APPLICATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SNAPSHOTS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Duration";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_DURATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_DURATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SNAPSHOTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SEGMENTS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Duration";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS_DURATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SEGMENTS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SEGMENTS_DURATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_SEGMENTS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_EXIT_CALLS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Duration";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_DURATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_DURATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_EXIT_CALLS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT - 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT - 1, 1);

                #endregion

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string snapshotsAllFolderPath = Path.Combine(reportFolderPath, SNAPSHOTS_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string snapshotsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                string segmentsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                string callExitsAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                string serviceEndpointCallsAllReporFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                string detectedErrorsAllReporFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                string businessDataAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                string applicationSnapshotsSummaryAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                #endregion

                loggerConsole.Info("Fill Snapshots Report File");

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_DETECTED_EVENTS_SHEET_APPLICATIONS];
                readCSVFileIntoExcelRange(applicationSnapshotsSummaryAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Snapshots

                loggerConsole.Info("List of Snapshots");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS];
                readCSVFileIntoExcelRange(snapshotsAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Segments

                loggerConsole.Info("List of Segments");
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS];
                readCSVFileIntoExcelRange(segmentsAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Exit Calls

                loggerConsole.Info("List of Exit Calls");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS];
                readCSVFileIntoExcelRange(callExitsAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Service Endpoint Calls

                loggerConsole.Info("List of Service Endpoint Calls");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS];
                readCSVFileIntoExcelRange(serviceEndpointCallsAllReporFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Detected Errors

                loggerConsole.Info("List of Detected Errors");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS];
                readCSVFileIntoExcelRange(detectedErrorsAllReporFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Business Data

                loggerConsole.Info("List of Business Data");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA];
                readCSVFileIntoExcelRange(businessDataAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Snapshots Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_APPLICATIONS];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(APPLICATION_TYPE_SHORT, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshots"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshots"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsNormal"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsNormal"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsVerySlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsVerySlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsStall"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsStall"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsSlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsSlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsError"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsError"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Snapshots

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS];
                logger.Info("Snapshots Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Snapshots Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_SNAPSHOTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["UserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["UserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["UserExperience"].Position + 1);
                    var cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.White;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorGreenForNormalSnapshots;
                    cfUserExperience.Formula = @"=""NORMAL""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorYellowForSlowSnapshots;
                    cfUserExperience.Formula = @"=""SLOW""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForVerySlowSnapshots;
                    cfUserExperience.Formula = @"=""VERY_SLOW""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.White;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForStallSnapshots;
                    cfUserExperience.Formula = @"=""STALL""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorRedForErrorSnapshots;
                    cfUserExperience.Formula = @"=""ERROR""";

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallGraphs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallGraphs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["HasErrors"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["CallGraphType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["DurationRange"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["UserExperience"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SNAPSHOTS_DURATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_DURATION);
                    fieldF = pivot.PageFields.Add(pivot.Fields["HasErrors"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["CallGraphType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["DurationRange"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["UserExperience"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SNAPSHOTS_DURATION_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Segments

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS];
                logger.Info("Segments Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Segments Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_SEGMENTS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["UserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["FromSegmentID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["FromTierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    // Make timeline fixed width
                    ExcelRangeBase rangeTimeline = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Timeline"].Position + 1, sheet.Dimension.Rows, table.Columns["Timeline"].Position + 1];
                    rangeTimeline.StyleName = "TimelineStyle";

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["UserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["UserExperience"].Position + 1);
                    var cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.White;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorGreenForNormalSnapshots;
                    cfUserExperience.Formula = @"=""NORMAL""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorYellowForSlowSnapshots;
                    cfUserExperience.Formula = @"=""SLOW""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForVerySlowSnapshots;
                    cfUserExperience.Formula = @"=""VERY_SLOW""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.White;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForStallSnapshots;
                    cfUserExperience.Formula = @"=""STALL""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorRedForErrorSnapshots;
                    cfUserExperience.Formula = @"=""ERROR""";

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_SNAPSHOTS_PIVOT_SEGMENTS);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["HasErrors"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["CallGraphType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["DurationRange"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["UserExperience"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["SegmentID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SEGMENTS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SEGMENTS_DURATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_SNAPSHOTS_PIVOT_SEGMENTS_DURATION);
                    fieldF = pivot.PageFields.Add(pivot.Fields["HasErrors"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["CallGraphType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["DurationRange"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["UserExperience"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["SegmentID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_SEGMENTS_DURATION_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Exit Calls

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS];
                logger.Info("Exit Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Exit Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_EXIT_CALLS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["ToEntityName"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["ExitType"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Detail"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Method"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ToSegmentID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 1, 1], range, REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["ToEntityType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["ToEntityName"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["RequestID"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["DurationRange"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["ExitType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Detail"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                    fieldD.Function = DataFieldFunctions.Count;
                    fieldD.Name = "Number of Items";
                    fieldD = pivot.DataFields.Add(pivot.Fields["Duration"]);
                    fieldD.Function = DataFieldFunctions.Average;
                    fieldD.Name = "Average Duration";
                    fieldD = pivot.DataFields.Add(pivot.Fields["Duration"]);
                    fieldD.Function = DataFieldFunctions.Sum;
                    fieldD.Name = "Total Duration";

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_EXIT_CALLS_DURATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT, 1], range, REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_DURATION);
                    fieldF = pivot.PageFields.Add(pivot.Fields["ToEntityType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["Detail"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["DurationRange"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["Occurred"]);
                    fieldR.AddDateGrouping(eDateGroupBy.Days | eDateGroupBy.Hours | eDateGroupBy.Minutes);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["ExitType"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["Duration"]);
                    fieldD.Function = DataFieldFunctions.Average;
                    fieldD.Name = "Average Duration";

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_EXIT_CALLS_DURATION_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Service Endpoint Calls

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_SERVICE_ENDPOINT_CALLS];
                logger.Info("Exit Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Exit Calls Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_SERVICE_ENDPOINT_CALLS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["SepName"].Position + 1).Width = 20;
                }

                #endregion

                #region Detected Errors

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS];
                logger.Info("Detected Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Detected Errors Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_DETECTED_ERRORS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["ErrorName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ErrorMessage"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ErrorDetail"].Position + 1).Width = 20;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_DETECTED_ERRORS_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT - 3, 1], range, REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ErrorMessage"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_DETECTED_ERRORS_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Business Data

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA];
                logger.Info("Detected Business Data ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Detected Business Data ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_BUSINESS_DATA);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["DataName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["DataValue"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["DataType"].Position + 1).Width = 10;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_BUSINESS_DATA_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT - 3, 1], range, REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["DataType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["DataName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                    fieldD.Function = DataFieldFunctions.Count;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_BUSINESS_DATA_GRAPH, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_SNAPSHOTS_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportSnapshotsMethodCallLines(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                loggerConsole.Info("Prepare Snapshots Method Calls Report File");

                #region Prepare the report package

                // Prepare package
                ExcelPackage excelReport = new ExcelPackage();
                excelReport.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
                excelReport.Workbook.Properties.Title = "AppDynamics DEXTER Snapshots Method Call Lines Report";
                excelReport.Workbook.Properties.Subject = programOptions.JobName;

                excelReport.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

                #endregion

                #region Parameters sheet

                // Parameters sheet
                ExcelWorksheet sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

                var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
                hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

                int l = 1;
                sheet.Cells[l, 1].Value = "Table of Contents";
                sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                l++; l++;
                sheet.Cells[l, 1].Value = "AppDynamics DEXTER Snapshots Method Call Lines Report";
                l++;
                sheet.Cells[l, 1].Value = "Version";
                sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
                l++; l++;
                sheet.Cells[l, 1].Value = "From";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "To";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded From (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (UTC)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Expanded To (Local)";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
                l++;
                sheet.Cells[l, 1].Value = "Number of Hours Intervals";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
                l++;
                sheet.Cells[l, 1].Value = "Export Metrics";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
                l++;
                sheet.Cells[l, 1].Value = "Export Snapshots";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
                l++;
                sheet.Cells[l, 1].Value = "Export Flowmaps";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
                l++;
                sheet.Cells[l, 1].Value = "Export Configuration";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
                l++;
                sheet.Cells[l, 1].Value = "Export Events";
                sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
                l++;
                sheet.Cells[l, 1].Value = "Targets:";
                l++; l++;
                ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                            select new
                                                                            {
                                                                                Controller = jobTarget.Controller,
                                                                                UserName = jobTarget.UserName,
                                                                                Application = jobTarget.Application,
                                                                                ApplicationID = jobTarget.ApplicationID,
                                                                                Status = jobTarget.Status.ToString()
                                                                            }, true);
                ExcelTable table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_PARAMETERS_TARGETS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(1).Width = 25;
                sheet.Column(2).Width = 25;
                sheet.Column(3).Width = 25;

                #endregion

                #region TOC sheet

                // Navigation sheet with link to other sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

                #endregion

                #region Entity sheets and their associated pivot

                // Entity sheets
                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_CONTROLLERS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_APPLICATIONS);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot Type";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Pivot Location";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 5, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 3, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Pivot Type";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[3, 1].Value = "See Pivot Location";
                sheet.Cells[3, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_LOCATION_PIVOT);
                sheet.Cells[3, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 5, 1);

                sheet = excelReport.Workbook.Worksheets.Add(REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_LOCATION_PIVOT);
                sheet.Cells[1, 1].Value = "Table of Contents";
                sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
                sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
                sheet.Cells[2, 1].Value = "See Table";
                sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES);
                sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
                sheet.View.FreezePanes(REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 4, 1);

                #endregion

                #region Report file variables

                // Various folders
                string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
                string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);
                string snapshotsAllFolderPath = Path.Combine(reportFolderPath, SNAPSHOTS_FOLDER_NAME);

                // Report files for All
                string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);
                string methodCallLinesAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                string methodCallLinesOccurrencesAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);
                string applicationSnapshotsSummaryAllReportFilePath = Path.Combine(snapshotsAllFolderPath, CONVERT_APPLICATION_SNAPSHOTS_FILE_NAME);

                #endregion

                loggerConsole.Info("Fill Snapshots Method Call Lines Report File");

                #region Controllers

                loggerConsole.Info("List of Controllers");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_CONTROLLERS];
                readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Applications

                loggerConsole.Info("List of Applications");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_APPLICATIONS];
                readCSVFileIntoExcelRange(applicationSnapshotsSummaryAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Method Call Lines

                loggerConsole.Info("List of Method Call Lines");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES];
                readCSVFileIntoExcelRange(methodCallLinesAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                #region Method Call Occurrences

                loggerConsole.Info("List of Method Call Occurrences");

                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES];
                readCSVFileIntoExcelRange(methodCallLinesOccurrencesAllReportFilePath, 0, sheet, REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1);

                #endregion

                loggerConsole.Info("Finalize Snapshots Method Call Lines Report File");

                #region Controllers sheet

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_CONTROLLERS];
                logger.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Controllers Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_CONTROLLERS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
                }

                #endregion

                #region Applications

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_APPLICATIONS];
                logger.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Applications Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_APPLICATIONS);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(APPLICATION_TYPE_SHORT, sheet, table);

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshots"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshots"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsNormal"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsNormal"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsVerySlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsVerySlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsStall"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsStall"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsSlow"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsSlow"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSnapshotsError"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSnapshotsError"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);
                }

                #endregion

                #region Method Call Lines

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES];
                logger.Info("Method Call Lines Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Method Call Lines Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;
                    
                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["Framework"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["FullNameIndent"].Position + 1).Width = 45;
                    sheet.Column(table.Columns["ExitCalls"].Position + 1).Width = 15;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_TYPE);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["ElementType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["NumChildren"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["NumExits"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["Depth"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["ExecRange"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["FullName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["Type"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["Framework"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["Exec"]);
                    fieldD.Function = DataFieldFunctions.Average;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_TYPE, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_LOCATION);
                    fieldF = pivot.PageFields.Add(pivot.Fields["ElementType"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["NumChildren"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["NumExits"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["Depth"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["ExecRange"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["Type"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Framework"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["FullName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["Exec"]);
                    fieldD.Function = DataFieldFunctions.Count;
                    fieldD.Name = "Number of Items";
                    fieldD = pivot.DataFields.Add(pivot.Fields["Exec"]);
                    fieldD.Function = DataFieldFunctions.Average;
                    fieldD.Name = "Average Duration";
                    fieldD = pivot.DataFields.Add(pivot.Fields["Exec"]);
                    fieldD.Function = DataFieldFunctions.Sum;
                    fieldD.Name = "Total Duration";

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_LOCATION, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region Method Call Occurrences

                // Make table
                sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES];
                logger.Info("Method Call Occurrences Sheet ({0} rows)", sheet.Dimension.Rows);
                loggerConsole.Info("Method Call Occurrences Sheet ({0} rows)", sheet.Dimension.Rows);
                if (sheet.Dimension.Rows > REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT)
                {
                    range = sheet.Cells[REPORT_SNAPSHOTS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                    table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_METHOD_CALL_LINES_OCCURRENCES);
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["Framework"].Position + 1).Width = 15;
                    sheet.Column(table.Columns["FullName"].Position + 1).Width = 45;

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_TYPE_PIVOT];
                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_TYPE);
                    ExcelPivotTableField fieldF = pivot.PageFields.Add(pivot.Fields["NumChildren"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["NumExits"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["ExecRange"]);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["FullName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["Type"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["Framework"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["NumCalls"]);
                    fieldD.Function = DataFieldFunctions.Sum;

                    ExcelChart chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_GRAPH_TYPE, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);

                    sheet = excelReport.Workbook.Worksheets[REPORT_SNAPSHOTS_SHEET_METHOD_CALL_LINES_OCCURRENCES_LOCATION_PIVOT];
                    pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_SNAPSHOTS_PIVOT_SHEET_START_PIVOT_AT + REPORT_SNAPSHOTS_PIVOT_SHEET_CHART_HEIGHT + 2, 1], range, REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_LOCATION);
                    fieldF = pivot.PageFields.Add(pivot.Fields["NumChildren"]);
                    fieldF = pivot.PageFields.Add(pivot.Fields["NumExits"]);
                    fieldR = pivot.RowFields.Add(pivot.Fields["Type"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Framework"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["FullName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldC = pivot.ColumnFields.Add(pivot.Fields["ExecRange"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    fieldD = pivot.DataFields.Add(pivot.Fields["NumCalls"]);
                    fieldD.Function = DataFieldFunctions.Sum;

                    chart = sheet.Drawings.AddChart(REPORT_SNAPSHOTS_PIVOT_METHOD_CALL_LINES_OCCURRENCES_GRAPH_LOCATION, eChartType.ColumnClustered, pivot);
                    chart.SetPosition(2, 0, 0, 0);
                    chart.SetSize(800, 300);
                }

                #endregion

                #region TOC sheet

                // TOC sheet again
                sheet = excelReport.Workbook.Worksheets[REPORT_SHEET_TOC];
                sheet.Cells[1, 1].Value = "Sheet Name";
                sheet.Cells[1, 2].Value = "# Entities";
                sheet.Cells[1, 3].Value = "Link";
                int rowNum = 1;
                foreach (ExcelWorksheet s in excelReport.Workbook.Worksheets)
                {
                    rowNum++;
                    sheet.Cells[rowNum, 1].Value = s.Name;
                    sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                    sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                    if (s.Tables.Count > 0)
                    {
                        table = s.Tables[0];
                        sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                    }
                }
                range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_SNAPSHOTS_TABLE_TOC);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["# Entities"].Position + 1).Width = 25;

                #endregion

                #region Save file 

                // Report files
                string reportFileName = String.Format(
                    REPORT_SNAPSHOTS_METHOD_CALL_LINES_FILE_NAME,
                    programOptions.JobName,
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                string reportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, reportFileName);

                string folderPath = Path.GetDirectoryName(reportFilePath);
                if (Directory.Exists(folderPath) == false)
                {
                    Directory.CreateDirectory(folderPath);
                }

                logger.Info("Saving Excel report {0}", reportFilePath);
                loggerConsole.Info("Saving Excel report {0}", reportFilePath);

                try
                {
                    // Save full report Excel files
                    excelReport.SaveAs(new FileInfo(reportFilePath));
                }
                catch (InvalidOperationException ex)
                {
                    logger.Warn("Unable to save Excel file {0}", reportFilePath);
                    logger.Warn(ex);
                    loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);
                }

                #endregion

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        private static bool stepReportIndividualApplicationAndEntityDetails(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobStatus jobStatus)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            StepTiming stepTimingFunction = new StepTiming();
            stepTimingFunction.JobFileName = programOptions.OutputJobFilePath;
            stepTimingFunction.StepName = jobStatus.ToString();
            stepTimingFunction.StepID = (int)jobStatus;
            stepTimingFunction.StartTime = DateTime.Now;
            stepTimingFunction.NumEntities = jobConfiguration.Target.Count;

            string stepTimingReportFilePath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME, TIMING_REPORT_FILE_NAME);

            try
            {
                // Process each target
                for (int i = 0; i < jobConfiguration.Target.Count; i++)
                {
                    Stopwatch stopWatchTarget = new Stopwatch();
                    stopWatchTarget.Start();

                    JobTarget jobTarget = jobConfiguration.Target[i];

                    StepTiming stepTimingTarget = new StepTiming();
                    stepTimingTarget.Controller = jobTarget.Controller;
                    stepTimingTarget.ApplicationName = jobTarget.Application;
                    stepTimingTarget.ApplicationID = jobTarget.ApplicationID;
                    stepTimingTarget.JobFileName = programOptions.OutputJobFilePath;
                    stepTimingTarget.StepName = jobStatus.ToString();
                    stepTimingTarget.StepID = (int)jobStatus;
                    stepTimingTarget.StartTime = DateTime.Now;

                    try
                    {
                        #region Output status

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4}({5})", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, jobTarget.ApplicationID);

                        #endregion

                        #region Target state check

                        if (jobTarget.Status != JobTargetStatus.ConfigurationValid)
                        {
                            loggerConsole.Trace("Target in invalid state {0}, skipping", jobTarget.Status);

                            continue;
                        }

                        #endregion

                        #region Target step variables

                        // Various folders
                        string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
                        string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
                        string metricsFolderPath = Path.Combine(applicationFolderPath, METRICS_FOLDER_NAME);
                        string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
                        string eventsFolderPath = Path.Combine(applicationFolderPath, EVENTS_FOLDER_NAME);
                        string snapshotsFolderPath = Path.Combine(applicationFolderPath, SNAPSHOTS_FOLDER_NAME);

                        // Report files
                        string applicationReportFilePath = Path.Combine(applicationFolderPath, CONVERT_ENTITY_APPLICATION_FILE_NAME);
                        string tiersReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_TIERS_FILE_NAME);
                        string nodesReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_NODES_FILE_NAME);
                        string backendsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BACKENDS_FILE_NAME);
                        string businessTransactionsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_BUSINESS_TRANSACTIONS_FILE_NAME);
                        string serviceEndpointsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_SERVICE_ENDPOINTS_FILE_NAME);
                        string errorsReportFilePath = Path.Combine(entitiesFolderPath, CONVERT_ENTITY_ERRORS_FILE_NAME);

                        string eventsFilePath = Path.Combine(eventsFolderPath, CONVERT_EVENTS_FILE_NAME);
                        string healthRuleViolationEventsFilePath = Path.Combine(eventsFolderPath, CONVERT_HEALTH_RULE_EVENTS_FILE_NAME);
                        string snapshotsFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_FILE_NAME);
                        string segmentsFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_FILE_NAME);
                        string exitCallsFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_EXIT_CALLS_FILE_NAME);
                        string serviceEndpointCallsFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_SERVICE_ENDPOINTS_CALLS_FILE_NAME);
                        string detectedErrorsFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                        string businessDataFilePath = Path.Combine(snapshotsFolderPath, CONVERT_SNAPSHOTS_SEGMENTS_BUSINESS_DATA_FILE_NAME);

                        string metricsEntityFolderPath = String.Empty;
                        string entitiesFullRangeReportFilePath = String.Empty;

                        #endregion

                        #region Preload all the reports that will be filtered by the subsequent entities

                        loggerConsole.Info("Entity Details Data Preloading");

                        List<Event> eventsAllList = FileIOHelper.readListFromCSVFile<Event>(eventsFilePath, new EventReportMap());
                        List<HealthRuleViolationEvent> healthRuleViolationEventsAllList = FileIOHelper.readListFromCSVFile<HealthRuleViolationEvent>(healthRuleViolationEventsFilePath, new HealthRuleViolationEventReportMap());
                        List<Snapshot> snapshotsAllList = FileIOHelper.readListFromCSVFile<Snapshot>(snapshotsFilePath, new SnapshotReportMap());
                        List<Segment> segmentsAllList = FileIOHelper.readListFromCSVFile<Segment>(segmentsFilePath, new SegmentReportMap());
                        List<ExitCall> exitCallsAllList = FileIOHelper.readListFromCSVFile<ExitCall>(exitCallsFilePath, new ExitCallReportMap());
                        List<ServiceEndpointCall> serviceEndpointCallsAllList = FileIOHelper.readListFromCSVFile<ServiceEndpointCall>(serviceEndpointCallsFilePath, new ServiceEndpointCallReportMap());
                        List<DetectedError> detectedErrorsAllList = FileIOHelper.readListFromCSVFile<DetectedError>(detectedErrorsFilePath, new DetectedErrorReportMap());
                        List<BusinessData> businessDataAllList = FileIOHelper.readListFromCSVFile<BusinessData>(businessDataFilePath, new BusinessDataReportMap());

                        #endregion

                        #region Application

                        List<EntityApplication> applicationList = FileIOHelper.readListFromCSVFile<EntityApplication>(applicationReportFilePath, new ApplicationEntityReportMap());

                        metricsEntityFolderPath = Path.Combine(metricsFolderPath, APPLICATION_TYPE_SHORT);
                        entitiesFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
                        List<EntityApplication> applicationMetricsList = FileIOHelper.readListFromCSVFile<EntityApplication>(entitiesFullRangeReportFilePath, new ApplicationMetricReportMap());

                        if (applicationList != null && applicationList.Count > 0)
                        {
                            loggerConsole.Info("Entity Details for Application");

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + 1;

                            reportMetricDetailApplication(
                                programOptions,
                                jobConfiguration,
                                jobTarget,
                                applicationList[0],
                                (applicationMetricsList != null && applicationMetricsList.Count > 0) ? applicationMetricsList[0] : null,
                                eventsAllList,
                                healthRuleViolationEventsAllList,
                                snapshotsAllList,
                                segmentsAllList,
                                exitCallsAllList,
                                serviceEndpointCallsAllList,
                                detectedErrorsAllList,
                                businessDataAllList);
                        }

                        #endregion

                        #region Tier

                        List<EntityTier> tiersList = FileIOHelper.readListFromCSVFile<EntityTier>(tiersReportFilePath, new TierEntityReportMap());

                        metricsEntityFolderPath = Path.Combine(metricsFolderPath, TIERS_TYPE_SHORT);
                        entitiesFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        List<EntityTier> tiersMetricsList = FileIOHelper.readListFromCSVFile<EntityTier>(entitiesFullRangeReportFilePath, new TierMetricReportMap());

                        if (tiersList != null)
                        {
                            loggerConsole.Info("Entity Details for Tiers ({0} entities)", tiersList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + tiersList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var tiersListChunks = tiersList.BreakListIntoChunks(METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<EntityTier>, int>(
                                    tiersListChunks,
                                    () => 0,
                                    (tiersListChunk, loop, subtotal) =>
                                    {
                                        subtotal += reportMetricDetailTiers(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            tiersListChunk,
                                            tiersMetricsList,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList,
                                            false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        j = Interlocked.Add(ref j, finalResult);
                                        Console.Write("[{0}].", j);
                                    }
                                );
                            }
                            else
                            {
                                j = reportMetricDetailTiers(
                                    programOptions,
                                    jobConfiguration,
                                    jobTarget,
                                    tiersList,
                                    tiersMetricsList,
                                    eventsAllList,
                                    healthRuleViolationEventsAllList,
                                    snapshotsAllList,
                                    segmentsAllList,
                                    exitCallsAllList,
                                    serviceEndpointCallsAllList,
                                    detectedErrorsAllList,
                                    businessDataAllList,
                                    true);
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Nodes

                        List<EntityNode> nodesList = FileIOHelper.readListFromCSVFile<EntityNode>(nodesReportFilePath, new NodeEntityReportMap());

                        metricsEntityFolderPath = Path.Combine(metricsFolderPath, NODES_TYPE_SHORT);
                        entitiesFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        List<EntityNode> nodesMetricsList = FileIOHelper.readListFromCSVFile<EntityNode>(entitiesFullRangeReportFilePath, new NodeMetricReportMap());

                        if (nodesList != null)
                        {
                            loggerConsole.Info("Entity Details for Nodes ({0} entities)", nodesList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + nodesList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var nodesListChunks = nodesList.BreakListIntoChunks(METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<EntityNode>, int>(
                                    nodesListChunks,
                                    () => 0,
                                    (nodesListChunk, loop, subtotal) =>
                                    {
                                        subtotal += reportMetricDetailNodes(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            nodesListChunk,
                                            nodesMetricsList,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList,
                                            false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        j = Interlocked.Add(ref j, finalResult);
                                        Console.Write("[{0}].", j);
                                    }
                                );
                            }
                            else
                            {
                                j = reportMetricDetailNodes(
                                    programOptions,
                                    jobConfiguration,
                                    jobTarget,
                                    nodesList,
                                    nodesMetricsList,
                                    eventsAllList,
                                    healthRuleViolationEventsAllList,
                                    snapshotsAllList,
                                    segmentsAllList,
                                    exitCallsAllList,
                                    serviceEndpointCallsAllList,
                                    detectedErrorsAllList,
                                    businessDataAllList,
                                    true);
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Backends

                        List<EntityBackend> backendsList = FileIOHelper.readListFromCSVFile<EntityBackend>(backendsReportFilePath, new BackendEntityReportMap());

                        metricsEntityFolderPath = Path.Combine(metricsFolderPath, BACKENDS_TYPE_SHORT);
                        entitiesFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        List<EntityBackend> backendsMetricsList = FileIOHelper.readListFromCSVFile<EntityBackend>(entitiesFullRangeReportFilePath, new BackendMetricReportMap());

                        if (backendsList != null)
                        {
                            loggerConsole.Info("Entity Details for Backends ({0} entities)", backendsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + backendsList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var backendsListChunks = backendsList.BreakListIntoChunks(METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<EntityBackend>, int>(
                                    backendsListChunks,
                                    () => 0,
                                    (backendsListChunk, loop, subtotal) =>
                                    {
                                        subtotal += reportMetricDetailBackends(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            backendsListChunk,
                                            backendsMetricsList,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList,
                                            false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        j = Interlocked.Add(ref j, finalResult);
                                        Console.Write("[{0}].", j);
                                    }
                                );
                            }
                            else
                            {
                                j = reportMetricDetailBackends(
                                    programOptions,
                                    jobConfiguration,
                                    jobTarget,
                                    backendsList,
                                    backendsMetricsList,
                                    eventsAllList,
                                    healthRuleViolationEventsAllList,
                                    snapshotsAllList,
                                    segmentsAllList,
                                    exitCallsAllList,
                                    serviceEndpointCallsAllList,
                                    detectedErrorsAllList,
                                    businessDataAllList,
                                    true);
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Business Transactions

                        List<EntityBusinessTransaction> businessTransactionsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(businessTransactionsReportFilePath, new BusinessTransactionEntityReportMap());

                        metricsEntityFolderPath = Path.Combine(metricsFolderPath, BUSINESS_TRANSACTIONS_TYPE_SHORT);
                        entitiesFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        List<EntityBusinessTransaction> businessTransactionsMetricsList = FileIOHelper.readListFromCSVFile<EntityBusinessTransaction>(entitiesFullRangeReportFilePath, new BusinessTransactionMetricReportMap());

                        if (businessTransactionsList != null)
                        {
                            loggerConsole.Info("Entity Details for Business Transactions ({0} entities)", businessTransactionsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + businessTransactionsList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var businessTransactionsListChunks = businessTransactionsList.BreakListIntoChunks(METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<EntityBusinessTransaction>, int>(
                                    businessTransactionsListChunks,
                                    () => 0,
                                    (businessTransactionsListChunk, loop, subtotal) =>
                                    {
                                        subtotal += reportMetricDetailBusinessTransactions(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            businessTransactionsListChunk,
                                            businessTransactionsMetricsList,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList,
                                            false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        j = Interlocked.Add(ref j, finalResult);
                                        Console.Write("[{0}].", j);
                                    }
                                );
                            }
                            else
                            {
                                j = reportMetricDetailBusinessTransactions(
                                    programOptions,
                                    jobConfiguration,
                                    jobTarget,
                                    businessTransactionsList,
                                    businessTransactionsMetricsList,
                                    eventsAllList,
                                    healthRuleViolationEventsAllList,
                                    snapshotsAllList,
                                    segmentsAllList,
                                    exitCallsAllList,
                                    serviceEndpointCallsAllList,
                                    detectedErrorsAllList,
                                    businessDataAllList,
                                    true);
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Service Endpoints

                        List<EntityServiceEndpoint> serviceEndpointsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(serviceEndpointsReportFilePath, new ServiceEndpointEntityReportMap());

                        metricsEntityFolderPath = Path.Combine(metricsFolderPath, SERVICE_ENDPOINTS_TYPE_SHORT);
                        entitiesFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        List<EntityServiceEndpoint> serviceEndpointsMetricsList = FileIOHelper.readListFromCSVFile<EntityServiceEndpoint>(entitiesFullRangeReportFilePath, new ServiceEndpointMetricReportMap());

                        if (serviceEndpointsList != null)
                        {
                            loggerConsole.Info("Entity Details for Service Endpoints ({0} entities)", serviceEndpointsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + serviceEndpointsList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var serviceEndpointsListChunks = serviceEndpointsList.BreakListIntoChunks(METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<EntityServiceEndpoint>, int>(
                                    serviceEndpointsListChunks,
                                    () => 0,
                                    (serviceEndpointsListChunk, loop, subtotal) =>
                                    {
                                        subtotal += reportMetricDetailServiceEndpoints(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            serviceEndpointsListChunk,
                                            serviceEndpointsMetricsList,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList,
                                            false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        j = Interlocked.Add(ref j, finalResult);
                                        Console.Write("[{0}].", j);
                                    }
                                );
                            }
                            else
                            {
                                j = reportMetricDetailServiceEndpoints(
                                    programOptions,
                                    jobConfiguration,
                                    jobTarget,
                                    serviceEndpointsList,
                                    serviceEndpointsMetricsList,
                                    eventsAllList,
                                    healthRuleViolationEventsAllList,
                                    snapshotsAllList,
                                    segmentsAllList,
                                    exitCallsAllList,
                                    serviceEndpointCallsAllList,
                                    detectedErrorsAllList,
                                    businessDataAllList,
                                    true);
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                        #region Errors

                        List<EntityError> errorsList = FileIOHelper.readListFromCSVFile<EntityError>(errorsReportFilePath, new ErrorEntityReportMap());

                        metricsEntityFolderPath = Path.Combine(metricsFolderPath, ERRORS_TYPE_SHORT);
                        entitiesFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITIES_METRICS_FULLRANGE_FILE_NAME);
                        List<EntityError> errorsMetricsList = FileIOHelper.readListFromCSVFile<EntityError>(entitiesFullRangeReportFilePath, new ErrorMetricReportMap());

                        if (errorsList != null)
                        {
                            loggerConsole.Info("Entity Details for Errors ({0} entities)", errorsList.Count);

                            stepTimingTarget.NumEntities = stepTimingTarget.NumEntities + errorsList.Count;

                            int j = 0;

                            if (programOptions.ProcessSequentially == false)
                            {
                                var errorsListChunks = errorsList.BreakListIntoChunks(METRIC_DETAILS_REPORT_NUMBER_OF_ENTITIES_TO_PROCESS_PER_THREAD);

                                Parallel.ForEach<List<EntityError>, int>(
                                    errorsListChunks,
                                    () => 0,
                                    (errorsListChunk, loop, subtotal) =>
                                    {
                                        subtotal += reportMetricDetailErrors(
                                            programOptions,
                                            jobConfiguration,
                                            jobTarget,
                                            errorsListChunk,
                                            errorsMetricsList,
                                            eventsAllList,
                                            healthRuleViolationEventsAllList,
                                            snapshotsAllList,
                                            segmentsAllList,
                                            exitCallsAllList,
                                            serviceEndpointCallsAllList,
                                            detectedErrorsAllList,
                                            businessDataAllList,
                                            false);
                                        return subtotal;
                                    },
                                    (finalResult) =>
                                    {
                                        j = Interlocked.Add(ref j, finalResult);
                                        Console.Write("[{0}].", j);
                                    }
                                );
                            }
                            else
                            {
                                j = reportMetricDetailErrors(
                                    programOptions,
                                    jobConfiguration,
                                    jobTarget,
                                    errorsList,
                                    errorsMetricsList,
                                    eventsAllList,
                                    healthRuleViolationEventsAllList,
                                    snapshotsAllList,
                                    segmentsAllList,
                                    exitCallsAllList,
                                    serviceEndpointCallsAllList,
                                    detectedErrorsAllList,
                                    businessDataAllList,
                                    true);
                            }

                            loggerConsole.Info("{0} entities", j);
                        }

                        #endregion

                    }
                    catch (Exception ex)
                    {
                        logger.Warn(ex);
                        loggerConsole.Warn(ex);
                    }
                    finally
                    {
                        stopWatchTarget.Stop();

                        logger.Info("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);
                        loggerConsole.Trace("{0}({0:d}): [{1}/{2}], {3} {4} duration {5:c} ({6} ms)", jobStatus, i + 1, jobConfiguration.Target.Count, jobTarget.Controller, jobTarget.Application, stopWatchTarget.Elapsed, stopWatchTarget.ElapsedMilliseconds);

                        stepTimingTarget.EndTime = DateTime.Now;
                        stepTimingTarget.Duration = stopWatchTarget.Elapsed;
                        stepTimingTarget.DurationMS = stopWatchTarget.ElapsedMilliseconds;

                        List<StepTiming> stepTimings = new List<StepTiming>(1);
                        stepTimings.Add(stepTimingTarget);
                        FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                loggerConsole.Error(ex);

                return false;
            }
            finally
            {
                stopWatch.Stop();

                logger.Info("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);
                loggerConsole.Trace("{0}({0:d}): total duration {1:c} ({2} ms)", jobStatus, stopWatch.Elapsed, stopWatch.ElapsedMilliseconds);

                stepTimingFunction.EndTime = DateTime.Now;
                stepTimingFunction.Duration = stopWatch.Elapsed;
                stepTimingFunction.DurationMS = stopWatch.ElapsedMilliseconds;

                List<StepTiming> stepTimings = new List<StepTiming>(1);
                stepTimings.Add(stepTimingFunction);
                FileIOHelper.writeListToCSVFile(stepTimings, new StepTimingReportMap(), stepTimingReportFilePath, true);
            }
        }

        #endregion


        #region Metric extraction functions

        private static void getMetricDataForMetricForAllRanges(ControllerApi controllerApi, JobTarget jobTarget, string metricPath, string metricName, JobConfiguration jobConfiguration, string metricsEntityFolderPath, bool progressToConsole)
        {
            string metricEntitySubFolderName = metricNameToShortMetricNameMapping[metricName];

            // Get the full range
            JobTimeRange jobTimeRange = jobConfiguration.Input.ExpandedTimeRange;

            logger.Info("Retrieving metric for Application {0}({1}), Metric='{2}', From {3:o}, To {4:o}", jobTarget.Application, jobTarget.ApplicationID, metricPath, jobTimeRange.From, jobTimeRange.To);

            string metricsJson = String.Empty;

            string metricsDataFilePath = Path.Combine(metricsEntityFolderPath, metricEntitySubFolderName, String.Format(EXTRACT_METRIC_FULL_FILE_NAME, jobTimeRange.From, jobTimeRange.To));
            if (File.Exists(metricsDataFilePath) == false)
            {
                if (progressToConsole == true)
                {
                    Console.Write(".");
                }

                // First range is the whole thing
                metricsJson = controllerApi.GetMetricData(
                    jobTarget.ApplicationID,
                    metricPath,
                    convertToUnixTimestamp(jobTimeRange.From),
                    convertToUnixTimestamp(jobTimeRange.To),
                    true);

                if (metricsJson != String.Empty) FileIOHelper.saveFileToFolder(metricsJson, metricsDataFilePath);
            }

            // Get the hourly time ranges
            for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
            {
                if (progressToConsole == true)
                {
                    Console.Write(".");
                }

                jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                logger.Info("Retrieving metric for Application {0}({1}), Metric='{2}', From {3:o}, To {4:o}", jobTarget.Application, jobTarget.ApplicationID, metricPath, jobTimeRange.From, jobTimeRange.To);

                metricsDataFilePath = Path.Combine(metricsEntityFolderPath, metricEntitySubFolderName, String.Format(EXTRACT_METRIC_HOUR_FILE_NAME, jobTimeRange.From, jobTimeRange.To));

                if (File.Exists(metricsDataFilePath) == false)
                {
                    // Subsequent ones are details
                    metricsJson = controllerApi.GetMetricData(
                        jobTarget.ApplicationID,
                        metricPath,
                        convertToUnixTimestamp(jobTimeRange.From),
                        convertToUnixTimestamp(jobTimeRange.To),
                        false);

                    if (metricsJson != String.Empty) FileIOHelper.saveFileToFolder(metricsJson, metricsDataFilePath);
                }
            }
        }

        #endregion

        #region Flowmap extraction functions

        private static int extractFlowmapsApplication(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, string metricsFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes)
        {
            logger.Info("Retrieving flowmap for Application {0}, From {1:o}, To {2:o}", jobTarget.Application, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);

            string flowmapDataFilePath = Path.Combine(
                metricsFolderPath,
                APPLICATION_TYPE_SHORT,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

            string flowmapJson = String.Empty;

            if (File.Exists(flowmapDataFilePath) == false)
            {
                flowmapJson = controllerApi.GetFlowmapApplication(jobTarget.ApplicationID, fromTimeUnix, toTimeUnix, differenceInMinutes);
                if (flowmapJson != String.Empty) FileIOHelper.saveFileToFolder(flowmapJson, flowmapDataFilePath);
            }

            return 1;
        }

        private static int extractFlowmapsTiers(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTTier> entityList, string metricsFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTTier tier in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Tier {1}, From {2:o}, To {3:o}", jobTarget.Application, tier.name, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    metricsFolderPath,
                    TIERS_TYPE_SHORT,
                    getShortenedEntityNameForFileSystem(tier.name, tier.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapTier(tier.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToFolder(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int extractFlowmapsNodes(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTNode> entityList, string metricsFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTNode node in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Tier {1}, Node {2}, From {3:o}, To {4:o}", jobTarget.Application, node.tierName, node.name, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    metricsFolderPath,
                    NODES_TYPE_SHORT,
                    getShortenedEntityNameForFileSystem(node.tierName, node.tierId),
                    getShortenedEntityNameForFileSystem(node.name, node.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapNode(node.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToFolder(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int extractFlowmapsBackends(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTBackend> entityList, string metricsFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTBackend backend in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Backend {1}, From {2:o}, To {3:o}", jobTarget.Application, backend.name, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    metricsFolderPath,
                    BACKENDS_TYPE_SHORT,
                    getShortenedEntityNameForFileSystem(backend.name, backend.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapBackend(backend.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToFolder(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int extractFlowmapsBusinessTransactions(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<AppDRESTBusinessTransaction> entityList, string metricsFolderPath, long fromTimeUnix, long toTimeUnix, long differenceInMinutes, bool progressToConsole)
        {
            int j = 0;

            foreach (AppDRESTBusinessTransaction businessTransaction in entityList)
            {
                logger.Info("Retrieving flowmap for Application {0}, Tier {1}, Business Transaction {2}, From {3:o}, To {4:o}", jobTarget.Application, businessTransaction.tierName, businessTransaction.name, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);

                string flowmapDataFilePath = Path.Combine(
                    metricsFolderPath,
                    BUSINESS_TRANSACTIONS_TYPE_SHORT,
                    getShortenedEntityNameForFileSystem(businessTransaction.tierName, businessTransaction.tierId),
                    getShortenedEntityNameForFileSystem(businessTransaction.name, businessTransaction.id),
                    String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                if (File.Exists(flowmapDataFilePath) == false)
                {
                    string flowmapJson = controllerApi.GetFlowmapBusinessTransaction(jobTarget.ApplicationID, businessTransaction.id, fromTimeUnix, toTimeUnix, differenceInMinutes);
                    if (flowmapJson != String.Empty) FileIOHelper.saveFileToFolder(flowmapJson, flowmapDataFilePath);
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        #endregion

        #region Event extraction functions

        private static int extractEvents(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, string eventsFolderPath, string eventType, bool progressToConsole)
        {
            if (progressToConsole == true)
            {
                loggerConsole.Info("Extract {0} events ({1} time ranges)", eventType, jobConfiguration.Input.HourlyTimeRanges.Count);
            }

            JArray listOfEvents = new JArray();
            int totalEventsFound = 0;
            foreach (JobTimeRange jobTimeRange in jobConfiguration.Input.HourlyTimeRanges)
            {
                long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);

                string eventsJSON = controllerApi.GetEvents(jobTarget.ApplicationID, eventType, fromTimeUnix, toTimeUnix);
                if (eventsJSON != String.Empty)
                {
                    // Load events
                    JArray eventsInHour = JArray.Parse(eventsJSON);
                    foreach (JObject interestingEvent in eventsInHour)
                    {
                        listOfEvents.Add(interestingEvent);
                    }
                    totalEventsFound = totalEventsFound + eventsInHour.Count;

                    if (progressToConsole == true)
                    {
                        Console.Write("+{0}", eventsInHour.Count);
                    }
                }
            }

            if (listOfEvents.Count > 0)
            {
                string eventsFilePath = Path.Combine(
                    eventsFolderPath,
                    String.Format(EVENTS_FILE_NAME, eventType, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

                FileIOHelper.writeJArrayToFile(listOfEvents, eventsFilePath);

                logger.Info("{0} events from {1:o} to {2:o}", listOfEvents.Count, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To);
                if (progressToConsole == true)
                {
                    Console.Write("=");
                    loggerConsole.Info("{0} {1} events", listOfEvents.Count, eventType);
                }
            }
            else
            {
                if (progressToConsole == true)
                {
                    Console.WriteLine();
                }
            }

            return listOfEvents.Count;
        }

        #endregion

        #region Snapshot extraction functions

        private static int extractSnapshots(JobConfiguration jobConfiguration, JobTarget jobTarget, ControllerApi controllerApi, List<JToken> entityList, List<AppDRESTTier> tiersNodeJSList, string snapshotsFolderPath, bool progressToConsole)
        {
           int j = 0;

            foreach (JToken snapshot in entityList)
            {
                // Only do first in chain
                if ((bool)snapshot["firstInChain"] == true)
                {
                    logger.Info("Retrieving snapshot for Application {0}, Tier {1}, Business Transaction {2}, RequestGUID {3}", jobTarget.Application, snapshot["applicationComponentName"], snapshot["businessTransactionName"], snapshot["requestGUID"]);

                    #region Target step variables

                    DateTime snapshotTime = convertFromUnixTimestamp((long)snapshot["serverStartTime"]);

                    string snapshotFolderPath = Path.Combine(
                        snapshotsFolderPath,
                        getShortenedEntityNameForFileSystem(snapshot["applicationComponentName"].ToString(), (long)snapshot["applicationComponentId"]),
                        getShortenedEntityNameForFileSystem(snapshot["businessTransactionName"].ToString(), (long)snapshot["businessTransactionId"]),
                        String.Format("{0:yyyyMMddHH}", snapshotTime),
                        userExperienceFolderNameMapping[snapshot["userExperience"].ToString()],
                        String.Format(SNAPSHOT_FOLDER_NAME, snapshot["requestGUID"], snapshotTime));

                    // Must strip out the milliseconds, because the segment list retrieval doesn't seem to like them in the datetimes
                    DateTime snapshotTimeFrom = snapshotTime.AddMinutes(-30).AddMilliseconds(snapshotTime.Millisecond * -1);
                    DateTime snapshotTimeTo = snapshotTime.AddMinutes(30).AddMilliseconds(snapshotTime.Millisecond * -1);

                    long fromTimeUnix = convertToUnixTimestamp(snapshotTimeFrom);
                    long toTimeUnix = convertToUnixTimestamp(snapshotTimeTo);
                    int differenceInMinutes = (int)(snapshotTimeTo - snapshotTimeFrom).TotalMinutes;

                    #endregion

                    #region Get Snapshot Flowmap

                    // Get snapshot flow map
                    string snapshotFlowmapDataFilePath = Path.Combine(snapshotFolderPath, EXTRACT_SNAPSHOT_FLOWMAP_FILE_NAME);

                    if (File.Exists(snapshotFlowmapDataFilePath) == false)
                    {
                        string snapshotFlowmapJson = controllerApi.GetFlowmapSnapshot(jobTarget.ApplicationID, (int)snapshot["businessTransactionId"], snapshot["requestGUID"].ToString(), fromTimeUnix, toTimeUnix, differenceInMinutes);
                        if (snapshotFlowmapJson != String.Empty) FileIOHelper.saveFileToFolder(snapshotFlowmapJson, snapshotFlowmapDataFilePath);
                    }

                    #endregion

                    #region Get List of Segments

                    // Get list of segments
                    string snapshotSegmentsDataFilePath = Path.Combine(snapshotFolderPath, EXTRACT_SNAPSHOT_SEGMENT_FILE_NAME);

                    if (File.Exists(snapshotSegmentsDataFilePath) == false)
                    {
                        string snapshotSegmentsJson = controllerApi.GetSnapshotSegments(snapshot["requestGUID"].ToString(), snapshotTimeFrom, snapshotTimeTo, differenceInMinutes);
                        if (snapshotSegmentsJson != String.Empty) FileIOHelper.saveFileToFolder(snapshotSegmentsJson, snapshotSegmentsDataFilePath);
                    }

                    #endregion

                    #region Get Details for Each Segment

                    JArray snapshotSegmentsList = FileIOHelper.loadJArrayFromFile(snapshotSegmentsDataFilePath);
                    if (snapshotSegmentsList != null)
                    {
                        // Get details for segment
                        foreach (JToken snapshotSegment in snapshotSegmentsList)
                        {
                            string snapshotSegmentDataFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME, snapshotSegment["id"]));

                            if (File.Exists(snapshotSegmentDataFilePath) == false)
                            {
                                string snapshotSegmentJson = controllerApi.GetSnapshotSegmentDetails((long)snapshotSegment["id"], fromTimeUnix, toTimeUnix, differenceInMinutes);
                                if (snapshotSegmentJson != String.Empty) FileIOHelper.saveFileToFolder(snapshotSegmentJson, snapshotSegmentDataFilePath);
                            }
                        }

                        // Get errors for segment
                        foreach (JToken snapshotSegment in snapshotSegmentsList)
                        {
                            string snapshotSegmentErrorFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_ERROR_FILE_NAME, snapshotSegment["id"]));

                            if (File.Exists(snapshotSegmentErrorFilePath) == false && (bool)snapshotSegment["errorOccurred"] == true)
                            {
                                string snapshotSegmentJson = controllerApi.GetSnapshotSegmentErrors((long)snapshotSegment["id"], fromTimeUnix, toTimeUnix, differenceInMinutes);
                                if (snapshotSegmentJson != String.Empty)
                                {
                                    // "[ ]" == empty data. Don't create the file
                                    if (snapshotSegmentJson.Length > 3)
                                    {
                                        FileIOHelper.saveFileToFolder(snapshotSegmentJson, snapshotSegmentErrorFilePath);
                                    }
                                }
                            }
                        }

                        // Get call graphs for segment
                        foreach (JToken snapshotSegment in snapshotSegmentsList)
                        {
                            string snapshotSegmentCallGraphFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_CALLGRAPH_FILE_NAME, snapshotSegment["id"]));

                            if (File.Exists(snapshotSegmentCallGraphFilePath) == false && ((bool)snapshotSegment["fullCallgraph"] == true || (bool)snapshotSegment["delayedCallGraph"] == true))
                            {
                                // If the tier is Node.JS, the call graphs come from Process Snapshot
                                bool getProcessCallGraph = false;
                                string processRequestGUID = String.Empty;
                                if (tiersNodeJSList != null && tiersNodeJSList.Count > 0)
                                {
                                    // Is this a Node.JS tier?
                                    if (tiersNodeJSList.Count(t => t.id == (long)snapshotSegment["applicationComponentId"]) > 0)
                                    {
                                        // Yes, it is

                                        // Is there a process snapshot? Check Transaction Properties for its value
                                        string snapshotSegmentDataFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME, snapshotSegment["id"]));
                                        JObject snapshotSegmentDetail = FileIOHelper.loadJObjectFromFile(snapshotSegmentDataFilePath);
                                        if (snapshotSegmentDetail != null)
                                        {
                                            if (snapshotSegmentDetail["transactionProperties"].HasValues == true)
                                            {
                                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["transactionProperties"])
                                                {
                                                    if (transactionPropertyToken["name"].ToString() == "Process Snapshot GUIDs")
                                                    {
                                                        getProcessCallGraph = true;
                                                        processRequestGUID = transactionPropertyToken["value"].ToString();
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                // Ok, now either get call graph the usual way or process snapshot call graph
                                if (getProcessCallGraph == true && processRequestGUID.Length > 0)
                                {
                                    string snapshotSegmentJson = controllerApi.GetProcessSnapshotCallGraph(processRequestGUID, fromTimeUnix, toTimeUnix, differenceInMinutes);
                                    if (snapshotSegmentJson != String.Empty) FileIOHelper.saveFileToFolder(snapshotSegmentJson, snapshotSegmentCallGraphFilePath);
                                }
                                else
                                {
                                    string snapshotSegmentJson = controllerApi.GetSnapshotSegmentCallGraph((long)snapshotSegment["id"], fromTimeUnix, toTimeUnix, differenceInMinutes);
                                    if (snapshotSegmentJson != String.Empty) FileIOHelper.saveFileToFolder(snapshotSegmentJson, snapshotSegmentCallGraphFilePath);
                                }
                            }
                        }
                    }

                    #endregion

                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        #endregion


        #region Metric detail conversion functions

        private static void fillFullRangeMetricEntityRow(
            EntityBase entityRow, 
            JobTimeRange jobTimeRange, 
            string entityMetricPathPrefix, 
            string metricsEntityFolderPath, 
            List<AppDRESTMetric> metricDataART, 
            List<AppDRESTMetric> metricDataCPM, 
            List<AppDRESTMetric> metricDataEPM, 
            List<AppDRESTMetric> metricDataEXCPM, 
            List<AppDRESTMetric> metricDataHTTPEPM)
        {
            entityRow.Duration = (int)(jobTimeRange.To - jobTimeRange.From).Duration().TotalMinutes;
            entityRow.From = jobTimeRange.From.ToLocalTime();
            entityRow.To = jobTimeRange.To.ToLocalTime();
            entityRow.FromUtc = jobTimeRange.From;
            entityRow.ToUtc = jobTimeRange.To;

            // Determine the entity ID to bve used in ensuring we get only one specific entity
            // This is to address identically named Entities
            // Backends can be named identically - see Azure Table exits
            // Errors can also occasionally be named identically
            long entityID = -1;
            if (entityRow is EntityApplication)
            {
                // Application level metrics don't need ever have anything unusual
            }
            else if (entityRow is EntityTier)
            {
                entityID = entityRow.TierID;
            }
            else if (entityRow is EntityNode)
            {
                entityID = entityRow.TierID;
            }
            else if (entityRow is EntityBackend)
            {
                entityID = ((EntityBackend)entityRow).BackendID;
            }
            else if (entityRow is EntityBusinessTransaction)
            {
                entityID = ((EntityBusinessTransaction)entityRow).BTID;
            }
            else if (entityRow is EntityServiceEndpoint)
            {
                entityID = ((EntityServiceEndpoint)entityRow).SEPID;
            }
            else if (entityRow is EntityError)
            {
                entityID = ((EntityError)entityRow).ErrorID;
            }
            else if (entityRow is EntityInformationPoint)
            {
                entityID = ((EntityInformationPoint)entityRow).IPID;
            }
            entityRow.MetricsIDs = new List<long>(5);

            AppDRESTMetric thisEntityMetricData = null;

            #region Read and convert metrics

            // ART
            string metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_ART_SHORTNAME);
            string entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (metricDataART != null && metricDataART.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataART.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataART.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.ART = thisEntityMetricData.metricValues[0].value;
                        entityRow.TimeTotal = thisEntityMetricData.metricValues[0].sum;
                    }

                    if (File.Exists(entityMetricSummaryReportFilePath) == false)
                    {
                        List<MetricSummary> metricSummaries = convertMetricSummaryToTypedListForCSV(thisEntityMetricData, entityRow, jobTimeRange);
                        FileIOHelper.writeListToCSVFile(metricSummaries, new MetricSummaryMetricReportMap(), entityMetricSummaryReportFilePath, false);
                    }

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // CPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_CPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (metricDataCPM != null && metricDataCPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.CPM = thisEntityMetricData.metricValues[0].value;
                        entityRow.Calls = thisEntityMetricData.metricValues[0].sum;
                    }

                    if (File.Exists(entityMetricSummaryReportFilePath) == false)
                    {
                        List<MetricSummary> metricSummaries = convertMetricSummaryToTypedListForCSV(thisEntityMetricData, entityRow, jobTimeRange);
                        FileIOHelper.writeListToCSVFile(metricSummaries, new MetricSummaryMetricReportMap(), entityMetricSummaryReportFilePath, false);
                    }

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // EPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (metricDataEPM != null && metricDataEPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.EPM = thisEntityMetricData.metricValues[0].value;
                        entityRow.Errors = thisEntityMetricData.metricValues[0].sum;
                        entityRow.ErrorsPercentage = Math.Round((double)(double)entityRow.Errors / (double)entityRow.Calls * 100, 2);
                        if (Double.IsNaN(entityRow.ErrorsPercentage) == true) entityRow.ErrorsPercentage = 0;
                    }

                    if (File.Exists(entityMetricSummaryReportFilePath) == false)
                    {
                        List<MetricSummary> metricSummaries = convertMetricSummaryToTypedListForCSV(thisEntityMetricData, entityRow, jobTimeRange);
                        FileIOHelper.writeListToCSVFile(metricSummaries, new MetricSummaryMetricReportMap(), entityMetricSummaryReportFilePath, false);
                    }

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // EXCPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EXCPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (metricDataEXCPM != null && metricDataEXCPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataEXCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataEXCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.EXCPM = thisEntityMetricData.metricValues[0].value;
                        entityRow.Exceptions = thisEntityMetricData.metricValues[0].sum;
                    }

                    if (File.Exists(entityMetricSummaryReportFilePath) == false)
                    {
                        List<MetricSummary> metricSummaries = convertMetricSummaryToTypedListForCSV(thisEntityMetricData, entityRow, jobTimeRange);
                        FileIOHelper.writeListToCSVFile(metricSummaries, new MetricSummaryMetricReportMap(), entityMetricSummaryReportFilePath, false);
                    }

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // HTTPEPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_HTTPEPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (metricDataHTTPEPM != null && metricDataHTTPEPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataHTTPEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataHTTPEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.HTTPEPM = thisEntityMetricData.metricValues[0].value;
                        entityRow.HttpErrors = thisEntityMetricData.metricValues[0].sum;
                    }

                    if (File.Exists(entityMetricSummaryReportFilePath) == false)
                    {
                        List<MetricSummary> metricSummaries = convertMetricSummaryToTypedListForCSV(thisEntityMetricData, entityRow, jobTimeRange);
                        FileIOHelper.writeListToCSVFile(metricSummaries, new MetricSummaryMetricReportMap(), entityMetricSummaryReportFilePath, false);
                    }

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            #endregion

            if (entityRow.ART == 0 && entityRow.TimeTotal == 0 &&
                entityRow.CPM == 0 && entityRow.Calls == 0 &&
                entityRow.EPM == 0 && entityRow.Errors == 0 &&
                entityRow.EXCPM == 0 && entityRow.Exceptions == 0 &&
                entityRow.HTTPEPM == 0 && entityRow.HttpErrors == 0)
            {
                entityRow.HasActivity = false;
            }
            else
            {
                entityRow.HasActivity = true;
            }

            // Add link to the metrics
            updateEntityWithDeeplinks(entityRow, jobTimeRange);

            return;
        }

        private static void fillHourlyRangeMetricEntityRowAndConvertMetricsToCSV(
            EntityBase entityRow, 
            JobTimeRange jobTimeRange, 
            string entityMetricPathPrefix, 
            string metricsEntityFolderPath,
            int timeRangeIndex,
            List<AppDRESTMetric> metricDataART, 
            List<AppDRESTMetric> metricDataCPM, 
            List<AppDRESTMetric> metricDataEPM,
            List<AppDRESTMetric> metricDataEXCPM,
            List<AppDRESTMetric> metricDataHTTPEPM)
        {
            entityRow.Duration = (int)(jobTimeRange.To - jobTimeRange.From).Duration().TotalMinutes;
            entityRow.From = jobTimeRange.From.ToLocalTime();
            entityRow.To = jobTimeRange.To.ToLocalTime();
            entityRow.FromUtc = jobTimeRange.From;
            entityRow.ToUtc = jobTimeRange.To;

            // Determine the entity ID to bve used in ensuring we get only one specific entity
            // This is to address identically named Entities
            // Backends can be named identically - see Azure Table exits
            // Errors can also occasionally be named identically
            long entityID = -1;
            if (entityRow is EntityApplication)
            {
                // Application level metrics don't need ever have anything unusual
            }
            else if (entityRow is EntityTier)
            {
                entityID = entityRow.TierID;
            }
            else if (entityRow is EntityNode)
            {
                entityID = entityRow.TierID;
            }
            else if (entityRow is EntityBackend)
            {
                entityID = ((EntityBackend)entityRow).BackendID;
            }
            else if (entityRow is EntityBusinessTransaction)
            {
                entityID = ((EntityBusinessTransaction)entityRow).BTID;
            }
            else if (entityRow is EntityServiceEndpoint)
            {
                entityID = ((EntityServiceEndpoint)entityRow).SEPID;
            }
            else if (entityRow is EntityError)
            {
                entityID = ((EntityError)entityRow).ErrorID;
            }
            else if (entityRow is EntityInformationPoint)
            {
                entityID = ((EntityInformationPoint)entityRow).IPID;
            }

            if (entityRow.MetricsIDs == null) { entityRow.MetricsIDs = new List<long>(5); }

            bool appendRecordsToExistingFile = true;
            if (timeRangeIndex == 0) { appendRecordsToExistingFile = false; }

            AppDRESTMetric thisEntityMetricData = null;

            #region Read and convert metrics

            // ART
            string metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_ART_SHORTNAME);
            string entityMetricReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (metricDataART != null && metricDataART.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataART.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataART.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        double intermediateART = (double)thisEntityMetricData.metricValues.Sum(mv => mv.sum) / (double)thisEntityMetricData.metricValues.Sum(mv => mv.count);
                        if (Double.IsNaN(intermediateART) == true)
                        {
                            entityRow.ART = 0;
                        }
                        else
                        {
                            entityRow.ART = (long)Math.Round(intermediateART, 0);
                        }
                        entityRow.TimeTotal = thisEntityMetricData.metricValues.Sum(mv => mv.sum);
                    }

                    List<MetricValue> metricValues = convertMetricValueToTypedListForCSV(thisEntityMetricData);
                    FileIOHelper.writeListToCSVFile(metricValues, new MetricValueMetricReportMap(), entityMetricReportFilePath, appendRecordsToExistingFile);

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // CPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_CPM_SHORTNAME);
            entityMetricReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (metricDataCPM != null && metricDataCPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.CPM = (long)Math.Round((double)((double)thisEntityMetricData.metricValues.Sum(mv => mv.sum) / (double)entityRow.Duration), 0);
                        entityRow.Calls = thisEntityMetricData.metricValues.Sum(mv => mv.sum);
                    }

                    List<MetricValue> metricValues = convertMetricValueToTypedListForCSV(thisEntityMetricData);
                    FileIOHelper.writeListToCSVFile(metricValues, new MetricValueMetricReportMap(), entityMetricReportFilePath, appendRecordsToExistingFile);

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // EPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EPM_SHORTNAME);
            entityMetricReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (metricDataEPM != null && metricDataEPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.EPM = (long)Math.Round((double)((double)thisEntityMetricData.metricValues.Sum(mv => mv.sum) / (double)entityRow.Duration), 0);
                        entityRow.Errors = thisEntityMetricData.metricValues.Sum(mv => mv.sum);
                        entityRow.ErrorsPercentage = Math.Round((double)(double)entityRow.Errors / (double)entityRow.Calls * 100, 2);
                        if (Double.IsNaN(entityRow.ErrorsPercentage) == true) entityRow.ErrorsPercentage = 0;
                    }

                    List<MetricValue> metricValues = convertMetricValueToTypedListForCSV(thisEntityMetricData);
                    FileIOHelper.writeListToCSVFile(metricValues, new MetricValueMetricReportMap(), entityMetricReportFilePath, appendRecordsToExistingFile);

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // EXCPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EXCPM_SHORTNAME);
            entityMetricReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (metricDataEXCPM != null && metricDataEXCPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataEXCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataEXCPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.EXCPM = (long)Math.Round((double)((double)thisEntityMetricData.metricValues.Sum(mv => mv.sum) / (double)entityRow.Duration), 0);
                        entityRow.Exceptions = thisEntityMetricData.metricValues.Sum(mv => mv.sum);
                    }

                    List<MetricValue> metricValues = convertMetricValueToTypedListForCSV(thisEntityMetricData);
                    FileIOHelper.writeListToCSVFile(metricValues, new MetricValueMetricReportMap(), entityMetricReportFilePath, appendRecordsToExistingFile);

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            // HTTPEPM
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_HTTPEPM_SHORTNAME);
            entityMetricReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (metricDataHTTPEPM != null && metricDataHTTPEPM.Count > 0)
            {
                if (entityID != -1)
                {
                    thisEntityMetricData = metricDataHTTPEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true && m.metricName.Contains(entityID.ToString()) == true).FirstOrDefault();
                }
                else
                {
                    thisEntityMetricData = metricDataHTTPEPM.Where(m => m.metricPath.StartsWith(entityMetricPathPrefix) == true).FirstOrDefault();
                }
                if (thisEntityMetricData != null)
                {
                    if (thisEntityMetricData.metricValues.Count > 0)
                    {
                        entityRow.HTTPEPM = (long)Math.Round((double)((double)thisEntityMetricData.metricValues.Sum(mv => mv.sum) / (double)entityRow.Duration), 0);
                        entityRow.HttpErrors = thisEntityMetricData.metricValues.Sum(mv => mv.sum);
                    }

                    List<MetricValue> metricValues = convertMetricValueToTypedListForCSV(thisEntityMetricData);
                    FileIOHelper.writeListToCSVFile(metricValues, new MetricValueMetricReportMap(), entityMetricReportFilePath, appendRecordsToExistingFile);

                    entityRow.MetricsIDs.Add(thisEntityMetricData.metricId);
                }
            }

            if (entityRow.ART == 0 && entityRow.TimeTotal == 0 &&
                entityRow.CPM == 0 && entityRow.Calls == 0 &&
                entityRow.EPM == 0 && entityRow.Errors == 0 && 
                entityRow.EXCPM == 0 && entityRow.Exceptions == 0 &&
                entityRow.HTTPEPM == 0 && entityRow.HttpErrors == 0)
            {
                entityRow.HasActivity = false;
            }
            else
            {
                entityRow.HasActivity = true;
            }

            #endregion

            // Add link to the metrics
            updateEntityWithDeeplinks(entityRow, jobTimeRange);

            return;
        }

        private static bool updateEntityWithDeeplinks(EntityBase entityRow)
        {
            return updateEntityWithDeeplinks(entityRow, null);
        }

        private static bool updateEntityWithDeeplinks(EntityBase entityRow, JobTimeRange jobTimeRange)
        {
            // Decide what kind of timerange
            string DEEPLINK_THIS_TIMERANGE = DEEPLINK_TIMERANGE_LAST_15_MINUTES;
            if (jobTimeRange != null)
            {
                long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);
                long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
                DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);
            }

            // Determine what kind of entity we are dealing with and adjust accordingly
            string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
            long entityIdForMetricBrowser = entityRow.ApplicationID;
            if (entityRow is EntityApplication)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityTier)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entityRow.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entityRow.TierID, DEEPLINK_THIS_TIMERANGE);
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entityRow.TierID;
            }
            else if (entityRow is EntityNode)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entityRow.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entityRow.TierID, DEEPLINK_THIS_TIMERANGE);
                entityRow.NodeLink = String.Format(DEEPLINK_NODE, entityRow.Controller, entityRow.ApplicationID, entityRow.NodeID, DEEPLINK_THIS_TIMERANGE);
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_NODE_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entityRow.NodeID;
            }
            else if (entityRow is EntityBackend)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                ((EntityBackend)entityRow).BackendLink = String.Format(DEEPLINK_BACKEND, entityRow.Controller, entityRow.ApplicationID, ((EntityBackend)entityRow).BackendID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityBusinessTransaction)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entityRow.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entityRow.TierID, DEEPLINK_THIS_TIMERANGE);
                ((EntityBusinessTransaction)entityRow).BTLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, entityRow.Controller, entityRow.ApplicationID, ((EntityBusinessTransaction)entityRow).BTID, DEEPLINK_THIS_TIMERANGE);
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entityRow.TierID;
            }
            else if (entityRow is EntityServiceEndpoint)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entityRow.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entityRow.TierID, DEEPLINK_THIS_TIMERANGE);
                ((EntityServiceEndpoint)entityRow).SEPLink = String.Format(DEEPLINK_SERVICE_ENDPOINT, entityRow.Controller, entityRow.ApplicationID, entityRow.TierID, ((EntityServiceEndpoint)entityRow).SEPID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityError)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                entityRow.TierLink = String.Format(DEEPLINK_TIER, entityRow.Controller, entityRow.ApplicationID, entityRow.TierID, DEEPLINK_THIS_TIMERANGE);
                ((EntityError)entityRow).ErrorLink = String.Format(DEEPLINK_ERROR, entityRow.Controller, entityRow.ApplicationID, ((EntityError)entityRow).ErrorID, DEEPLINK_THIS_TIMERANGE);
            }
            else if (entityRow is EntityInformationPoint)
            {
                entityRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, entityRow.Controller, DEEPLINK_THIS_TIMERANGE);
                entityRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, entityRow.Controller, entityRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                ((EntityInformationPoint)entityRow).IPLink = String.Format(DEEPLINK_INFORMATION_POINT, entityRow.Controller, entityRow.ApplicationID, ((EntityInformationPoint)entityRow).IPID, DEEPLINK_THIS_TIMERANGE);
            }

            if (entityRow.MetricsIDs != null && entityRow.MetricsIDs.Count > 0)
            {
                StringBuilder sb = new StringBuilder(128);
                foreach (int metricID in entityRow.MetricsIDs)
                {
                    sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                    sb.Append(",");
                }
                sb.Remove(sb.Length - 1, 1);
                entityRow.MetricLink = String.Format(DEEPLINK_METRIC, entityRow.Controller, entityRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
            }

            return true;
        }

        private static void updateEntitiesWithReportDetailLinksApplication(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityApplication> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static void updateEntitiesWithReportDetailLinksTiers(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityTier> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static void updateEntitiesWithReportDetailLinksNodes(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityNode> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static void updateEntitiesWithReportDetailLinksBackends(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityBackend> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static void updateEntitiesWithReportDetailLinksBusinessTransactions(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityBusinessTransaction> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static void updateEntitiesWithReportDetailLinksServiceEndpoints(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityServiceEndpoint> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static void updateEntitiesWithReportDetailLinksErrors(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityError> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static void updateEntitiesWithReportDetailLinksInformationPoints(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, List<EntityInformationPoint> entityList)
        {
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            for (int i = 0; i < entityList.Count; i++)
            {
                EntityBase entityRow = entityList[i];
                entityRow.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, entityRow).Substring(reportsFolderPath.Length + 1));
            }
        }

        private static List<MetricValue> convertMetricValueToTypedListForCSV(AppDRESTMetric metricValueObject)
        {
            List<MetricValue> metricValues = new List<MetricValue>(metricValueObject.metricValues.Count);
            foreach (AppDRESTMetricValue mv in metricValueObject.metricValues)
            {
                MetricValue metricValue = new MetricValue();
                metricValue.EventTimeStampUtc = convertFromUnixTimestamp(mv.startTimeInMillis);
                metricValue.EventTimeStamp = metricValue.EventTimeStampUtc.ToLocalTime();
                metricValue.EventTime = metricValue.EventTimeStamp;
                metricValue.Count = mv.count;
                metricValue.Min = mv.min;
                metricValue.Max = mv.max;
                metricValue.Occurrences = mv.occurrences;
                metricValue.Sum = mv.sum;
                metricValue.Value = mv.value;

                metricValue.MetricID = metricValueObject.metricId;
                switch (metricValueObject.frequency)
                {
                    case "SIXTY_MIN":
                        {
                            metricValue.MetricResolution = MetricResolution.SIXTY_MIN;
                            break;
                        }
                    case "TEN_MIN":
                        {
                            metricValue.MetricResolution = MetricResolution.TEN_MIN;
                            break;
                        }
                    case "ONE_MIN":
                        {
                            metricValue.MetricResolution = MetricResolution.ONE_MIN;
                            break;
                        }
                    default:
                        {
                            metricValue.MetricResolution = MetricResolution.ONE_MIN;
                            break;
                        }
                }
                metricValues.Add(metricValue);
            }

            return metricValues;
        }

        private static List<MetricSummary> convertMetricSummaryToTypedListForCSV(AppDRESTMetric metricValueObject, EntityBase entityRow, JobTimeRange jobTimeRange)
        {
            List<MetricSummary> metricSummaries = new List<MetricSummary>();
            metricSummaries.Add(new MetricSummary() {
                PropertyName = "Controller",
                PropertyValue = entityRow.Controller,
                Link = entityRow.ControllerLink });
            metricSummaries.Add(new MetricSummary() {
                PropertyName = "Application",
                PropertyValue = entityRow.ApplicationName,
                Link = entityRow.ApplicationLink });

            string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
            long entityIdForMetricBrowser = entityRow.ApplicationID;
            if (entityRow is EntityApplication)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "EntityType", PropertyValue = "Application" });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ApplicationID", PropertyValue = entityRow.ApplicationID });
            }
            else if (entityRow is EntityTier)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "EntityType", PropertyValue = "Tier" });
                metricSummaries.Add(new MetricSummary() {
                    PropertyName = "Tier",
                    PropertyValue = entityRow.TierName,
                    Link = entityRow.TierLink });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ApplicationID", PropertyValue = entityRow.ApplicationID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "TierID", PropertyValue = entityRow.TierID });
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entityRow.TierID;
            }
            else if (entityRow is EntityNode)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "EntityType", PropertyValue = "Node" });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Tier",
                    PropertyValue = entityRow.TierName,
                    Link = entityRow.TierLink
                });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Node",
                    PropertyValue = entityRow.NodeName,
                    Link = entityRow.NodeLink
                });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ApplicationID", PropertyValue = entityRow.ApplicationID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "TierID", PropertyValue = entityRow.TierID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "NodeID", PropertyValue = entityRow.NodeID });
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_NODE_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entityRow.NodeID;
            }
            else if (entityRow is EntityBackend)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "EntityType", PropertyValue = "Backend" });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Tier",
                    PropertyValue = entityRow.TierName,
                    Link = entityRow.TierLink
                });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Backend",
                    PropertyValue = ((EntityBackend)entityRow).BackendName,
                    Link = ((EntityBackend)entityRow).BackendLink
                });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ApplicationID", PropertyValue = entityRow.ApplicationID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "TierID", PropertyValue = entityRow.TierID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "BackendID", PropertyValue = ((EntityBackend)entityRow).BackendID });
            }
            else if (entityRow is EntityBusinessTransaction)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "EntityType", PropertyValue = "Business Transaction" });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Tier",
                    PropertyValue = entityRow.TierName,
                    Link = entityRow.TierLink
                });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Business Transaction",
                    PropertyValue = ((EntityBusinessTransaction)entityRow).BTName,
                    Link = ((EntityBusinessTransaction)entityRow).BTLink
                });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ApplicationID", PropertyValue = entityRow.ApplicationID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "TierID", PropertyValue = entityRow.TierID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "BTID", PropertyValue = ((EntityBusinessTransaction)entityRow).BTID });
                deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                entityIdForMetricBrowser = entityRow.TierID;
            }
            else if (entityRow is EntityServiceEndpoint)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "EntityType", PropertyValue = "Service Endpoint" });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Tier",
                    PropertyValue = entityRow.TierName,
                    Link = entityRow.TierLink
                });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Service Endpoint",
                    PropertyValue = ((EntityServiceEndpoint)entityRow).SEPName,
                    Link = ((EntityServiceEndpoint)entityRow).SEPLink
                });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ApplicationID", PropertyValue = entityRow.ApplicationID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "TierID", PropertyValue = entityRow.TierID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "SEPID", PropertyValue = ((EntityServiceEndpoint)entityRow).SEPID });
            }
            else if (entityRow is EntityError)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "EntityType", PropertyValue = "Error" });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Tier",
                    PropertyValue = entityRow.TierName,
                    Link = entityRow.TierLink
                });
                metricSummaries.Add(new MetricSummary()
                {
                    PropertyName = "Error",
                    PropertyValue = ((EntityError)entityRow).ErrorName,
                    Link = ((EntityError)entityRow).ErrorLink
                });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ApplicationID", PropertyValue = entityRow.ApplicationID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "TierID", PropertyValue = entityRow.TierID });
                metricSummaries.Add(new MetricSummary() { PropertyName = "ErrorID", PropertyValue = ((EntityError)entityRow).ErrorID });
            }

            // Decide what kind of timerange
            string DEEPLINK_THIS_TIMERANGE = DEEPLINK_TIMERANGE_LAST_15_MINUTES;
            if (jobTimeRange != null)
            {
                long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);
                long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
                DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);
            }

            metricSummaries.Add(new MetricSummary()
            {
                PropertyName = "Metric ID",
                PropertyValue = metricValueObject.metricId,
                Link = String.Format(DEEPLINK_METRIC, entityRow.Controller, entityRow.ApplicationID, String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricValueObject.metricId), DEEPLINK_THIS_TIMERANGE)
            });

            // Name of the metric is always the last one in the metric path
            string[] metricPathComponents = metricValueObject.metricPath.Split('|');
            string metricName = metricPathComponents[metricPathComponents.Length - 1];
            MetricSummary metricNameMetricSummary = new MetricSummary() { PropertyName = "Metric Name", PropertyValue = metricName };
            metricSummaries.Add(metricNameMetricSummary);
            metricSummaries.Add(new MetricSummary() { PropertyName = "Metric Name (Short)", PropertyValue = metricNameToShortMetricNameMapping[metricNameMetricSummary.PropertyValue.ToString()] });
            metricSummaries.Add(new MetricSummary() { PropertyName = "Metric Name (Full)", PropertyValue = metricValueObject.metricName });
            metricSummaries.Add(new MetricSummary() { PropertyName = "Metric Path", PropertyValue = metricValueObject.metricPath });

            // Only the metrics with Average Response Time (ms) are times            
            // As long as we are not in Application Infrastructure Performance area
            if (metricName.IndexOf(METRIC_TIME_MS) > 0)
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "Rollup Type", PropertyValue = MetricType.Duration.ToString() });
            }
            else
            {
                metricSummaries.Add(new MetricSummary() { PropertyName = "Rollup Type", PropertyValue = MetricType.Count.ToString() });
            }

            return metricSummaries;
        }

        #endregion

        #region Configuration detail conversion functions

        private static string getNameValueDetailsFromNameValueCollection(XmlNode xmlNodeWithNameValuePairs)
        {
            if (xmlNodeWithNameValuePairs == null) return String.Empty;

            StringBuilder sb = new StringBuilder();
            foreach (XmlNode xmlNodeNameValue in xmlNodeWithNameValuePairs.SelectNodes("name-values"))
            {
                sb.AppendFormat("{0}={1};", xmlNodeNameValue.SelectSingleNode("name").InnerText, xmlNodeNameValue.SelectSingleNode("value").InnerText);
            }

            return sb.ToString();
        }

        private static string getNameValueDetailsFromParametersCollection(XmlNode xmlNodeWithParameters)
        {
            if (xmlNodeWithParameters == null) return String.Empty;

            StringBuilder sb = new StringBuilder();
            foreach (XmlNode xmlNodeNameValue in xmlNodeWithParameters.SelectNodes("parameter"))
            {
                sb.AppendFormat(
                    "{0}:{1}/{2}={3}/{4};",
                    xmlNodeNameValue.Attributes["match-type"].Value,
                    xmlNodeNameValue.SelectSingleNode("name").Attributes["filter-value"].Value,
                    xmlNodeNameValue.SelectSingleNode("name").Attributes["filter-type"].Value,
                    xmlNodeNameValue.SelectSingleNode("value").Attributes["filter-value"].Value,
                    xmlNodeNameValue.SelectSingleNode("value").Attributes["filter-type"].Value);
            }

            return sb.ToString();
        }

        private static int getIntegerValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return 0;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return 0;
            }
            else
            {
                int value;
                if (Int32.TryParse(xmlNode.InnerText, out value) == true)
                {
                    return value;
                }
                else
                {
                    double value1;
                    if (Double.TryParse(xmlNode.InnerText, out value1) == true)
                    {
                        return Convert.ToInt32(Math.Floor(value1));
                    }
                    else
                    {
                        return 0;
                    }
                }
            }
        }

        private static long getLongValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return 0;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return 0;
            }
            else
            {
                long value;
                if (Int64.TryParse(xmlNode.InnerText, out value) == true)
                {
                    return value;
                }
                else
                {
                    double value1;
                    if (Double.TryParse(xmlNode.InnerText, out value1) == true)
                    {
                        return Convert.ToInt64(Math.Floor(value1));
                    }
                    else
                    {
                        return 0;
                    }
                }
            }
        }

        private static bool getBoolValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return false;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return false;
            }
            else
            {
                bool value;
                if (Boolean.TryParse(xmlNode.InnerText, out value) == true)
                {
                    return value;
                }
                else
                {
                    return false;
                }
            }
        }

        private static string getStringValueFromXmlNode(XmlNode xmlNode)
        {
            if (xmlNode == null) return String.Empty;

            if (((XmlElement)xmlNode).IsEmpty == true)
            {
                return String.Empty;
            }
            else
            {
                return xmlNode.InnerText;
            }
        }

        /// <summary>
        /// https://stackoverflow.com/questions/1123718/format-xml-string-to-print-friendly-xml-string
        /// </summary>
        /// <param name="XML"></param>
        /// <returns></returns>
        private static string makeXMLFormattedAndIndented(String XML)
        {
            string Result = "";

            MemoryStream MS = new MemoryStream();
            XmlTextWriter W = new XmlTextWriter(MS, Encoding.Unicode);
            XmlDocument D = new XmlDocument();

            try
            {
                // Load the XmlDocument with the XML.
                D.LoadXml(XML);

                W.Formatting = Formatting.Indented;

                // Write the XML into a formatting XmlTextWriter
                D.WriteContentTo(W);
                W.Flush();
                MS.Flush();

                // Have to rewind the MemoryStream in order to read
                // its contents.
                MS.Position = 0;

                // Read MemoryStream contents into a StreamReader.
                StreamReader SR = new StreamReader(MS);

                // Extract the text from the StreamReader.
                String FormattedXML = SR.ReadToEnd();

                Result = FormattedXML;
            }
            catch (XmlException)
            {
            }

            MS.Close();
            W.Close();

            return Result;
        }

        private static string makeXMLFormattedAndIndented(XmlNode xmlNode)
        {
            if (xmlNode != null)
            {
                return makeXMLFormattedAndIndented(xmlNode.OuterXml);
            }
            else
            {
                return String.Empty;
            }
        }

        private static string makeXMLFormattedAndIndented(XmlNodeList xmlNodeList)
        {
            if (xmlNodeList.Count > 0)
            {
                StringBuilder sb = new StringBuilder(128 * xmlNodeList.Count);
                foreach (XmlNode xmlNode in xmlNodeList)
                {
                    sb.Append(makeXMLFormattedAndIndented(xmlNode));
                    sb.AppendLine();
                }
                sb.Remove(sb.Length - 1, 1);
                return sb.ToString();
            }
            else
            {
                return String.Empty;
            }
        }

        private static BusinessTransactionDiscoveryRule fillBusinessTransactionDiscoveryRule(XmlNode entryMatchPointConfigurationNode, XmlNode entryMatchPointTransactionConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode)
        {
            BusinessTransactionDiscoveryRule businessTransactionDiscoveryRule = new BusinessTransactionDiscoveryRule();

            businessTransactionDiscoveryRule.Controller = applicationConfiguration.Controller;
            businessTransactionDiscoveryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionDiscoveryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionDiscoveryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionDiscoveryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionDiscoveryRule.AgentType = entryMatchPointConfigurationNode.SelectSingleNode("agent-type").InnerText;
            businessTransactionDiscoveryRule.EntryPointType = entryMatchPointTransactionConfigurationNode.Attributes["transaction-entry-point-type"].Value;
            businessTransactionDiscoveryRule.IsMonitoringEnabled = getBoolValueFromXmlNode(entryMatchPointTransactionConfigurationNode.SelectSingleNode("enable"));
            businessTransactionDiscoveryRule.DiscoveryType = entryMatchPointTransactionConfigurationNode.SelectSingleNode("discovery-config").Attributes["discovery-resolution"].Value;
            businessTransactionDiscoveryRule.IsDiscoveryEnabled = getBoolValueFromXmlNode(entryMatchPointTransactionConfigurationNode.SelectSingleNode("discovery-config/discovery-config-enabled"));
            businessTransactionDiscoveryRule.NamingConfigType = entryMatchPointTransactionConfigurationNode.SelectSingleNode("discovery-config/naming-config").Attributes["scheme"].Value;

            businessTransactionDiscoveryRule.RuleRawValue = makeXMLFormattedAndIndented(entryMatchPointTransactionConfigurationNode);

            if (applicationComponentNode != null)
            {
                businessTransactionDiscoveryRule.TierName = applicationComponentNode.SelectSingleNode("name").InnerText;
            }

            return businessTransactionDiscoveryRule;
        }

        private static BusinessTransactionEntryRule fillBusinessTransactionExcludeRule(XmlNode entryMatchPointConfigurationNode, XmlNode entryMatchPointTransactionConfigurationNode, XmlNode entryMatchPointCustomMatchPointConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode)
        {
            BusinessTransactionEntryRule businessTransactionEntryRule = new BusinessTransactionEntryRule();

            businessTransactionEntryRule.Controller = applicationConfiguration.Controller;
            businessTransactionEntryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryRule.AgentType = getStringValueFromXmlNode(entryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            businessTransactionEntryRule.EntryPointType = entryMatchPointTransactionConfigurationNode.Attributes["transaction-entry-point-type"].Value;
            businessTransactionEntryRule.RuleName = entryMatchPointCustomMatchPointConfigurationNode.Attributes["name"].Value;
            businessTransactionEntryRule.IsExclusion = true;

            XmlNode matchRule = entryMatchPointCustomMatchPointConfigurationNode.ChildNodes[0];
            fillMatchRuleDetails(businessTransactionEntryRule, matchRule);

            businessTransactionEntryRule.RuleRawValue = makeXMLFormattedAndIndented(entryMatchPointCustomMatchPointConfigurationNode);

            if (applicationComponentNode != null)
            {
                businessTransactionEntryRule.TierName = applicationComponentNode.SelectSingleNode("name").InnerText;
            }

            return businessTransactionEntryRule;
        }

        private static BusinessTransactionEntryRule fillBusinessTransactionEntryRule(XmlNode entryMatchPointConfigurationNode, XmlNode entryMatchPointCustomMatchPointConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode, List<EntityBusinessTransaction> businessTransactionsList)
        {
            BusinessTransactionEntryRule businessTransactionEntryRule = new BusinessTransactionEntryRule();

            businessTransactionEntryRule.Controller = applicationConfiguration.Controller;
            businessTransactionEntryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryRule.AgentType = getStringValueFromXmlNode(entryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            businessTransactionEntryRule.EntryPointType = entryMatchPointCustomMatchPointConfigurationNode.Attributes["transaction-entry-point-type"].Value;
            businessTransactionEntryRule.RuleName = getStringValueFromXmlNode(entryMatchPointCustomMatchPointConfigurationNode.SelectSingleNode("name"));
            businessTransactionEntryRule.IsBackground = getBoolValueFromXmlNode(entryMatchPointCustomMatchPointConfigurationNode.SelectSingleNode("background"));
            businessTransactionEntryRule.IsExclusion = false;

            XmlNode matchRule = entryMatchPointCustomMatchPointConfigurationNode.SelectSingleNode("match-rule").ChildNodes[0];
            fillMatchRuleDetails(businessTransactionEntryRule, matchRule);

            businessTransactionEntryRule.RuleRawValue = makeXMLFormattedAndIndented(entryMatchPointCustomMatchPointConfigurationNode);

            if (applicationComponentNode != null)
            {
                businessTransactionEntryRule.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            if (businessTransactionsList != null)
            {
                List<EntityBusinessTransaction> businessTransactionsForThisRule = new List<EntityBusinessTransaction>();
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule = businessTransactionsForThisRule.Distinct().ToList();
                businessTransactionEntryRule.NumDetectedBTs = businessTransactionsForThisRule.Count;
                if (businessTransactionsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * businessTransactionsForThisRule.Count);
                    foreach (EntityBusinessTransaction bt in businessTransactionsForThisRule)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    businessTransactionEntryRule.DetectedBTs = sb.ToString();
                }
            }

            return businessTransactionEntryRule;
        }

        private static BusinessTransactionEntryScope fillBusinessTransactionEntryScope(XmlNode scopeConfigurationNode, XmlNode scopeToRuleMappingConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            BusinessTransactionEntryScope businessTransactionEntryScope = new BusinessTransactionEntryScope();

            businessTransactionEntryScope.Controller = applicationConfiguration.Controller;
            businessTransactionEntryScope.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryScope.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryScope.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryScope.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryScope.ScopeName = scopeConfigurationNode.Attributes["scope-name"].Value;
            businessTransactionEntryScope.ScopeType = scopeConfigurationNode.Attributes["scope-type"].Value;
            businessTransactionEntryScope.Description = scopeConfigurationNode.Attributes["scope-description"].Value;
            businessTransactionEntryScope.Version = Convert.ToInt32(scopeConfigurationNode.Attributes["scope-version"].Value);

            XmlNodeList includedTierNodeList = scopeConfigurationNode.SelectNodes("included-tiers/tier-name");
            businessTransactionEntryScope.NumTiers = includedTierNodeList.Count;
            if (businessTransactionEntryScope.NumTiers > 0)
            {
                List<string> includedTiersList = new List<string>(businessTransactionEntryScope.NumTiers);
                foreach (XmlNode includedTierNode in includedTierNodeList)
                {
                    includedTiersList.Add(includedTierNode.InnerText);
                }
                includedTiersList.Sort();

                StringBuilder sb = new StringBuilder(32 * businessTransactionEntryScope.NumTiers);
                foreach (string includedTier in includedTiersList)
                {
                    sb.AppendFormat("{0};\n", includedTier);
                }
                sb.Remove(sb.Length - 1, 1);
                businessTransactionEntryScope.IncludedTiers = sb.ToString();
            }

            XmlNodeList ruleMappingNodeList = scopeToRuleMappingConfigurationNode.SelectNodes(String.Format("scope-rule-mapping[@scope-name='{0}']/rule", businessTransactionEntryScope.ScopeName));
            businessTransactionEntryScope.NumRules = ruleMappingNodeList.Count;
            if (businessTransactionEntryScope.NumRules > 0)
            {
                List<string> ruleMappingList = new List<string>(businessTransactionEntryScope.NumRules);
                foreach (XmlNode ruleMappingNode in ruleMappingNodeList)
                {
                    string ruleName = ruleMappingNode.Attributes["rule-name"].Value;
                    string ruleDescription = ruleMappingNode.Attributes["rule-description"].Value;
                    string ruleNameAndDescription = String.Empty;
                    if (ruleDescription.Length > 0 && ruleDescription != ruleName)
                    {
                        ruleMappingList.Add(String.Format("{0} ({1})", ruleName, ruleDescription));
                    }
                    else
                    {
                        ruleMappingList.Add(ruleName);
                    }
                }
                ruleMappingList.Sort();

                StringBuilder sb = new StringBuilder(32 * businessTransactionEntryScope.NumRules);
                foreach (string ruleMapping in ruleMappingList)
                {
                    sb.AppendFormat("{0};\n", ruleMapping);
                }
                sb.Remove(sb.Length - 1, 1);
                businessTransactionEntryScope.IncludedRules = sb.ToString();
            }

            return businessTransactionEntryScope;
        }

        private static BusinessTransactionEntryRule20 fillBusinessTransactionEntryRule20(XmlNode ruleConfigurationNode, XmlNode scopeToRuleMappingConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransaction> businessTransactionsList)
        {
            BusinessTransactionEntryRule20 businessTransactionEntryRule = new BusinessTransactionEntryRule20();

            businessTransactionEntryRule.Controller = applicationConfiguration.Controller;
            businessTransactionEntryRule.ControllerLink = applicationConfiguration.ControllerLink;
            businessTransactionEntryRule.ApplicationName = applicationConfiguration.ApplicationName;
            businessTransactionEntryRule.ApplicationID = applicationConfiguration.ApplicationID;
            businessTransactionEntryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            businessTransactionEntryRule.AgentType = ruleConfigurationNode.Attributes["agent-type"].Value;
            businessTransactionEntryRule.RuleName = ruleConfigurationNode.Attributes["rule-name"].Value;
            businessTransactionEntryRule.Description = ruleConfigurationNode.Attributes["rule-description"].Value;
            businessTransactionEntryRule.Version = Convert.ToInt32(ruleConfigurationNode.Attributes["version"].Value);

            businessTransactionEntryRule.IsEnabled = Convert.ToBoolean(ruleConfigurationNode.Attributes["enabled"].Value);
            businessTransactionEntryRule.Priority = Convert.ToInt32(ruleConfigurationNode.Attributes["priority"].Value);

            JObject txRuleSettings = JObject.Parse(getStringValueFromXmlNode(ruleConfigurationNode.SelectSingleNode("tx-match-rule")));
            if (txRuleSettings != null)
            {
                if (txRuleSettings["type"].ToString() != "CUSTOM")
                {
                    // This is likely autodiscovery rule, do not fill it out and bail
                    return null;
                }

                JToken txCustomRuleSettings = txRuleSettings["txcustomrule"];
                if (txCustomRuleSettings != null)
                {
                    if (txCustomRuleSettings["type"].ToString() == "EXCLUDE")
                    {
                        businessTransactionEntryRule.IsExclusion = true;
                    }
                    else if (txCustomRuleSettings["type"].ToString() == "INCLUDE")
                    {
                        businessTransactionEntryRule.IsExclusion = false;
                    }

                    businessTransactionEntryRule.EntryPointType = txCustomRuleSettings["txentrypointtype"].ToString();

                    JToken isBackgroundProperty = txCustomRuleSettings["properties"].Where(p => p["name"].ToString() == "BACKGROUND_TASK").FirstOrDefault();
                    if (isBackgroundProperty != null)
                    {
                        businessTransactionEntryRule.IsBackground = (bool)isBackgroundProperty["booleanvalue"];
                    }

                    businessTransactionEntryRule.MatchConditions = txCustomRuleSettings["matchconditions"].ToString();
                    businessTransactionEntryRule.Actions = txCustomRuleSettings["actions"].ToString();
                    businessTransactionEntryRule.Properties = txCustomRuleSettings["properties"].ToString();
                }
            }

            // I really want to do it, but some of our rules have apostrophes
            // Spring WS - Base servlet for Spring's web framework
            // And the query for scope-rule-mapping/rule[@rule-name='Spring WS - Base servlet for Spring's web framework'] breaks
            // So going to do it the hard way
            //XmlNode scopeForThisRuleNode = scopeToRuleMappingConfigurationNode.SelectSingleNode(String.Format("scope-rule-mapping/rule[@rule-name='{0}']", businessTransactionEntryRule.RuleName));
            foreach (XmlNode scopeNode in scopeToRuleMappingConfigurationNode.SelectNodes("scope-rule-mapping/rule"))
            {
                if (scopeNode.Attributes["rule-name"].Value == businessTransactionEntryRule.RuleName)
                {
                    businessTransactionEntryRule.ScopeName = scopeNode.ParentNode.Attributes["scope-name"].Value;
                    break;
                }
            }

            if (businessTransactionsList != null)
            {
                List<EntityBusinessTransaction> businessTransactionsForThisRule = new List<EntityBusinessTransaction>();
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTName.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal == businessTransactionEntryRule.RuleName).ToList());
                businessTransactionsForThisRule.AddRange(businessTransactionsList.Where(b => b.BTNameOriginal.StartsWith(String.Format("{0}.", businessTransactionEntryRule.RuleName))).ToList());
                businessTransactionsForThisRule = businessTransactionsForThisRule.Distinct().ToList();
                businessTransactionEntryRule.NumDetectedBTs = businessTransactionsForThisRule.Count;
                if (businessTransactionsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * businessTransactionsForThisRule.Count);
                    foreach (EntityBusinessTransaction bt in businessTransactionsForThisRule)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    businessTransactionEntryRule.DetectedBTs = sb.ToString();
                }
            }

            businessTransactionEntryRule.RuleRawValue = makeXMLFormattedAndIndented(ruleConfigurationNode);

            return businessTransactionEntryRule;
        }

        private static List<BusinessTransactionDiscoveryRule20> fillBusinessTransactionDiscoveryRule20(XmlNode ruleConfigurationNode, XmlNode scopeToRuleMappingConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransaction> businessTransactionsList)
        {
            List<BusinessTransactionDiscoveryRule20> businessTransactionDiscoveryRule20List = new List<BusinessTransactionDiscoveryRule20>();

            JObject txRuleSettings = JObject.Parse(getStringValueFromXmlNode(ruleConfigurationNode.SelectSingleNode("tx-match-rule")));
            if (txRuleSettings != null)
            {
                if (txRuleSettings["type"].ToString() != "AUTOMATIC_DISCOVERY")
                {
                    // This is not an autodiscovery rule, do not fill it out and bail
                    return null;
                }

                JArray txDiscoveryConfigs = (JArray)txRuleSettings["txautodiscoveryrule"]["autodiscoveryconfigs"];
                if (txDiscoveryConfigs != null && txDiscoveryConfigs.Count > 0)
                {
                    foreach (JToken txDiscoveryConfig in txDiscoveryConfigs)
                    {
                        BusinessTransactionDiscoveryRule20 businessTransactionDiscoveryRule20 = new BusinessTransactionDiscoveryRule20();

                        businessTransactionDiscoveryRule20.Controller = applicationConfiguration.Controller;
                        businessTransactionDiscoveryRule20.ControllerLink = applicationConfiguration.ControllerLink;
                        businessTransactionDiscoveryRule20.ApplicationName = applicationConfiguration.ApplicationName;
                        businessTransactionDiscoveryRule20.ApplicationID = applicationConfiguration.ApplicationID;
                        businessTransactionDiscoveryRule20.ApplicationLink = applicationConfiguration.ApplicationLink;

                        businessTransactionDiscoveryRule20.AgentType = ruleConfigurationNode.Attributes["agent-type"].Value;
                        businessTransactionDiscoveryRule20.RuleName = ruleConfigurationNode.Attributes["rule-name"].Value;
                        businessTransactionDiscoveryRule20.Description = ruleConfigurationNode.Attributes["rule-description"].Value;
                        businessTransactionDiscoveryRule20.Version = Convert.ToInt32(ruleConfigurationNode.Attributes["version"].Value);

                        businessTransactionDiscoveryRule20.IsEnabled = Convert.ToBoolean(ruleConfigurationNode.Attributes["enabled"].Value);
                        businessTransactionDiscoveryRule20.Priority = Convert.ToInt32(ruleConfigurationNode.Attributes["priority"].Value);

                        businessTransactionDiscoveryRule20.EntryPointType = txDiscoveryConfig["txentrypointtype"].ToString();
                        businessTransactionDiscoveryRule20.IsMonitoringEnabled = (bool)txDiscoveryConfig["monitoringenabled"];
                        businessTransactionDiscoveryRule20.IsDiscoveryEnabled = (bool)txDiscoveryConfig["discoveryenabled"];
                        businessTransactionDiscoveryRule20.NamingConfigType = txDiscoveryConfig["namingschemetype"].ToString();

                        if (txDiscoveryConfig["httpautodiscovery"] != null)
                        {
                            businessTransactionDiscoveryRule20.HTTPAutoDiscovery = txDiscoveryConfig["httpautodiscovery"].ToString();
                        }

                        // I really want to do it, but some of our rules have apostrophes
                        // Spring WS - Base servlet for Spring's web framework
                        // And the query for scope-rule-mapping/rule[@rule-name='Spring WS - Base servlet for Spring's web framework'] breaks
                        // So going to do it the hard way
                        //XmlNode scopeForThisRuleNode = scopeToRuleMappingConfigurationNode.SelectSingleNode(String.Format("scope-rule-mapping/rule[@rule-name='{0}']", businessTransactionEntryRule.RuleName));
                        foreach (XmlNode scopeNode in scopeToRuleMappingConfigurationNode.SelectNodes("scope-rule-mapping/rule"))
                        {
                            if (scopeNode.Attributes["rule-name"].Value == businessTransactionDiscoveryRule20.RuleName)
                            {
                                businessTransactionDiscoveryRule20.ScopeName = scopeNode.ParentNode.Attributes["scope-name"].Value;
                                break;
                            }
                        }

                        businessTransactionDiscoveryRule20List.Add(businessTransactionDiscoveryRule20);
                    }
                }
            }

            return businessTransactionDiscoveryRule20List;
        }

        private static BackendDiscoveryRule fillBackendDiscoveryRule(XmlNode backendDiscoveryMatchPointConfigurationNode, XmlNode backendDiscoveryConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode, List<EntityBackend> backendsList)
        {
            BackendDiscoveryRule backendDiscoveryRule = new BackendDiscoveryRule();

            backendDiscoveryRule.Controller = applicationConfiguration.Controller;
            backendDiscoveryRule.ControllerLink = applicationConfiguration.ControllerLink;
            backendDiscoveryRule.ApplicationName = applicationConfiguration.ApplicationName;
            backendDiscoveryRule.ApplicationID = applicationConfiguration.ApplicationID;
            backendDiscoveryRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            backendDiscoveryRule.AgentType = getStringValueFromXmlNode(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            backendDiscoveryRule.ExitType = getStringValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("exit-point-type"));
            if (backendDiscoveryRule.ExitType == "CUSTOM")
            {
                backendDiscoveryRule.ExitType = getStringValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("exit-point-subtype"));
            }
            backendDiscoveryRule.RuleName = getStringValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("name"));
            backendDiscoveryRule.IsEnabled = getBoolValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("discovery-enabled"));
            backendDiscoveryRule.IsCorrelationSupported = getBoolValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("supports-correlation"));
            backendDiscoveryRule.IsCorrelationEnabled = getBoolValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("correlation-enabled"));
            backendDiscoveryRule.Priority = getIntegerValueFromXmlNode(backendDiscoveryConfigurationNode.SelectSingleNode("priority"));

            backendDiscoveryRule.IdentityOptions = makeXMLFormattedAndIndented(backendDiscoveryConfigurationNode.SelectSingleNode("backend-identity-options"));
            backendDiscoveryRule.DiscoveryConditions = makeXMLFormattedAndIndented(backendDiscoveryConfigurationNode.SelectSingleNode("backend-identity-options"));

            backendDiscoveryRule.RuleRawValue = makeXMLFormattedAndIndented(backendDiscoveryConfigurationNode);

            if (applicationComponentNode != null)
            {
                backendDiscoveryRule.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            if (backendsList != null)
            {
                List<EntityBackend> backendsForThisRule = new List<EntityBackend>();

                // Try to find them by match first
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName == backendDiscoveryRule.RuleName).ToList());
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName.StartsWith(String.Format("{0}", backendDiscoveryRule.RuleName))).ToList());
                backendsForThisRule = backendsForThisRule.Distinct().ToList();
                if (backendsForThisRule.Count == 0)
                {
                    // If by name doesn't match, let's do by type
                    // Nope, this doesn't work. Backend is differentiated by the Agent Type
                    // Because of that the backend matches every darn type starting with Default
                    // backendsForThisRule.AddRange(backendsList.Where(b => b.BackendType == backendDiscoveryRule.ExitType).ToList());
                }
                backendDiscoveryRule.NumDetectedBackends = backendsForThisRule.Count;
                if (backendsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * backendsForThisRule.Count);
                    foreach (EntityBackend backend in backendsForThisRule)
                    {
                        sb.AppendFormat("{0} ({1});\n", backend.BackendName, backend.BackendID);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    backendDiscoveryRule.DetectedBackends = sb.ToString();
                }
            }

            return backendDiscoveryRule;
        }

        private static CustomExitRule fillCustomExitRule(XmlNode backendDiscoveryMatchPointConfigurationNode, XmlNode customExitConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode, List<EntityBackend> backendsList)
        {
            CustomExitRule customExitRule = new CustomExitRule();

            customExitRule.Controller = applicationConfiguration.Controller;
            customExitRule.ControllerLink = applicationConfiguration.ControllerLink;
            customExitRule.ApplicationName = applicationConfiguration.ApplicationName;
            customExitRule.ApplicationID = applicationConfiguration.ApplicationID;
            customExitRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            customExitRule.AgentType = getStringValueFromXmlNode(backendDiscoveryMatchPointConfigurationNode.SelectSingleNode("agent-type"));
            customExitRule.ExitType = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("type"));

            customExitRule.RuleName = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("name"));
            customExitRule.MatchClass = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/class-name"));
            customExitRule.MatchMethod = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/method-name"));
            customExitRule.MatchType = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/match-type"));
            customExitRule.MatchParameterTypes = getStringValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/pojo-method-definition/method-parameter-types"));

            customExitRule.IsApplyToAllBTs = getBoolValueFromXmlNode(customExitConfigurationNode.SelectSingleNode("instrumentation-point/apply-to-all-bts"));

            customExitRule.DataCollectorsConfig = makeXMLFormattedAndIndented(customExitConfigurationNode.SelectNodes("instrumentation-point/method-invocation-data-gatherer-config"));
            customExitRule.InfoPointsConfig = makeXMLFormattedAndIndented(customExitConfigurationNode.SelectNodes("instrumentation-point/info-point-metric-definition"));

            customExitRule.RuleRawValue = makeXMLFormattedAndIndented(customExitConfigurationNode);

            if (applicationComponentNode != null)
            {
                customExitRule.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            if (backendsList != null)
            {
                List<EntityBackend> backendsForThisRule = new List<EntityBackend>();

                // Try to find them by match first
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName == customExitRule.RuleName).ToList());
                backendsForThisRule.AddRange(backendsList.Where(b => b.BackendName.StartsWith(String.Format("{0}", customExitRule.RuleName))).ToList());
                backendsForThisRule = backendsForThisRule.Distinct().ToList();
                if (backendsForThisRule.Count == 0)
                {
                    // If by name doesn't match, let's do by type
                    // Nope, this doesn't work. Backend is differentiated by the Agent Type
                    // Because of that the backend matches every darn type starting with Default
                    // backendsForThisRule.AddRange(backendsList.Where(b => b.BackendType == customExitRule.ExitType).ToList());
                }
                customExitRule.NumDetectedBackends = backendsForThisRule.Count;
                if (backendsForThisRule.Count > 0)
                {
                    StringBuilder sb = new StringBuilder(32 * backendsForThisRule.Count);
                    foreach (EntityBackend backend in backendsForThisRule)
                    {
                        sb.AppendFormat("{0} ({1});\n", backend.BackendName, backend.BackendID);
                    }
                    sb.Remove(sb.Length - 1, 1);

                    customExitRule.DetectedBackends = sb.ToString();
                }
            }

            return customExitRule;
        }

        private static InformationPointRule fillInformationPointRule(XmlNode informationPointConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            InformationPointRule informationPointRule = new InformationPointRule();

            informationPointRule.Controller = applicationConfiguration.Controller;
            informationPointRule.ControllerLink = applicationConfiguration.ControllerLink;
            informationPointRule.ApplicationName = applicationConfiguration.ApplicationName;
            informationPointRule.ApplicationID = applicationConfiguration.ApplicationID;
            informationPointRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            informationPointRule.AgentType = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("agent-type"));

            informationPointRule.RuleName = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("name"));
            informationPointRule.MatchClass = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/class-name"));
            informationPointRule.MatchMethod = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/method-name"));
            informationPointRule.MatchType = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/match-type"));
            informationPointRule.MatchParameterTypes = getStringValueFromXmlNode(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/method-parameter-types"));
            informationPointRule.MatchCondition = makeXMLFormattedAndIndented(informationPointConfigurationNode.SelectSingleNode("pojo-method-definition/match-condition"));

            informationPointRule.InfoPointsConfig = makeXMLFormattedAndIndented(informationPointConfigurationNode.SelectNodes("info-point-metric-definition"));

            informationPointRule.RuleRawValue = makeXMLFormattedAndIndented(informationPointConfigurationNode);

            return informationPointRule;
        }

        private static AgentConfigurationProperty fillAgentConfigurationProperty(XmlNode agentConfigurationNode, XmlNode agentPropertyDefinitionConfigurationNode, XmlNode agentPropertyValueConfigurationNode, EntityApplicationConfiguration applicationConfiguration, XmlNode applicationComponentNode)
        {
            AgentConfigurationProperty agentConfigurationProperty = new AgentConfigurationProperty();

            agentConfigurationProperty.Controller = applicationConfiguration.Controller;
            agentConfigurationProperty.ControllerLink = applicationConfiguration.ControllerLink;
            agentConfigurationProperty.ApplicationName = applicationConfiguration.ApplicationName;
            agentConfigurationProperty.ApplicationID = applicationConfiguration.ApplicationID;
            agentConfigurationProperty.ApplicationLink = applicationConfiguration.ApplicationLink;

            agentConfigurationProperty.AgentType = getStringValueFromXmlNode(agentConfigurationNode.SelectSingleNode("agent-type"));

            agentConfigurationProperty.PropertyName = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("name"));
            agentConfigurationProperty.PropertyType = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("type"));
            agentConfigurationProperty.Description = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("description"));
            agentConfigurationProperty.IsRequired = getBoolValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("required"));

            switch (agentConfigurationProperty.PropertyType)
            {
                case "STRING":
                    agentConfigurationProperty.StringValue = getStringValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    agentConfigurationProperty.StringDefaultValue = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("default-string-value"));
                    agentConfigurationProperty.StringMaxLength = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("string-max-length"));
                    agentConfigurationProperty.StringAllowedValues = getStringValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("allowed-string-values"));

                    agentConfigurationProperty.IsDefault = (agentConfigurationProperty.StringDefaultValue == agentConfigurationProperty.StringDefaultValue);
                    break;

                case "BOOLEAN":
                    agentConfigurationProperty.BooleanValue = getBoolValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    agentConfigurationProperty.BooleanDefaultValue = getBoolValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("default-string-value"));

                    agentConfigurationProperty.IsDefault = (agentConfigurationProperty.BooleanValue == agentConfigurationProperty.BooleanDefaultValue);
                    break;

                case "INTEGER":
                    agentConfigurationProperty.IntegerValue = getIntegerValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    agentConfigurationProperty.IntegerDefaultValue = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("default-string-value"));
                    agentConfigurationProperty.IntegerMinValue = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("lower-numeric-bound"));
                    agentConfigurationProperty.IntegerMaxValue = getIntegerValueFromXmlNode(agentPropertyDefinitionConfigurationNode.SelectSingleNode("upper-numeric-bound"));

                    agentConfigurationProperty.IsDefault = (agentConfigurationProperty.IntegerValue == agentConfigurationProperty.IntegerDefaultValue);
                    break;

                default:
                    agentConfigurationProperty.StringValue = getStringValueFromXmlNode(agentPropertyValueConfigurationNode.SelectSingleNode("string-value"));
                    break;
            }

            if (applicationComponentNode != null)
            {
                agentConfigurationProperty.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            }

            return agentConfigurationProperty;
        }

        private static MethodInvocationDataCollector fillMethodInvocationDataCollector(XmlNode methodInvocationDataCollectorConfigurationNode, XmlNode dataGathererConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList)
        {
            MethodInvocationDataCollector methodInvocationDataCollector = new MethodInvocationDataCollector();

            methodInvocationDataCollector.Controller = applicationConfiguration.Controller;
            methodInvocationDataCollector.ControllerLink = applicationConfiguration.ControllerLink;
            methodInvocationDataCollector.ApplicationName = applicationConfiguration.ApplicationName;
            methodInvocationDataCollector.ApplicationID = applicationConfiguration.ApplicationID;
            methodInvocationDataCollector.ApplicationLink = applicationConfiguration.ApplicationLink;

            methodInvocationDataCollector.CollectorName = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("name"));

            methodInvocationDataCollector.IsAPM = Convert.ToBoolean(methodInvocationDataCollectorConfigurationNode.Attributes["enabled-for-apm"].Value);
            methodInvocationDataCollector.IsAnalytics = Convert.ToBoolean(methodInvocationDataCollectorConfigurationNode.Attributes["enabled-for-analytics"].Value);
            methodInvocationDataCollector.IsAssignedToNewBTs = Convert.ToBoolean(methodInvocationDataCollectorConfigurationNode.Attributes["attach-to-new-bts"].Value);

            methodInvocationDataCollector.MatchClass = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/class-name"));
            methodInvocationDataCollector.MatchMethod = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/method-name"));
            methodInvocationDataCollector.MatchType = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/match-type"));
            methodInvocationDataCollector.MatchParameterTypes = getStringValueFromXmlNode(methodInvocationDataCollectorConfigurationNode.SelectSingleNode("pojo-method-definition/method-parameter-types"));

            methodInvocationDataCollector.DataGathererName = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("name"));
            methodInvocationDataCollector.DataGathererType = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("gatherer-type"));
            methodInvocationDataCollector.DataGathererPosition = getIntegerValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("position"));
            methodInvocationDataCollector.DataGathererTransform = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("transformer-type"));
            methodInvocationDataCollector.DataGathererGetter = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("transformer-value"));

            methodInvocationDataCollector.IsAssignedToBTs = false;

            methodInvocationDataCollector.RuleRawValue = makeXMLFormattedAndIndented(methodInvocationDataCollectorConfigurationNode);

            if (entityBusinessTransactionConfigurationsList != null)
            {
                List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsForThisDCList = entityBusinessTransactionConfigurationsList.Where(b => b.AssignedMIDCs.Contains(String.Format("{0};", methodInvocationDataCollector.CollectorName)) == true).ToList();

                if (entityBusinessTransactionConfigurationsForThisDCList.Count > 0)
                {
                    methodInvocationDataCollector.IsAssignedToBTs = true;
                    methodInvocationDataCollector.NumAssignedBTs = entityBusinessTransactionConfigurationsForThisDCList.Count;

                    StringBuilder sb = new StringBuilder(32 * entityBusinessTransactionConfigurationsForThisDCList.Count);
                    foreach (EntityBusinessTransactionConfiguration bt in entityBusinessTransactionConfigurationsForThisDCList)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    methodInvocationDataCollector.AssignedBTs = sb.ToString();
                }
            }

            return methodInvocationDataCollector;
        }

        private static HTTPDataCollector fillHTTPDataCollector(XmlNode httpDataCollectorConfigurationNode, XmlNode dataGathererConfigurationNode, EntityApplicationConfiguration applicationConfiguration, List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList)
        {
            HTTPDataCollector httpDataCollector = new HTTPDataCollector();

            httpDataCollector.Controller = applicationConfiguration.Controller;
            httpDataCollector.ControllerLink = applicationConfiguration.ControllerLink;
            httpDataCollector.ApplicationName = applicationConfiguration.ApplicationName;
            httpDataCollector.ApplicationID = applicationConfiguration.ApplicationID;
            httpDataCollector.ApplicationLink = applicationConfiguration.ApplicationLink;

            httpDataCollector.CollectorName = getStringValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("name"));

            httpDataCollector.IsAPM = Convert.ToBoolean(httpDataCollectorConfigurationNode.Attributes["enabled-for-apm"].Value);
            httpDataCollector.IsAnalytics = Convert.ToBoolean(httpDataCollectorConfigurationNode.Attributes["enabled-for-analytics"].Value);
            httpDataCollector.IsAssignedToNewBTs = Convert.ToBoolean(httpDataCollectorConfigurationNode.Attributes["attach-to-new-bts"].Value);

            httpDataCollector.IsURLEnabled = getBoolValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("gather-url"));
            httpDataCollector.IsSessionIDEnabled = getBoolValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("gather-session-id"));
            httpDataCollector.IsUserPrincipalEnabled = getBoolValueFromXmlNode(httpDataCollectorConfigurationNode.SelectSingleNode("gather-user-principal"));

            if (dataGathererConfigurationNode != null)
            {
                httpDataCollector.DataGathererName = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("display-name"));
                httpDataCollector.DataGathererValue = getStringValueFromXmlNode(dataGathererConfigurationNode.SelectSingleNode("name"));
            }

            httpDataCollector.IsAssignedToBTs = false;

            httpDataCollector.RuleRawValue = makeXMLFormattedAndIndented(httpDataCollectorConfigurationNode);

            if (entityBusinessTransactionConfigurationsList != null)
            {
                List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsForThisDCList = entityBusinessTransactionConfigurationsList.Where(b => b.AssignedMIDCs.Contains(String.Format("{0};", httpDataCollector.CollectorName)) == true).ToList();

                if (entityBusinessTransactionConfigurationsForThisDCList.Count > 0)
                {
                    httpDataCollector.IsAssignedToBTs = true;
                    httpDataCollector.NumAssignedBTs = entityBusinessTransactionConfigurationsForThisDCList.Count;

                    StringBuilder sb = new StringBuilder(32 * entityBusinessTransactionConfigurationsForThisDCList.Count);
                    foreach (EntityBusinessTransactionConfiguration bt in entityBusinessTransactionConfigurationsForThisDCList)
                    {
                        sb.AppendFormat("{0}/{1};\n", bt.TierName, bt.BTName);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    httpDataCollector.AssignedBTs = sb.ToString();
                }
            }

            return httpDataCollector;
        }

        private static EntityTierConfiguration fillEntityTierConfiguration(XmlNode applicationComponentNode, EntityApplicationConfiguration applicationConfiguration, List<EntityTier> tiersList, List<EntityBusinessTransactionConfiguration> entityBusinessTransactionConfigurationsList)
        {
            EntityTierConfiguration entityTierConfiguration = new EntityTierConfiguration();

            entityTierConfiguration.Controller = applicationConfiguration.Controller;
            entityTierConfiguration.ControllerLink = applicationConfiguration.ControllerLink;
            entityTierConfiguration.ApplicationName = applicationConfiguration.ApplicationName;
            entityTierConfiguration.ApplicationID = applicationConfiguration.ApplicationID;
            entityTierConfiguration.ApplicationLink = applicationConfiguration.ApplicationLink;

            entityTierConfiguration.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            entityTierConfiguration.TierDescription = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("description"));
            entityTierConfiguration.TierType = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("component-type"));
            if (tiersList != null)
            {
                EntityTier tier = tiersList.Where(t => t.TierName == entityTierConfiguration.TierName).FirstOrDefault();
                if (tier != null)
                {
                    entityTierConfiguration.TierID = tier.TierID;
                }
            }

            entityTierConfiguration.IsDynamicScalingEnabled = getBoolValueFromXmlNode(applicationComponentNode.SelectSingleNode("dynamic-scaling-enabled"));

            entityTierConfiguration.MemoryConfig = makeXMLFormattedAndIndented(applicationComponentNode.SelectSingleNode("memory-configuration"));
            entityTierConfiguration.CacheConfig = makeXMLFormattedAndIndented(applicationComponentNode.SelectSingleNode("cache-configuration"));
            entityTierConfiguration.CustomCacheConfig = makeXMLFormattedAndIndented(applicationComponentNode.SelectSingleNode("custom-cache-configurations"));

            if (entityBusinessTransactionConfigurationsList != null)
            {
                List<EntityBusinessTransactionConfiguration> businessTransactionsList = entityBusinessTransactionConfigurationsList.Where(b => b.TierID == entityTierConfiguration.TierID).ToList();
                entityTierConfiguration.NumBTs = businessTransactionsList.Count;

                var businessTransactionsListGroup = businessTransactionsList.GroupBy(b => b.BTType);
                entityTierConfiguration.NumBTTypes = businessTransactionsListGroup.Count();
            }

            return entityTierConfiguration;
        }

        private static EntityBusinessTransactionConfiguration fillEntityBusinessTransactionConfiguration(XmlNode applicationComponentNode, XmlNode businessTransactionConfigurationtNode, EntityApplicationConfiguration applicationConfiguration, List<EntityTier> tiersList, List<EntityBusinessTransaction> businessTransactionsList)
        {
            EntityBusinessTransactionConfiguration entityBusinessTransactionConfiguration = new EntityBusinessTransactionConfiguration();

            entityBusinessTransactionConfiguration.Controller = applicationConfiguration.Controller;
            entityBusinessTransactionConfiguration.ControllerLink = applicationConfiguration.ControllerLink;
            entityBusinessTransactionConfiguration.ApplicationName = applicationConfiguration.ApplicationName;
            entityBusinessTransactionConfiguration.ApplicationID = applicationConfiguration.ApplicationID;
            entityBusinessTransactionConfiguration.ApplicationLink = applicationConfiguration.ApplicationLink;

            entityBusinessTransactionConfiguration.TierName = getStringValueFromXmlNode(applicationComponentNode.SelectSingleNode("name"));
            if (tiersList != null)
            {
                EntityTier tier = tiersList.Where(t => t.TierName == entityBusinessTransactionConfiguration.TierName).FirstOrDefault();
                if (tier != null)
                {
                    entityBusinessTransactionConfiguration.TierID = tier.TierID;
                }
            }

            entityBusinessTransactionConfiguration.BTName = getStringValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("name"));
            entityBusinessTransactionConfiguration.BTType = businessTransactionConfigurationtNode.Attributes["transaction-entry-point-type"].Value;
            if (businessTransactionsList != null)
            {
                EntityBusinessTransaction businessTransaction = businessTransactionsList.Where(b => b.BTName == entityBusinessTransactionConfiguration.BTName && b.TierName == entityBusinessTransactionConfiguration.TierName).FirstOrDefault();
                if (businessTransaction != null)
                {
                    entityBusinessTransactionConfiguration.BTID = businessTransaction.BTID;
                }
            }

            entityBusinessTransactionConfiguration.IsExcluded = Convert.ToBoolean(businessTransactionConfigurationtNode.Attributes["excluded"].Value);
            entityBusinessTransactionConfiguration.IsBackground = getBoolValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("background"));

            entityBusinessTransactionConfiguration.IsEUMEnabled = getBoolValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("enabled-for-eum"));
            entityBusinessTransactionConfiguration.IsEUMPossible = getStringValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("eum-auto-enable-possible"));
            entityBusinessTransactionConfiguration.IsAnalyticsEnabled = getBoolValueFromXmlNode(businessTransactionConfigurationtNode.SelectSingleNode("analytics-enabled"));

            entityBusinessTransactionConfiguration.BTSLAConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("sla"));
            entityBusinessTransactionConfiguration.BTSnapshotCollectionConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("business-transaction-config/snapshot-collection-policy"));
            entityBusinessTransactionConfiguration.BTRequestThresholdConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("business-transaction-config/bt-request-thresholds"));
            entityBusinessTransactionConfiguration.BTBackgroundSnapshotCollectionConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("background-business-transaction-config/snapshot-collection-policy"));
            entityBusinessTransactionConfiguration.BTBackgroundRequestThresholdConfig = makeXMLFormattedAndIndented(businessTransactionConfigurationtNode.SelectSingleNode("background-business-transaction-config/bt-request-thresholds"));

            entityBusinessTransactionConfiguration.NumAssignedMIDCs = businessTransactionConfigurationtNode.SelectNodes("data-gatherer-config").Count;
            entityBusinessTransactionConfiguration.AssignedMIDCs = String.Empty;
            if (entityBusinessTransactionConfiguration.NumAssignedMIDCs > 0)
            {
                StringBuilder sb = new StringBuilder(32 * entityBusinessTransactionConfiguration.NumAssignedMIDCs);
                foreach (XmlNode dataGathererXmlNode in businessTransactionConfigurationtNode.SelectNodes("data-gatherer-config"))
                {
                    sb.AppendFormat("{0};\n", dataGathererXmlNode.InnerText);
                }
                sb.Remove(sb.Length - 1, 1);
                entityBusinessTransactionConfiguration.AssignedMIDCs = sb.ToString();
            }

            return entityBusinessTransactionConfiguration;
        }

        private static AgentCallGraphSetting fillAgentCallGraphSetting(XmlNode agentCallGraphSettingConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            AgentCallGraphSetting agentCallGraphSetting = new AgentCallGraphSetting();

            agentCallGraphSetting.Controller = applicationConfiguration.Controller;
            agentCallGraphSetting.ControllerLink = applicationConfiguration.ControllerLink;
            agentCallGraphSetting.ApplicationName = applicationConfiguration.ApplicationName;
            agentCallGraphSetting.ApplicationID = applicationConfiguration.ApplicationID;
            agentCallGraphSetting.ApplicationLink = applicationConfiguration.ApplicationLink;

            agentCallGraphSetting.AgentType = agentCallGraphSettingConfigurationNode.Attributes["agent-type"].Value;

            agentCallGraphSetting.SamplingRate = getIntegerValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("sampling-rate"));
            agentCallGraphSetting.IncludePackages = getStringValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("include-packages"));
            agentCallGraphSetting.NumIncludePackages = agentCallGraphSetting.IncludePackages.Split('|').Count();
            agentCallGraphSetting.IncludePackages = agentCallGraphSetting.IncludePackages.Replace("|", ";\n");
            agentCallGraphSetting.ExcludePackages = getStringValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("exclude-packages"));
            agentCallGraphSetting.NumExcludePackages = agentCallGraphSetting.ExcludePackages.Split('|').Count();
            agentCallGraphSetting.ExcludePackages = agentCallGraphSetting.ExcludePackages.Replace("|", ";\n");
            agentCallGraphSetting.MinSQLDuration = getIntegerValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("min-duration-for-db-calls"));
            agentCallGraphSetting.IsRawSQLEnabled = getBoolValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("raw-sql"));
            agentCallGraphSetting.IsHotSpotEnabled = getBoolValueFromXmlNode(agentCallGraphSettingConfigurationNode.SelectSingleNode("hotspots-enabled"));

            return agentCallGraphSetting;
        }

        private static HealthRule fillHealthRule(XmlNode healthRuleConfigurationNode, EntityApplicationConfiguration applicationConfiguration)
        {
            HealthRule healthRule = new HealthRule();

            healthRule.Controller = applicationConfiguration.Controller;
            healthRule.ControllerLink = applicationConfiguration.ControllerLink;
            healthRule.ApplicationName = applicationConfiguration.ApplicationName;
            healthRule.ApplicationID = applicationConfiguration.ApplicationID;
            healthRule.ApplicationLink = applicationConfiguration.ApplicationLink;

            healthRule.RuleName = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("name"));
            healthRule.RuleType = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("type"));
            healthRule.Description = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("description"));
            healthRule.IsEnabled = getBoolValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("enabled"));
            healthRule.IsDefault = getBoolValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("is-default"));
            healthRule.IsAlwaysEnabled = getBoolValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("always-enabled"));
            healthRule.Schedule = getStringValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("schedule"));
            healthRule.DurationOfEvalPeriod = getIntegerValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("duration-min"));
            healthRule.WaitTimeAfterViolation = getIntegerValueFromXmlNode(healthRuleConfigurationNode.SelectSingleNode("wait-time-min"));

            healthRule.AffectedEntitiesRawValue = makeXMLFormattedAndIndented(healthRuleConfigurationNode.SelectSingleNode("affected-entities-match-criteria"));
            healthRule.CriticalConditionRawValue = makeXMLFormattedAndIndented(healthRuleConfigurationNode.SelectSingleNode("critical-execution-criteria"));
            healthRule.WarningConditionRawValue = makeXMLFormattedAndIndented(healthRuleConfigurationNode.SelectSingleNode("warning-execution-criteria"));

            // Affected entity selection
            XmlNode affectedWrapperXmlNode = healthRuleConfigurationNode.SelectSingleNode("affected-entities-match-criteria").ChildNodes[0];
            if (affectedWrapperXmlNode != null)
            {
                healthRule.AffectsEntityType = getStringValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("type"));
                healthRule.AffectsEntityMatchType = getStringValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("match-type"));
                healthRule.AffectsEntityMatchPattern = getStringValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("match-pattern"));
                healthRule.AffectsEntityMatchIsInverse = getBoolValueFromXmlNode(affectedWrapperXmlNode.SelectSingleNode("inverse"));
                healthRule.AffectsEntityMatchCriteria = makeXMLFormattedAndIndented(affectedWrapperXmlNode.SelectNodes("*[not(self::type) and not(self::match-type) and not(self::match-pattern) and not(self::inverse)]"));
            }

            // XML can look like that for single element
            //<critical-execution-criteria>
            //    <entity-aggregation-scope>
            //        <type>ANY</type>
            //        <value>0</value>
            //    </entity-aggregation-scope>
            //    <policy-condition>
            //        <type>leaf</type>
            //        <display-name>condition 1</display-name>
            //        <condition-value-type>ABSOLUTE</condition-value-type>
            //        <condition-value>0.0</condition-value>
            //        <operator>GREATER_THAN</operator>
            //        <condition-expression/>
            //        <use-active-baseline>false</use-active-baseline>
            //        <trigger-on-no-data>true</trigger-on-no-data>
            //        <metric-expression>
            //            <type>leaf</type>
            //            <function-type>VALUE</function-type>
            //            <value>0</value>
            //            <is-literal-expression>false</is-literal-expression>
            //            <display-name>null</display-name>
            //            <metric-definition>
            //                <type>LOGICAL_METRIC</type>
            //                <logical-metric-name>Agent|App|Availability</logical-metric-name>
            //            </metric-definition>
            //        </metric-expression>
            //    </policy-condition>
            //</critical-execution-criteria>

            // Or like that for multiple
            //<critical-execution-criteria>
            //    <entity-aggregation-scope>
            //        <type>AGGREGATE</type>
            //        <value>0</value>
            //    </entity-aggregation-scope>
            //    <policy-condition>
            //        <type>boolean</type>
            //        <operator>AND</operator>
            //        <condition1>
            //            <type>leaf</type>
            //            <display-name>Average Response Time (ms) Baseline Condition</display-name>
            //            <condition-value-type>BASELINE_STANDARD_DEVIATION</condition-value-type>
            //            <condition-value>3.0</condition-value>
            //            <operator>GREATER_THAN</operator>
            //            <condition-expression/>
            //            <use-active-baseline>true</use-active-baseline>
            //            <trigger-on-no-data>false</trigger-on-no-data>
            //            <metric-expression>
            //                <type>leaf</type>
            //                <function-type>VALUE</function-type>
            //                <value>0</value>
            //                <is-literal-expression>false</is-literal-expression>
            //                <display-name>null</display-name>
            //                <metric-definition>
            //                    <type>LOGICAL_METRIC</type>
            //                    <logical-metric-name>Average Response Time (ms)</logical-metric-name>
            //                </metric-definition>
            //            </metric-expression>
            //        </condition1>
            //        <condition2>
            //            <type>leaf</type>
            //            <display-name>Calls per Minute Condition</display-name>
            //            <condition-value-type>ABSOLUTE</condition-value-type>
            //            <condition-value>50.0</condition-value>
            //            <operator>GREATER_THAN</operator>
            //            <condition-expression/>
            //            <use-active-baseline>false</use-active-baseline>
            //            <trigger-on-no-data>false</trigger-on-no-data>
            //            <metric-expression>
            //                <type>leaf</type>
            //                <function-type>VALUE</function-type>
            //                <value>0</value>
            //                <is-literal-expression>false</is-literal-expression>
            //                <display-name>null</display-name>
            //                <metric-definition>
            //                    <type>LOGICAL_METRIC</type>
            //                    <logical-metric-name>Calls per Minute</logical-metric-name>
            //                </metric-definition>
            //            </metric-expression>
            //        </condition2>
            //    </policy-condition>
            //</critical-execution-criteria>            

            // Critical
            XmlNode criticalExecutionCriteriaXmlNode = healthRuleConfigurationNode.SelectSingleNode("critical-execution-criteria");
            if (criticalExecutionCriteriaXmlNode != null)
            {
                healthRule.CriticalAggregateType = getStringValueFromXmlNode(criticalExecutionCriteriaXmlNode.SelectSingleNode("entity-aggregation-scope/type"));

                XmlNode firstCondition = criticalExecutionCriteriaXmlNode.SelectSingleNode("policy-condition");
                XmlNodeList condition1sXmlNodeList = criticalExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition1");
                XmlNodeList condition2sXmlNodeList = criticalExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition2");

                List<XmlNode> conditionsList = new List<XmlNode>();
                if (condition1sXmlNodeList.Count == 0)
                {
                    healthRule.CriticalEntityConditionType = "AND";
                    conditionsList.Add(firstCondition);
                }
                else
                {
                    healthRule.CriticalEntityConditionType = getStringValueFromXmlNode(criticalExecutionCriteriaXmlNode.SelectSingleNode("policy-condition/operator"));
                    foreach (XmlNode xmlNode in condition1sXmlNodeList)
                    {
                        conditionsList.Add(xmlNode);
                    }
                    conditionsList.Add(condition2sXmlNodeList[condition2sXmlNodeList.Count - 1]);
                }
                
                healthRule.CriticalNumConditions = conditionsList.Count;

                int i = 1;
                foreach (XmlNode conditionXmlNode in conditionsList)
                {
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Name", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("display-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Type", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Value", i)).SetValue(healthRule, getLongValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Operator", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("operator")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}Expression", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-expression")), null);
                    if (getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("use-active-baseline")) == true)
                    {
                        healthRule.GetType().GetProperty(String.Format("Crit{0}BaselineUsed", i)).SetValue(healthRule, "Default Baseline", null);
                    }
                    else
                    {
                        healthRule.GetType().GetProperty(String.Format("Crit{0}BaselineUsed", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-baseline/name")), null);
                    }
                    healthRule.GetType().GetProperty(String.Format("Crit{0}TriggerOnNoData", i)).SetValue(healthRule, getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("trigger-on-no-data")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}MetricName", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/metric-definition/logical-metric-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}MetricFunction", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/function-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Crit{0}MetricExpressionConfig", i)).SetValue(healthRule, makeXMLFormattedAndIndented(conditionXmlNode.SelectSingleNode("metric-expression")), null);

                    i++;
                    if (i > 5) break;
                }
            }

            // Warning
            XmlNode warningExecutionCriteriaXmlNode = healthRuleConfigurationNode.SelectSingleNode("warning-execution-criteria");
            if (warningExecutionCriteriaXmlNode != null)
            {
                healthRule.WarningAggregateType = getStringValueFromXmlNode(warningExecutionCriteriaXmlNode.SelectSingleNode("entity-aggregation-scope/type"));

                XmlNode firstCondition = warningExecutionCriteriaXmlNode.SelectSingleNode("policy-condition");
                XmlNodeList condition1sXmlNodeList = warningExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition1");
                XmlNodeList condition2sXmlNodeList = warningExecutionCriteriaXmlNode.SelectNodes("policy-condition//condition2");

                List<XmlNode> conditionsList = new List<XmlNode>();
                if (condition1sXmlNodeList.Count == 0)
                {
                    healthRule.WarningEntityConditionType = "AND";
                    conditionsList.Add(firstCondition);
                }
                else
                {
                    healthRule.WarningEntityConditionType = getStringValueFromXmlNode(warningExecutionCriteriaXmlNode.SelectSingleNode("policy-condition/operator"));
                    foreach (XmlNode xmlNode in condition1sXmlNodeList)
                    {
                        conditionsList.Add(xmlNode);
                    }
                    conditionsList.Add(condition2sXmlNodeList[condition2sXmlNodeList.Count - 1]);
                }

                healthRule.WarningNumConditions = conditionsList.Count;

                int i = 1;
                foreach (XmlNode conditionXmlNode in conditionsList)
                {
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Name", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("display-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Type", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Value", i)).SetValue(healthRule, getLongValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-value")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Operator", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("operator")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}Expression", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("condition-expression")), null);
                    if (getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("use-active-baseline")) == true)
                    {
                        healthRule.GetType().GetProperty(String.Format("Warn{0}BaselineUsed", i)).SetValue(healthRule, "Default Baseline", null);
                    }
                    else
                    {
                        healthRule.GetType().GetProperty(String.Format("Warn{0}BaselineUsed", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-baseline/name")), null);
                    }
                    healthRule.GetType().GetProperty(String.Format("Warn{0}TriggerOnNoData", i)).SetValue(healthRule, getBoolValueFromXmlNode(conditionXmlNode.SelectSingleNode("trigger-on-no-data")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}MetricName", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/metric-definition/logical-metric-name")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}MetricFunction", i)).SetValue(healthRule, getStringValueFromXmlNode(conditionXmlNode.SelectSingleNode("metric-expression/function-type")), null);
                    healthRule.GetType().GetProperty(String.Format("Warn{0}MetricExpressionConfig", i)).SetValue(healthRule, makeXMLFormattedAndIndented(conditionXmlNode.SelectSingleNode("metric-expression")), null);

                    i++;
                    if (i > 5) break;
                }
            }

            return healthRule;
        }

        private static void fillMatchRuleDetails(BusinessTransactionEntryRule businessTransactionEntryRule, XmlNode matchRule)
        {
            // Enabled seems to be set inside of the match-rule, not couple of levels up
            businessTransactionEntryRule.IsEnabled = Convert.ToBoolean(matchRule.SelectSingleNode("enabled").InnerText);
            businessTransactionEntryRule.Priority = Convert.ToInt32(matchRule.SelectSingleNode("priority").InnerText);
            businessTransactionEntryRule.IsExcluded = Convert.ToBoolean(matchRule.SelectSingleNode("excluded").InnerText);

            switch (businessTransactionEntryRule.EntryPointType)
            {
                case "ASP_DOTNET":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("class-name"));

                    break;

                case "NODEJS_WEB":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("http-method"));

                    break;

                case "PYTHON_WEB":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("http-method"));

                    break;

                case "POCO":
                    // Background is really only set for POCOs
                    businessTransactionEntryRule.IsBackground = Convert.ToBoolean(matchRule.SelectSingleNode("background").InnerText);
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-class"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-method"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));

                    break;

                case "POJO":
                    // Background is really only set for POJOs
                    businessTransactionEntryRule.IsBackground = Convert.ToBoolean(matchRule.SelectSingleNode("background").InnerText);
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-class"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("match-method"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));

                    break;

                case "SERVLET":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("class-name"));

                    break;

                case "STRUTS_ACTION":
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("action-class-name"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("action-method-name"));
                    // There is also Struts Action Name in the UI, but I don't know how it shows up

                    break;

                case "WCF":
                    businessTransactionEntryRule.MatchClass = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("web-service-name"));
                    businessTransactionEntryRule.MatchMethod = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("operation-name"));

                    break;

                case "WEB":
                    businessTransactionEntryRule.MatchURI = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("uri"));
                    //businessTransactionEntryRule.Parameters = getNameValueDetailsFromParametersCollection(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.Parameters = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("parameters"));
                    businessTransactionEntryRule.SplitConfig = makeXMLFormattedAndIndented(matchRule.SelectSingleNode("split-config"));

                    break;

                default:
                    break;
            }

        }

        #endregion

        #region Flowmap detail conversion functions

        private static void convertFlowmapApplication(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, EntityApplication applicationRow, string metricsFolderPath)
        {
            string metricsEntityFolderPath = Path.Combine(
                metricsFolderPath,
                APPLICATION_TYPE_SHORT);

            string flowmapDataFilePath = Path.Combine(
                metricsEntityFolderPath,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntities.Count + flowmapEntityConnections.Count);

                // Process each of the individual Tiers, Backends and Applications as individual icons on the flow map
                foreach (JToken entity in flowmapEntities)
                {
                    ActivityFlow activityFlowRow = new ActivityFlow();
                    activityFlowRow.MetricsIDs = new List<long>(3);

                    activityFlowRow.Controller = applicationRow.Controller;
                    activityFlowRow.ApplicationName = applicationRow.ApplicationName;
                    activityFlowRow.ApplicationID = applicationRow.ApplicationID;

                    activityFlowRow.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRow.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRow.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRow.Controller, activityFlowRow.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRow.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                    activityFlowRow.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                    activityFlowRow.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                    activityFlowRow.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                    activityFlowRow.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;

                    activityFlowRow.CallDirection = "Total";

                    activityFlowRow.FromEntityID = (long)entity["idNum"];
                    activityFlowRow.FromName = entity["name"].ToString();

                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRow.ApplicationID;
                    switch (entity["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRow.FromEntityID;
                            activityFlowRow.CallType = "Total";
                            activityFlowRow.FromType = "Tier";
                            activityFlowRow.FromLink = String.Format(DEEPLINK_TIER, activityFlowRow.Controller, activityFlowRow.ApplicationID, activityFlowRow.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRow.CallType = "Total";
                            activityFlowRow.FromType = "Backend";
                            activityFlowRow.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRow.Controller, activityFlowRow.ApplicationID, activityFlowRow.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRow.CallType = "Total";
                            activityFlowRow.FromType = "Application";
                            activityFlowRow.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRow.Controller, activityFlowRow.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRow.CallType = entity["entityType"].ToString();
                            activityFlowRow.FromType = "Unknown";
                            break;
                    }

                    //activityFlowRow.ToName = activityFlowRow.FromName;
                    //activityFlowRow.ToType= activityFlowRow.FromType;
                    activityFlowRow.ToEntityID = activityFlowRow.FromEntityID;
                    //activityFlowRow.ToLink = activityFlowRow.FromLink;

                    activityFlowRow.ART = (long)entity["stats"]["averageResponseTime"]["metricValue"];
                    activityFlowRow.CPM = (long)entity["stats"]["callsPerMinute"]["metricValue"];
                    activityFlowRow.EPM = (long)entity["stats"]["errorsPerMinute"]["metricValue"];
                    activityFlowRow.Calls = (long)entity["stats"]["numberOfCalls"]["metricValue"];
                    activityFlowRow.Errors = (long)entity["stats"]["numberOfErrors"]["metricValue"];

                    if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                    if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                    if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                    if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                    if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                    activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                    if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                    activityFlowRow.MetricsIDs.Add((int)entity["stats"]["averageResponseTime"]["metricId"]);
                    activityFlowRow.MetricsIDs.Add((int)entity["stats"]["callsPerMinute"]["metricId"]);
                    activityFlowRow.MetricsIDs.Add((int)entity["stats"]["errorsPerMinute"]["metricId"]);
                    activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                    if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                    {
                        StringBuilder sb = new StringBuilder(128);
                        foreach (int metricID in activityFlowRow.MetricsIDs)
                        {
                            sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                            sb.Append(",");
                        }
                        sb.Remove(sb.Length - 1, 1);
                        activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                    }

                    activityFlowsList.Add(activityFlowRow);
                }

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = applicationRow.Controller;
                    activityFlowRowTemplate.ApplicationName = applicationRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = applicationRow.ApplicationID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;

                    activityFlowRowTemplate.CallDirection = "Exit";

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = "Tier";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.FromType = "Backend";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = "Application";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            activityFlowRowTemplate.ToType = "Tier";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.ToType = "Backend";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            activityFlowRowTemplate.ToType = "Application";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (((bool)entityConnectionStat["exitPointCall"]["synchronous"]) == false)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;
                        
                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                metricsEntityFolderPath,
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new ActivityFlowReportMap(), activityGridReportFileName);

            return;
        }

        private static void convertFlowmapTier(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, EntityTier tierRow, string metricsFolderPath)
        {
            string metricsEntityFolderPath = Path.Combine(
                metricsFolderPath,
                TIERS_TYPE_SHORT,
                getShortenedEntityNameForFileSystem(tierRow.TierName, tierRow.TierID));

            string flowmapDataFilePath = Path.Combine(
                metricsEntityFolderPath,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // For Tiers, not going to process individual entities, but only connecting lines

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = tierRow.Controller;
                    activityFlowRowTemplate.ApplicationName = tierRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = tierRow.ApplicationID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = "Tier";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.FromType = "Backend";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = "Application";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            activityFlowRowTemplate.ToType = "Tier";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.ToType = "Backend";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            activityFlowRowTemplate.ToType = "Application";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    if (activityFlowRowTemplate.FromEntityID == tierRow.TierID)
                    {
                        activityFlowRowTemplate.CallDirection = "Outgoing";
                    }
                    else
                    {
                        activityFlowRowTemplate.CallDirection = "Incoming";
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (((bool)entityConnectionStat["exitPointCall"]["synchronous"]) == false)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                metricsEntityFolderPath,
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new ActivityFlowReportMap(), activityGridReportFileName);
        }

        private static void convertFlowmapNode(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, EntityNode nodeRow, string metricsFolderPath)
        {
            string metricsEntityFolderPath = Path.Combine(
                metricsFolderPath,
                NODES_TYPE_SHORT,
                getShortenedEntityNameForFileSystem(nodeRow.TierName, nodeRow.TierID),
                getShortenedEntityNameForFileSystem(nodeRow.NodeName, nodeRow.NodeID));

            string flowmapDataFilePath = Path.Combine(
                metricsEntityFolderPath,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // For Nodes, not going to process individual entities, but only connecting lines

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = nodeRow.Controller;
                    activityFlowRowTemplate.ApplicationName = nodeRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = nodeRow.ApplicationID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_NODE:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_NODE_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = "Node";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_NODE, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = "Tier";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.FromType = "Backend";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = "Application";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case "APPLICATION_COMPONENT_NODE":
                            activityFlowRowTemplate.ToType = "Node";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_NODE, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_TIER:
                            activityFlowRowTemplate.ToType = "Tier";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.ToType = "Backend";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            activityFlowRowTemplate.ToType = "Application";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    // Haven't seen the incoming calls on the flowmap for Nodes. But maybe?
                    if (activityFlowRowTemplate.FromEntityID == nodeRow.NodeID)
                    {
                        activityFlowRowTemplate.CallDirection = "Outgoing";
                    }
                    else
                    {
                        activityFlowRowTemplate.CallDirection = "Incoming";
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (((bool)entityConnectionStat["exitPointCall"]["synchronous"]) == false)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                metricsEntityFolderPath,
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new ActivityFlowReportMap(), activityGridReportFileName);
        }

        private static void convertFlowmapsBusinessTransaction(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, EntityBusinessTransaction businessTransactionRow, string metricsFolderPath)
        {
            string metricsEntityFolderPath = Path.Combine(
                metricsFolderPath,
                BUSINESS_TRANSACTIONS_TYPE_SHORT,
                getShortenedEntityNameForFileSystem(businessTransactionRow.TierName, businessTransactionRow.TierID),
                getShortenedEntityNameForFileSystem(businessTransactionRow.BTName, businessTransactionRow.BTID));

            string flowmapDataFilePath = Path.Combine(
                metricsEntityFolderPath,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // Controller shows a pretty complex grid view for jumps that continue from other tiers.
                // I couldn't figure out how the JSON is converted into that
                // For Business Transactions, not going to process individual entities, but only connecting lines

                // Assume that the first node is the 
                JObject startTier = (JObject)flowmapEntities.Where(e => (bool)e["startComponent"] == true).FirstOrDefault();

                // Process each call between Tiers, Tiers and Backends, and Tiers and Applications
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = businessTransactionRow.Controller;
                    activityFlowRowTemplate.ApplicationName = businessTransactionRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = businessTransactionRow.ApplicationID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = "Tier";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.FromType = "Backend";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = "Application";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            activityFlowRowTemplate.ToType = "Tier";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.ToType = "Backend";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            activityFlowRowTemplate.ToType = "Application";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    // Haven't seen the incoming calls on the flowmap for Nodes. But maybe?
                    if (startTier != null)
                    {
                        if (activityFlowRowTemplate.FromEntityID == (long)startTier["idNum"])
                        {
                            activityFlowRowTemplate.CallDirection = "FirstHop";
                        }
                        else
                        {
                            activityFlowRowTemplate.CallDirection = "SubsequentHop";
                        }
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (((bool)entityConnectionStat["exitPointCall"]["synchronous"]) == false)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                metricsEntityFolderPath,
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new ActivityFlowReportMap(), activityGridReportFileName);
        }

        private static void convertFlowmapBackend(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, EntityBackend backendRow, string metricsFolderPath)
        {
            string metricsEntityFolderPath = Path.Combine(
                metricsFolderPath,
                BACKENDS_TYPE_SHORT,
                getShortenedEntityNameForFileSystem(backendRow.BackendName, backendRow.BackendID));

            string flowmapDataFilePath = Path.Combine(
                metricsEntityFolderPath,
                String.Format(EXTRACT_ENTITY_FLOWMAP_FILE_NAME, jobConfiguration.Input.ExpandedTimeRange.From, jobConfiguration.Input.ExpandedTimeRange.To));

            JObject flowmapData = FileIOHelper.loadJObjectFromFile(flowmapDataFilePath);
            if (flowmapData == null)
            {
                return;
            }

            long fromTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.From);
            long toTimeUnix = convertToUnixTimestamp(jobConfiguration.Input.ExpandedTimeRange.To);
            long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
            string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

            List<ActivityFlow> activityFlowsList = null;
            JArray flowmapEntities = (JArray)flowmapData["nodes"];
            JArray flowmapEntityConnections = (JArray)flowmapData["edges"];
            if (flowmapEntities != null && flowmapEntityConnections != null)
            {
                activityFlowsList = new List<ActivityFlow>(flowmapEntityConnections.Count);

                // We don't display grid for Backends. But it is quite similar to Tier view
                // For Backends, not going to process individual entities, but only connecting lines

                // Process each call between Tiers, Tiers and Backends
                foreach (JToken entityConnection in flowmapEntityConnections)
                {
                    ActivityFlow activityFlowRowTemplate = new ActivityFlow();

                    // Prepare the row
                    activityFlowRowTemplate.MetricsIDs = new List<long>(3);

                    activityFlowRowTemplate.Controller = backendRow.Controller;
                    activityFlowRowTemplate.ApplicationName = backendRow.ApplicationName;
                    activityFlowRowTemplate.ApplicationID = backendRow.ApplicationID;

                    activityFlowRowTemplate.ControllerLink = String.Format(DEEPLINK_CONTROLLER, activityFlowRowTemplate.Controller, DEEPLINK_THIS_TIMERANGE);
                    activityFlowRowTemplate.ApplicationLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, DEEPLINK_THIS_TIMERANGE);

                    activityFlowRowTemplate.Duration = (int)(jobConfiguration.Input.ExpandedTimeRange.To - jobConfiguration.Input.ExpandedTimeRange.From).Duration().TotalMinutes;
                    activityFlowRowTemplate.From = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime();
                    activityFlowRowTemplate.To = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime();
                    activityFlowRowTemplate.FromUtc = jobConfiguration.Input.ExpandedTimeRange.From;
                    activityFlowRowTemplate.ToUtc = jobConfiguration.Input.ExpandedTimeRange.To;

                    activityFlowRowTemplate.FromEntityID = (long)entityConnection["sourceNodeDefinition"]["entityId"];
                    JObject entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.FromEntityID && e["entityType"].ToString() == entityConnection["sourceNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.FromName = entity["name"].ToString();
                    }
                    string deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_APPLICATION_TARGET_METRIC_ID;
                    long entityIdForMetricBrowser = activityFlowRowTemplate.ApplicationID;
                    switch (entityConnection["sourceNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            entityIdForMetricBrowser = activityFlowRowTemplate.FromEntityID;
                            activityFlowRowTemplate.FromType = "Tier";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.FromType = "Backend";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            deepLinkMetricTemplateInMetricBrowser = DEEPLINK_METRIC_TIER_TARGET_METRIC_ID;
                            activityFlowRowTemplate.FromType = "Application";
                            activityFlowRowTemplate.FromLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.FromEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.FromName = entityConnection["sourceNode"].ToString();
                            activityFlowRowTemplate.FromType = entityConnection["sourceNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    activityFlowRowTemplate.ToEntityID = (long)entityConnection["targetNodeDefinition"]["entityId"];
                    entity = (JObject)flowmapEntities.Where(e => (long)e["idNum"] == activityFlowRowTemplate.ToEntityID && e["entityType"].ToString() == entityConnection["targetNodeDefinition"]["entityType"].ToString()).FirstOrDefault();
                    if (entity != null)
                    {
                        activityFlowRowTemplate.ToName = entity["name"].ToString();
                    }
                    switch (entityConnection["targetNodeDefinition"]["entityType"].ToString())
                    {
                        case ENTITY_TYPE_TIER:
                            activityFlowRowTemplate.ToType = "Tier";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_TIER, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_BACKEND:
                            activityFlowRowTemplate.ToType = "Backend";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_BACKEND, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ApplicationID, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        case ENTITY_TYPE_APPLICATION:
                            activityFlowRowTemplate.ToType = "Application";
                            activityFlowRowTemplate.ToLink = String.Format(DEEPLINK_APPLICATION, activityFlowRowTemplate.Controller, activityFlowRowTemplate.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                            break;

                        default:
                            activityFlowRowTemplate.ToName = entityConnection["targetNode"].ToString();
                            activityFlowRowTemplate.ToType = entityConnection["targetNodeDefinition"]["entityType"].ToString();
                            break;
                    }

                    if (activityFlowRowTemplate.FromEntityID == backendRow.BackendID)
                    {
                        activityFlowRowTemplate.CallDirection = "Outgoing";
                    }
                    else
                    {
                        activityFlowRowTemplate.CallDirection = "Incoming";
                    }

                    // Process each of the stats nodes, duplicating things as we need them
                    foreach (JToken entityConnectionStat in entityConnection["stats"])
                    {
                        ActivityFlow activityFlowRow = activityFlowRowTemplate.Clone();

                        activityFlowRow.CallType = entityConnectionStat["exitPointCall"]["exitPointType"].ToString();
                        if (((bool)entityConnectionStat["exitPointCall"]["synchronous"]) == false)
                        {
                            activityFlowRow.CallType = String.Format("{0} async", activityFlowRow.CallType);
                        }

                        if (entityConnectionStat["averageResponseTime"].HasValues == true)
                        {
                            activityFlowRow.ART = (long)entityConnectionStat["averageResponseTime"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["averageResponseTime"]["metricId"]);
                        }
                        if (entityConnectionStat["callsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.CPM = (long)entityConnectionStat["callsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["callsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["errorsPerMinute"].HasValues == true)
                        {
                            activityFlowRow.EPM = (long)entityConnectionStat["errorsPerMinute"]["metricValue"];
                            activityFlowRow.MetricsIDs.Add((long)entityConnectionStat["errorsPerMinute"]["metricId"]);
                        }
                        if (entityConnectionStat["numberOfCalls"].HasValues == true) { activityFlowRow.Calls = (long)entityConnectionStat["numberOfCalls"]["metricValue"]; }
                        if (entityConnectionStat["numberOfErrors"].HasValues == true) { activityFlowRow.Errors = (long)entityConnectionStat["numberOfErrors"]["metricValue"]; }

                        if (activityFlowRow.ART < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.CPM < 0) { activityFlowRow.ART = 0; }
                        if (activityFlowRow.EPM < 0) { activityFlowRow.EPM = 0; }
                        if (activityFlowRow.Calls < 0) { activityFlowRow.Calls = 0; }
                        if (activityFlowRow.Errors < 0) { activityFlowRow.Errors = 0; }

                        activityFlowRow.ErrorsPercentage = Math.Round((double)(double)activityFlowRow.Errors / (double)activityFlowRow.Calls * 100, 2);
                        if (Double.IsNaN(activityFlowRow.ErrorsPercentage) == true) activityFlowRow.ErrorsPercentage = 0;

                        activityFlowRow.MetricsIDs.RemoveAll(m => m == -1);

                        if (activityFlowRow.MetricsIDs != null && activityFlowRow.MetricsIDs.Count > 0)
                        {
                            StringBuilder sb = new StringBuilder(128);
                            foreach (int metricID in activityFlowRow.MetricsIDs)
                            {
                                sb.Append(String.Format(deepLinkMetricTemplateInMetricBrowser, entityIdForMetricBrowser, metricID));
                                sb.Append(",");
                            }
                            sb.Remove(sb.Length - 1, 1);
                            activityFlowRow.MetricLink = String.Format(DEEPLINK_METRIC, activityFlowRow.Controller, activityFlowRow.ApplicationID, sb.ToString(), DEEPLINK_THIS_TIMERANGE);
                        }
                        activityFlowsList.Add(activityFlowRow);
                    }
                }
            }

            // Sort them
            activityFlowsList = activityFlowsList.OrderBy(a => a.CallDirection).ThenBy(a => a.FromType).ThenBy(a => a.FromName).ThenBy(a => a.ToType).ThenBy(a => a.ToName).ThenBy(a => a.CallType).ThenBy(a => a.CPM).ToList();

            string activityGridReportFileName = Path.Combine(
                metricsEntityFolderPath,
                CONVERT_ACTIVITY_GRID_FILE_NAME);

            FileIOHelper.writeListToCSVFile(activityFlowsList, new ActivityFlowReportMap(), activityGridReportFileName);
        }

        #endregion

        #region Snapshot conversion functions

        private static int indexSnapshots(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            JobTimeRange jobTimeRange, 
            List<JToken> entityList, 
            List<EntityTier> tiersList, 
            List<EntityBackend> backendsList, 
            List<EntityServiceEndpoint> serviceEndpointsList, 
            List<EntityError> errorsList, 
            List<MethodInvocationDataCollector> methodInvocationDataCollectorsList,
            Dictionary<string, List<MethodCallLineClassTypeMapping>> methodCallLineClassToFrameworkTypeMappingDictionary, 
            bool progressToConsole)
        {
            int j = 0;

            #region Target step variables

            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string snapshotsFolderPath = Path.Combine(applicationFolderPath, SNAPSHOTS_FOLDER_NAME);
            string reportsFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);

            #endregion

            foreach (JToken snapshotToken in entityList)
            {
                // Only do first in chain
                if ((bool)snapshotToken["firstInChain"] == false)
                {
                    continue;
                }

                logger.Info("Indexing snapshot for Application {0}, Tier {1}, Business Transaction {2}, RequestGUID {3}", jobTarget.Application, snapshotToken["applicationComponentName"], snapshotToken["businessTransactionName"], snapshotToken["requestGUID"]);

                #region Target step variables

                DateTime snapshotTime = convertFromUnixTimestamp((long)snapshotToken["serverStartTime"]);

                string snapshotFolderPath = Path.Combine(
                    snapshotsFolderPath,
                    getShortenedEntityNameForFileSystem(snapshotToken["applicationComponentName"].ToString(), (long)snapshotToken["applicationComponentId"]),
                    getShortenedEntityNameForFileSystem(snapshotToken["businessTransactionName"].ToString(), (long)snapshotToken["businessTransactionId"]),
                    String.Format("{0:yyyyMMddHH}", snapshotTime),
                    userExperienceFolderNameMapping[snapshotToken["userExperience"].ToString()],
                    String.Format(SNAPSHOT_FOLDER_NAME, snapshotToken["requestGUID"], snapshotTime));

                string snapshotSegmentsDataFilePath = Path.Combine(snapshotFolderPath, EXTRACT_SNAPSHOT_SEGMENT_FILE_NAME);

                string snapshotsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_FILE_NAME);
                string segmentsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_FILE_NAME);
                string exitCallsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_EXIT_CALLS_FILE_NAME);
                string serviceEndpointCallsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_SERVICE_ENDPOINT_CALLS_FILE_NAME);
                string detectedErrorsFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_DETECTED_ERRORS_FILE_NAME);
                string businessDataFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_BUSINESS_DATA_FILE_NAME);
                string methodCallLinesFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_FILE_NAME);
                string methodCallLinesOccurrencesFileName = Path.Combine(snapshotFolderPath, CONVERT_SNAPSHOT_SEGMENTS_METHOD_CALL_LINES_OCCURRENCES_FILE_NAME);

                
                #endregion

                if (File.Exists(snapshotsFileName) == false)
                {
                    #region Fill in Snapshot data

                    Snapshot snapshot = new Snapshot();
                    snapshot.Controller = jobTarget.Controller;
                    snapshot.ApplicationName = jobTarget.Application;
                    snapshot.ApplicationID = jobTarget.ApplicationID;
                    snapshot.TierID = (long)snapshotToken["applicationComponentId"];
                    snapshot.TierName = snapshotToken["applicationComponentName"].ToString();
                    snapshot.BTID = (long)snapshotToken["businessTransactionId"];
                    snapshot.BTName = snapshotToken["businessTransactionName"].ToString();
                    snapshot.NodeID = (long)snapshotToken["applicationComponentNodeId"];
                    snapshot.NodeName = snapshotToken["applicationComponentNodeName"].ToString();

                    snapshot.OccurredUtc = convertFromUnixTimestamp((long)snapshotToken["serverStartTime"]);
                    snapshot.Occurred = snapshot.OccurredUtc.ToLocalTime();

                    snapshot.RequestID = snapshotToken["requestGUID"].ToString();
                    snapshot.UserExperience = snapshotToken["userExperience"].ToString();
                    snapshot.Duration = (long)snapshotToken["timeTakenInMilliSecs"];
                    snapshot.DurationRange = getDurationRangeAsString(snapshot.Duration);
                    snapshot.DiagSessionID = snapshotToken["diagnosticSessionGUID"].ToString();
                    if (snapshotToken["url"] != null) { snapshot.URL = snapshotToken["url"].ToString(); }

                    snapshot.TakenSummary = snapshotToken["summary"].ToString();
                    if (snapshot.TakenSummary.Contains("Scheduled Snapshots:") == true)
                    {
                        snapshot.TakenReason = "Scheduled";
                    }
                    else if (snapshot.TakenSummary.Contains("[Manual Diagnostic Session]") == true)
                    {
                        snapshot.TakenReason = "Diagnostic Session";
                    }
                    else if (snapshot.TakenSummary.Contains("[Error]") == true)
                    {
                        snapshot.TakenReason = "Error";
                    }
                    else if (snapshot.TakenSummary.Contains("Request was slower than the Standard Deviation threshold") == true)
                    {
                        snapshot.TakenReason = "Slower than StDev";
                    }
                    else if (snapshot.TakenSummary.Contains("of requests were slow in the last minute starting") == true)
                    {
                        snapshot.TakenReason = "Slow Rate in Minute";
                    }
                    else if (snapshot.TakenSummary.Contains("of requests had errors in the last minute starting") == true)
                    {
                        snapshot.TakenReason = "Error Rate in Minute";
                    }
                    else
                    {
                        snapshot.TakenReason = "";
                    }

                    if ((bool)snapshotToken["fullCallgraph"] == true)
                    {
                        snapshot.CallGraphType = "FULL";
                    }
                    else if ((bool)snapshotToken["delayedCallGraph"] == true)
                    {
                        snapshot.CallGraphType = "PARTIAL";
                    }
                    else
                    {
                        snapshot.CallGraphType = "NONE";
                    }

                    snapshot.HasErrors = (bool)snapshotToken["errorOccurred"];
                    snapshot.IsArchived = (bool)snapshotToken["archived"];

                    #region Fill in the deeplinks for the snapshot

                    // Decide what kind of timerange
                    long fromTimeUnix = convertToUnixTimestamp(jobTimeRange.From);
                    long toTimeUnix = convertToUnixTimestamp(jobTimeRange.To);
                    long differenceInMinutes = (toTimeUnix - fromTimeUnix) / (60000);
                    string DEEPLINK_THIS_TIMERANGE = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnix, fromTimeUnix, differenceInMinutes);

                    snapshot.ControllerLink = String.Format(DEEPLINK_CONTROLLER, snapshot.Controller, DEEPLINK_THIS_TIMERANGE);
                    snapshot.ApplicationLink = String.Format(DEEPLINK_APPLICATION, snapshot.Controller, snapshot.ApplicationID, DEEPLINK_THIS_TIMERANGE);
                    snapshot.TierLink = String.Format(DEEPLINK_TIER, snapshot.Controller, snapshot.ApplicationID, snapshot.TierID, DEEPLINK_THIS_TIMERANGE);
                    snapshot.NodeLink = String.Format(DEEPLINK_NODE, snapshot.Controller, snapshot.ApplicationID, snapshot.NodeID, DEEPLINK_THIS_TIMERANGE);
                    snapshot.BTLink = String.Format(DEEPLINK_BUSINESS_TRANSACTION, snapshot.Controller, snapshot.ApplicationID, snapshot.BTID, DEEPLINK_THIS_TIMERANGE);

                    // The snapshot link requires to have the time range is -30 < Occurredtime < +30 minutes
                    long fromTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(-30));
                    long toTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(+30));
                    long differenceInMinutesSnapshot = (toTimeUnixSnapshot - fromTimeUnixSnapshot) / (60000);
                    string DEEPLINK_THIS_TIMERANGE_SNAPSHOT = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnixSnapshot, fromTimeUnixSnapshot, differenceInMinutesSnapshot);
                    snapshot.SnapshotLink = String.Format(DEEPLINK_SNAPSHOT_OVERVIEW, snapshot.Controller, snapshot.ApplicationID, snapshot.RequestID, DEEPLINK_THIS_TIMERANGE_SNAPSHOT);

                    // This is the snapshot report link
                    string reportFileName = String.Format(
                        REPORT_SNAPSHOT_DETAILS_FILE_NAME,
                        programOptions.JobName,
                        jobConfiguration.Input.ExpandedTimeRange.From,
                        jobConfiguration.Input.ExpandedTimeRange.To,
                        getFileSystemSafeString(new Uri(snapshot.Controller).Host),
                        getShortenedEntityNameForFileSystem(snapshot.ApplicationName, snapshot.ApplicationID),
                        getShortenedEntityNameForFileSystem(snapshot.BTName, snapshot.BTID),
                        userExperienceFolderNameMapping[snapshot.UserExperience],
                        snapshot.Occurred,
                        snapshot.RequestID);
                    string reportFilePath = Path.Combine(
                        reportsFolderPath,
                        SNAPSHOTS_FOLDER_NAME,
                        reportFileName);

                    reportFilePath = reportFilePath.Substring(reportsFolderPath.Length + 1);
                    snapshot.DetailLink = String.Format(@"=HYPERLINK(""{0}"", ""<Detail>"")", reportFilePath);

                    #endregion

                    #endregion

                    #region Process segments

                    List<Segment> segmentsList = null;
                    List<ExitCall> exitCallsList = null;
                    List<ServiceEndpointCall> serviceEndpointCallsList = null;
                    List<DetectedError> detectedErrorsList = null;
                    List<BusinessData> businessDataList = null;
                    List<MethodCallLine> methodCallLinesList = null;
                    List<MethodCallLine> methodCallLinesOccurrencesList = null;

                    JArray snapshotSegmentsList = FileIOHelper.loadJArrayFromFile(snapshotSegmentsDataFilePath);
                    if (snapshotSegmentsList != null)
                    {
                        #region Prepare elements for storage of indexed data from segments
                        
                        // Number of segments is known
                        segmentsList = new List<Segment>(snapshotSegmentsList.Count);
                        
                        // Eyeball each segment to have 3 exits on average
                        exitCallsList = new List<ExitCall>(snapshotSegmentsList.Count * 3);

                        // Let's assume that each segment has a SEP
                        serviceEndpointCallsList = new List<ServiceEndpointCall>(snapshotSegmentsList.Count);
                        
                        // Don't know how long this is going to be
                        detectedErrorsList = new List<DetectedError>();
                        
                        // Don't know how long this one is going to be either
                        businessDataList = new List<BusinessData>();

                        // Assume each call graph is 250 items long
                        methodCallLinesList = new List<MethodCallLine>(snapshotSegmentsList.Count * 250);

                        // Some methods repeat though
                        methodCallLinesOccurrencesList = new List<MethodCallLine>(snapshotSegmentsList.Count * 50);

                        SortedDictionary<string, CallChainContainer> callChainsSnapshot = new SortedDictionary<string, CallChainContainer>();

                        #endregion

                        foreach (JToken snapshotSegmentToken in snapshotSegmentsList)
                        {
                            string snapshotSegmentDataFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_DATA_FILE_NAME, snapshotSegmentToken["id"]));
                            JObject snapshotSegmentDetail = FileIOHelper.loadJObjectFromFile(snapshotSegmentDataFilePath);
                            if (snapshotSegmentDetail != null)
                            {
                                #region Fill in Segment data

                                Segment segment = new Segment();

                                segment.Controller = snapshot.Controller;
                                segment.ApplicationName = snapshot.ApplicationName;
                                segment.ApplicationID = snapshot.ApplicationID;
                                segment.TierID = (long)snapshotSegmentToken["applicationComponentId"];
                                segment.TierName = snapshotSegmentToken["applicationComponentName"].ToString();
                                segment.BTID = snapshot.BTID;
                                segment.BTName = snapshot.BTName;
                                segment.NodeID = (long)snapshotSegmentToken["applicationComponentNodeId"];
                                segment.NodeName = snapshotSegmentToken["applicationComponentNodeName"].ToString();

                                segment.OccurredUtc = convertFromUnixTimestamp((long)snapshotSegmentDetail["serverStartTime"]);
                                segment.Occurred = segment.OccurredUtc.ToLocalTime();

                                segment.RequestID = snapshotSegmentDetail["requestGUID"].ToString();
                                segment.SegmentID = (long)snapshotSegmentDetail["id"];
                                segment.UserExperience = snapshotSegmentDetail["userExperience"].ToString();
                                segment.Duration = (long)snapshotSegmentDetail["timeTakenInMilliSecs"];
                                segment.DurationRange = getDurationRangeAsString(segment.Duration);
                                // The value here is not in milliseconds, contrary to the name
                                segment.CPUDuration = Math.Round((double)snapshotSegmentDetail["cpuTimeTakenInMilliSecs"] / 1000000, 2);
                                segment.E2ELatency = (long)snapshotSegmentDetail["endToEndLatency"];
                                if (segment.E2ELatency == -1) { segment.E2ELatency = 0; }
                                if (snapshotSegmentDetail["totalWaitTime"] != null) segment.WaitDuration = (long)snapshotSegmentDetail["totalWaitTime"];
                                if (snapshotSegmentDetail["totalBlockTime"] != null) segment.BlockDuration = (long)snapshotSegmentDetail["totalBlockTime"];
                                segment.DiagSessionID = snapshotSegmentDetail["diagnosticSessionGUID"].ToString();
                                if (snapshotSegmentDetail["url"] != null) segment.URL = snapshotSegmentDetail["url"].ToString();
                                if (snapshotSegmentDetail["securityID"] != null) { segment.UserPrincipal = snapshotSegmentDetail["securityID"].ToString(); }
                                if (snapshotSegmentDetail["httpSessionID"] != null) { segment.HTTPSessionID = snapshotSegmentDetail["httpSessionID"].ToString(); }

                                segment.TakenSummary = snapshotSegmentDetail["summary"].ToString();
                                if (segment.TakenSummary.Contains("Scheduled Snapshots:") == true)
                                {
                                    segment.TakenReason = "Scheduled";
                                }
                                else if (segment.TakenSummary.Contains("[Manual Diagnostic Session]") == true)
                                {
                                    segment.TakenReason = "Diagnostic Session";
                                }
                                else if (segment.TakenSummary.Contains("[Error]") == true)
                                {
                                    segment.TakenReason = "Error";
                                }
                                else if (segment.TakenSummary.Contains("Request was slower than the Standard Deviation threshold") == true)
                                {
                                    segment.TakenReason = "Slower than StDev";
                                }
                                else if (segment.TakenSummary.Contains("of requests were slow in the last minute starting") == true)
                                {
                                    segment.TakenReason = "Slow Rate in Minute";
                                }
                                else if (segment.TakenSummary.Contains("of requests had errors in the last minute starting") == true)
                                {
                                    segment.TakenReason = "Error Rate in Minute";
                                }
                                else if (segment.TakenSummary.Contains("[Continuing]") == true)
                                {
                                    segment.TakenReason = "Continuing";
                                }
                                else
                                {
                                    segment.TakenReason = "";
                                }
                                segment.TakenPolicy = snapshotSegmentDetail["deepDivePolicy"].ToString();

                                segment.ThreadID = snapshotSegmentDetail["threadID"].ToString();
                                segment.ThreadName = snapshotSegmentDetail["threadName"].ToString();

                                segment.WarningThreshold = snapshotSegmentDetail["warningThreshold"].ToString();
                                segment.CriticalThreshold = snapshotSegmentDetail["criticalThreshold"].ToString();

                                if ((bool)snapshotSegmentToken["fullCallgraph"] == true)
                                {
                                    segment.CallGraphType = "FULL";
                                }
                                else if ((bool)snapshotSegmentToken["delayedCallGraph"] == true)
                                {
                                    segment.CallGraphType = "PARTIAL";
                                }
                                else
                                {
                                    segment.CallGraphType = "NONE";
                                }

                                segment.HasErrors = (bool)snapshotSegmentDetail["errorOccured"];
                                segment.IsArchived = (bool)snapshotSegmentDetail["archived"];
                                segment.IsAsync = (bool)snapshotSegmentDetail["async"];
                                segment.IsFirstInChain = (bool)snapshotSegmentDetail["firstInChain"];

                                // What is the relationship to the root segment
                                segment.FromSegmentID = 0;
                                if (segment.IsFirstInChain == false)
                                {
                                    if (snapshotSegmentDetail["snapshotExitSequence"] != null)
                                    {
                                        // Parent exit has snapshotSequenceCounter in exitCalls array
                                        // Child exit has snapshotExitSequence value that binds the child snapshot to the parent
                                        List<JToken> possibleParentSegments = snapshotSegmentsList.Where(s => s["exitCalls"].Count() > 0).ToList();
                                        foreach (JToken possibleParentSegment in possibleParentSegments)
                                        {
                                            List<JToken> possibleExits = possibleParentSegment["exitCalls"].Where(e => e["snapshotSequenceCounter"].ToString() == snapshotSegmentDetail["snapshotExitSequence"].ToString()).ToList();
                                            if (possibleExits.Count > 0)
                                            {
                                                segment.FromSegmentID = (long)possibleParentSegment["id"];
                                                break;
                                            }
                                        }
                                    }
                                    if (segment.FromSegmentID == 0)
                                    {
                                        // Some async snapshots can have no initiating parent
                                        // Do nothing
                                        // OR!
                                        // This can happen when the parent snapshot got an exception calling downstream tier, both producing snapshot, but parent snapshot doesn't have a call graph
                                        // But sometimes non-async ones have funny parenting
                                    }
                                }
                                segment.FromTierName = snapshotSegmentToken["callingComponent"].ToString();

                                #endregion

                                #region Fill in the deeplinks for the segment

                                segment.ControllerLink = snapshot.ControllerLink;
                                segment.ApplicationLink = snapshot.ApplicationLink;
                                segment.TierLink = String.Format(DEEPLINK_TIER, segment.Controller, segment.ApplicationID, segment.TierID, DEEPLINK_THIS_TIMERANGE);
                                segment.NodeLink = String.Format(DEEPLINK_NODE, segment.Controller, segment.ApplicationID, segment.NodeID, DEEPLINK_THIS_TIMERANGE);
                                segment.BTLink = snapshot.BTLink;

                                // The snapshot link requires to have the time range is -30 < Occurredtime < +30 minutes
                                fromTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(-30));
                                toTimeUnixSnapshot = convertToUnixTimestamp(snapshot.OccurredUtc.AddMinutes(+30));
                                differenceInMinutesSnapshot = (toTimeUnixSnapshot - fromTimeUnixSnapshot) / (60000);
                                DEEPLINK_THIS_TIMERANGE_SNAPSHOT = String.Format(DEEPLINK_TIMERANGE_BETWEEN_TIMES, toTimeUnixSnapshot, fromTimeUnixSnapshot, differenceInMinutesSnapshot);
                                segment.SegmentLink = String.Format(DEEPLINK_SNAPSHOT_SEGMENT, segment.Controller, segment.ApplicationID, segment.RequestID, segment.SegmentID, DEEPLINK_THIS_TIMERANGE_SNAPSHOT);

                                #endregion

                                #region Get segment's call chain and make it pretty

                                // Convert call chain to something readable
                                // This is raw:
                                //Component:108|Exit Call:JMS|To:{[UNRESOLVED][115]}|Component:{[UNRESOLVED][115]}|Exit Call:JMS|To:115|Component:115
                                //^^^^^^^^^^^^^ ECommerce-Services
                                //              ^^^^^^^^^^^^^ JMS
                                //							^^^^^^^^^^^^^^^^^^^^^^ Active MQ-OrderQueue
                                //												   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ JMS
                                //																				^^^^^^^^^^^^^^ 
                                //																							   ^^^^^^^ Order-Processing-Services
                                //																									   ^^^^^^^^^^^^ Order-Processing-Services
                                // This is what I want it to look like:
                                // ECommerce-Services->[JMS]->Active MQ-OrderQueue->[JMS]->Order-Processing-Services
                                // 
                                // This is raw:
                                //Component:108|Exit Call:WEB_SERVICE|To:111|Component:111
                                //^^^^^^^^^^^^^ ECommerce-Services
                                //              ^^^^^^^^^^^^^^^^^^^^^ WEB_SERVICE
                                //                                    ^^^^^^ Inventory-Services
                                //                                           ^^^^^^ Inventory-Services
                                // This is what I want it to look like:
                                // ECommerce-Services->[WEB_SERVICE]->Inventory-Services
                                string callChainForThisSegment = snapshotSegmentDetail["callChain"].ToString();
                                string[] callChainTokens = callChainForThisSegment.Split('|');
                                StringBuilder sbCallChain = new StringBuilder();
                                foreach (string callChainToken in callChainTokens)
                                {
                                    if (callChainToken.StartsWith("Component") == true)
                                    {
                                        long tierID = -1;
                                        if (long.TryParse(callChainToken.Substring(10), out tierID) == true)
                                        {
                                            if (tiersList != null)
                                            {
                                                EntityTier tier = tiersList.Where(t => t.TierID == tierID).FirstOrDefault();
                                                if (tier != null)
                                                {
                                                    sbCallChain.AppendFormat("({0})->", tier.TierName);
                                                }
                                            }
                                        }
                                    }
                                    else if (callChainToken.StartsWith("Exit Call") == true)
                                    {
                                        sbCallChain.AppendFormat("[{0}]->", callChainToken.Substring(10));
                                    }
                                    else if (callChainToken.StartsWith("To:{[UNRESOLVED]") == true)
                                    {
                                        long backendID = -1;
                                        if (long.TryParse(callChainToken.Substring(17).TrimEnd(']', '}'), out backendID) == true)
                                        {
                                            if (backendsList != null)
                                            {
                                                EntityBackend backend = backendsList.Where(b => b.BackendID == backendID).FirstOrDefault();
                                                if (backend != null)
                                                {
                                                    //sbCallChain.AppendFormat("<{0}><{1}>>->", backendRow.BackendName, backendRow.BackendType);
                                                    sbCallChain.AppendFormat("<{0}>->", backend.BackendName);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (sbCallChain.Length > 2)
                                {
                                    sbCallChain.Remove(sbCallChain.Length - 2, 2);
                                }
                                callChainForThisSegment = sbCallChain.ToString();

                                #endregion

                                #region Process Exits in Segment

                                SortedDictionary<string, CallChainContainer> callChainsSegment = new SortedDictionary<string, CallChainContainer>();

                                List<ExitCall> exitCallsListInThisSegment = new List<ExitCall>();
                                foreach (JToken exitCallToken in snapshotSegmentDetail["snapshotExitCalls"])
                                {
                                    #region Parse the exit call into correct exit

                                    ExitCall exitCall = new ExitCall();

                                    exitCall.Controller = segment.Controller;
                                    exitCall.ApplicationName = segment.ApplicationName;
                                    exitCall.ApplicationID = segment.ApplicationID;
                                    exitCall.TierID = segment.TierID;
                                    exitCall.TierName = segment.TierName;
                                    exitCall.BTID = segment.BTID;
                                    exitCall.BTName = segment.BTName;
                                    exitCall.NodeID = segment.NodeID;
                                    exitCall.NodeName = segment.NodeName;

                                    exitCall.RequestID = segment.RequestID;
                                    exitCall.SegmentID = segment.SegmentID;

                                    exitCall.OccurredUtc = segment.OccurredUtc;
                                    exitCall.Occurred = segment.Occurred;

                                    exitCall.ExitType = exitCallToken["exitPointName"].ToString();

                                    exitCall.SequenceNumber = exitCallToken["snapshotSequenceCounter"].ToString();

                                    exitCall.Duration = (long)exitCallToken["timeTakenInMillis"];
                                    exitCall.DurationRange = getDurationRangeAsString(exitCall.Duration);

                                    exitCall.IsAsync = ((bool)exitCallToken["exitPointCall"]["synchronous"] == false);

                                    // Create pretty call chain
                                    // Where are we going, Tier or Backend
                                    if (exitCallToken["toComponentId"].ToString().StartsWith("{[UNRESOLVED]") == true)
                                    {
                                        // Backend
                                        exitCall.ToEntityType = "Backend";
                                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "backendId").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityID = (long)goingToProperty["value"]; ;
                                        }
                                        goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityName = goingToProperty["value"].ToString();
                                        }
                                        if (exitCall.IsAsync == false)
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms]-><{2}>", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                        else
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms async]-><{2}>", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                    }
                                    else if (exitCallToken["toComponentId"].ToString().StartsWith("App:") == true)
                                    {
                                        //Application
                                        exitCall.ToEntityType = "Application";
                                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "appId").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityID = (long)goingToProperty["value"]; ;
                                        }
                                        goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityName = goingToProperty["value"].ToString();
                                        }
                                        if (exitCall.IsAsync == false)
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms]->{{{2}}}", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                        else
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms async]->{{{2}}}", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                    }
                                    else
                                    {
                                        // Tier
                                        exitCall.ToEntityType = "Tier";
                                        exitCall.ToEntityID = (long)exitCallToken["toComponentId"];
                                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                                        if (goingToProperty != null)
                                        {
                                            exitCall.ToEntityName = goingToProperty["value"].ToString();
                                        }
                                        if (exitCall.IsAsync == false)
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms]->({2})", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                        else
                                        {
                                            exitCall.CallChain = String.Format("{0}->[{1}]:[{3} ms async]->({2})", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName, exitCall.Duration);
                                        }
                                    }

                                    // Add the exit call to the overall list for tracking
                                    string exitCCCKey = String.Format("{0}_{1}_{2}", callChainForThisSegment, exitCall.ExitType, exitCall.ToEntityName);
                                    CallChainContainer cccSeg = null;
                                    if (callChainsSegment.ContainsKey(exitCCCKey) == false)
                                    {
                                        cccSeg = new CallChainContainer { From = callChainForThisSegment, ExitType = exitCall.ExitType, ToEntityName = exitCall.ToEntityName, ToEntityType = exitCall.ToEntityType };
                                        callChainsSegment.Add(exitCCCKey, cccSeg);
                                    }
                                    else
                                    {
                                        cccSeg = callChainsSegment[exitCCCKey];
                                    }
                                    cccSeg.CallTimings.Add(new CallTiming { Async = exitCall.IsAsync, Duration = exitCall.Duration });

                                    CallChainContainer cccSnap = null;
                                    if (callChainsSnapshot.ContainsKey(exitCCCKey) == false)
                                    {
                                        cccSnap = new CallChainContainer { From = callChainForThisSegment, ExitType = exitCall.ExitType, ToEntityName = exitCall.ToEntityName, ToEntityType = exitCall.ToEntityType };
                                        callChainsSnapshot.Add(exitCCCKey, cccSnap);
                                    }
                                    else
                                    {
                                        cccSnap = callChainsSnapshot[exitCCCKey];
                                    }
                                    cccSnap.CallTimings.Add(new CallTiming { Async = exitCall.IsAsync, Duration = exitCall.Duration });

                                    exitCall.Detail = exitCallToken["detailString"].ToString();
                                    exitCall.ErrorDetail = exitCallToken["errorDetails"].ToString();
                                    if (exitCall.ErrorDetail == "\\N") { exitCall.ErrorDetail = String.Empty; }
                                    exitCall.Method = exitCallToken["callingMethod"].ToString();

                                    // Parse Properties
                                    exitCall.PropsAll = exitCallToken["propertiesAsString"].ToString();
                                    int i = 0;
                                    foreach (JToken customExitPropertyToken in exitCallToken["properties"])
                                    {
                                        exitCall.NumProps++;
                                        string propertyName = customExitPropertyToken["name"].ToString();
                                        string propertyValue = customExitPropertyToken["value"].ToString();
                                        switch (propertyName)
                                        {
                                            case "component":
                                            case "to":
                                            case "from":
                                            case "backendId":
                                                // Ignore those, already mapped elsewhere
                                                exitCall.NumProps--;
                                                break;
                                            case "Query Type":
                                                exitCall.PropQueryType = propertyValue;
                                                break;
                                            case "Statement Type":
                                                exitCall.PropStatementType = propertyValue;
                                                break;
                                            case "URL":
                                                exitCall.PropURL = propertyValue;
                                                break;
                                            case "Service":
                                                exitCall.PropServiceName = propertyValue;
                                                break;
                                            case "Operation":
                                                exitCall.PropOperationName = propertyValue;
                                                break;
                                            case "Name":
                                                exitCall.PropName = propertyValue;
                                                break;
                                            case "Asynchronous":
                                                exitCall.PropAsync = propertyValue;
                                                break;
                                            case "Continuation":
                                                exitCall.PropContinuation = propertyValue;
                                                break;
                                            default:
                                                i++;
                                                // Have 5 overflow buckets for those, hope it is enough
                                                if (i == 1)
                                                {
                                                    exitCall.Prop1Name = propertyName;
                                                    exitCall.Prop1Value = propertyValue;
                                                }
                                                else if (i == 2)
                                                {
                                                    exitCall.Prop2Name = propertyName;
                                                    exitCall.Prop2Value = propertyValue;
                                                }
                                                else if (i == 3)
                                                {
                                                    exitCall.Prop3Name = propertyName;
                                                    exitCall.Prop3Value = propertyValue;
                                                }
                                                else if (i == 4)
                                                {
                                                    exitCall.Prop4Name = propertyName;
                                                    exitCall.Prop4Value = propertyValue;
                                                }
                                                else if (i == 5)
                                                {
                                                    exitCall.Prop5Name = propertyName;
                                                    exitCall.Prop5Value = propertyValue;
                                                }
                                                break;
                                        }
                                    }

                                    exitCall.NumCalls = (int)exitCallToken["count"];
                                    exitCall.NumErrors = (int)exitCallToken["errorCount"];
                                    exitCall.HasErrors = exitCall.NumErrors != 0;

                                    // Which Segment are we going to
                                    exitCall.ToSegmentID = 0;
                                    if (exitCallToken["snapshotSequenceCounter"] != null)
                                    {
                                        // Parent segment has snapshotSequenceCounter in exitCalls array
                                        // Child snapshot has snapshotExitSequence value that binds the child snapshot to the parent
                                        JToken childSegment = snapshotSegmentsList.Where(s => s["triggerCall"].HasValues == true && s["triggerCall"]["snapshotSequenceCounter"].ToString() == exitCallToken["snapshotSequenceCounter"].ToString()).FirstOrDefault();
                                        if (childSegment != null)
                                        {
                                            exitCall.ToSegmentID = (long)childSegment["id"];
                                        }
                                    }

                                    #endregion

                                    #region Fill in the deeplinks for the exit

                                    exitCall.ControllerLink = segment.Controller;
                                    exitCall.ApplicationLink = segment.ApplicationLink;
                                    exitCall.TierLink = segment.TierLink;
                                    exitCall.NodeLink = segment.NodeLink;
                                    exitCall.BTLink = segment.BTLink;

                                    switch (exitCall.ToEntityType)
                                    {
                                        case "Backend":
                                            exitCall.ToLink = String.Format(DEEPLINK_BACKEND, exitCall.Controller, exitCall.ApplicationID, exitCall.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                                            break;

                                        case "Tier":
                                            exitCall.ToLink = String.Format(DEEPLINK_TIER, exitCall.Controller, exitCall.ApplicationID, exitCall.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                                            break;

                                        case "Application":
                                            exitCall.ToLink = String.Format(DEEPLINK_APPLICATION, exitCall.Controller, exitCall.ToEntityID, DEEPLINK_THIS_TIMERANGE);
                                            break;

                                        default:
                                            break;
                                    }

                                    #endregion

                                    exitCallsListInThisSegment.Add(exitCall);
                                }

                                #endregion

                                #region Process Service Endpoints in Segment

                                List<ServiceEndpointCall> serviceEndpointCallsListInThisSegment = new List<ServiceEndpointCall>();
                                foreach (JToken serviceEndpointToken in snapshotSegmentDetail["serviceEndPointIds"])
                                {
                                    long serviceEndpointID = (long)((JValue)serviceEndpointToken).Value;
                                    if (serviceEndpointsList != null)
                                    {
                                        EntityServiceEndpoint serviceEndpoint = serviceEndpointsList.Where(s => s.SEPID == serviceEndpointID).FirstOrDefault();
                                        if (serviceEndpoint != null)
                                        {
                                            #region Fill Service Endpoint stuff

                                            ServiceEndpointCall serviceEndpointCall = new ServiceEndpointCall();

                                            serviceEndpointCall.Controller = segment.Controller;
                                            serviceEndpointCall.ApplicationName = segment.ApplicationName;
                                            serviceEndpointCall.ApplicationID = segment.ApplicationID;
                                            serviceEndpointCall.TierID = segment.TierID;
                                            serviceEndpointCall.TierName = segment.TierName;
                                            serviceEndpointCall.BTID = segment.BTID;
                                            serviceEndpointCall.BTName = segment.BTName;
                                            serviceEndpointCall.NodeID = segment.NodeID;
                                            serviceEndpointCall.NodeName = segment.NodeName;

                                            serviceEndpointCall.RequestID = segment.RequestID;
                                            serviceEndpointCall.SegmentID = segment.SegmentID;

                                            serviceEndpointCall.SEPID = serviceEndpoint.SEPID;
                                            serviceEndpointCall.SEPName = serviceEndpoint.SEPName;
                                            serviceEndpointCall.SEPType = serviceEndpoint.SEPType;

                                            #endregion

                                            #region Fill in the deeplinks for the Service Endpoint

                                            serviceEndpointCall.ControllerLink = segment.Controller;
                                            serviceEndpointCall.ApplicationLink = segment.ApplicationLink;
                                            serviceEndpointCall.TierLink = segment.TierLink;
                                            serviceEndpointCall.NodeLink = segment.NodeLink;
                                            serviceEndpointCall.BTLink = segment.BTLink;
                                            serviceEndpointCall.SEPLink = String.Format(DEEPLINK_SERVICE_ENDPOINT, serviceEndpointCall.Controller, serviceEndpointCall.ApplicationID, serviceEndpointCall.TierID, serviceEndpointCall.SEPID, DEEPLINK_THIS_TIMERANGE);

                                            #endregion

                                            serviceEndpointCallsListInThisSegment.Add(serviceEndpointCall);
                                        }
                                    }
                                }

                                #endregion

                                #region Process Errors in Segment

                                segment.NumErrors = snapshotSegmentDetail["errorIDs"].Count();
                                List<DetectedError> detectedErrorsListInThisSegment = new List<DetectedError>();
                                if (segment.NumErrors > 0)
                                {
                                    // First, populate the list of errors from the reported error numbers
                                    List<DetectedError> detectedErrorsFromErrorIDs = new List<DetectedError>(segment.NumErrors);
                                    foreach (JToken errorToken in snapshotSegmentDetail["errorIDs"])
                                    {
                                        long errorID = (long)((JValue)errorToken).Value;
                                        if (errorsList != null)
                                        {
                                            EntityError error = errorsList.Where(e => e.ErrorID == errorID).FirstOrDefault();
                                            if (error != null)
                                            {
                                                DetectedError detectedError = new DetectedError();

                                                detectedError.Controller = segment.Controller;
                                                detectedError.ApplicationName = segment.ApplicationName;
                                                detectedError.ApplicationID = segment.ApplicationID;
                                                detectedError.TierID = segment.TierID;
                                                detectedError.TierName = segment.TierName;
                                                detectedError.BTID = segment.BTID;
                                                detectedError.BTName = segment.BTName;
                                                detectedError.NodeID = segment.NodeID;
                                                detectedError.NodeName = segment.NodeName;

                                                detectedError.RequestID = segment.RequestID;
                                                detectedError.SegmentID = segment.SegmentID;

                                                detectedError.ErrorID = error.ErrorID;
                                                detectedError.ErrorName = error.ErrorName;
                                                detectedError.ErrorType = error.ErrorType;

                                                detectedError.ErrorIDMatchedToMessage = false;

                                                detectedError.ErrorMessage = "<unmatched>";
                                                detectedError.ErrorDetail = "<unmatched>";

                                                detectedErrorsFromErrorIDs.Add(detectedError);
                                            }
                                        }
                                    }

                                    // Second, populate the list of the details of errors
                                    string snapshotSegmentErrorFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_ERROR_FILE_NAME, snapshotSegmentToken["id"]));
                                    JArray snapshotSegmentErrorDetail = FileIOHelper.loadJArrayFromFile(snapshotSegmentErrorFilePath);
                                    if (snapshotSegmentErrorDetail != null)
                                    {
                                        detectedErrorsListInThisSegment = new List<DetectedError>(snapshotSegmentErrorDetail.Count);

                                        foreach (JToken errorToken in snapshotSegmentErrorDetail)
                                        {
                                            DetectedError detectedError = new DetectedError();

                                            detectedError.Controller = segment.Controller;
                                            detectedError.ApplicationName = segment.ApplicationName;
                                            detectedError.ApplicationID = segment.ApplicationID;
                                            detectedError.TierID = segment.TierID;
                                            detectedError.TierName = segment.TierName;
                                            detectedError.BTID = segment.BTID;
                                            detectedError.BTName = segment.BTName;
                                            detectedError.NodeID = segment.NodeID;
                                            detectedError.NodeName = segment.NodeName;

                                            detectedError.RequestID = segment.RequestID;
                                            detectedError.SegmentID = segment.SegmentID;

                                            detectedError.ErrorID = -1;
                                            detectedError.ErrorName = "?";
                                            detectedError.ErrorType = "?";

                                            detectedError.ErrorMessage = errorToken["name"].ToString();
                                            detectedError.ErrorDetail = errorToken["value"].ToString().Replace("AD_STACK_TRACE:", "\n").Replace("__AD_CMSG__", "\n");

                                            detectedErrorsListInThisSegment.Add(detectedError);
                                        }
                                    }

                                    // Now reconcile them both
                                    #region Explanation of all of this nonsense to parse the errors

                                    // The IDs of the errors give us what errors Occurred
                                    // But the segment JSON does not include all the errors
                                    // The JSON in segment error detailsdoesn't include error number
                                    // However, we get multipe error instances for each of the errors
                                    // Here we have to do some serious gymnastics to match the detected error with what is in JSON
                                    // 
                                    // Segment may say:
                                    //"errorIDs" : [ 4532 ],
                                    //"errorDetails" : [ {
                                    //  "id" : 0,
                                    //  "version" : 0,
                                    //  "name" : "Internal Server Error : 500",
                                    //  "value" : "HTTP error code : 500"
                                    //}
                                    // Error detail says:
                                    //{
                                    //  "id" : 286452959,
                                    //  "version" : 0,
                                    //  "name" : "Internal Server Error : 500",
                                    //  "value" : "HTTP error code : 500"
                                    //}
                                    // -------------------------------
                                    // Sometimes segment has no details:
                                    //"errorIDs" : [ 66976 ],
                                    //"errorDetails" : [ ],
                                    // Where:
                                    // 66976        TRBException : COMException
                                    // But the details are there:
                                    //[ {
                                    //  "id" : 171771942,
                                    //  "version" : 0,
                                    //  "name" : "Corillian.Voyager.ExecutionServices.Client.TRBException:Corillian.Voyager.ExecutionServices.Client.TRBException",
                                    //  "value" : "Unknown Voyager Connectivity Error: C0000FA5__AD_CMSG__System.Runtime.InteropServices.COMException (0xC0000FA5): Execute: Session doesn't exist or has timed out in TP TP41-SVAKSA69901MXK\r\n   at Corillian.Platform.Router.VoyagerLoadBalancer.Execute(String sKey, String sRequest, String& sResponse)\r\n   at Corillian.Voyager.VoyagerInterface.Client.VlbConnector.Execute(String voyagerCommandString, String sessionId, String userId, String FI)AD_STACK_TRACE:Corillian.Voyager.ExecutionServices.Client.TRBException: at Corillian.Voyager.VoyagerInterface.Client.VlbConnector.Void HandleCOMException(System.Runtime.InteropServices.COMException)() at Corillian.Voyager.VoyagerInterface.Client.VlbConnector.System.String Execute(System.String, System.String, System.String, System.String)() at Corillian.Voyager.ExecutionServices.Client.VoyagerService.System.String Execute(Corillian.Voyager.Common.IRequest, System.String, System.String, System.String)() at Corillian.Voyager.ExecutionServices.Client.VoyagerService.System.String Execute(Corillian.Voyager.Common.IRequest)() at USB.Banking.Operations.BankingServiceProxy.USB.Banking.Messages.USBGetAccountsResponse GetAccounts(USB.Banking.Messages.USBGetAccountsRequest)() at Corillian.AppsUI.Web.Models.Accounts.AccountServiceProxy.USB.Banking.Messages.USBGetAccountsResponse Corillian.AppsUI.Web.Models.Accounts.IAccountServiceProxy.GetAllAccounts(Boolean, Boolean, Boolean, Boolean)() at Corillian.AppsUI.Web.Models.Accounts.AccountServiceProxy.USB.Banking.Messages.USBGetAccountsResponse Corillian.AppsUI.Web.Models.Accounts.IAccountServiceProxy.GetAllAccounts(Boolean)() at Castle.Proxies.Invocations.IAccountServiceProxy_GetAllAccounts.Void InvokeMethodOnTarget()() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at USB.DigitalChannel.DigitalUI.Helpers.Logging.LoggingInterceptor.Void Intercept(Castle.DynamicProxy.IInvocation)() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at Castle.Proxies.IAccountServiceProxyProxy.USB.Banking.Messages.USBGetAccountsResponse GetAllAccounts(Boolean)() at Corillian.AppsUI.Web.Models.PaymentCentral.PaymentCentralService.Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesResponseContainer GetAccountBalances(Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesRequest)() at Corillian.AppsUI.Web.Models.PaymentCentral.PaymentCentralService.Corillian.AppsUI.Web.Models.PaymentCentral.UserAndAccountsResponse GetUserAndAccounts(Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesRequest)() at Castle.Proxies.Invocations.IPaymentCentralService_GetUserAndAccounts.Void InvokeMethodOnTarget()() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at USB.DigitalChannel.DigitalUI.Helpers.Logging.LoggingInterceptor.Void Intercept(Castle.DynamicProxy.IInvocation)() at Castle.DynamicProxy.AbstractInvocation.Void Proceed()() at Castle.Proxies.IPaymentCentralServiceProxy.Corillian.AppsUI.Web.Models.PaymentCentral.UserAndAccountsResponse GetUserAndAccounts(Corillian.AppsUI.Web.Models.PaymentCentral.AccountBalancesRequest)() at Corillian.AppsUI.Web.AsyncGetUserAndAccounts.System.String GetUserAndAccounts()() at Corillian.AppsUI.Web.AsyncGetUserAndAccounts.System.String get_TaskResult()() at USB.DigitalChannel.CommonUI.Controllers.BaseController.Void GetAsyncData(USB.DigitalChannel.CommonUI.Models.shared.BaseModel)() at Corillian.AppsUI.Web.Controllers.BaseDashboardController.Void GetWebAsyncData(Corillian.AppsUI.Web.Models.Shared.DashboardBaseModel)() at Corillian.AppsUI.Web.Controllers.CustomerDashboardController.System.Web.Mvc.ActionResult Index()() at .System.Object lambda_method(System.Runtime.CompilerServices.ExecutionScope, System.Web.Mvc.ControllerBase, System.Object[])() at System.Web.Mvc.ReflectedActionDescriptor.System.Object Execute(System.Web.Mvc.ControllerContext, System.Collections.Generic.IDictionary`2[System.String,System.Object])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionResult InvokeActionMethod(System.Web.Mvc.ControllerContext, System.Web.Mvc.ActionDescriptor, System.Collections.Generic.IDictionary`2[System.String,System.Object])() at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClassd.System.Web.Mvc.ActionExecutedContext <InvokeActionMethodWithFilters>b__a()() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodFilter(System.Web.Mvc.IActionFilter, System.Web.Mvc.ActionExecutingContext, System.Func`1[System.Web.Mvc.ActionExecutedContext])() at System.Web.Mvc.ControllerActionInvoker.System.Web.Mvc.ActionExecutedContext InvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext, System.Collections.Generic.IList`1[System.Web.Mvc.IActionFilter], System.Web.Mvc.ActionDescriptor, System.Collections.Generic.IDictionary`2[System.String,System.Object])() at System.Web.Mvc.ControllerActionInvoker.Boolean InvokeAction(System.Web.Mvc.ControllerContext, System.String)() at System.Web.Mvc.Controller.Void ExecuteCore()() at System.Web.Mvc.ControllerBase.Execute() at System.Web.Mvc.MvcHandler+<>c__DisplayClass8.<BeginProcessRequest>b__4() at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass1.<MakeVoidDelegate>b__0() at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1.<BeginSynchronous>b__7() at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1.End() at System.Web.Mvc.Async.AsyncResultWrapper.End() at System.Web.Mvc.Async.AsyncResultWrapper.End() at Microsoft.Web.Mvc.MvcDynamicSessionHandler.EndProcessRequest() at System.Web.HttpApplication+CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() at System.Web.HttpApplication.ExecuteStep() at System.Web.HttpApplication+PipelineStepManager.ResumeSteps() at System.Web.HttpApplication.BeginProcessRequestNotification() at System.Web.HttpRuntime.ProcessRequestNotificationPrivate() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotification() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper() at System.Web.Hosting.PipelineRuntime.ProcessRequestNotification() Caused by: Corillian.Voyager.ExecutionServices.Client.TRBException  at Corillian.Platform.Router.VoyagerLoadBalancer.Void Execute(System.String, System.String, System.String ByRef)()  ... 17 more "
                                    //} ]
                                    // -------------------------------
                                    // Sometimes segment says:
                                    //"errorIDs" : [ 131789, 3002 ],
                                    //"errorDetails" : [ {
                                    //  "id" : 0,
                                    //  "version" : 0,
                                    //  "name" : "1. USB.OLBService.Handlers.TransactionUtilities",
                                    //  "value" : "USB.OLBService.Handlers.TransactionUtilities : Error occurred in MapHostTransactions: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at USB.OLBService.Handlers.TransactionUtilities.MapCheckCardHostResponseTransactions(GetOutStandingAuthRequest requestFromUI, List`1 transactions, USBAccount actualAcct)"
                                    //} ],
                                    // Where:
                                    // 131789   MessageQueueException
                                    // 3002     .NET Logger Error Messages
                                    // But the list of errors looks like that:
                                    //[ {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetTransactionTypes.Execute() at USB.OLBService.Handlers.TransactionUtilities.MapHostResponseTransactions() at USB.OLBService.Handlers.TransactionUtilities.GetMonitoryListExecutor() at USB.OLBService.Handlers.TransactionUtilities.GetHostHistory() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetTransactionTypes.Execute() at USB.OLBService.Handlers.TransactionUtilities.MapCheckCardHostResponseTransactions() at USB.OLBService.Handlers.TransactionUtilities.GetCheckCardAuthorizationsFromHost() at USB.OLBService.Handlers.GetPagedTransactionsV2.GetDebitCardAuthorizationTransactions() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetPagedTransactionsV2.GetDebitCardAuthorizationTransactions() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.OLBService.Handlers.Utilities.Audit() at USB.OLBService.Handlers.GetPagedTransactionsV2.Execute() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "System.Messaging.MessageQueueException",
                                    //  "value" : "Insufficient resources to perform operation.AD_STACK_TRACE:System.Messaging.MessageQueueException: at System.Messaging.MessageQueue.SendInternal() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Messaging.Sender.Send() at Corillian.Platform.Audit.AuditTrxSender.Audit() at USB.DigitalServices.Audit.MessageReceiver.Process() at USB.DigitalServices.HandlerCore.ContextSafeHandler`1.Audit() at USB.DCISService.Accounts.V1.Handlers.GetAccountTransactionsV4.Execute() at Fiserv.AppService.Core.HandlerBase`1.Execute() at Fiserv.AppService.Core.ServiceProcessor.Process() at USB.DCIS.Server.DCISServiceServer.Execute() at .SyncInvokeExecute() at System.ServiceModel.Dispatcher.SyncMethodInvoker.Invoke() at System.ServiceModel.Dispatcher.DispatchOperationRuntime.InvokeBegin() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage5() at System.ServiceModel.Dispatcher.ImmutableDispatchRuntime.ProcessMessage4() at System.ServiceModel.Dispatcher.MessageRpc.Process() at System.ServiceModel.Dispatcher.ChannelHandler.DispatchAndReleasePump() at System.ServiceModel.Dispatcher.ChannelHandler.HandleRequest() at System.ServiceModel.Dispatcher.ChannelHandler.AsyncMessagePump() at System.ServiceModel.Diagnostics.Utility+AsyncThunk.UnhandledExceptionFrame() at System.ServiceModel.AsyncResult.Complete() at System.ServiceModel.Channels.InputQueue`1+AsyncQueueReader.Set() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueue`1.EnqueueAndDispatch() at System.ServiceModel.Channels.InputQueueChannel`1.EnqueueAndDispatch() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.SingletonChannelAcceptor`3.Enqueue() at System.ServiceModel.Channels.HttpChannelListener.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpTransportManager.HttpContextReceived() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.BeginRequest() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequest() at System.ServiceModel.PartialTrustHelpers.PartialTrustInvoke() at System.ServiceModel.Activation.HostedHttpRequestAsyncResult.OnBeginRequestWithFlow() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke2() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+WorkItem.Invoke() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.ProcessCallbacks() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper.CompletionCallback() at System.ServiceModel.Channels.IOThreadScheduler+CriticalHelper+ScheduledOverlapped.IOCallback() at System.ServiceModel.Diagnostics.Utility+IOCompletionThunk.UnhandledExceptionFrame() at System.Threading._IOCompletionCallback.PerformIOCompletionCallback() "
                                    //}, {
                                    //  "id" : 171889775,
                                    //  "version" : 0,
                                    //  "name" : "1. USB.OLBService.Handlers.TransactionUtilities",
                                    //  "value" : "USB.OLBService.Handlers.TransactionUtilities : Error occurred in MapHostTransactions: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at USB.OLBService.Handlers.TransactionUtilities.MapCheckCardHostResponseTransactions(GetOutStandingAuthRequest requestFromUI, List`1 transactions, USBAccount actualAcct)"
                                    //} ]

                                    #endregion

                                    foreach (DetectedError detectedError in detectedErrorsListInThisSegment)
                                    {
                                        // Try by exact message match
                                        DetectedError detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName == detectedError.ErrorMessage).FirstOrDefault();

                                        // Try starting with the message
                                        if (detectedErrorWithErrorID == null)
                                        {
                                            detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName.StartsWith(detectedError.ErrorMessage)).FirstOrDefault();
                                        }

                                        // Try containing the message
                                        if (detectedErrorWithErrorID == null)
                                        {
                                            detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName.Contains(detectedError.ErrorMessage)).FirstOrDefault();
                                        }

                                        // Try by partial name match second
                                        if (detectedErrorWithErrorID == null)
                                        {
                                            // Split by . and :
                                            // java.io.IOException 
                                            //      -> java, io, IOException
                                            //      Detected as IOException
                                            // Corillian.Voyager.ExecutionServices.Client.TRBException:Corillian.Voyager.ExecutionServices.Client.TRBException
                                            //      -> Corillian, Voyager, ExecutionServices, Client, TRBException, Corillian, Voyager, ExecutionServices, Client, TRBException
                                            //      Detected as TRBException
                                            string[] errorMessageTokens = detectedError.ErrorMessage.Split('.', ':');

                                            // Go backwards because exception type is at the end
                                            for (int i = errorMessageTokens.Length - 1; i >= 0; i--)
                                            {
                                                detectedErrorWithErrorID = detectedErrorsFromErrorIDs.Where(e => e.ErrorName.Contains(errorMessageTokens[i])).FirstOrDefault();
                                                if (detectedErrorWithErrorID != null)
                                                {
                                                    break;
                                                }
                                            }
                                        }

                                        // Did we find it?
                                        if (detectedErrorWithErrorID != null)
                                        {
                                            // Yay, we did, mark this error by ID off as matched and copy the values to the final 
                                            detectedErrorWithErrorID.ErrorIDMatchedToMessage = true;

                                            detectedError.ErrorID = detectedErrorWithErrorID.ErrorID;
                                            detectedError.ErrorName = detectedErrorWithErrorID.ErrorName;
                                            detectedError.ErrorType = detectedErrorWithErrorID.ErrorType;

                                            #region Fill in the deeplinks for the Error

                                            detectedError.ControllerLink = segment.Controller;
                                            detectedError.ApplicationLink = segment.ApplicationLink;
                                            detectedError.TierLink = segment.TierLink;
                                            detectedError.NodeLink = segment.NodeLink;
                                            detectedError.BTLink = segment.BTLink;
                                            detectedError.ErrorLink = String.Format(DEEPLINK_ERROR, detectedError.Controller, detectedError.ApplicationID, detectedError.ErrorID, DEEPLINK_THIS_TIMERANGE);

                                            #endregion

                                        }
                                    }

                                    // At this point, we matched what we could.
                                    // A little cleanup - what if we have 1 by error ID and 1 message without Error ID left? If yes, those obviously match
                                    List<DetectedError> detectedErrorsFromErrorIDsUnmatched = detectedErrorsFromErrorIDs.Where(e => e.ErrorIDMatchedToMessage == false).ToList();
                                    List<DetectedError> detectedErrorsListInThisSegmentUnmatched = detectedErrorsListInThisSegment.Where(e => e.ErrorID == -1).ToList();
                                    if (detectedErrorsFromErrorIDsUnmatched.Count == 1 && detectedErrorsListInThisSegmentUnmatched.Count == 1)
                                    {
                                        DetectedError detectedError = detectedErrorsListInThisSegmentUnmatched[0];
                                        DetectedError detectedErrorWithErrorID = detectedErrorsFromErrorIDsUnmatched[0];
                                        detectedErrorWithErrorID.ErrorIDMatchedToMessage = true;

                                        detectedError.ErrorID = detectedErrorWithErrorID.ErrorID;
                                        detectedError.ErrorName = detectedErrorWithErrorID.ErrorName;
                                        detectedError.ErrorType = detectedErrorWithErrorID.ErrorType;

                                        #region Fill in the deeplinks for the Error

                                        detectedError.ControllerLink = segment.Controller;
                                        detectedError.ApplicationLink = segment.ApplicationLink;
                                        detectedError.TierLink = segment.TierLink;
                                        detectedError.NodeLink = segment.NodeLink;
                                        detectedError.BTLink = segment.BTLink;
                                        detectedError.ErrorLink = String.Format(DEEPLINK_ERROR, detectedError.Controller, detectedError.ApplicationID, detectedError.ErrorID, DEEPLINK_THIS_TIMERANGE);

                                        #endregion
                                    }
                                    else if (detectedErrorsFromErrorIDsUnmatched.Count > 1)
                                    {
                                        // Don't know how to match those. Let's just append them to the list
                                        detectedErrorsListInThisSegment.AddRange(detectedErrorsFromErrorIDsUnmatched);
                                    }
                                }

                                #endregion

                                #region Process Data Collectors in Segment

                                List<BusinessData> businessDataListInThisSegment = new List<BusinessData>();

                                // Transaction properties
                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["transactionProperties"])
                                {
                                    BusinessData businessData = new BusinessData();

                                    businessData.Controller = segment.Controller;
                                    businessData.ApplicationName = segment.ApplicationName;
                                    businessData.ApplicationID = segment.ApplicationID;
                                    businessData.TierID = segment.TierID;
                                    businessData.TierName = segment.TierName;
                                    businessData.BTID = segment.BTID;
                                    businessData.BTName = segment.BTName;
                                    businessData.NodeID = segment.NodeID;
                                    businessData.NodeName = segment.NodeName;

                                    businessData.RequestID = segment.RequestID;
                                    businessData.SegmentID = segment.SegmentID;

                                    businessData.DataType = "Transaction";

                                    businessData.DataName = transactionPropertyToken["name"].ToString();
                                    businessData.DataValue = transactionPropertyToken["value"].ToString();

                                    #region Fill in the deeplinks for the Business Data

                                    businessData.ControllerLink = segment.Controller;
                                    businessData.ApplicationLink = segment.ApplicationLink;
                                    businessData.TierLink = segment.TierLink;
                                    businessData.NodeLink = segment.NodeLink;
                                    businessData.BTLink = segment.BTLink;

                                    #endregion

                                    businessDataListInThisSegment.Add(businessData);
                                }

                                // HTTP data collectors
                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["httpParameters"])
                                {
                                    BusinessData businessData = new BusinessData();

                                    businessData.Controller = segment.Controller;
                                    businessData.ApplicationName = segment.ApplicationName;
                                    businessData.ApplicationID = segment.ApplicationID;
                                    businessData.TierID = segment.TierID;
                                    businessData.TierName = segment.TierName;
                                    businessData.BTID = segment.BTID;
                                    businessData.BTName = segment.BTName;
                                    businessData.NodeID = segment.NodeID;
                                    businessData.NodeName = segment.NodeName;

                                    businessData.RequestID = segment.RequestID;
                                    businessData.SegmentID = segment.SegmentID;

                                    businessData.DataType = "HTTP";

                                    businessData.DataName = transactionPropertyToken["name"].ToString();
                                    businessData.DataValue = transactionPropertyToken["value"].ToString();

                                    #region Fill in the deeplinks for the Business Data

                                    businessData.ControllerLink = segment.Controller;
                                    businessData.ApplicationLink = segment.ApplicationLink;
                                    businessData.TierLink = segment.TierLink;
                                    businessData.NodeLink = segment.NodeLink;
                                    businessData.BTLink = segment.BTLink;

                                    #endregion

                                    businessDataListInThisSegment.Add(businessData);
                                }

                                // MIDCs 
                                foreach (JToken transactionPropertyToken in snapshotSegmentDetail["businessData"])
                                {
                                    BusinessData businessData = new BusinessData();

                                    businessData.Controller = segment.Controller;
                                    businessData.ApplicationName = segment.ApplicationName;
                                    businessData.ApplicationID = segment.ApplicationID;
                                    businessData.TierID = segment.TierID;
                                    businessData.TierName = segment.TierName;
                                    businessData.BTID = segment.BTID;
                                    businessData.BTName = segment.BTName;
                                    businessData.NodeID = segment.NodeID;
                                    businessData.NodeName = segment.NodeName;

                                    businessData.RequestID = segment.RequestID;
                                    businessData.SegmentID = segment.SegmentID;

                                    businessData.DataName = transactionPropertyToken["name"].ToString();
                                    businessData.DataValue = transactionPropertyToken["value"].ToString().Trim('[', ']');

                                    if (businessData.DataName.StartsWith("Exit ") == true)
                                    {
                                        // Exits from the call graphs
                                        businessData.DataType = "Exit";
                                    }
                                    else
                                    {
                                        // Most likely MIDC although not always
                                        businessData.DataType = "Code";
                                    }

                                    #region Fill in the deeplinks for the Business Data

                                    businessData.ControllerLink = segment.Controller;
                                    businessData.ApplicationLink = segment.ApplicationLink;
                                    businessData.TierLink = segment.TierLink;
                                    businessData.NodeLink = segment.NodeLink;
                                    businessData.BTLink = segment.BTLink;

                                    #endregion

                                    businessDataListInThisSegment.Add(businessData);
                                }

                                #endregion

                                #region Process Call Graphs in Segment

                                string snapshotSegmentCallGraphFilePath = Path.Combine(snapshotFolderPath, String.Format(EXTRACT_SNAPSHOT_SEGMENT_CALLGRAPH_FILE_NAME, snapshotSegmentToken["id"]));
                                JArray snapshotSegmentCallGraphs = FileIOHelper.loadJArrayFromFile(snapshotSegmentCallGraphFilePath);

                                // Can't use recursion for some of the snapshots because of StackOverflowException
                                // We run out of stack when we go 400+ deep into call stack, which apparently happens
                                //List<MethodCallLine> methodCallLinesInSegmentList = new List<MethodCallLine>(250);
                                //if (snapshotSegmentCallGraphs != null && snapshotSegmentCallGraphs.HasValues == true)
                                //{
                                //    int methodLineCallSequenceNumber = 0;
                                //    // Make a copy of this list because we are going to slowly strip it down and we don't want the parent list modified
                                //    List<ExitCall> exitCallsListInThisSegmentCopy = new List<ExitCall>(exitCallsListInThisSegment.Count);
                                //    exitCallsListInThisSegmentCopy.AddRange(exitCallsListInThisSegment);
                                //    convertCallGraphChildren_Recursion(snapshotSegmentCallGraphs[0], 0, ref methodLineCallSequenceNumber, methodCallLinesInSegmentList, serviceEndpointCallsListInThisSegment, exitCallsListInThisSegmentCopy);
                                //}

                                // Instead, let's unwrap it using stack-based algorithm

                                // Make a copy of this list because we are going to slowly strip it down and we don't want the parent list modified
                                List<MethodCallLine> methodCallLinesInSegmentList = new List<MethodCallLine>();
                                if (snapshotSegmentCallGraphs != null && snapshotSegmentCallGraphs.HasValues == true)
                                {
                                    List<ExitCall> exitCallsListInThisSegmentCopy = new List<ExitCall>(exitCallsListInThisSegment.Count);
                                    exitCallsListInThisSegmentCopy.AddRange(exitCallsListInThisSegment);

                                    // For vast majority of snapshots, there is only one element off the root that is an entry
                                    // However, for process snapshots (Node.JS tiers), there can be multiple of those
                                    methodCallLinesInSegmentList = convertCallGraphChildren_Stack(snapshotSegmentCallGraphs[0], serviceEndpointCallsListInThisSegment, exitCallsListInThisSegmentCopy);
                                }
                                if (methodCallLinesInSegmentList == null)
                                {
                                    methodCallLinesInSegmentList = new List<MethodCallLine>(0);
                                }

                                // Fill in common values and look up framework
                                long execTimeTotal = 0;
                                foreach (MethodCallLine methodCallLine in methodCallLinesInSegmentList)
                                {
                                    methodCallLine.Controller = snapshot.Controller;
                                    methodCallLine.ApplicationName = snapshot.ApplicationName;
                                    methodCallLine.ApplicationID = snapshot.ApplicationID;
                                    methodCallLine.TierID = (long)snapshotSegmentToken["applicationComponentId"];
                                    methodCallLine.TierName = snapshotSegmentToken["applicationComponentName"].ToString();
                                    methodCallLine.BTID = snapshot.BTID;
                                    methodCallLine.BTName = snapshot.BTName;
                                    methodCallLine.NodeID = (long)snapshotSegmentToken["applicationComponentNodeId"];
                                    methodCallLine.NodeName = snapshotSegmentToken["applicationComponentNodeName"].ToString();

                                    methodCallLine.RequestID = snapshotSegmentToken["requestGUID"].ToString();
                                    methodCallLine.SegmentID = (long)snapshotSegmentToken["id"];

                                    methodCallLine.Framework = String.Empty;
                                    // Index Method->Framework type
                                    if (methodCallLine.Class.Length > 0)
                                    {
                                        // Find mapping
                                        string keyLetterOfMappingList = methodCallLine.Class.Substring(0, 1).ToLower();
                                        if (methodCallLineClassToFrameworkTypeMappingDictionary.ContainsKey(keyLetterOfMappingList) == true)
                                        {
                                            List<MethodCallLineClassTypeMapping> methodCallLineClassToFrameworkTypeMappingList = methodCallLineClassToFrameworkTypeMappingDictionary[keyLetterOfMappingList];
                                            foreach (MethodCallLineClassTypeMapping mapping in methodCallLineClassToFrameworkTypeMappingList)
                                            {
                                                if (methodCallLine.Class.StartsWith(mapping.ClassPrefix, StringComparison.Ordinal) == true)
                                                {
                                                    methodCallLine.Framework = String.Format("{0} ({1})", mapping.ClassPrefix, mapping.FrameworkType);
                                                    break;
                                                }
                                            }
                                        }

                                        // If we haven't found framework, get it out of the class name
                                        if (methodCallLine.Framework.Length == 0)
                                        {
                                            // Grab just the namespace of the class
                                            int indexOfPeriodBeforeClassName = methodCallLine.Class.LastIndexOf('.');
                                            if (indexOfPeriodBeforeClassName > 0)
                                            {
                                                methodCallLine.Framework = methodCallLine.Class.Substring(0, indexOfPeriodBeforeClassName);
                                            }
                                            else
                                            {
                                                methodCallLine.Framework = methodCallLine.Class;
                                            }
                                        }
                                    }

                                    // Calculate the duration range
                                    methodCallLine.ExecRange = getDurationRangeAsString(methodCallLine.Exec);

                                    // Calculate elapsed time
                                    methodCallLine.ExecToHere = execTimeTotal;
                                    execTimeTotal = execTimeTotal + methodCallLine.Exec;
                                }

                                // Fill in data collectors
                                // Choose only the MIDC data collectors
                                List<BusinessData> businessDataCodeListInThisSegment = businessDataListInThisSegment.Where(b => b.DataType == "Code").ToList();
                                // Only fill in MIDCs if there are rules in places and values
                                if (businessDataCodeListInThisSegment.Count > 0 && methodInvocationDataCollectorsList != null && methodInvocationDataCollectorsList.Count > 0)
                                {
                                    var midcSettingGroups = methodInvocationDataCollectorsList.GroupBy(m => new { m.MatchClass, m.MatchMethod });

                                    foreach (var midcSettingGroup in midcSettingGroups)
                                    {
                                        List<MethodInvocationDataCollector> methodInvocationDataCollectors = midcSettingGroup.ToList();
                                        MethodInvocationDataCollector methodInvocationDataCollector = methodInvocationDataCollectors[0];
                                        // Find the methods matching this data collector setting
                                        List<MethodCallLine> methodCallLinesMatchingMIDC = methodCallLinesInSegmentList.Where(m => m.Class == methodInvocationDataCollector.MatchClass && m.Method == methodInvocationDataCollector.MatchMethod).ToList();
                                        if (methodCallLinesMatchingMIDC.Count > 0)
                                        {
                                            // Found some lines, let's enumerate data collectors that were actually collected and match them
                                            List<string> businessDataReferenceList = new List<string>(methodInvocationDataCollectors.Count);
                                            foreach (BusinessData businessData in businessDataCodeListInThisSegment)
                                            {
                                                if (methodInvocationDataCollectors.Count(m => m.DataGathererName == businessData.DataName) > 0)
                                                {
                                                    businessDataReferenceList.Add(String.Format("{0}={1} ({2})", businessData.DataName, businessData.DataValue, methodInvocationDataCollector.CollectorName));
                                                }
                                            }

                                            // Now that we have the list of those data collectors, put them into the method line
                                            foreach (MethodCallLine methodCallLine in methodCallLinesMatchingMIDC)
                                            {
                                                methodCallLine.NumMIDCs = businessDataReferenceList.Count;

                                                if (methodCallLine.NumMIDCs == 1)
                                                {
                                                    methodCallLine.MIDCs = businessDataReferenceList[0];
                                                }
                                                else
                                                {
                                                    if (businessDataReferenceList.Count > 0)
                                                    {
                                                        StringBuilder sb = new StringBuilder(64 * methodCallLine.NumMIDCs);
                                                        foreach (string businessDataReference in businessDataReferenceList)
                                                        {
                                                            sb.AppendFormat("{0};\n", businessDataReference);
                                                        }
                                                        sb.Remove(sb.Length - 1, 1);
                                                        methodCallLine.MIDCs = sb.ToString();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                // Process all method call lines to generate Occurrences list, finding and counting all the unique values
                                Dictionary<string, MethodCallLine> methodCallLinesOccurrencesInSegmentDictionary = new Dictionary<string, MethodCallLine>(methodCallLinesInSegmentList.Count);
                                foreach (MethodCallLine methodCallLine in methodCallLinesInSegmentList)
                                {
                                    if (methodCallLinesOccurrencesInSegmentDictionary.ContainsKey(methodCallLine.FullName) == false)
                                    {
                                        // Add new
                                        MethodCallLine methodCallLineOccurrence = methodCallLine.Clone();
                                        methodCallLineOccurrence.NumCalls = 1;
                                        methodCallLinesOccurrencesInSegmentDictionary.Add(methodCallLine.FullName, methodCallLineOccurrence);
                                    }
                                    else
                                    {
                                        // Adjust existing
                                        MethodCallLine methodCallLineOccurrence = methodCallLinesOccurrencesInSegmentDictionary[methodCallLine.FullName];

                                        methodCallLineOccurrence.NumCalls++;

                                        methodCallLineOccurrence.Exec = methodCallLineOccurrence.Exec + methodCallLine.Exec;
                                        methodCallLineOccurrence.Wait = methodCallLineOccurrence.Wait + methodCallLine.Wait;
                                        methodCallLineOccurrence.Block = methodCallLineOccurrence.Block + methodCallLine.Block;
                                        methodCallLineOccurrence.CPU = methodCallLineOccurrence.CPU + methodCallLine.CPU;

                                        methodCallLineOccurrence.NumExits = methodCallLineOccurrence.NumExits + methodCallLine.NumExits;
                                        methodCallLineOccurrence.NumSEPs = methodCallLineOccurrence.NumSEPs + methodCallLine.NumSEPs;
                                        methodCallLineOccurrence.NumMIDCs = methodCallLineOccurrence.NumMIDCs + methodCallLine.NumMIDCs;
                                        methodCallLineOccurrence.NumChildren = methodCallLineOccurrence.NumChildren + methodCallLine.NumChildren;
                                    }
                                }
                                List<MethodCallLine> methodCallLinesOccurrencesInSegmentList = new List<MethodCallLine>(methodCallLinesOccurrencesInSegmentDictionary.Count);
                                methodCallLinesOccurrencesInSegmentList = methodCallLinesOccurrencesInSegmentDictionary.Values.ToList();
                                methodCallLinesOccurrencesInSegmentList = methodCallLinesOccurrencesInSegmentList.OrderBy(m => m.FullName).ToList();
                                foreach (MethodCallLine methodCallLine in methodCallLinesOccurrencesInSegmentList)
                                {
                                    methodCallLine.ExecRange = getDurationRangeAsString(methodCallLine.Exec);
                                }

                                #endregion

                                #region Update call chains and call types from exits into segment

                                SortedDictionary<string, int> exitTypesSegment = new SortedDictionary<string, int>();

                                StringBuilder sbCallChainsSegment = new StringBuilder(128 * callChainsSegment.Count);
                                foreach (var callChain in callChainsSegment)
                                {
                                    sbCallChainsSegment.AppendFormat("{0}\n", callChain.Value);
                                    if (exitTypesSegment.ContainsKey(callChain.Value.ExitType) == false)
                                    {
                                        exitTypesSegment.Add(callChain.Value.ExitType, 0);
                                    }
                                    exitTypesSegment[callChain.Value.ExitType] = exitTypesSegment[callChain.Value.ExitType] + callChain.Value.CallTimings.Count;
                                }
                                if (sbCallChainsSegment.Length > 1) { sbCallChainsSegment.Remove(sbCallChainsSegment.Length - 1, 1); }
                                segment.CallChains = sbCallChainsSegment.ToString();

                                StringBuilder sbExitTypesSegment = new StringBuilder(10 * exitTypesSegment.Count);
                                foreach (var exitType in exitTypesSegment)
                                {
                                    sbExitTypesSegment.AppendFormat("{0}={1}\n", exitType.Key, exitType.Value);
                                }

                                if (sbExitTypesSegment.Length > 1) { sbExitTypesSegment.Remove(sbExitTypesSegment.Length - 1, 1); }
                                segment.ExitTypes = sbExitTypesSegment.ToString();

                                #endregion

                                #region Update counts of calls and types of destinations for Segment

                                segment.NumCallsToTiers = exitCallsListInThisSegment.Where(e => e.ToEntityType == "Tier").Sum(e => e.NumCalls);
                                segment.NumCallsToBackends = exitCallsListInThisSegment.Where(e => e.ToEntityType == "Backend").Sum(e => e.NumCalls);
                                segment.NumCallsToApplications = exitCallsListInThisSegment.Where(e => e.ToEntityType == "Application").Sum(e => e.NumCalls);

                                segment.NumCalledTiers = exitCallsListInThisSegment.Where(e => e.ToEntityType == "Tier").GroupBy(e => e.ToEntityName).Count();
                                segment.NumCalledBackends = exitCallsListInThisSegment.Where(e => e.ToEntityType == "Backend").GroupBy(e => e.ToEntityName).Count();
                                segment.NumCalledApplications = exitCallsListInThisSegment.Where(e => e.ToEntityType == "Application").GroupBy(e => e.ToEntityName).Count();

                                segment.NumSEPs = serviceEndpointCallsListInThisSegment.Count();

                                segment.NumHTTPDCs = businessDataListInThisSegment.Where(d => d.DataType == "HTTP").Count();
                                segment.NumMIDCs = businessDataListInThisSegment.Where(d => d.DataType == "Code").Count();

                                #endregion

                                // Add the created entities
                                segmentsList.Add(segment);
                                exitCallsList.AddRange(exitCallsListInThisSegment);
                                serviceEndpointCallsList.AddRange(serviceEndpointCallsListInThisSegment);
                                detectedErrorsList.AddRange(detectedErrorsListInThisSegment);
                                businessDataList.AddRange(businessDataListInThisSegment);
                                methodCallLinesList.AddRange(methodCallLinesInSegmentList);
                                methodCallLinesOccurrencesList.AddRange(methodCallLinesOccurrencesInSegmentList);
                            }
                        }

                        // Sort things prettily
                        segmentsList = segmentsList.OrderByDescending(s => s.IsFirstInChain).ThenBy(s => s.Occurred).ThenBy(s => s.UserExperience).ToList();
                        exitCallsList = exitCallsList.OrderBy(c => c.RequestID).ThenBy(c => c.SegmentID).ThenBy(c => c.ExitType).ToList();
                        serviceEndpointCallsList = serviceEndpointCallsList.OrderBy(s => s.RequestID).ThenBy(s => s.SegmentID).ThenBy(s => s.SEPName).ToList();
                        detectedErrorsList = detectedErrorsList.OrderBy(e => e.RequestID).ThenBy(e => e.SegmentID).ThenBy(e => e.ErrorName).ToList();
                        businessDataList = businessDataList.OrderBy(b => b.DataType).ThenBy(b => b.DataName).ToList();

                        #region Calculate End to End Duration time

                        if (segmentsList.Count == 0)
                        {
                            snapshot.DurationEndToEnd = snapshot.Duration;
                        }
                        else if (segmentsList.Count == 1)
                        {
                            snapshot.DurationEndToEnd = segmentsList[0].Duration;
                        }
                        else
                        {
                            Segment segmentFirst = segmentsList[0];
                            Segment segmentLast = segmentsList[segmentsList.Count - 1];
                            snapshot.DurationEndToEnd = Math.Abs((long)(segmentLast.Occurred - segmentFirst.Occurred).TotalMilliseconds) + segmentLast.Duration;
                            if (snapshot.DurationEndToEnd < snapshot.Duration)
                            {
                                snapshot.DurationEndToEnd = snapshot.Duration;
                            }
                        }
                        snapshot.DurationEndToEndRange = getDurationRangeAsString(snapshot.DurationEndToEnd);

                        #endregion

                        #region Build call timeline for the Segments

                        foreach (Segment segment in segmentsList)
                        {
                            // Timeline looks like that:
                            //^ ---------------^ ---1------------ ^ ------2-------- -^ ---------3---- -^ -------------4 -^
                            //-
                            //-
                            //-
                            //-
                            //^ ---------------
                            //                -
                            //                -
                            //                ^ ---------------
                            //                                 -
                            //                                 -
                            //                                 -
                            //                                 ^ ---------------
                            //                                                  -
                            //                                                  -
                            //                                                  ^ ---------------
                            //                                                                  -
                            //                                                                  ^ ---------------
                            //                                                                                   -
                            //                                                                                   -
                            //                                                                                   -
                            //                                                                                   ^
                            //                                                                                   -
                            //                                                                                   -
                            // Where: 
                            //      - each dash - character is a certain duration, resolution is determined by the overall duration of the snapshot
                            //      - space character begins is offset between the time of Segment and time of Snapshot
                            //      - exits are signified by caret mark ^ character
                            //      - numbers are either 1 second or 10 second marks, depending on resolution
                            // To calculate
                            // 1) Evaluate interval range based on overall size of snapshot
                            // 2) For each interval, put dash - characters to signify exec time
                            // 3) For each of the exit calls in MethodCallLine, replace = character with caret mark ^ character
                            // 4) Go from beginning of Snapshot time to beginning of Segment, putting space character for each interval to signify time offset

                            // Assume duration of segment to be max 2 minutes. Of course, StringBuilder will adjust if it is longer
                            StringBuilder sbTimeline = new StringBuilder(120);

                            // Determine Timeline resolution
                            int timelineResolutionInMS = 0;
                            int timelineSignificantMarksAt = 0;

                            if (snapshot.DurationEndToEnd <= 1000)
                            {
                                timelineResolutionInMS = 10;
                                timelineSignificantMarksAt = 100;
                            }
                            else if (snapshot.DurationEndToEnd <= 5000)
                            {
                                timelineResolutionInMS = 50;
                                timelineSignificantMarksAt = 20;
                            }
                            else if (snapshot.DurationEndToEnd <= 10000)
                            {
                                timelineResolutionInMS = 100;
                                timelineSignificantMarksAt = 10;
                            }
                            else if (snapshot.DurationEndToEnd <= 25000)
                            {
                                timelineResolutionInMS = 250;
                                timelineSignificantMarksAt = 40;
                            }
                            else if (snapshot.DurationEndToEnd <= 50000)
                            {
                                timelineResolutionInMS = 500;
                                timelineSignificantMarksAt = 20;
                            }
                            else
                            {
                                timelineResolutionInMS = 1000;
                                timelineSignificantMarksAt = 10;
                            }
                            segment.TimelineResolution = timelineResolutionInMS;

                            // Display this Segment's execution time as line of dashes -
                            int numIntervalsSegmentDuration = (int)Math.Round((double)(segment.Duration / timelineResolutionInMS), 0);
                            if (numIntervalsSegmentDuration == 0)
                            {
                                numIntervalsSegmentDuration = 1;
                            }
                            sbTimeline.Append(new String('-', numIntervalsSegmentDuration));

                            // Put significant area marks at 1 or 10 second intervals
                            int intervalCounter = 1;
                            for (int i = timelineSignificantMarksAt; i < sbTimeline.Length; i = i + timelineSignificantMarksAt)
                            {
                                // Calculate number of seconds
                                int secondsElapsed = (timelineResolutionInMS * timelineSignificantMarksAt) / 1000 * intervalCounter;
                                string secondsElapsedString = secondsElapsed.ToString();

                                // Insert number of seconds, aligned left
                                sbTimeline.Insert(i - 1, secondsElapsedString);

                                // Now remove the same number of characters
                                sbTimeline.Remove(i - 1 + secondsElapsedString.Length, secondsElapsedString.Length);

                                // Go to next counter
                                intervalCounter++;
                            }

                            // Represent the exits from MethodCallLines with caret ^ characters
                            List<MethodCallLine> methodCallLinesOccurrencesExits = methodCallLinesList.Where(m => m.SegmentID == segment.SegmentID && m.NumExits > 0).ToList();
                            foreach (MethodCallLine methodCallLineExit in methodCallLinesOccurrencesExits)
                            {
                                int numIntervalsOffsetFromSegmentStartToExit = (int)Math.Round((double)(methodCallLineExit.ExecToHere / timelineResolutionInMS), 0);
                                if (numIntervalsOffsetFromSegmentStartToExit > sbTimeline.Length - 1)
                                {
                                    numIntervalsOffsetFromSegmentStartToExit = sbTimeline.Length - 1;
                                }
                                sbTimeline[numIntervalsOffsetFromSegmentStartToExit] = '^';
                            }

                            // Add indent away from the beginning of Snapshot time to this Segment
                            int numIntervalsBetweenSnapshotStartandSegmentStart = (int)Math.Round((segment.Occurred - snapshot.Occurred).TotalMilliseconds / timelineResolutionInMS, 0);
                            if (numIntervalsBetweenSnapshotStartandSegmentStart > 0)
                            {
                                sbTimeline.Insert(0, new String(' ', numIntervalsBetweenSnapshotStartandSegmentStart));
                            }
                            else if (numIntervalsBetweenSnapshotStartandSegmentStart < 0)
                            {
                                // This segment happened earlier then Snapshot
                                // Happens sometimes when the clock on originating Tier is behind the clocks on the downstream tiers
                                // Indicate that this segment came from earlier using < character
                                for (int i = 0; i < Math.Abs(numIntervalsBetweenSnapshotStartandSegmentStart) - 1; i++)
                                {
                                    if (sbTimeline.Length > 0)
                                    {
                                        sbTimeline.Remove(0, 1);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (sbTimeline.Length > 0)
                                {
                                    sbTimeline[0] = '<';
                                }
                                else if (sbTimeline.Length == 0)
                                {
                                    sbTimeline.Append('-');
                                }
                            }

                            // Finally, render the timeline as a pretty string. Whew.
                            segment.Timeline = sbTimeline.ToString();
                        }

                        #endregion

                        #region Update call chains from segments into snapshot

                        SortedDictionary<string, int> exitTypesSnapshot = new SortedDictionary<string, int>();

                        StringBuilder sbCallChainsSnapshot = new StringBuilder(128 * callChainsSnapshot.Count);
                        foreach (var callChain in callChainsSnapshot)
                        {
                            sbCallChainsSnapshot.AppendFormat("{0};\n", callChain.Value);
                            if (exitTypesSnapshot.ContainsKey(callChain.Value.ExitType) == false)
                            {
                                exitTypesSnapshot.Add(callChain.Value.ExitType, 0);
                            }
                            exitTypesSnapshot[callChain.Value.ExitType] = exitTypesSnapshot[callChain.Value.ExitType] + callChain.Value.CallTimings.Count;
                        }
                        if (sbCallChainsSnapshot.Length > 1) { sbCallChainsSnapshot.Remove(sbCallChainsSnapshot.Length - 1, 1); }
                        snapshot.CallChains = sbCallChainsSnapshot.ToString();

                        StringBuilder sbExitTypesSnapshot = new StringBuilder(10 * exitTypesSnapshot.Count);
                        foreach (var exitType in exitTypesSnapshot)
                        {
                            sbExitTypesSnapshot.AppendFormat("{0}={1}\n", exitType.Key, exitType.Value);
                        }

                        if (sbExitTypesSnapshot.Length > 1) { sbExitTypesSnapshot.Remove(sbExitTypesSnapshot.Length - 1, 1); }
                        snapshot.ExitTypes = sbExitTypesSnapshot.ToString();

                        #endregion

                        #region Update various counts for Snapshot columns

                        snapshot.NumErrors = segmentsList.Sum(s => s.NumErrors);

                        snapshot.NumSegments = segmentsList.Count;
                        snapshot.NumCallGraphs = segmentsList.Count(s => s.CallGraphType != "NONE");

                        snapshot.NumCallsToTiers = segmentsList.Sum(s => s.NumCallsToTiers);
                        snapshot.NumCallsToBackends = segmentsList.Sum(s => s.NumCallsToBackends);
                        snapshot.NumCallsToApplications = segmentsList.Sum(s => s.NumCallsToApplications);

                        snapshot.NumCalledTiers = segmentsList.Sum(s => s.NumCalledTiers);
                        snapshot.NumCalledBackends = segmentsList.Sum(s => s.NumCalledBackends);
                        snapshot.NumCalledApplications = segmentsList.Sum(s => s.NumCalledApplications);

                        snapshot.NumSEPs = segmentsList.Sum(s => s.NumSEPs);

                        snapshot.NumHTTPDCs = segmentsList.Sum(s => s.NumHTTPDCs);
                        snapshot.NumMIDCs = segmentsList.Sum(s => s.NumMIDCs);

                        #endregion
                    }

                    #endregion

                    #region Save results

                    // Save results
                    if (segmentsList != null)
                    {
                        FileIOHelper.writeListToCSVFile(segmentsList, new SegmentReportMap(), segmentsFileName);
                    }

                    if (exitCallsList != null)
                    {
                        FileIOHelper.writeListToCSVFile(exitCallsList, new ExitCallReportMap(), exitCallsFileName);
                    }

                    if (serviceEndpointCallsList != null)
                    {

                        FileIOHelper.writeListToCSVFile(serviceEndpointCallsList, new ServiceEndpointCallReportMap(), serviceEndpointCallsFileName);
                    }

                    if (detectedErrorsList != null)
                    {
                        FileIOHelper.writeListToCSVFile(detectedErrorsList, new DetectedErrorReportMap(), detectedErrorsFileName);
                    }

                    if (businessDataList != null)
                    {
                        FileIOHelper.writeListToCSVFile(businessDataList, new BusinessDataReportMap(), businessDataFileName);
                    }

                    if (methodCallLinesList != null)
                    {
                        FileIOHelper.writeListToCSVFile(methodCallLinesList, new MethodCallLineReportMap(), methodCallLinesFileName);
                    }

                    if (methodCallLinesOccurrencesList != null)
                    {
                        FileIOHelper.writeListToCSVFile(methodCallLinesOccurrencesList, new MethodCallLineOccurrenceReportMap(), methodCallLinesOccurrencesFileName);
                    }

                    List<Snapshot> snapshotRows = new List<Snapshot>(1);
                    snapshotRows.Add(snapshot);
                    FileIOHelper.writeListToCSVFile(snapshotRows, new SnapshotReportMap(), snapshotsFileName);

                    #endregion
                }

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 100 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static MethodCallLine convertCallGraphChildren_Recursion(
            JToken methodCallLineJSON, 
            int currentDepth, 
            ref int methodLineCallSequenceNumber, 
            List<MethodCallLine> methodCallLinesList, 
            List<ServiceEndpointCall> serviceEndpointCallsList, 
            List<ExitCall> exitCallsList)
        {
            MethodCallLine methodCallLine = new MethodCallLine();

            methodCallLine.SequenceNumber = methodLineCallSequenceNumber;
            methodLineCallSequenceNumber++;

            // Populate current method call class, methods and types
            methodCallLine.Type = methodCallLineJSON["type"].ToString();
            methodCallLine.PrettyName = methodCallLineJSON["name"].ToString();
            methodCallLine.Class = methodCallLineJSON["className"].ToString();
            methodCallLine.Method = methodCallLineJSON["methodName"].ToString();
            methodCallLine.LineNumber = (int)methodCallLineJSON["lineNumber"];
            if (methodCallLine.LineNumber > 0)
            {
                methodCallLine.FullName = String.Format("{0}:{1}:{2}", methodCallLine.Class, methodCallLine.Method, methodCallLine.LineNumber);
            }
            else
            {
                methodCallLine.FullName = String.Format("{0}:{1}", methodCallLine.Class, methodCallLine.Method);
            }
            methodCallLine.FullNameIndent = String.Format("{0}{1}", new string(' ', currentDepth), methodCallLine.FullName);

            // Fill in Service Endpoints
            if (methodCallLineJSON["serviceEndPointIds"].HasValues == true && serviceEndpointCallsList.Count > 0)
            {
                methodCallLine.NumSEPs = methodCallLineJSON["serviceEndPointIds"].Count();

                List<string> serviceEndpointReferenceList = new List<string>(methodCallLine.NumSEPs);
                foreach (long sepID in methodCallLineJSON["serviceEndPointIds"])
                {
                    ServiceEndpointCall serviceEndpointCall = serviceEndpointCallsList.Where(s => s.SEPID == sepID).FirstOrDefault();
                    if (serviceEndpointCall != null)
                    {
                        serviceEndpointReferenceList.Add(String.Format("{0} ({1})", serviceEndpointCall.SEPName, serviceEndpointCall.SEPType));
                    }
                }

                if (methodCallLine.NumSEPs == 1)
                {
                    methodCallLine.SEPs = serviceEndpointReferenceList[0];
                }
                else
                {
                    StringBuilder sb = new StringBuilder(32 * methodCallLine.NumSEPs);
                    foreach (string serviceEndpointReference in serviceEndpointReferenceList)
                    {
                        sb.AppendFormat("{0};\n", serviceEndpointReference);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    methodCallLine.SEPs = sb.ToString();
                }
            }

            // Fill in Durations
            // We first assume that duration is equal to duration with children. Then when adding children, recalculate, subtracting child's duration
            methodCallLine.ExecTotal = (long)methodCallLineJSON["timeSpentInMilliSec"];
            methodCallLine.Exec = methodCallLine.ExecTotal;
            methodCallLine.WaitTotal = (long)methodCallLineJSON["waitTime"];
            methodCallLine.Wait = methodCallLine.WaitTotal;
            methodCallLine.BlockTotal = (long)methodCallLineJSON["blockTime"];
            methodCallLine.Block = methodCallLine.BlockTotal;
            methodCallLine.CPUTotal = (long)methodCallLineJSON["cpuTime"];
            methodCallLine.CPU = methodCallLine.CPUTotal;
            
            // Count children
            if (methodCallLineJSON["children"].HasValues == false)
            {
                methodCallLine.NumChildren = 0;
            }
            else
            {
                methodCallLine.NumChildren = methodCallLineJSON["children"].Count();
            }

            // Specify depth
            methodCallLine.Depth = currentDepth;

            // Determine type of this element in the call graph tree
            if (currentDepth == 0)
            {
                methodCallLine.ElementType = MethodCallLineElementType.Root;
            }
            else
            {
                if (methodCallLine.NumChildren == 0)
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Leaf;
                }
                else if (methodCallLine.NumChildren == 1)
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Stem;
                }
                else
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Branch;
                }
            }

            // Fill in exits
            // Frequently, the exits in the list from Segments (passed via exitCallsList parameter to the function), are ordered
            // in the same sequence as the exits encountered during unrolling the call graph tree
            // However, that is not always the case
            // Exceptions appear to be 
            // a) .NET applications 
            // and 
            // b) the database connection acquisition backend calls that are grouped together into number of calls >1 and duration being the Sum(of all)
            // So the logic is to find the Exit by the ordinal location, if that doesn't work, find it by SequenceNumber, and if that doesn't work, by the detail string 
            // The ExitCall.SequenceNumber can look like that:
            // "snapshotSequenceCounter" : "1|6|5"
            // Most of the time the sequence number from segment matches just great to that in the exit call
            // But sometimes there can be an exit that is to the same query, and so its ExitCall.NumCalls will be > 1
            // For those, the UI displays the exit with total number of those, and the call graph has detail
            // Typically these are the calls to database pooling
            if (methodCallLineJSON["exitCalls"].HasValues == true && exitCallsList.Count > 0)
            {
                methodCallLine.NumExits = methodCallLineJSON["exitCalls"].Count();

                List<string> exitCallsReferenceList = new List<string>(methodCallLine.NumExits);

                foreach (JToken exitCallToken in methodCallLineJSON["exitCalls"])
                {
                    ExitCall exitCallForThisExit = null;

                    bool adjustCallDurationInCallChain = false;

                    // First, try by the ordinal value
                    if (exitCallsList.Count > 0)
                    {
                        exitCallForThisExit = exitCallsList[0];
                        if (exitCallForThisExit.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString())
                        {
                            if (exitCallForThisExit.NumCalls > 1)
                            {
                                // Found it and it is used more than once
                                adjustCallDurationInCallChain = true;
                            }
                            else
                            {
                                // Found it and it is a singular one
                                exitCallsList.Remove(exitCallForThisExit);
                            }
                        }
                        else
                        {
                            // Not the right one
                            exitCallForThisExit = null;
                        }
                    }

                    // Second, try looking it up by the sequence number
                    if (exitCallForThisExit == null)
                    {
                        exitCallForThisExit = exitCallsList.Where(e => e.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString()).FirstOrDefault();
                        if (exitCallForThisExit != null)
                        {
                            if (exitCallForThisExit.NumCalls > 1)
                            {
                                // Found it and it is used more than once
                                adjustCallDurationInCallChain = true;
                            }
                            else
                            {
                                // Found it and it is a singular one
                                exitCallsList.Remove(exitCallForThisExit);
                            }
                        }
                    }

                    // Third, try looking up up by the exact properties
                    if (exitCallForThisExit == null)
                    {
                        adjustCallDurationInCallChain = true;

                        // This must be one of those calls that has more then 1 call, and is grouped
                        // Make up the exit details using the values in the call graph information
                        exitCallForThisExit = exitCallsList.Where(
                            e => e.NumCalls > 1 &&
                            e.Detail == exitCallToken["detailString"].ToString() &&
                            e.PropsAll == exitCallToken["propertiesAsString"].ToString()).FirstOrDefault();
                    }

                    // Fourth, still don't have an exit from segment data
                    // Manually create an exit from the Call Graph value
                    if (exitCallForThisExit == null)
                    {
                        adjustCallDurationInCallChain = false;

                        exitCallForThisExit = new ExitCall();
                        exitCallForThisExit.Duration = (long)exitCallToken["timeTakenInMillis"];
                        exitCallForThisExit.IsAsync = ((bool)exitCallToken["exitPointCall"]["synchronous"] == false);
                        exitCallForThisExit.ExitType = exitCallToken["type"].ToString();
                        exitCallForThisExit.Detail = exitCallToken["detailString"].ToString();

                        JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                        if (goingToProperty != null)
                        {
                            exitCallForThisExit.ToEntityName = goingToProperty["value"].ToString();
                        }
                        goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "from").FirstOrDefault();
                        string callChainForThisSegment = "(Generated From Call Graph:Unknown)";
                        if (goingToProperty != null)
                        {
                            callChainForThisSegment = String.Format("(Generated From Call Graph:{0})", goingToProperty["value"].ToString());
                        }
                        if (exitCallForThisExit.IsAsync == false)
                        {
                            exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                        }
                        else
                        {
                            exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms async]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                        }
                    }

                    // Finally, here we should have an exit from the segment data
                    string callChain = exitCallForThisExit.CallChain;
                    if (adjustCallDurationInCallChain == true)
                    {
                        // Call duration in the exit that has more then one call (typically database connection acquisition
                        // would have this call chain
                        // (ECommerce-Services)->[WEB_SERVICE]->(Inventory-Services)->[JDBC]:[20 ms]-><INVENTORY-MySQL DB-DB-5.7.13-0ubuntu0.16.04.2>
                        // Here we replace this                                               ^^, which is a sum of all the calls in the call graph
                        // with the value from the exit in the call graph

                        Regex regexDuration = new Regex(@"(.*\[)(\d*)( ms.*\].*)", RegexOptions.IgnoreCase);
                        callChain = regexDuration.Replace(callChain,
                            m => String.Format(
                                "{0}{1}{2}",
                                m.Groups[1].Value,
                                exitCallToken["timeTakenInMillis"],
                                m.Groups[3].Value));
                    }

                    // Prepare the rendered value
                    if (exitCallForThisExit.HasErrors == false)
                    {
                        if (exitCallForThisExit.ToSegmentID != 0)
                        {
                            exitCallsReferenceList.Add(String.Format("{0}->/{1}/ {2}", callChain, exitCallForThisExit.ToSegmentID, exitCallForThisExit.Detail));
                        }
                        else
                        {
                            exitCallsReferenceList.Add(String.Format("{0} {1}", callChain, exitCallForThisExit.Detail));
                        }
                    }
                    else
                    {
                        exitCallsReferenceList.Add(String.Format("{0} {1} Error {2}", callChain, exitCallForThisExit.Detail, exitCallForThisExit.ErrorDetail));
                        methodCallLine.HasErrors = true;
                    }
                }

                // Finally, render the value out of all the exits in here
                if (methodCallLine.NumExits == 1 && exitCallsReferenceList.Count > 0)
                {
                    methodCallLine.ExitCalls = exitCallsReferenceList[0];
                }
                else
                {
                    StringBuilder sb = new StringBuilder(32 * methodCallLine.NumExits);
                    foreach (string exitCallsReference in exitCallsReferenceList)
                    {
                        sb.AppendFormat("{0};\n", exitCallsReference);
                    }
                    sb.Remove(sb.Length - 1, 1);
                    methodCallLine.ExitCalls = sb.ToString();
                }
            }

            // Add to total list
            methodCallLinesList.Add(methodCallLine);

            // Go through the children, recursively. Love recursion
            if (methodCallLine.NumChildren > 0)
            {
                List<MethodCallLine> methodCallLinesAllChildren = new List<MethodCallLine>(10);
                foreach (JToken childMethodCallLineJSON in (JArray)methodCallLineJSON["children"])
                {
                    currentDepth++;

                    MethodCallLine methodCallLineChild = convertCallGraphChildren_Recursion(childMethodCallLineJSON, currentDepth, ref methodLineCallSequenceNumber, methodCallLinesList, serviceEndpointCallsList, exitCallsList);

                    // Now that we measured child, subtract its duration from the current node
                    methodCallLine.Exec = methodCallLine.Exec - methodCallLineChild.ExecTotal;
                    methodCallLine.Wait = methodCallLine.Wait - methodCallLineChild.WaitTotal;
                    methodCallLine.Block = methodCallLine.Block - methodCallLineChild.BlockTotal;
                    methodCallLine.CPU = methodCallLine.CPU - methodCallLineChild.CPUTotal;

                    currentDepth--;
                }
            }
            
            // Calculate the duration range
            methodCallLine.ExecRange = getDurationRangeAsString(methodCallLine.Exec);

            return methodCallLine;
        }

        private static List<MethodCallLine> convertCallGraphChildren_Stack(
            JToken methodCallLineJSONRoot,
            List<ServiceEndpointCall> serviceEndpointCallsList,
            List<ExitCall> exitCallsList)
        {
            List<MethodCallLine> methodCallLinesList = new List<MethodCallLine>(500);
            List<MethodCallLine> methodCallLinesLeafList = new List<MethodCallLine>(10);

            if (methodCallLineJSONRoot == null)
            {
                return methodCallLinesList;
            }

            // Assume depth of at least 100
            Stack<JToken> stackOfMethodCallLineJSONs = new Stack<JToken>(100);
            Stack<MethodCallLine> stackOfParentMethodCallLines = new Stack<MethodCallLine>(100);

            // Add the first one 
            stackOfMethodCallLineJSONs.Push(methodCallLineJSONRoot);

            int methodLineCallSequenceNumber = 0;

            // Let's scroll through, it is just like a binary tree, except with multiple children, meaning that it has left and right, and right again
            while (stackOfMethodCallLineJSONs.Count > 0)
            {
                JToken methodCallLineJSON = stackOfMethodCallLineJSONs.Pop();
                MethodCallLine methodCallLineParent = null;
                if (stackOfParentMethodCallLines.Count > 0)
                {
                    methodCallLineParent = stackOfParentMethodCallLines.Pop();
                }

                #region Populate MethodCallLine

                MethodCallLine methodCallLine = new MethodCallLine();

                methodCallLine.Parent = methodCallLineParent;

                methodCallLine.SequenceNumber = methodLineCallSequenceNumber;
                methodLineCallSequenceNumber++;

                // Populate current method call class, methods and types
                methodCallLine.Type = methodCallLineJSON["type"].ToString();
                methodCallLine.PrettyName = methodCallLineJSON["name"].ToString();
                methodCallLine.Class = methodCallLineJSON["className"].ToString();
                methodCallLine.Method = methodCallLineJSON["methodName"].ToString();
                methodCallLine.LineNumber = (int)methodCallLineJSON["lineNumber"];
                if (methodCallLine.Type == "JS")
                {
                    // Node.js call graphs should use pretty name
                    if (methodCallLine.LineNumber > 0)
                    {
                        methodCallLine.FullName = String.Format("{0}:{1}", methodCallLine.PrettyName, methodCallLine.LineNumber);
                    }
                    else
                    {
                        methodCallLine.FullName = methodCallLine.PrettyName;
                    }
                }
                else
                {
                    if (methodCallLine.LineNumber > 0)
                    {
                        methodCallLine.FullName = String.Format("{0}:{1}:{2}", methodCallLine.Class, methodCallLine.Method, methodCallLine.LineNumber);
                    }
                    else
                    {
                        methodCallLine.FullName = String.Format("{0}:{1}", methodCallLine.Class, methodCallLine.Method);
                    }
                }

                // Specify depth
                if (methodCallLine.Parent == null)
                {
                    methodCallLine.Depth = 0;
                }
                else
                {
                    methodCallLine.Depth = methodCallLine.Parent.Depth + 1;
                }

                methodCallLine.FullNameIndent = String.Format("{0}{1}", new string(' ', methodCallLine.Depth), methodCallLine.FullName);

                // Fill in Service Endpoints
                if (methodCallLineJSON["serviceEndPointIds"].HasValues == true && serviceEndpointCallsList.Count > 0)
                {
                    methodCallLine.NumSEPs = methodCallLineJSON["serviceEndPointIds"].Count();

                    List<string> serviceEndpointReferenceList = new List<string>(methodCallLine.NumSEPs);
                    foreach (long sepID in methodCallLineJSON["serviceEndPointIds"])
                    {
                        ServiceEndpointCall serviceEndpointCall = serviceEndpointCallsList.Where(s => s.SEPID == sepID).FirstOrDefault();
                        if (serviceEndpointCall != null)
                        {
                            serviceEndpointReferenceList.Add(String.Format("{0} ({1})", serviceEndpointCall.SEPName, serviceEndpointCall.SEPType));
                        }
                    }

                    if (methodCallLine.NumSEPs == 1)
                    {
                        methodCallLine.SEPs = serviceEndpointReferenceList[0];
                    }
                    else
                    {
                        StringBuilder sb = new StringBuilder(32 * methodCallLine.NumSEPs);
                        foreach (string serviceEndpointReference in serviceEndpointReferenceList)
                        {
                            sb.AppendFormat("{0};\n", serviceEndpointReference);
                        }
                        sb.Remove(sb.Length - 1, 1);
                        methodCallLine.SEPs = sb.ToString();
                    }
                }

                // Fill in Durations
                // We first assume that duration is equal to duration with children. Then when adding children, recalculate, subtracting child's duration
                methodCallLine.ExecTotal = (long)methodCallLineJSON["timeSpentInMilliSec"];
                methodCallLine.Exec = methodCallLine.ExecTotal;
                methodCallLine.WaitTotal = (long)methodCallLineJSON["waitTime"];
                methodCallLine.Wait = methodCallLine.WaitTotal;
                methodCallLine.BlockTotal = (long)methodCallLineJSON["blockTime"];
                methodCallLine.Block = methodCallLine.BlockTotal;
                methodCallLine.CPUTotal = (long)methodCallLineJSON["cpuTime"];
                methodCallLine.CPU = methodCallLine.CPUTotal;

                if (methodCallLineParent != null)
                {
                    methodCallLineParent.Exec = methodCallLineParent.Exec - methodCallLine.ExecTotal;
                    methodCallLineParent.Wait = methodCallLineParent.Wait - methodCallLine.WaitTotal;
                    methodCallLineParent.Block = methodCallLineParent.Block - methodCallLine.BlockTotal;
                    methodCallLineParent.CPU = methodCallLineParent.CPU - methodCallLine.CPUTotal;
                }

                // Count children
                if (methodCallLineJSON["children"].HasValues == false)
                {
                    methodCallLine.NumChildren = 0;
                }
                else
                {
                    methodCallLine.NumChildren = methodCallLineJSON["children"].Count();
                }

                // Determine type of this element in the call graph tree
                if (methodCallLine.Depth == 0)
                {
                    methodCallLine.ElementType = MethodCallLineElementType.Root;
                }
                else
                {
                    if (methodCallLine.NumChildren == 0)
                    {
                        methodCallLine.ElementType = MethodCallLineElementType.Leaf;
                        // Remember this as the bottom of call graph so we can walk from up here calculating durations
                        methodCallLinesLeafList.Add(methodCallLine);
                    }
                    else if (methodCallLine.NumChildren == 1)
                    {
                        methodCallLine.ElementType = MethodCallLineElementType.Stem;
                    }
                    else
                    {
                        methodCallLine.ElementType = MethodCallLineElementType.Branch;
                    }
                }

                // Fill in exits
                // Frequently, the exits in the list from Segments (passed via exitCallsList parameter to the function), are ordered
                // in the same sequence as the exits encountered during unrolling the call graph tree
                // However, that is not always the case
                // Exceptions appear to be 
                // a) .NET applications 
                // and 
                // b) the database connection acquisition backend calls that are grouped together into number of calls >1 and duration being the Sum(of all)
                // So the logic is to find the Exit by the ordinal location, if that doesn't work, find it by SequenceNumber, and if that doesn't work, by the detail string 
                // The ExitCall.SequenceNumber can look like that:
                // "snapshotSequenceCounter" : "1|6|5"
                // Most of the time the sequence number from segment matches just great to that in the exit call
                // But sometimes there can be an exit that is to the same query, and so its ExitCall.NumCalls will be > 1
                // For those, the UI displays the exit with total number of those, and the call graph has detail
                // Typically these are the calls to database pooling
                if (methodCallLineJSON["exitCalls"].HasValues == true && exitCallsList.Count > 0)
                {
                    methodCallLine.NumExits = methodCallLineJSON["exitCalls"].Count();

                    List<string> exitCallsReferenceList = new List<string>(methodCallLine.NumExits);

                    foreach (JToken exitCallToken in methodCallLineJSON["exitCalls"])
                    {
                        ExitCall exitCallForThisExit = null;

                        bool adjustCallDurationInCallChain = false;

                        // First, try by the ordinal value
                        if (exitCallsList.Count > 0)
                        {
                            exitCallForThisExit = exitCallsList[0];
                            if (exitCallForThisExit.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString())
                            {
                                if (exitCallForThisExit.NumCalls > 1)
                                {
                                    // Found it and it is used more than once
                                    adjustCallDurationInCallChain = true;
                                }
                                else
                                {
                                    // Found it and it is a singular one
                                    exitCallsList.Remove(exitCallForThisExit);
                                }
                            }
                            else
                            {
                                // Not the right one
                                exitCallForThisExit = null;
                            }
                        }

                        // Second, try looking it up by the sequence number
                        if (exitCallForThisExit == null)
                        {
                            exitCallForThisExit = exitCallsList.Where(e => e.SequenceNumber == exitCallToken["snapshotSequenceCounter"].ToString()).FirstOrDefault();
                            if (exitCallForThisExit != null)
                            {
                                if (exitCallForThisExit.NumCalls > 1)
                                {
                                    // Found it and it is used more than once
                                    adjustCallDurationInCallChain = true;
                                }
                                else
                                {
                                    // Found it and it is a singular one
                                    exitCallsList.Remove(exitCallForThisExit);
                                }
                            }
                        }

                        // Third, try looking up up by the exact properties
                        if (exitCallForThisExit == null)
                        {
                            adjustCallDurationInCallChain = true;

                            // This must be one of those calls that has more then 1 call, and is grouped
                            // Make up the exit details using the values in the call graph information
                            exitCallForThisExit = exitCallsList.Where(
                                e => e.NumCalls > 1 &&
                                e.Detail == exitCallToken["detailString"].ToString() &&
                                e.PropsAll == exitCallToken["propertiesAsString"].ToString()).FirstOrDefault();
                        }

                        // Fourth, still don't have an exit from segment data
                        // Manually create an exit from the Call Graph value
                        if (exitCallForThisExit == null)
                        {
                            adjustCallDurationInCallChain = false;

                            exitCallForThisExit = new ExitCall();
                            exitCallForThisExit.Duration = (long)exitCallToken["timeTakenInMillis"];
                            exitCallForThisExit.IsAsync = ((bool)exitCallToken["exitPointCall"]["synchronous"] == false);
                            exitCallForThisExit.ExitType = exitCallToken["type"].ToString();
                            exitCallForThisExit.Detail = exitCallToken["detailString"].ToString();

                            JToken goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "to").FirstOrDefault();
                            if (goingToProperty != null)
                            {
                                exitCallForThisExit.ToEntityName = goingToProperty["value"].ToString();
                            }
                            goingToProperty = exitCallToken["properties"].Where(p => p["name"].ToString() == "from").FirstOrDefault();
                            string callChainForThisSegment = "(Generated From Call Graph:Unknown)";
                            if (goingToProperty != null)
                            {
                                callChainForThisSegment = String.Format("(Generated From Call Graph:{0})", goingToProperty["value"].ToString());
                            }
                            if (exitCallForThisExit.IsAsync == false)
                            {
                                exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                            }
                            else
                            {
                                exitCallForThisExit.CallChain = String.Format("{0}->[{1}]:[{3} ms async]-><{2}>", callChainForThisSegment, exitCallForThisExit.ExitType, exitCallForThisExit.ToEntityName, exitCallForThisExit.Duration);
                            }
                        }

                        // Finally, here we should have an exit from the segment data
                        string callChain = exitCallForThisExit.CallChain;
                        if (adjustCallDurationInCallChain == true)
                        {
                            // Call duration in the exit that has more then one call (typically database connection acquisition
                            // would have this call chain
                            // (ECommerce-Services)->[WEB_SERVICE]->(Inventory-Services)->[JDBC]:[20 ms]-><INVENTORY-MySQL DB-DB-5.7.13-0ubuntu0.16.04.2>
                            // Here we replace this                                               ^^, which is a sum of all the calls in the call graph
                            // with the value from the exit in the call graph

                            Regex regexDuration = new Regex(@"(.*\[)(\d*)( ms.*\].*)", RegexOptions.IgnoreCase);
                            callChain = regexDuration.Replace(callChain,
                                m => String.Format(
                                    "{0}{1}{2}",
                                    m.Groups[1].Value,
                                    exitCallToken["timeTakenInMillis"],
                                    m.Groups[3].Value));
                        }

                        // Prepare the rendered value
                        if (exitCallForThisExit.HasErrors == false)
                        {
                            if (exitCallForThisExit.ToSegmentID != 0)
                            {
                                exitCallsReferenceList.Add(String.Format("{0}->/{1}/ {2}", callChain, exitCallForThisExit.ToSegmentID, exitCallForThisExit.Detail));
                            }
                            else
                            {
                                exitCallsReferenceList.Add(String.Format("{0} {1}", callChain, exitCallForThisExit.Detail));
                            }
                        }
                        else
                        {
                            exitCallsReferenceList.Add(String.Format("{0} {1} Error {2}", callChain, exitCallForThisExit.Detail, exitCallForThisExit.ErrorDetail));
                            methodCallLine.HasErrors = true;
                        }
                    }

                    // Finally, render the value out of all the exits in here
                    if (methodCallLine.NumExits == 1 && exitCallsReferenceList.Count > 0)
                    {
                        methodCallLine.ExitCalls = exitCallsReferenceList[0];
                    }
                    else
                    {
                        StringBuilder sb = new StringBuilder(32 * methodCallLine.NumExits);
                        foreach (string exitCallsReference in exitCallsReferenceList)
                        {
                            sb.AppendFormat("{0};\n", exitCallsReference);
                        }
                        sb.Remove(sb.Length - 1, 1);
                        methodCallLine.ExitCalls = sb.ToString();
                    }
                }

                #endregion

                // Add to total list
                methodCallLinesList.Add(methodCallLine);

                // Move to next sibling
                if (methodCallLineJSON.Next != null)
                {
                    JToken methodCallLineNextJSON = methodCallLineJSON.Next;
                    stackOfMethodCallLineJSONs.Push(methodCallLineNextJSON);
                    stackOfParentMethodCallLines.Push(methodCallLine.Parent);
                }

                // Move to next child, if exists, will take precedence of the sibling
                if (methodCallLine.NumChildren > 0)
                {
                    JToken methodCallLineNextJSON = methodCallLineJSON["children"];
                    if (methodCallLineNextJSON.HasValues == true)
                    {
                        methodCallLineNextJSON = methodCallLineNextJSON[0];
                        stackOfMethodCallLineJSONs.Push(methodCallLineNextJSON);
                        stackOfParentMethodCallLines.Push(methodCallLine);
                    }
                }
            }

            return methodCallLinesList;
        }

        private static string getDurationRangeAsString(long duration)
        {
            if (duration < 0)
            {
                return "-1: t<0";
            }
            else if (duration == 0)
            {
                return "00: t=0";
            }
            else if (duration > 0 && duration <= 10)
            {
                return "01: 0<t<=10";
            }
            else if (duration > 10 && duration <= 50)
            {
                return "02: 10<t<=50";
            }
            else if (duration > 50 && duration <= 100)
            {
                return "03: 50<t<=100";
            }
            else if (duration > 100 && duration <= 200)
            {
                return "04: 100<t<=200";
            }
            else if (duration > 200 && duration <= 500)
            {
                return "05: 200<t<=500";
            }
            else if (duration > 500 && duration <= 1000)
            {
                return "06: 500<t<=1000";
            }
            else if (duration > 1000 && duration <= 2000)
            {
                return "07: 1000<t<=2000";
            }
            else if (duration > 2000 && duration <= 5000)
            {
                return "08: 2000<t<=5000";
            }
            else if (duration > 5000 && duration <= 10000)
            {
                return "09: 5000<t<=10000";
            }
            else if (duration > 10000 && duration <= 15000)
            {
                return "10: 10000<t<=15000";
            }
            else if (duration > 15000 && duration <= 20000)
            {
                return "11: 15000<t<=20000";
            }
            else if (duration > 20000 && duration <= 50000)
            {
                return "12: 20000<t<=50000";
            }
            else if (duration > 50000 && duration <= 100000)
            {
                return "13: 50000<t<=100000";
            }
            else if (duration > 100000 && duration <= 150000)
            {
                return "14: 100000<t<=150000";
            }
            else if (duration > 150000 && duration <= 200000)
            {
                return "15: 150000<t<=200000";
            }
            else if (duration > 200000 && duration <= 300000)
            {
                return "16: 200000<t<=300000";
            }
            return "17: t>300000"; ;
        }

        #endregion


        #region Entity report functions

        private static void adjustColumnsOfEntityRowTableInEntitiesReport(string entityType, ExcelWorksheet sheet, ExcelTable table)
        {
            if (entityType == APPLICATION_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == TIERS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == NODES_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["AgentVersion"].Position + 1).Width = 25;
                sheet.Column(table.Columns["MachineName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["MachineAgentVersion"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == BACKENDS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["BackendName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BackendType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop1Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop2Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop3Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop4Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop5Name"].Position + 1).Width = 25;
                sheet.Column(table.Columns["Prop1Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop2Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop3Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop4Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Prop5Value"].Position + 1).Width = 20;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == BUSINESS_TRANSACTIONS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTNameOriginal"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == SERVICE_ENDPOINTS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == ERRORS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["HttpCode"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ErrorDepth"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ErrorLevel1"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel2"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel3"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel4"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorLevel5"].Position + 1).Width = 20;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == INFORMATION_POINTS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 25;
                sheet.Column(table.Columns["IPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["IPType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
        }

        #endregion

        #region Entity metric graph report functions

        private static ExcelPackage createIndividualEntityMetricGraphsReportTemplate(ProgramOptions programOptions, JobConfiguration jobConfiguration)
        {
            #region Target step variables

            // Various folders
            string reportFolderPath = Path.Combine(programOptions.OutputJobFolderPath, REPORTS_FOLDER_NAME);
            string entitiesAllFolderPath = Path.Combine(reportFolderPath, ENTITIES_FOLDER_NAME);

            // Report files
            string controllersAllReportFilePath = Path.Combine(entitiesAllFolderPath, CONVERT_ENTITY_CONTROLLERS_FILE_NAME);

            #endregion

            #region Prepare the report package

            // Prepare package
            ExcelPackage excelMetricGraphs = new ExcelPackage();
            excelMetricGraphs.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
            excelMetricGraphs.Workbook.Properties.Title = "AppDynamics DEXTER Entity Metric Graphs Report";
            excelMetricGraphs.Workbook.Properties.Subject = programOptions.JobName;

            excelMetricGraphs.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

            #endregion

            #region Parameters sheet

            // Parameters sheet
            ExcelWorksheet sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

            var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
            hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
            hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

            int l = 1;
            sheet.Cells[l, 1].Value = "Table of Contents";
            sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            l++; l++;
            sheet.Cells[l, 1].Value = "AppDynamics DEXTER Entities Detail Report";
            l++;
            sheet.Cells[l, 1].Value = "Version";
            sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
            l++; l++;
            sheet.Cells[l, 1].Value = "From";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "To";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded From (UTC)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded From (Local)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded To (UTC)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded To (Local)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Number of Hours Intervals";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
            l++;
            sheet.Cells[l, 1].Value = "Export Metrics";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
            l++;
            sheet.Cells[l, 1].Value = "Export Snapshots";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
            l++;
            sheet.Cells[l, 1].Value = "Export Flowmaps";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
            l++;
            sheet.Cells[l, 1].Value = "Export Configuration";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
            l++;
            sheet.Cells[l, 1].Value = "Export Events";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
            l++;
            sheet.Cells[l, 1].Value = "Targets:";
            l++; l++;
            ExcelRangeBase range = sheet.Cells[l, 1].LoadFromCollection(from jobTarget in jobConfiguration.Target
                                                                        select new
                                                                        {
                                                                            Controller = jobTarget.Controller,
                                                                            UserName = jobTarget.UserName,
                                                                            Application = jobTarget.Application,
                                                                            ApplicationID = jobTarget.ApplicationID,
                                                                            Status = jobTarget.Status.ToString()
                                                                        }, true);
            ExcelTable table = sheet.Tables.Add(range, REPORT_METRICS_GRAPHS_TABLE_PARAMETERS_TARGETS);
            table.ShowHeader = true;
            table.TableStyle = TableStyles.Medium2;
            table.ShowFilter = true;
            table.ShowTotal = false;

            sheet.Column(1).Width = 25;
            sheet.Column(2).Width = 25;
            sheet.Column(3).Width = 25;

            #endregion

            #region TOC sheet

            // Navigation sheet with link to other sheets
            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

            #endregion

            #region Controller sheet

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_CONTROLLERS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT + 1, 1);

            range = readCSVFileIntoExcelRange(controllersAllReportFilePath, 0, sheet, REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT, 1);
            if (range != null)
            {
                table = sheet.Tables.Add(range, REPORT_METRICS_GRAPHS_TABLE_CONTROLLERS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
            }

            #endregion

            #region Other sheets

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_APPLICATIONS_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_TIERS_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_TIERS_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_TIERS_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_TIERS_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_NODES_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_NODES_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_NODES_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_NODES_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_BACKENDS_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_BACKENDS_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_BACKENDS_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_BACKENDS_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_BUSINESS_TRANSACTIONS_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_SERVICE_ENDPOINTS_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_ERRORS_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_ERRORS_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_ERRORS_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_ERRORS_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Graphs";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_GRAPHS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";

            sheet = excelMetricGraphs.Workbook.Worksheets.Add(REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_GRAPHS);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Data";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_METRICS_GRAPHS_SHEET_INFORMATION_POINTS_METRICS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(3, 1);

            #endregion

            return excelMetricGraphs;
        }

        private static void fillMetricDetailAndMetricValuesTablesForEntity(
            JobConfiguration jobConfiguration,
            ExcelPackage excelReportMetrics,
            List<EntityBase> entityHourlyData, 
            string metricsEntityFolderPath, 
            string entityType,
            EntityBase entityRow,
            string sheetNameMetrics, 
            string sheetNameGraphs)
        {
            #region Target step variables

            string metricsDataFolderPath = String.Empty;
            string entityMetricSummaryReportFilePath = String.Empty;
            string entityMetricValuesReportFilePath = String.Empty;
            string entityName = String.Empty;
            string entityNameForDisplay = String.Empty;
            string entityTypeForDisplay = String.Empty;
            string entityNameForExcel = String.Empty;

            ExcelWorksheet sheetMetrics;
            ExcelWorksheet sheetGraphs;

            // Report tables and ranges
            ExcelRangeBase range = null;
            ExcelTable table = null;

            ExcelTable tableValuesART = null;
            ExcelTable tableValuesCPM = null;
            ExcelTable tableValuesEPM = null;
            ExcelTable tableValuesEXCPM = null;
            ExcelTable tableValuesHTTPEPM = null;

            #endregion

            #region Output details of the Entity

            if (entityType == APPLICATION_TYPE_SHORT)
            {
                entityName = entityRow.ApplicationName;
                entityNameForDisplay = entityName;
                entityTypeForDisplay = "Application";
                entityNameForExcel = getShortenedEntityNameForExcelTable(entityRow.ApplicationName, entityRow.ApplicationID);
            }
            else if (entityType == TIERS_TYPE_SHORT)
            {
                entityName = entityRow.TierName;
                entityNameForDisplay = entityName;
                entityTypeForDisplay = "Tier";
                entityNameForExcel = getShortenedEntityNameForExcelTable(entityRow.TierName, entityRow.TierID);
            }
            else if (entityType == NODES_TYPE_SHORT)
            {
                entityName = entityRow.NodeName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Node";
                entityNameForExcel = getShortenedEntityNameForExcelTable(entityRow.NodeName, entityRow.NodeID);
            }
            else if (entityType == BACKENDS_TYPE_SHORT)
            {
                entityName = ((EntityBackend)entityRow).BackendName;
                entityNameForDisplay = entityName;
                entityTypeForDisplay = "Backend";
                entityNameForExcel = getShortenedEntityNameForExcelTable(((EntityBackend)entityRow).BackendName, ((EntityBackend)entityRow).BackendID);
            }
            else if (entityType == BUSINESS_TRANSACTIONS_TYPE_SHORT)
            {
                entityName = ((EntityBusinessTransaction)entityRow).BTName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Business Transaction";
                entityNameForExcel = getShortenedEntityNameForExcelTable(((EntityBusinessTransaction)entityRow).BTName, ((EntityBusinessTransaction)entityRow).BTID);
            }
            else if (entityType == SERVICE_ENDPOINTS_TYPE_SHORT)
            {
                entityName = ((EntityServiceEndpoint)entityRow).SEPName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Service Endpoint";
                entityNameForExcel = getShortenedEntityNameForExcelTable(((EntityServiceEndpoint)entityRow).SEPName, ((EntityServiceEndpoint)entityRow).SEPID);
            }
            else if (entityType == ERRORS_TYPE_SHORT)
            {
                entityName = ((EntityError)entityRow).ErrorName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Error";
                entityNameForExcel = getShortenedEntityNameForExcelTable(((EntityError)entityRow).ErrorName, ((EntityError)entityRow).ErrorID);
            }
            else if (entityType == INFORMATION_POINTS_TYPE_SHORT)
            {
                entityName = ((EntityInformationPoint)entityRow).IPName;
                entityNameForDisplay = entityName;
                entityTypeForDisplay = "Information Point";
                entityNameForExcel = getShortenedEntityNameForExcelTable(((EntityInformationPoint)entityRow).IPName, ((EntityInformationPoint)entityRow).IPID);
            }

            #endregion

            #region Entity Metric Detail sheet

            int fromRow = 0;
            int fromColumn = 0;

            sheetMetrics = excelReportMetrics.Workbook.Worksheets[sheetNameMetrics];

            if (sheetMetrics.Dimension.Rows == 2)
            {
                fromRow = REPORT_METRICS_GRAPHS_LIST_SHEET_START_TABLE_AT;
            }
            else
            {
                fromRow = sheetMetrics.Dimension.Rows + 3;
            }

            #region ART Table

            fromColumn = 1;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_ART_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheetMetrics, fromRow, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_ART_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["PropertyName"].Position + fromColumn).Width = 25;
                    sheetMetrics.Column(table.Columns["PropertyValue"].Position + fromColumn).Width = 20;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheetMetrics, fromRow + 17, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_ART_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["EventTimeStamp"].Position + fromColumn).Width = 25;

                    tableValuesART = table;
                }
            }

            #endregion

            #region CPM table

            fromColumn = 14;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_CPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheetMetrics, fromRow, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_CPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["PropertyName"].Position + fromColumn).Width = 25;
                    sheetMetrics.Column(table.Columns["PropertyValue"].Position + fromColumn).Width = 20;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheetMetrics, fromRow + 17, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_CPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["EventTimeStamp"].Position + fromColumn).Width = 25;

                    tableValuesCPM = table;
                }
            }

            #endregion

            #region EPM table

            fromColumn = 27;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheetMetrics, fromRow, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_EPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["PropertyName"].Position + fromColumn).Width = 25;
                    sheetMetrics.Column(table.Columns["PropertyValue"].Position + fromColumn).Width = 20;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheetMetrics, fromRow + 17, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_EPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["EventTimeStamp"].Position + fromColumn).Width = 25;

                    tableValuesEPM = table;
                }
            }

            #endregion

            #region EXCPM table

            fromColumn = 40;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EXCPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheetMetrics, fromRow, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_EXCPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["PropertyName"].Position + fromColumn).Width = 25;
                    sheetMetrics.Column(table.Columns["PropertyValue"].Position + fromColumn).Width = 20;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheetMetrics, fromRow + 17, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_EXCPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["EventTimeStamp"].Position + fromColumn).Width = 25;

                    tableValuesEXCPM = table;
                }
            }

            #endregion

            #region HTTPEPM table

            fromColumn = 53;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_HTTPEPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheetMetrics, fromRow, fromColumn);
                if (range != null)
                {
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_HTTPEPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["PropertyName"].Position + fromColumn).Width = 25;
                    sheetMetrics.Column(table.Columns["PropertyValue"].Position + fromColumn).Width = 20;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheetMetrics, fromRow + 17, fromColumn);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheetMetrics.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheetMetrics.Tables.Add(range, String.Format(REPORT_METRICS_GRAPHS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_HTTPEPM_SHORTNAME, entityNameForExcel));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheetMetrics.Column(table.Columns["EventTimeStamp"].Position + fromColumn).Width = 25;

                    tableValuesHTTPEPM = table;
                }
            }

            #endregion

            #endregion

            #region Detail sheet with Graphs

            #region Load Metric Data

            // Load metric data for each of the tables because it is faster than enumerating it from Excel sheet
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_ART_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesAPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_CPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesCPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesEPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EXCPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesEXCPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_HTTPEPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesHTTPEPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            // Break up the metric data into timeranges for each hour
            int[,] timeRangeAPM = null;
            int[,] timeRangeCPM = null;
            int[,] timeRangeEPM = null;
            int[,] timeRangeEXCPM = null;
            int[,] timeRangeHTTPEPM = null;
            if (metricValuesAPMList != null)
            {
                timeRangeAPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesAPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesCPMList != null)
            {
                timeRangeCPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesCPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesEPMList != null)
            {
                timeRangeEPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesEPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesEXCPMList != null)
            {
                timeRangeEXCPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesEXCPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesHTTPEPMList != null)
            {
                timeRangeHTTPEPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesHTTPEPMList, jobConfiguration.Input.HourlyTimeRanges);
            }

            #endregion

            #region Output Metric Graphs

            sheetGraphs = excelReportMetrics.Workbook.Worksheets[sheetNameGraphs];

            int rowIndexART = 1;
            int rowIndexCPM = 1;
            int rowIndexEPM = 1;
            int rowIndexEXCPM = 1;
            int rowIndexHTTPEPM = 1;

            int columnOffsetBegin = 6;
            int columnOffsetBetweenRanges = 1;

            fromRow = sheetGraphs.Dimension.Rows;

            // Output headers
            if (fromRow == 2)
            {
                sheetGraphs.Cells[fromRow + 1, 1].Value = "Controller";
                sheetGraphs.Cells[fromRow + 1, 2].Value = "Type";
                sheetGraphs.Cells[fromRow + 1, 3].Value = "Name";

                for (int i = 0; i < jobConfiguration.Input.HourlyTimeRanges.Count; i++)
                {
                    JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[i];

                    int columnIndexTimeRangeStart = columnOffsetBegin + i * columnOffsetBetweenRanges + i * 16;

                    sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 0].Value = "Calls";
                    sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 15].Value = "Response";

                    // Legend
                    // \u25ac == Black Rectangle
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 6].Value = "\u25ac\u25ac\u25ac";
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 6].Style.Font.Color.SetColor(colorMetricART);
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 6 + 1].Value = METRIC_ART_FULLNAME;
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 4].Value = "\u25ac\u25ac\u25ac";
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 4].Style.Font.Color.SetColor(colorMetricCPM);
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 4 + 1].Value = METRIC_CPM_FULLNAME;
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 10].Value = "\u25ac\u25ac\u25ac";
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 10].Style.Font.Color.SetColor(colorMetricEPM);
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 10 + 1].Value = METRIC_EPM_FULLNAME;
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 12].Value = "\u25ac\u25ac\u25ac";
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 12].Style.Font.Color.SetColor(colorMetricEXCPM);
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 12 + 1].Value = METRIC_EXCPM_FULLNAME;
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 14].Value = "\u25ac\u25ac\u25ac";
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 14].Style.Font.Color.SetColor(colorMetricHTTPEPM);
                    sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 14 + 1].Value = METRIC_HTTPEPM_FULLNAME;

                    if (entityType != ERRORS_TYPE_SHORT)
                    {
                        sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 2].Value = "Calls";
                        sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 4].Value = "CPM";
                        sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 6].Value = "ART";
                        sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 8].Value = "Errors";
                        sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 10].Value = "EPM";
                        sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 12].Value = "Errors %";
                    }
                    else
                    {
                        sheetGraphs.Cells[fromRow + 1, columnIndexTimeRangeStart + 10].Value = "EPM";
                    }
                }

                fromRow++; fromRow++;
            }
            else
            {
                fromRow++;
            }

            // Output entity name
            sheetGraphs.Cells[fromRow, 1].Value = entityRow.Controller;
            sheetGraphs.Cells[fromRow, 2].Value = entityTypeForDisplay;
            sheetGraphs.Cells[fromRow, 3].Value = entityNameForDisplay;

            for (int i = 0; i < jobConfiguration.Input.HourlyTimeRanges.Count; i++)
            {
                JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[i];

                int columnIndexTimeRangeStart = columnOffsetBegin + i * columnOffsetBetweenRanges + i * 16;

                // Add summaries from the hourly metric breakdowns
                if (entityHourlyData != null)
                {
                    if (entityType != ERRORS_TYPE_SHORT)
                    {
                        sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 2].Value = entityHourlyData[i].Calls.ToString();
                        sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 4].Value = entityHourlyData[i].CPM.ToString();
                        sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 6].Value = entityHourlyData[i].ART.ToString();
                        sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 8].Value = entityHourlyData[i].Errors.ToString();
                        sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 10].Value = entityHourlyData[i].EPM.ToString();
                        sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 12].Value = String.Format("{0}%", entityHourlyData[i].ErrorsPercentage.ToString());
                    }
                    else
                    {
                        sheetGraphs.Cells[fromRow, columnIndexTimeRangeStart + 10].Value = entityHourlyData[i].EPM.ToString();
                    }
                }

                // Add graphs if necessary
                if (entityHourlyData != null && entityHourlyData[i].HasActivity == true)
                {
                    ExcelChart chart = sheetGraphs.Drawings.AddChart(String.Format(REPORT_METRICS_GRAPHS_METRIC_GRAPH, entityType, jobTimeRange.From, entityNameForExcel), eChartType.XYScatterLinesNoMarkers);
                    chart.SetPosition(fromRow, 0, columnIndexTimeRangeStart - 1, 0);
                    chart.SetSize(1020, 200);
                    chart.Style = eChartStyle.Style17;

                    ExcelChart chartART = chart.PlotArea.ChartTypes.Add(eChartType.XYScatterLinesNoMarkers);
                    chartART.UseSecondaryAxis = true;
                    chartART.Legend.Remove();

                    // ART
                    if (tableValuesART != null)
                    {
                        ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesART, timeRangeAPM[i, 0], timeRangeAPM[i, 1]);
                        ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesART, timeRangeAPM[i, 0], timeRangeAPM[i, 1]);
                        if (rangeXTime != null & rangeYValues != null)
                        {
                            ExcelChartSerie series = chartART.Series.Add(rangeYValues, rangeXTime);
                            series.Header = "ART";
                            ((ExcelScatterChartSerie)series).LineColor = colorMetricART;

                            rowIndexART = rowIndexART + rangeXTime.Rows - 1;
                        }
                    }

                    // CPM
                    if (tableValuesCPM != null)
                    {
                        ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesCPM, timeRangeCPM[i, 0], timeRangeCPM[i, 1]);
                        ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesCPM, timeRangeCPM[i, 0], timeRangeCPM[i, 1]);
                        if (rangeXTime != null & rangeYValues != null)
                        {
                            ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                            series.Header = "CPM";
                            ((ExcelScatterChartSerie)series).LineColor = colorMetricCPM;

                            rowIndexCPM = rowIndexCPM + rangeXTime.Rows - 1;
                        }
                    }

                    // EPM
                    if (tableValuesEPM != null)
                    {
                        ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesEPM, timeRangeEPM[i, 0], timeRangeEPM[i, 1]);
                        ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesEPM, timeRangeEPM[i, 0], timeRangeEPM[i, 1]);
                        if (rangeXTime != null & rangeYValues != null)
                        {
                            ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                            series.Header = "EPM";
                            ((ExcelScatterChartSerie)series).LineColor = colorMetricEPM;

                            rowIndexEPM = rowIndexEPM + rangeXTime.Rows - 1;
                        }
                    }

                    // EXCPM
                    if (tableValuesEXCPM != null)
                    {
                        ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesEXCPM, timeRangeEXCPM[i, 0], timeRangeEXCPM[i, 1]);
                        ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesEXCPM, timeRangeEXCPM[i, 0], timeRangeEXCPM[i, 1]);
                        if (rangeXTime != null & rangeYValues != null)
                        {
                            ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                            series.Header = "EXCPM";
                            ((ExcelScatterChartSerie)series).LineColor = colorMetricEXCPM;

                            rowIndexEXCPM = rowIndexEXCPM + rangeXTime.Rows - 1;
                        }
                    }

                    // HTTPEPM
                    if (tableValuesHTTPEPM != null)
                    {
                        ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesHTTPEPM, timeRangeHTTPEPM[i, 0], timeRangeHTTPEPM[i, 1]);
                        ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesHTTPEPM, timeRangeHTTPEPM[i, 0], timeRangeHTTPEPM[i, 1]);
                        if (rangeXTime != null & rangeYValues != null)
                        {
                            ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                            series.Header = "HTTPEPM";
                            ((ExcelScatterChartSerie)series).LineColor = colorMetricHTTPEPM;

                            rowIndexHTTPEPM = rowIndexHTTPEPM + rangeXTime.Rows - 1;
                        }
                    }

                    sheetGraphs.Cells[fromRow + 10, columnIndexTimeRangeStart].Value = "___";
                }
            }

            #endregion

            #endregion

            return;
        }

        private static bool finalizeAndSaveIndividualEntityMetricReport(ExcelPackage excelMetricGraphs, string reportFilePath)
        {
            logger.Info("Finalize Entity Metric Graphs Report File {0}", reportFilePath);

            ExcelWorksheet sheet;
            ExcelRangeBase range;
            ExcelTable table;

            #region TOC sheet

            // TOC sheet again
            sheet = excelMetricGraphs.Workbook.Worksheets[REPORT_SHEET_TOC];
            sheet.Cells[1, 1].Value = "Sheet Name";
            sheet.Cells[1, 2].Value = "# Tables";
            sheet.Cells[1, 3].Value = "Link";
            int rowNum = 1;
            foreach (ExcelWorksheet s in excelMetricGraphs.Workbook.Worksheets)
            {
                rowNum++;
                sheet.Cells[rowNum, 1].Value = s.Name;
                sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                if (s.Tables.Count == 1)
                {
                    table = s.Tables[0];
                    sheet.Cells[rowNum, 2].Value = table.Address.Rows - 1;
                }
                else if (s.Tables.Count > 0)
                {
                    sheet.Cells[rowNum, 2].Value = String.Format("{0} tables", s.Tables.Count);
                }
            }
            range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
            table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_TOC);
            table.ShowHeader = true;
            table.TableStyle = TableStyles.Medium2;
            table.ShowFilter = true;
            table.ShowTotal = false;

            sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
            sheet.Column(table.Columns["# Tables"].Position + 1).Width = 25;

            #endregion

            #region Save file 

            // Report files
            logger.Info("Saving Excel report {0}", reportFilePath);
            loggerConsole.Info("Saving Excel report {0}", reportFilePath);

            string folderPath = Path.GetDirectoryName(reportFilePath);
            if (Directory.Exists(folderPath) == false)
            {
                Directory.CreateDirectory(folderPath);
            }

            try
            {
                // Save full report Excel files
                excelMetricGraphs.SaveAs(new FileInfo(reportFilePath));
            }
            catch (InvalidOperationException ex)
            {
                logger.Warn("Unable to save Excel file {0}", reportFilePath);
                logger.Warn(ex);
                loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);

                return false;
            }

            #endregion

            return true;
        }

        #endregion

        #region Entity metric detail report functions

        private static int reportMetricDetailApplication(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            EntityApplication applicationRow,
            EntityApplication applicationRowMetrics,
            List<Event> eventsAllList, 
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList)
        {
            // Check to see if there is activity
            if (applicationRowMetrics != null)                
            {
                if (applicationRowMetrics.HasActivity == false)
                {
                    logger.Warn("No metric activity in Entity {0}, skipping Entity Details output", applicationRow);
                    return 0;
                }
            }

            ExcelPackage excelEntitiesDetail = createIndividualEntityMetricReportTemplate(programOptions, jobConfiguration, jobTarget);
            fillIndividualEntityMetricReportForEntity(
                programOptions, 
                jobConfiguration, 
                jobTarget, 
                excelEntitiesDetail, 
                APPLICATION_TYPE_SHORT, 
                applicationRow,
                eventsAllList, 
                healthRuleViolationEventsAllList,
                snapshotsAllList,
                segmentsAllList,
                exitCallsAllList,
                serviceEndpointCallsAllList,
                detectedErrorsAllList,
                businessDataAllList);

            // Report file
            string reportFilePath = getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, applicationRow);

            finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, APPLICATION_TYPE_SHORT, reportFilePath);

            return 1;
        }

        private static int reportMetricDetailTiers(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            List<EntityTier> entityList,
            List<EntityTier> entityListMetrics,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList,
            bool progressToConsole)
        {
            int j = 0;

            foreach (EntityTier tierRow in entityList)
            {
                if (entityListMetrics != null && entityListMetrics.Count > 0)
                {
                    EntityTier tierRowMetric = entityListMetrics.Where(t => t.TierID == tierRow.TierID).FirstOrDefault();
                    if (tierRowMetric != null)
                    {
                        if (tierRowMetric.HasActivity == false)
                        {
                            logger.Warn("No metric activity in Entity {0}, skipping Entity Details output", tierRow);
                            continue;
                        }
                    }
                }

                ExcelPackage excelEntitiesDetail = createIndividualEntityMetricReportTemplate(programOptions, jobConfiguration, jobTarget);
                fillIndividualEntityMetricReportForEntity(
                    programOptions, 
                    jobConfiguration, 
                    jobTarget, 
                    excelEntitiesDetail, 
                    TIERS_TYPE_SHORT, 
                    tierRow,
                    eventsAllList,
                    healthRuleViolationEventsAllList,
                    snapshotsAllList,
                    segmentsAllList,
                    exitCallsAllList,
                    serviceEndpointCallsAllList,
                    detectedErrorsAllList,
                    businessDataAllList);

                // Report file
                string reportFilePath = getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, tierRow);

                finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, TIERS_TYPE_SHORT, reportFilePath);

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int reportMetricDetailNodes(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            List<EntityNode> entityList,
            List<EntityNode> entityListMetrics,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList,
            bool progressToConsole)
        {
            int j = 0;

            foreach (EntityNode nodeRow in entityList)
            {
                if (entityListMetrics != null && entityListMetrics.Count > 0)
                {
                    EntityNode nodeRowMetric = entityListMetrics.Where(n => n.NodeID == nodeRow.NodeID).FirstOrDefault();
                    if (nodeRowMetric != null)
                    {
                        if (nodeRowMetric.HasActivity == false)
                        {
                            logger.Warn("No metric activity in Entity {0}, skipping Entity Details output", nodeRow);
                            continue;
                        }
                    }
                }

                ExcelPackage excelEntitiesDetail = createIndividualEntityMetricReportTemplate(programOptions, jobConfiguration, jobTarget);
                fillIndividualEntityMetricReportForEntity(
                    programOptions, 
                    jobConfiguration, 
                    jobTarget, 
                    excelEntitiesDetail, 
                    NODES_TYPE_SHORT, 
                    nodeRow,
                    eventsAllList,
                    healthRuleViolationEventsAllList,
                    snapshotsAllList,
                    segmentsAllList,
                    exitCallsAllList,
                    serviceEndpointCallsAllList,
                    detectedErrorsAllList,
                    businessDataAllList);

                // Report file
                string reportFilePath = getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, nodeRow);

                finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, NODES_TYPE_SHORT, reportFilePath);

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int reportMetricDetailBackends(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            List<EntityBackend> entityList,
            List<EntityBackend> entityListMetrics,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList,
            bool progressToConsole)
        {
            int j = 0;

            foreach (EntityBackend backendRow in entityList)
            {
                if (entityListMetrics != null && entityListMetrics.Count > 0)
                {
                    EntityBackend backendRowMetric = entityListMetrics.Where(b => b.BackendID == backendRow.BackendID).FirstOrDefault();
                    if (backendRowMetric != null)
                    {
                        if (backendRowMetric.HasActivity == false)
                        {
                            logger.Warn("No metric activity in Entity {0}, skipping Entity Details output", backendRow);
                            continue;
                        }
                    }
                }

                ExcelPackage excelEntitiesDetail = createIndividualEntityMetricReportTemplate(programOptions, jobConfiguration, jobTarget);
                fillIndividualEntityMetricReportForEntity(
                    programOptions, 
                    jobConfiguration, 
                    jobTarget, 
                    excelEntitiesDetail, 
                    BACKENDS_TYPE_SHORT, 
                    backendRow,
                    eventsAllList,
                    healthRuleViolationEventsAllList,
                    snapshotsAllList,
                    segmentsAllList,
                    exitCallsAllList,
                    serviceEndpointCallsAllList,
                    detectedErrorsAllList,
                    businessDataAllList);

                // Report file
                string reportFilePath = getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, backendRow);

                finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, BACKENDS_TYPE_SHORT, reportFilePath);

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int reportMetricDetailBusinessTransactions(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            List<EntityBusinessTransaction> entityList,
            List<EntityBusinessTransaction> entityListMetrics,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList,
            bool progressToConsole)
        {
            int j = 0;

            foreach (EntityBusinessTransaction businessTransactionRow in entityList)
            {
                if (entityListMetrics != null && entityListMetrics.Count > 0)
                {
                    EntityBusinessTransaction businessTransactionRowMetric = entityListMetrics.Where(b => b.BTID == businessTransactionRow.BTID).FirstOrDefault();
                    if (businessTransactionRowMetric != null)
                    {
                        if (businessTransactionRowMetric.HasActivity == false)
                        {
                            logger.Warn("No metric activity in Entity {0}, skipping Entity Details output", businessTransactionRow);
                            continue;
                        }
                    }
                }

                ExcelPackage excelEntitiesDetail = createIndividualEntityMetricReportTemplate(programOptions, jobConfiguration, jobTarget);
                fillIndividualEntityMetricReportForEntity(
                    programOptions, 
                    jobConfiguration, 
                    jobTarget, 
                    excelEntitiesDetail, 
                    BUSINESS_TRANSACTIONS_TYPE_SHORT, 
                    businessTransactionRow,
                    eventsAllList,
                    healthRuleViolationEventsAllList,
                    snapshotsAllList,
                    segmentsAllList,
                    exitCallsAllList,
                    serviceEndpointCallsAllList,
                    detectedErrorsAllList,
                    businessDataAllList);

                // Report file
                string reportFilePath = getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, businessTransactionRow);

                finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, BUSINESS_TRANSACTIONS_TYPE_SHORT, reportFilePath);

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int reportMetricDetailServiceEndpoints(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            List<EntityServiceEndpoint> entityList,
            List<EntityServiceEndpoint> entityListMetrics,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList,
            bool progressToConsole)
        {
            int j = 0;

            foreach (EntityServiceEndpoint serviceEndpointRow in entityList)
            {
                if (entityListMetrics != null && entityListMetrics.Count > 0)
                {
                    EntityServiceEndpoint serviceEndpointRowMetric = entityListMetrics.Where(s => s.SEPID == serviceEndpointRow.SEPID).FirstOrDefault();
                    if (serviceEndpointRowMetric != null)
                    {
                        if (serviceEndpointRowMetric.HasActivity == false)
                        {
                            logger.Warn("No metric activity in Entity {0}, skipping Entity Details output", serviceEndpointRow);
                            continue;
                        }
                    }
                }

                ExcelPackage excelEntitiesDetail = createIndividualEntityMetricReportTemplate(programOptions, jobConfiguration, jobTarget);
                fillIndividualEntityMetricReportForEntity(
                    programOptions, 
                    jobConfiguration, 
                    jobTarget, 
                    excelEntitiesDetail, 
                    SERVICE_ENDPOINTS_TYPE_SHORT, 
                    serviceEndpointRow,
                    eventsAllList,
                    healthRuleViolationEventsAllList,
                    snapshotsAllList,
                    segmentsAllList,
                    exitCallsAllList,
                    serviceEndpointCallsAllList,
                    detectedErrorsAllList,
                    businessDataAllList);

                // Report file
                string reportFilePath = getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, serviceEndpointRow);

                finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, SERVICE_ENDPOINTS_TYPE_SHORT, reportFilePath);

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static int reportMetricDetailErrors(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            List<EntityError> entityList,
            List<EntityError> entityListMetrics,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList,
            bool progressToConsole)
        {
            int j = 0;

            foreach (EntityError errorRow in entityList)
            {
                if (entityListMetrics != null && entityListMetrics.Count > 0)
                {
                    EntityError errorRowMetric = entityListMetrics.Where(e => e.ErrorID == errorRow.ErrorID).FirstOrDefault();
                    if (errorRowMetric != null)
                    {
                        if (errorRowMetric.HasActivity == false)
                        {
                            logger.Warn("No metric activity in Entity {0}, skipping Entity Details output", errorRow);
                            continue;
                        }
                    }
                }

                ExcelPackage excelEntitiesDetail = createIndividualEntityMetricReportTemplate(programOptions, jobConfiguration, jobTarget);
                fillIndividualEntityMetricReportForEntity(
                    programOptions, 
                    jobConfiguration, 
                    jobTarget, 
                    excelEntitiesDetail, 
                    ERRORS_TYPE_SHORT, 
                    errorRow,
                    eventsAllList,
                    healthRuleViolationEventsAllList,
                    snapshotsAllList,
                    segmentsAllList,
                    exitCallsAllList,
                    serviceEndpointCallsAllList,
                    detectedErrorsAllList,
                    businessDataAllList);

                // Report file
                string reportFilePath = getEntityMetricReportFilePath(programOptions, jobConfiguration, jobTarget, errorRow);

                finalizeAndSaveIndividualEntityMetricReport(excelEntitiesDetail, ERRORS_TYPE_SHORT, reportFilePath);

                if (progressToConsole == true)
                {
                    j++;
                    if (j % 10 == 0)
                    {
                        Console.Write("[{0}].", j);
                    }
                }
            }

            return entityList.Count;
        }

        private static string getEntityMetricReportFilePath(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget, EntityBase entityRow)
        {
            string reportFileName = String.Empty;
            string reportFilePath = String.Empty;

            if (entityRow is EntityApplication)
            {
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_APPLICATION_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    APPLICATION_TYPE_SHORT,
                    reportFileName);
            }
            else if (entityRow is EntityTier)
            {
                EntityTier tierRow = (EntityTier)entityRow;
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    getShortenedEntityNameForFileSystem(tierRow.TierName, tierRow.TierID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    TIERS_TYPE_SHORT,
                    reportFileName);
            }
            else if (entityRow is EntityNode)
            {
                EntityNode nodeRow = (EntityNode)entityRow;
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    getShortenedEntityNameForFileSystem(nodeRow.NodeName, nodeRow.NodeID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    NODES_TYPE_SHORT,
                    reportFileName);
            }
            else if (entityRow is EntityBackend)
            {
                EntityBackend backendRow = (EntityBackend)entityRow;
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    getShortenedEntityNameForFileSystem(backendRow.BackendName, backendRow.BackendID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    BACKENDS_TYPE_SHORT,
                    reportFileName);
            }
            else if (entityRow is EntityBusinessTransaction)
            {
                EntityBusinessTransaction businessTransactionRow = (EntityBusinessTransaction)entityRow;
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    getShortenedEntityNameForFileSystem(businessTransactionRow.BTName, businessTransactionRow.BTID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    BUSINESS_TRANSACTIONS_TYPE_SHORT,
                    reportFileName);
            }
            else if (entityRow is EntityServiceEndpoint)
            {
                EntityServiceEndpoint serviceEndpointRow = (EntityServiceEndpoint)entityRow;
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    getShortenedEntityNameForFileSystem(serviceEndpointRow.SEPName, serviceEndpointRow.SEPID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    SERVICE_ENDPOINTS_TYPE_SHORT,
                    reportFileName);
            }
            else if (entityRow is EntityError)
            {
                EntityError errorRow = (EntityError)entityRow;
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    getShortenedEntityNameForFileSystem(errorRow.ErrorName, errorRow.ErrorID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    ERRORS_TYPE_SHORT,
                    reportFileName);
            }
            else if (entityRow is EntityInformationPoint)
            {
                EntityInformationPoint informationPointRow = (EntityInformationPoint)entityRow;
                reportFileName = String.Format(
                    REPORT_ENTITY_DETAILS_ENTITY_FILE_NAME,
                    getFileSystemSafeString(new Uri(entityRow.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    getShortenedEntityNameForFileSystem(informationPointRow.IPName, informationPointRow.IPID),
                    jobConfiguration.Input.ExpandedTimeRange.From,
                    jobConfiguration.Input.ExpandedTimeRange.To);
                reportFilePath = Path.Combine(
                    programOptions.OutputJobFolderPath,
                    REPORTS_FOLDER_NAME,
                    getFileSystemSafeString(new Uri(jobTarget.Controller).Host),
                    getShortenedEntityNameForFileSystem(entityRow.ApplicationName, entityRow.ApplicationID),
                    INFORMATION_POINTS_TYPE_SHORT,
                    reportFileName);
            }

            return reportFilePath;
        }

        private static ExcelPackage createIndividualEntityMetricReportTemplate(ProgramOptions programOptions, JobConfiguration jobConfiguration, JobTarget jobTarget)
        {
            #region Target step variables

            // Various folders
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));

            // Report files
            string controllerReportFilePath = Path.Combine(controllerFolderPath, CONVERT_ENTITY_CONTROLLER_FILE_NAME);

            #endregion

            #region Prepare the report package

            // Prepare package
            ExcelPackage excelEntityDetail = new ExcelPackage();
            excelEntityDetail.Workbook.Properties.Author = String.Format("AppDynamics DEXTER {0}", Assembly.GetEntryAssembly().GetName().Version);
            excelEntityDetail.Workbook.Properties.Title = "AppDynamics DEXTER Entity Detail Report";
            excelEntityDetail.Workbook.Properties.Subject = programOptions.JobName;

            excelEntityDetail.Workbook.Properties.Comments = String.Format("Targets={0}\nFrom={1:o}\nTo={2:o}", jobConfiguration.Target.Count, jobConfiguration.Input.TimeRange.From, jobConfiguration.Input.TimeRange.To);

            #endregion

            #region Parameters sheet

            // Parameters sheet
            ExcelWorksheet sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_SHEET_PARAMETERS);

            var hyperLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("HyperLinkStyle");
            hyperLinkStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;
            hyperLinkStyle.Style.Font.Color.SetColor(colorBlueForHyperlinks);

            int l = 1;
            sheet.Cells[l, 1].Value = "Table of Contents";
            sheet.Cells[l, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            l++; l++;
            sheet.Cells[l, 1].Value = "AppDynamics DEXTER Entities Detail Report";
            l++;
            sheet.Cells[l, 1].Value = "Version";
            sheet.Cells[l, 2].Value = Assembly.GetEntryAssembly().GetName().Version;
            l++; l++;
            sheet.Cells[l, 1].Value = "From";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.From.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "To";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.TimeRange.To.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded From (UTC)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded From (Local)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.From.ToLocalTime().ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded To (UTC)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Expanded To (Local)";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.ExpandedTimeRange.To.ToLocalTime().ToString("G");
            l++;
            sheet.Cells[l, 1].Value = "Number of Hours Intervals";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.HourlyTimeRanges.Count;
            l++;
            sheet.Cells[l, 1].Value = "Export Metrics";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Metrics;
            l++;
            sheet.Cells[l, 1].Value = "Export Snapshots";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Snapshots;
            l++;
            sheet.Cells[l, 1].Value = "Export Flowmaps";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Flowmaps;
            l++;
            sheet.Cells[l, 1].Value = "Export Configuration";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Configuration;
            l++;
            sheet.Cells[l, 1].Value = "Export Events";
            sheet.Cells[l, 2].Value = jobConfiguration.Input.Events;
            l++;
            sheet.Cells[l, 1].Value = "Target:";
            l++; l++;
            sheet.Cells[l, 1].Value = "Controller";
            sheet.Cells[l, 2].Value = jobTarget.Controller;
            l++; 
            sheet.Cells[l, 1].Value = "UserName";
            sheet.Cells[l, 2].Value = jobTarget.Controller;
            l++;
            sheet.Cells[l, 1].Value = "Application";
            sheet.Cells[l, 2].Value = jobTarget.Application;
            l++;
            sheet.Cells[l, 1].Value = "ID";
            sheet.Cells[l, 2].Value = jobTarget.ApplicationID;
            l++;
            sheet.Cells[l, 1].Value = "Status";
            sheet.Cells[l, 2].Value = jobTarget.Status;

            sheet.Column(1).Width = 25;
            sheet.Column(2).Width = 25;

            #endregion

            #region TOC sheet

            // Navigation sheet with link to other sheets
            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_SHEET_TOC);

            #endregion

            #region Controller sheet

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_CONTROLLERS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            ExcelRangeBase range = readCSVFileIntoExcelRange(controllerReportFilePath, 0, sheet, REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1);
            if (range != null)
            {
                ExcelTable table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_CONTROLLERS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 25;
                sheet.Column(table.Columns["UserName"].Position + 1).Width = 25;
            }

            #endregion

            #region Other sheets

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SUMMARY);
            sheet.Cells[1, 1].Value = "TOC";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_METRICS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_EVENTS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Pivot";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS_PIVOT);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_EVENTS_PIVOT);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Table";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Pivot";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Table";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Pivot";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS_PIVOT);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS_PIVOT);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Table";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SEGMENTS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Pivot";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_SEGMENTS_PIVOT);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SEGMENTS_PIVOT);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Table";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_SEGMENTS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Pivot";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS_PIVOT);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS_PIVOT);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Table";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_SERVICE_ENDPOINT_CALLS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Pivot";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS_PIVOT);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS_PIVOT);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Table";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Pivot";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA_PIVOT);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA_PIVOT);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.Cells[2, 1].Value = "See Table";
            sheet.Cells[2, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA);
            sheet.Cells[2, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT + 2, 1);

            sheet = excelEntityDetail.Workbook.Worksheets.Add(REPORT_ENTITY_DETAILS_SHEET_TIMELINE);
            sheet.Cells[1, 1].Value = "Table of Contents";
            sheet.Cells[1, 2].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", REPORT_SHEET_TOC);
            sheet.Cells[1, 2].StyleName = "HyperLinkStyle";
            sheet.View.FreezePanes(REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT + 1, 1);

            #endregion

            return excelEntityDetail;
        }

        private static void fillIndividualEntityMetricReportForEntity(
            ProgramOptions programOptions, 
            JobConfiguration jobConfiguration, 
            JobTarget jobTarget, 
            ExcelPackage excelEntityDetail, 
            string entityType, 
            EntityBase entityRow,
            List<Event> eventsAllList,
            List<HealthRuleViolationEvent> healthRuleViolationEventsAllList,
            List<Snapshot> snapshotsAllList,
            List<Segment> segmentsAllList,
            List<ExitCall> exitCallsAllList,
            List<ServiceEndpointCall> serviceEndpointCallsAllList,
            List<DetectedError> detectedErrorsAllList,
            List<BusinessData> businessDataAllList)
        {
            #region Target step variables

            // Various folders and files
            string controllerFolderPath = Path.Combine(programOptions.OutputJobFolderPath, getFileSystemSafeString(new Uri(jobTarget.Controller).Host));
            string applicationFolderPath = Path.Combine(controllerFolderPath, getShortenedEntityNameForFileSystem(jobTarget.Application, jobTarget.ApplicationID));
            string entitiesFolderPath = Path.Combine(applicationFolderPath, ENTITIES_FOLDER_NAME);
            string eventsFolderPath = Path.Combine(applicationFolderPath, EVENTS_FOLDER_NAME);
            string snapshotsFolderPath = Path.Combine(applicationFolderPath, SNAPSHOTS_FOLDER_NAME);
            string metricsFolderPath = Path.Combine(applicationFolderPath, METRICS_FOLDER_NAME);
            string metricsEntityFolderTypePath = Path.Combine(metricsFolderPath, entityType);
            string metricsEntityFolderPath = String.Empty;

            // Metric paths and files
            string entityFullRangeReportFilePath = String.Empty;
            string entityHourlyRangeReportFilePath = String.Empty;
            string metricsDataFolderPath = String.Empty;
            string entityMetricSummaryReportFilePath = String.Empty;
            string entityMetricValuesReportFilePath = String.Empty;
            string entityName = String.Empty;
            string entityNameForDisplay = String.Empty;
            string entityTypeForDisplay = String.Empty;
            int fromRow = 1;

            // Report tables and ranges
            ExcelRangeBase range;
            ExcelTable table;

            ExcelTable tableValuesART = null;
            ExcelTable tableValuesCPM = null;
            ExcelTable tableValuesEPM = null;
            ExcelTable tableValuesEXCPM = null;
            ExcelTable tableValuesHTTPEPM = null;

            ExcelTable tableEvents = null;
            ExcelTable tableSnapshots = null;

            #endregion

            #region Fill sheet and table name variables based on entity type

            if (entityType == APPLICATION_TYPE_SHORT)
            {
                entityName = entityRow.ApplicationName;
                entityNameForDisplay = entityName;
                entityTypeForDisplay = "Application";
                metricsEntityFolderPath = metricsEntityFolderTypePath;
            }
            else if (entityType == TIERS_TYPE_SHORT)
            {
                entityName = entityRow.TierName;
                entityNameForDisplay = entityName;
                entityTypeForDisplay = "Tier";
                metricsEntityFolderPath = Path.Combine(
                    metricsEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(entityRow.TierName, entityRow.TierID));
            }
            else if (entityType == NODES_TYPE_SHORT)
            {
                entityName = entityRow.NodeName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Node";
                metricsEntityFolderPath = Path.Combine(
                    metricsEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(entityRow.TierName, entityRow.TierID),
                    getShortenedEntityNameForFileSystem(entityRow.NodeName, entityRow.NodeID));
            }
            else if (entityType == BACKENDS_TYPE_SHORT)
            {
                entityName = ((EntityBackend)entityRow).BackendName;
                entityNameForDisplay = entityName;
                entityTypeForDisplay = "Backend";
                metricsEntityFolderPath = Path.Combine(
                    metricsEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(((EntityBackend)entityRow).BackendName, ((EntityBackend)entityRow).BackendID));
            }
            else if (entityType == BUSINESS_TRANSACTIONS_TYPE_SHORT)
            {
                entityName = ((EntityBusinessTransaction)entityRow).BTName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Business Transaction";
                metricsEntityFolderPath = Path.Combine(
                    metricsEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(entityRow.TierName, entityRow.TierID),
                    getShortenedEntityNameForFileSystem(((EntityBusinessTransaction)entityRow).BTName, ((EntityBusinessTransaction)entityRow).BTID));
            }
            else if (entityType == SERVICE_ENDPOINTS_TYPE_SHORT)
            {
                entityName = ((EntityServiceEndpoint)entityRow).SEPName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Service Endpoint";
                metricsEntityFolderPath = Path.Combine(
                    metricsEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(entityRow.TierName, entityRow.TierID),
                    getShortenedEntityNameForFileSystem(((EntityServiceEndpoint)entityRow).SEPName, ((EntityServiceEndpoint)entityRow).SEPID));
            }
            else if (entityType == ERRORS_TYPE_SHORT)
            {
                entityName = ((EntityError)entityRow).ErrorName;
                entityNameForDisplay = String.Format(@"{0}\{1}", entityRow.TierName, entityName);
                entityTypeForDisplay = "Error";
                metricsEntityFolderPath = Path.Combine(
                    metricsEntityFolderTypePath,
                    getShortenedEntityNameForFileSystem(entityRow.TierName, entityRow.TierID),
                    getShortenedEntityNameForFileSystem(((EntityError)entityRow).ErrorName, ((EntityError)entityRow).ErrorID));
            }

            #endregion

            logger.Info("Creating Entity Metrics Report for {0} in {1}", entityRow, metricsEntityFolderPath);

            #region Parameter sheet

            ExcelWorksheet sheet = excelEntityDetail.Workbook.Worksheets[REPORT_SHEET_PARAMETERS];

            int l = sheet.Dimension.Rows + 2;
            sheet.Cells[l, 1].Value = "Type";
            sheet.Cells[l, 2].Value = entityTypeForDisplay;
            l++;
            sheet.Cells[l, 1].Value = "Name";
            sheet.Cells[l, 2].Value = entityNameForDisplay;

            #endregion

            #region Entity Metrics Summary sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SUMMARY];

            #region Full ranges

            // Full range table
            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            entityFullRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_FULLRANGE_FILE_NAME);
            if (File.Exists(entityFullRangeReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityFullRangeReportFilePath, 0, sheet, fromRow, 1);
                if (range != null)
                {
                    table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL);

                    fromRow = fromRow + range.Rows + 2;
                }
            }

            #endregion

            #region Hourly range

            // Hourly table
            sheet.Cells[fromRow - 1, 1].Value = "Hourly";

            entityHourlyRangeReportFilePath = Path.Combine(metricsEntityFolderPath, CONVERT_ENTITY_METRICS_HOURLY_FILE_NAME);
            if (File.Exists(entityFullRangeReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityHourlyRangeReportFilePath, 0, sheet, fromRow, 1);
                if (range != null)
                {
                    table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY);
                }
            }

            #endregion

            #endregion

            #region Entity Metric Detail sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_METRICS];

            #region ART Table

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            int fromColumnMetricSummary = 1;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_ART_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_ART_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["PropertyName"].Position + fromColumnMetricSummary).Width = 25;
                    sheet.Column(table.Columns["PropertyValue"].Position + fromColumnMetricSummary).Width = 20;

                    fromRow = fromRow + range.Rows + 2;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_ART_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["EventTimeStamp"].Position + fromColumnMetricSummary).Width = 25;

                    tableValuesART = table;
                }
            }

            #endregion

            #region CPM table

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            fromColumnMetricSummary = sheet.Dimension.Columns + 2;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_CPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_CPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["PropertyName"].Position + fromColumnMetricSummary).Width = 25;
                    sheet.Column(table.Columns["PropertyValue"].Position + fromColumnMetricSummary).Width = 20;

                    fromRow = fromRow + range.Rows + 2;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_CPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["EventTimeStamp"].Position + fromColumnMetricSummary).Width = 25;

                    tableValuesCPM = table;
                }
            }

            #endregion

            #region EPM table

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            fromColumnMetricSummary = sheet.Dimension.Columns + 2;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_EPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["PropertyName"].Position + fromColumnMetricSummary).Width = 25;
                    sheet.Column(table.Columns["PropertyValue"].Position + fromColumnMetricSummary).Width = 20;

                    fromRow = fromRow + range.Rows + 2;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_EPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["EventTimeStamp"].Position + fromColumnMetricSummary).Width = 25;

                    tableValuesEPM = table;
                }
            }

            #endregion

            #region EXCPM table

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            fromColumnMetricSummary = sheet.Dimension.Columns + 2;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EXCPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_EXCPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["PropertyName"].Position + fromColumnMetricSummary).Width = 25;
                    sheet.Column(table.Columns["PropertyValue"].Position + fromColumnMetricSummary).Width = 20;

                    fromRow = fromRow + range.Rows + 2;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_EXCPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["EventTimeStamp"].Position + fromColumnMetricSummary).Width = 25;

                    tableValuesEXCPM = table;

                    fromRow = fromRow + range.Rows + 2;
                }
            }

            #endregion

            #region HTTPEPM table

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            fromColumnMetricSummary = sheet.Dimension.Columns + 2;

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_HTTPEPM_SHORTNAME);
            entityMetricSummaryReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_SUMMARY_FILE_NAME);
            if (File.Exists(entityMetricSummaryReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricSummaryReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_DESCRIPTION, entityType, METRIC_HTTPEPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["PropertyName"].Position + fromColumnMetricSummary).Width = 25;
                    sheet.Column(table.Columns["PropertyValue"].Position + fromColumnMetricSummary).Width = 20;

                    fromRow = fromRow + range.Rows + 2;
                }
            }

            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            if (File.Exists(entityMetricValuesReportFilePath) == true)
            {
                range = readCSVFileIntoExcelRange(entityMetricValuesReportFilePath, 0, sheet, fromRow, fromColumnMetricSummary);
                if (range != null)
                {
                    if (range.Rows == 1)
                    {
                        // If there was no data in the table, adjust the range to have at least one blank line, otherwise Excel thinks table is corrupt
                        range = sheet.Cells[range.Start.Row, range.Start.Column, range.End.Row + 1, range.End.Column];
                    }
                    table = sheet.Tables.Add(range, String.Format(REPORT_ENTITY_DETAILS_METRIC_TABLE_METRIC_VALUES, entityType, METRIC_HTTPEPM_SHORTNAME));
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["EventTimeStamp"].Position + fromColumnMetricSummary).Width = 25;

                    tableValuesHTTPEPM = table;
                }
            }

            #endregion

            #endregion

            #region Activity grid sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID];

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            string activityGridReportFileName = Path.Combine(metricsEntityFolderPath, CONVERT_ACTIVITY_GRID_FILE_NAME);
            if (File.Exists(activityGridReportFileName) == true)
            {
                readCSVFileIntoExcelRange(activityGridReportFileName, 0, sheet, fromRow, 1);
            }

            #endregion

            #region Events and Health Rule violations

            #region Filter events by type of entity output

            // Filter events if necessary
            List<Event> eventsFilteredList = null;
            List<HealthRuleViolationEvent> healthRuleViolationEventsFilteredList = null;

            switch (entityType)
            {
                case APPLICATION_TYPE_SHORT:
                    // The Application report has all events
                    eventsFilteredList = eventsAllList;
                    healthRuleViolationEventsFilteredList = healthRuleViolationEventsAllList;

                    break;

                case TIERS_TYPE_SHORT:
                    // Filter events for the Tier
                    if (eventsAllList != null)
                    {
                        eventsFilteredList = eventsAllList.Where(e => e.TierID == entityRow.TierID).ToList();
                    }

                    if (healthRuleViolationEventsAllList != null)
                    {
                        healthRuleViolationEventsFilteredList = healthRuleViolationEventsAllList.Where(e => e.EntityType == entityTypeStringMapping[ENTITY_TYPE_TIER] && e.EntityID == entityRow.TierID).ToList();
                    }

                    break;

                case NODES_TYPE_SHORT:
                    // Filter events for the Node
                    if (eventsAllList != null)
                    {
                        eventsFilteredList = eventsAllList.Where(e => e.NodeID == entityRow.NodeID).ToList();
                    }

                    if (healthRuleViolationEventsAllList != null)
                    {
                        healthRuleViolationEventsFilteredList = healthRuleViolationEventsAllList.Where(e => e.EntityType == entityTypeStringMapping[ENTITY_TYPE_NODE] && e.EntityID == entityRow.NodeID).ToList();
                    }

                    break;

                case BUSINESS_TRANSACTIONS_TYPE_SHORT:
                    // Filter events for the Business Transaction
                    if (eventsAllList != null)
                    {
                        eventsFilteredList = eventsAllList.Where(e => e.BTID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    if (healthRuleViolationEventsAllList != null)
                    {
                        healthRuleViolationEventsFilteredList = healthRuleViolationEventsAllList.Where(e => e.EntityType == entityTypeStringMapping[ENTITY_TYPE_BUSINESS_TRANSACTION] && e.EntityID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    break;

                default:
                    // Display nothing

                    break;
            }

            #endregion

            #region Events sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (eventsFilteredList != null && eventsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EVENTS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(eventsFilteredList, new EventReportMap()))
                {
                    range = readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                    if (range != null && range.Rows > 1)
                    {
                        tableEvents = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_EVENTS);
                    }
                }
            }

            #endregion

            #region HR Violations sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (healthRuleViolationEventsFilteredList != null && healthRuleViolationEventsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(healthRuleViolationEventsFilteredList, new HealthRuleViolationEventReportMap()))
                {
                    readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                }
            }

            #endregion

            #endregion

            #region Snapshots, Segments, Exit Calls, Service Endpoint Calls, Business Data

            #region Filter events by type of entity output

            List<Snapshot> snapshotsFilteredList = new List<Snapshot>();
            List<Segment> segmentsFilteredList = new List<Segment>();
            List<ExitCall> exitCallsFilteredList = new List<ExitCall>();
            List<ServiceEndpointCall> serviceEndpointCallsFilteredList = new List<ServiceEndpointCall>();
            List<DetectedError> detectedErrorsFilteredList = new List<DetectedError>();
            List<BusinessData> businessDataFilteredList = new List<BusinessData>();

            switch (entityType)
            {
                case APPLICATION_TYPE_SHORT:
                    // The Application report has all snapshots, segments, call exits etc.
                    snapshotsFilteredList = snapshotsAllList;
                    segmentsFilteredList = segmentsAllList;
                    exitCallsFilteredList = exitCallsAllList;
                    serviceEndpointCallsFilteredList = serviceEndpointCallsAllList;
                    detectedErrorsFilteredList = detectedErrorsAllList;
                    businessDataFilteredList = businessDataAllList;

                    break;

                case TIERS_TYPE_SHORT:
                    // Filter snapshots starting at this Tier
                    List<Snapshot> snapshotsStartingAtThisEntity = null;
                    if (snapshotsAllList != null)
                    {
                        snapshotsStartingAtThisEntity = snapshotsAllList.Where(s => s.TierID == entityRow.TierID).ToList();
                    }

                    // Filter snapshots that start elsewhere, but include this tier
                    List<Snapshot> snapshotsCrossingThisEntity = new List<Snapshot>();
                    segmentsFilteredList = new List<Segment>();
                    if (segmentsAllList != null)
                    {
                        var uniqueSnapshotIDs = segmentsAllList.Where(s => s.TierID == entityRow.TierID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            Snapshot snapshotForThisRequest = snapshotsAllList.Find(s => s.RequestID == requestID);
                            if (snapshotForThisRequest != null)
                            {
                                snapshotsCrossingThisEntity.Add(snapshotForThisRequest);
                            }

                            List<Segment> segmentRowsForThisRequest = segmentsAllList.Where(s => s.RequestID == requestID).ToList();
                            segmentsFilteredList.AddRange(segmentRowsForThisRequest);
                        }
                    }

                    // Combine both and make them unique
                    snapshotsFilteredList = new List<Snapshot>();
                    if (snapshotsStartingAtThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsStartingAtThisEntity); }
                    if (snapshotsCrossingThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsCrossingThisEntity); }
                    snapshotsFilteredList = snapshotsFilteredList.Distinct().ToList();

                    // Filter exit calls to the list of snapshots
                    if (exitCallsAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            exitCallsFilteredList.AddRange(exitCallsAllList.Where(e => e.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    // Filter Service Endpoint Calls to the list of snapshots
                    if (serviceEndpointCallsAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            serviceEndpointCallsFilteredList.AddRange(serviceEndpointCallsAllList.Where(s => s.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    // Filter Detected Errors to the list of snapshots
                    if (detectedErrorsAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            detectedErrorsFilteredList.AddRange(detectedErrorsAllList.Where(s => s.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    // Filter Business Data to the list of snapshots
                    if (businessDataAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            businessDataFilteredList.AddRange(businessDataAllList.Where(s => s.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    break;

                case NODES_TYPE_SHORT:
                    // Filter snapshots starting at this Tier and Node
                    snapshotsStartingAtThisEntity = null;
                    if (snapshotsAllList != null)
                    {
                        snapshotsStartingAtThisEntity = snapshotsAllList.Where(s => s.TierID == entityRow.TierID && s.NodeID == entityRow.NodeID).ToList();
                    }

                    // Filter snapshots starting elsewhere, but including this Tier and Node
                    snapshotsCrossingThisEntity = new List<Snapshot>();
                    segmentsFilteredList = new List<Segment>();
                    if (segmentsAllList != null)
                    {
                        var uniqueSnapshotIDs = segmentsAllList.Where(s => s.TierID == entityRow.TierID && s.NodeID == entityRow.NodeID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            Snapshot snapshotForThisRequest = snapshotsAllList.Find(s => s.RequestID == requestID);
                            if (snapshotForThisRequest != null)
                            {
                                snapshotsCrossingThisEntity.Add(snapshotForThisRequest);
                            }

                            List<Segment> segmentsForThisRequestList = segmentsAllList.Where(s => s.RequestID == requestID).ToList();
                            segmentsFilteredList.AddRange(segmentsForThisRequestList);
                        }
                    }

                    // Combine both and make them unique
                    snapshotsFilteredList = new List<Snapshot>();
                    if (snapshotsStartingAtThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsStartingAtThisEntity); }
                    if (snapshotsCrossingThisEntity != null) { snapshotsFilteredList.AddRange(snapshotsCrossingThisEntity); }
                    snapshotsFilteredList = snapshotsFilteredList.Distinct().ToList();

                    // Filter exit calls to the list of snapshots
                    if (exitCallsAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            exitCallsFilteredList.AddRange(exitCallsAllList.Where(e => e.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    // Filter Service Endpoint Calls to the list of snapshots
                    if (serviceEndpointCallsAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            serviceEndpointCallsFilteredList.AddRange(serviceEndpointCallsAllList.Where(s => s.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    // Filter Detected Errors to the list of snapshots
                    if (detectedErrorsAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            detectedErrorsFilteredList.AddRange(detectedErrorsAllList.Where(s => s.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    // Filter Business Data to the list of snapshots
                    if (businessDataAllList != null)
                    {
                        foreach (Snapshot snapshot in snapshotsFilteredList)
                        {
                            businessDataFilteredList.AddRange(businessDataAllList.Where(s => s.RequestID == snapshot.RequestID).ToList());
                        }
                    }

                    break;

                case BACKENDS_TYPE_SHORT:
                    // Filter snapshots calling this Backend
                    if (exitCallsAllList != null)
                    {
                        var uniqueSnapshotIDs = exitCallsAllList.Where(e => e.ToEntityID == ((EntityBackend)entityRow).BackendID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            if (snapshotsAllList != null)
                            {
                                snapshotsFilteredList.AddRange(snapshotsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (segmentsAllList != null)
                            {
                                segmentsFilteredList.AddRange(segmentsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            exitCallsFilteredList.AddRange(exitCallsAllList.Where(e => e.RequestID == requestID).ToList());
                            if (serviceEndpointCallsAllList != null)
                            {
                                serviceEndpointCallsFilteredList.AddRange(serviceEndpointCallsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (detectedErrorsAllList != null)
                            {
                                detectedErrorsFilteredList.AddRange(detectedErrorsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (businessDataAllList != null)
                            {
                                businessDataFilteredList.AddRange(businessDataAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                        }
                    }

                    break;

                case BUSINESS_TRANSACTIONS_TYPE_SHORT:
                    // Filter everything by BTs 
                    if (snapshotsAllList != null)
                    {
                        snapshotsFilteredList = snapshotsAllList.Where(s => s.BTID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    if (segmentsAllList != null)
                    {
                        segmentsFilteredList = segmentsAllList.Where(s => s.BTID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    if (exitCallsAllList != null)
                    {
                        exitCallsFilteredList = exitCallsAllList.Where(e => e.BTID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    if (serviceEndpointCallsAllList != null)
                    {
                        serviceEndpointCallsFilteredList = serviceEndpointCallsAllList.Where(s => s.BTID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    if (detectedErrorsAllList != null)
                    {
                        detectedErrorsFilteredList = detectedErrorsAllList.Where(s => s.BTID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    if (businessDataAllList != null)
                    {
                        businessDataFilteredList = businessDataAllList.Where(s => s.BTID == ((EntityBusinessTransaction)entityRow).BTID).ToList();
                    }

                    break;

                case SERVICE_ENDPOINTS_TYPE_SHORT:
                    // Filter snapshots that call this SEP
                    if (serviceEndpointCallsAllList != null)
                    {
                        var uniqueSnapshotIDs = serviceEndpointCallsAllList.Where(s => s.SEPID == ((EntityServiceEndpoint)entityRow).SEPID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            if (snapshotsAllList != null)
                            {
                                snapshotsFilteredList.AddRange(snapshotsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (segmentsAllList != null)
                            {
                                segmentsFilteredList.AddRange(segmentsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (exitCallsAllList != null)
                            {
                                exitCallsFilteredList.AddRange(exitCallsAllList.Where(e => e.RequestID == requestID).ToList());
                            }
                            serviceEndpointCallsFilteredList.AddRange(serviceEndpointCallsAllList.Where(s => s.RequestID == requestID).ToList());
                            if (detectedErrorsAllList != null)
                            {
                                detectedErrorsFilteredList.AddRange(detectedErrorsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (businessDataAllList != null)
                            {
                                businessDataFilteredList.AddRange(businessDataAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                        }
                    }

                    break;

                case ERRORS_TYPE_SHORT:
                    // Filter snapshots that had this error
                    if (detectedErrorsAllList != null)
                    {
                        var uniqueSnapshotIDs = detectedErrorsAllList.Where(e => e.ErrorID == ((EntityError)entityRow).ErrorID).ToList().Select(e => e.RequestID).Distinct();
                        foreach (string requestID in uniqueSnapshotIDs)
                        {
                            if (snapshotsAllList != null)
                            {
                                snapshotsFilteredList.AddRange(snapshotsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (segmentsAllList != null)
                            {
                                segmentsFilteredList.AddRange(segmentsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            if (exitCallsAllList != null)
                            {
                                exitCallsFilteredList.AddRange(exitCallsAllList.Where(e => e.RequestID == requestID).ToList());
                            }
                            if (serviceEndpointCallsAllList != null)
                            {
                                serviceEndpointCallsFilteredList.AddRange(serviceEndpointCallsAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                            detectedErrorsFilteredList.AddRange(detectedErrorsAllList.Where(e => e.RequestID == requestID).ToList());
                            if (businessDataAllList != null)
                            {
                                businessDataFilteredList.AddRange(businessDataAllList.Where(s => s.RequestID == requestID).ToList());
                            }
                        }

                    }

                    break;

                default:
                    // Will never hit here, because all the values are already taken care of
                    // But do nothing anyway
                    break;
            }

            #endregion

            #region Snapshots sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (snapshotsFilteredList != null && snapshotsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(snapshotsFilteredList, new SnapshotReportMap()))
                {
                    range = readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                    if (range != null && range.Rows > 1)
                    {
                        tableSnapshots = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS);
                    }
                }
                
            }

            #endregion

            #region Segments sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (segmentsFilteredList != null && segmentsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SEGMENTS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(segmentsFilteredList, new SegmentReportMap()))
                {
                    readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                }
            }

            #endregion

            #region Exit Calls sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (exitCallsFilteredList != null && exitCallsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(exitCallsFilteredList, new ExitCallReportMap()))
                {
                    readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                }
            }

            #endregion

            #region Service Endpoint Calls sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (serviceEndpointCallsFilteredList != null && serviceEndpointCallsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SERVICE_ENDPOINT_CALLS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(serviceEndpointCallsFilteredList, new ServiceEndpointCallReportMap()))
                {
                    readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                }
            }

            #endregion

            #region Detected Errors sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (detectedErrorsFilteredList != null && detectedErrorsFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(detectedErrorsFilteredList, new DetectedErrorReportMap()))
                {
                    readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                }
            }

            #endregion

            #region Business Data sheet

            fromRow = REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT;
            if (businessDataFilteredList != null && businessDataFilteredList.Count > 0)
            {
                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA];

                using (MemoryStream ms = FileIOHelper.writeListToMemoryStream(businessDataFilteredList, new BusinessDataReportMap()))
                {
                    readCSVFileIntoExcelRange(ms, 0, sheet, fromRow, 1);
                }
            }

            #endregion

            #endregion

            #region Detail sheet with Graphs, Snapshots and Events

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_TIMELINE];

            // Names of entities
            sheet.Cells[2, 1].Value = "Type";
            sheet.Cells[2, 2].Value = entityTypeForDisplay;
            sheet.Cells[3, 1].Value = "Name";
            sheet.Cells[3, 2].Value = entityNameForDisplay;

            // Legend
            // \u25ac == Black Rectangle
            sheet.Cells[5, 1].Value = "\u25ac\u25ac\u25ac";
            sheet.Cells[5, 1].Style.Font.Color.SetColor(colorMetricART);
            sheet.Cells[5, 2].Value = METRIC_ART_FULLNAME;
            sheet.Cells[6, 1].Value = "\u25ac\u25ac\u25ac";
            sheet.Cells[6, 1].Style.Font.Color.SetColor(colorMetricCPM);
            sheet.Cells[6, 2].Value = METRIC_CPM_FULLNAME;
            sheet.Cells[7, 1].Value = "\u25ac\u25ac\u25ac";
            sheet.Cells[7, 1].Style.Font.Color.SetColor(colorMetricEPM);
            sheet.Cells[7, 2].Value = METRIC_EPM_FULLNAME;
            sheet.Cells[8, 1].Value = "\u25ac\u25ac\u25ac";
            sheet.Cells[8, 1].Style.Font.Color.SetColor(colorMetricEXCPM);
            sheet.Cells[8, 2].Value = METRIC_EXCPM_FULLNAME;
            sheet.Cells[9, 1].Value = "\u25ac\u25ac\u25ac";
            sheet.Cells[9, 1].Style.Font.Color.SetColor(colorMetricHTTPEPM);
            sheet.Cells[9, 2].Value = METRIC_HTTPEPM_FULLNAME;

            #region Load Metric Data

            // Load metric data for each of the tables because it is faster than enumerating it from Excel sheet
            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_ART_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesAPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_CPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesCPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesEPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_EXCPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesEXCPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            metricsDataFolderPath = Path.Combine(metricsEntityFolderPath, METRIC_HTTPEPM_SHORTNAME);
            entityMetricValuesReportFilePath = Path.Combine(metricsDataFolderPath, CONVERT_METRIC_VALUES_FILE_NAME);
            List<MetricValue> metricValuesHTTPEPMList = FileIOHelper.readListFromCSVFile<MetricValue>(entityMetricValuesReportFilePath, new MetricValueMetricReportMap());

            // Break up the metric data into timeranges for each hour
            int[,] timeRangeAPM = null;
            int[,] timeRangeCPM = null;
            int[,] timeRangeEPM = null;
            int[,] timeRangeEXCPM = null;
            int[,] timeRangeHTTPEPM = null;
            if (metricValuesAPMList != null)
            {
                timeRangeAPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesAPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesCPMList != null)
            {
                timeRangeCPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesCPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesEPMList != null)
            {
                timeRangeEPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesEPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesEXCPMList != null)
            {
                timeRangeEXCPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesEXCPMList, jobConfiguration.Input.HourlyTimeRanges);
            }
            if (metricValuesHTTPEPMList != null)
            {
                timeRangeHTTPEPM = getLocationsOfHourlyTimeRangesFromMetricValues(metricValuesHTTPEPMList, jobConfiguration.Input.HourlyTimeRanges);
            }

            #endregion

            #region Prepare Styles and Resize Columns for each of the hour ranges

            var minuteHeadingtyle = sheet.Workbook.Styles.CreateNamedStyle("MinuteHeadingStyle");
            minuteHeadingtyle.Style.Font.Size = 9;

            var eventHeadingStyle = sheet.Workbook.Styles.CreateNamedStyle("EventHeadingStyle");
            eventHeadingStyle.Style.Font.Size = 9;

            var infoEventLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("InfoEventLinkStyle");
            infoEventLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            infoEventLinkStyle.Style.Fill.BackgroundColor.SetColor(colorLightBlueForInfoEvents); // This is sort of Color.LightBlue, but I like it better
            infoEventLinkStyle.Style.Font.Color.SetColor(Color.White);
            infoEventLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var warnEventLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("WarnEventLinkStyle");
            warnEventLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            warnEventLinkStyle.Style.Fill.BackgroundColor.SetColor(colorOrangeForWarnEvents); 
            warnEventLinkStyle.Style.Font.Color.SetColor(Color.Black);
            warnEventLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var errorEventLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("ErrorEventLinkStyle");
            errorEventLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            errorEventLinkStyle.Style.Fill.BackgroundColor.SetColor(colorRedForErrorEvents);
            errorEventLinkStyle.Style.Font.Color.SetColor(Color.Black);
            errorEventLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var normalSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("NormalSnapshotLinkStyle");
            normalSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            normalSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorGreenForNormalSnapshots);
            normalSnapshotLinkStyle.Style.Font.Color.SetColor(Color.White);
            normalSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var slowSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("SlowSnapshotLinkStyle");
            slowSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            slowSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorYellowForSlowSnapshots); 
            slowSnapshotLinkStyle.Style.Font.Color.SetColor(Color.Black);
            slowSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var verySlowSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("VerySlowSnapshotLinkStyle");
            verySlowSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            verySlowSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorOrangeForVerySlowSnapshots);
            verySlowSnapshotLinkStyle.Style.Font.Color.SetColor(Color.Black);
            verySlowSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var stallSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("StallSnapshotLinkStyle");
            stallSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            stallSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorOrangeForStallSnapshots);
            stallSnapshotLinkStyle.Style.Font.Color.SetColor(Color.White);
            stallSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            var errorSnapshotLinkStyle = sheet.Workbook.Styles.CreateNamedStyle("ErrorSnapshotLinkStyle");
            errorSnapshotLinkStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
            errorSnapshotLinkStyle.Style.Fill.BackgroundColor.SetColor(colorRedForErrorSnapshots);
            errorSnapshotLinkStyle.Style.Font.Color.SetColor(Color.Black);
            errorSnapshotLinkStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            #endregion

            #region Resize Columns for each of the hour ranges

            ExcelWorksheet sheetDetails = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SUMMARY];
            ExcelTable tableDetails = sheetDetails.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY];

            // Prepare vertical section for each of the hours
            int columnOffsetBegin = 6;
            int columnOffsetBetweenRanges = 1;
            for (int i = 0; i < jobConfiguration.Input.HourlyTimeRanges.Count; i++)
            {
                JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[i];

                // Adjust columns in sheet
                int columnIndexTimeRangeStart = columnOffsetBegin + i * columnOffsetBetweenRanges + i * 60;
                int columnIndexTimeRangeEnd = columnIndexTimeRangeStart + 60;
                int minuteNumber = 0;
                for (int columnIndex = columnIndexTimeRangeStart; columnIndex < columnIndexTimeRangeEnd; columnIndex++)
                {
                    sheet.Column(columnIndex).Width = 2.5;
                    sheet.Cells[REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT, columnIndex].Value = minuteNumber;
                    sheet.Cells[REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT, columnIndex].StyleName = "MinuteHeadingStyle";

                    sheet.Column(columnIndex).OutlineLevel = 1;
                    minuteNumber++;
                }

                // Add summaries from the hourly metric breakdowns
                if (tableDetails != null)
                {
                    if (entityType != ERRORS_TYPE_SHORT)
                    {
                        sheet.Cells[1, columnIndexTimeRangeStart + 0].Value = "Calls";
                        sheet.Cells[2, columnIndexTimeRangeStart + 0].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["Calls"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 6].Value = "CPM";
                        sheet.Cells[2, columnIndexTimeRangeStart + 6].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["CPM"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 12].Value = "ART";
                        sheet.Cells[2, columnIndexTimeRangeStart + 12].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["ART"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 18].Value = "Errors";
                        sheet.Cells[2, columnIndexTimeRangeStart + 18].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["Errors"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 24].Value = "EPM";
                        sheet.Cells[2, columnIndexTimeRangeStart + 24].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["EPM"].Position + 1].Value.ToString();
                        sheet.Cells[1, columnIndexTimeRangeStart + 30].Value = "Errors %";
                        sheet.Cells[2, columnIndexTimeRangeStart + 30].Value = String.Format("{0}%", sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["ErrorsPercentage"].Position + 1].Value.ToString());
                    }
                    else
                    {
                        sheet.Cells[1, columnIndexTimeRangeStart + 24].Value = "EPM";
                        sheet.Cells[2, columnIndexTimeRangeStart + 24].Value = sheetDetails.Cells[tableDetails.Address.Start.Row + 1 + i, tableDetails.Columns["EPM"].Position + 1].Value.ToString();
                    }
                }
                
                sheet.Cells[4, columnIndexTimeRangeStart + 0].Value = "Calls";
                sheet.Cells[4, columnIndexTimeRangeStart + 0].StyleName = "MinuteHeadingStyle";
                sheet.Cells[4, columnIndexTimeRangeStart + 56].Value = "Response";
                sheet.Cells[4, columnIndexTimeRangeStart + 56].StyleName = "MinuteHeadingStyle";
                sheet.Cells[1, columnIndexTimeRangeStart + 40].Value = "From";
                sheet.Cells[1, columnIndexTimeRangeStart + 50].Value = "To";
                sheet.Cells[2, columnIndexTimeRangeStart + 37].Value = "Local";
                sheet.Cells[2, columnIndexTimeRangeStart + 40].Value = jobTimeRange.From.ToLocalTime().ToString("G");
                sheet.Cells[2, columnIndexTimeRangeStart + 50].Value = jobTimeRange.To.ToLocalTime().ToString("G");
                sheet.Cells[3, columnIndexTimeRangeStart + 37].Value = "UTC";
                sheet.Cells[3, columnIndexTimeRangeStart + 40].Value = jobTimeRange.From.ToString("G");
                sheet.Cells[3, columnIndexTimeRangeStart + 50].Value = jobTimeRange.To.ToString("G");
            }

            #endregion

            #region Output Metric Graphs

            int rowIndexART = 1;
            int rowIndexCPM = 1;
            int rowIndexEPM = 1;
            int rowIndexEXCPM = 1;
            int rowIndexHTTPEPM = 1;

            for (int i = 0; i < jobConfiguration.Input.HourlyTimeRanges.Count; i++)
            {
                JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[i];

                int columnIndexTimeRangeStart = columnOffsetBegin + i * columnOffsetBetweenRanges + i * 60;

                ExcelChart chart = sheet.Drawings.AddChart(String.Format(REPORT_ENTITY_DETAILS_METRIC_GRAPH, entityType, jobTimeRange.From), eChartType.XYScatterLinesNoMarkers);
                chart.SetPosition(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 0, columnIndexTimeRangeStart - 1, 0);
                chart.SetSize(1020, 200);
                chart.Style = eChartStyle.Style17;

                ExcelChart chartART = chart.PlotArea.ChartTypes.Add(eChartType.XYScatterLinesNoMarkers);
                chartART.UseSecondaryAxis = true;
                chartART.Legend.Remove();

                // ART
                if (tableValuesART != null)
                {
                    ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesART, timeRangeAPM[i, 0], timeRangeAPM[i, 1]);
                    ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesART, timeRangeAPM[i, 0], timeRangeAPM[i, 1]);
                    if (rangeXTime != null & rangeYValues != null)
                    {
                        ExcelChartSerie series = chartART.Series.Add(rangeYValues, rangeXTime);
                        series.Header = "ART";
                        ((ExcelScatterChartSerie)series).LineColor = colorMetricART;

                        rowIndexART = rowIndexART + rangeXTime.Rows - 1;
                    }
                }

                // CPM
                if (tableValuesCPM != null)
                {
                    ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesCPM, timeRangeCPM[i, 0], timeRangeCPM[i, 1]);
                    ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesCPM, timeRangeCPM[i, 0], timeRangeCPM[i, 1]);
                    if (rangeXTime != null & rangeYValues != null)
                    {
                        ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                        series.Header = "CPM";
                        ((ExcelScatterChartSerie)series).LineColor = colorMetricCPM;

                        rowIndexCPM = rowIndexCPM + rangeXTime.Rows - 1;
                    }
                }

                // EPM
                if (tableValuesEPM != null)
                {
                    ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesEPM, timeRangeEPM[i, 0], timeRangeEPM[i, 1]);
                    ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesEPM, timeRangeEPM[i, 0], timeRangeEPM[i, 1]);
                    if (rangeXTime != null & rangeYValues != null)
                    {
                        ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                        series.Header = "EPM";
                        ((ExcelScatterChartSerie)series).LineColor = colorMetricEPM;

                        rowIndexEPM = rowIndexEPM + rangeXTime.Rows - 1;
                    }
                }

                // EXCPM
                if (tableValuesEXCPM != null)
                {
                    ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesEXCPM, timeRangeEXCPM[i, 0], timeRangeEXCPM[i, 1]);
                    ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesEXCPM, timeRangeEXCPM[i, 0], timeRangeEXCPM[i, 1]);
                    if (rangeXTime != null & rangeYValues != null)
                    {
                        ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                        series.Header = "EXCPM";
                        ((ExcelScatterChartSerie)series).LineColor = colorMetricEXCPM;

                        rowIndexEXCPM = rowIndexEXCPM + rangeXTime.Rows - 1;
                    }
                }

                // HTTPEPM
                if (tableValuesHTTPEPM != null)
                {
                    ExcelRangeBase rangeXTime = getRangeMetricDataTableForThisHourDateTimeSeries(tableValuesHTTPEPM, timeRangeHTTPEPM[i, 0], timeRangeHTTPEPM[i, 1]);
                    ExcelRangeBase rangeYValues = getRangeMetricDataTableForThisHourValueSeries(tableValuesHTTPEPM, timeRangeHTTPEPM[i, 0], timeRangeHTTPEPM[i, 1]);
                    if (rangeXTime != null & rangeYValues != null)
                    {
                        ExcelChartSerie series = chart.Series.Add(rangeYValues, rangeXTime);
                        series.Header = "HTTPEPM";
                        ((ExcelScatterChartSerie)series).LineColor = colorMetricHTTPEPM;

                        rowIndexHTTPEPM = rowIndexHTTPEPM + rangeXTime.Rows - 1;
                    }
                }
            }

            #endregion

            #region Output Events

            fromRow = REPORT_ENTITY_DETAILS_GRAPHS_SHEET_START_TABLE_AT + 1;

            int rowTableStart = fromRow;
            if (eventsFilteredList != null)
            {
                // Group by type and subtype to break the overall list in manageable chunks
                var eventsAllGroupedByType = eventsFilteredList.GroupBy(e => new { e.Type, e.SubType });
                List<List<Event>> eventsAllGrouped = new List<List<Event>>();

                // Group by the additional columns for some of the events
                foreach (var eventsGroup in eventsAllGroupedByType)
                {
                    switch (eventsGroup.Key.Type)
                    {
                        case "RESOURCE_POOL_LIMIT":
                            var eventsGroup_RESOURCE_POOL_LIMIT = eventsGroup.ToList().GroupBy(e => e.TierName);
                            foreach (var eventsGrouping in eventsGroup_RESOURCE_POOL_LIMIT)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "APPLICATION_ERROR":
                            var eventsGroup_APPLICATION_ERROR = eventsGroup.ToList().GroupBy(e => e.TierName);
                            foreach (var eventsGrouping in eventsGroup_APPLICATION_ERROR)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "DIAGNOSTIC_SESSION":
                            var eventsGroup_DIAGNOSTIC_SESSION = eventsGroup.ToList().GroupBy(e => new { e.TierName, e.BTName });
                            foreach (var eventsGrouping in eventsGroup_DIAGNOSTIC_SESSION)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "CUSTOM":
                            var eventsGroup_CUSTOM = eventsGroup.ToList().GroupBy(e => e.TierName);
                            foreach (var eventsGrouping in eventsGroup_CUSTOM)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        case "POLICY_OPEN_WARNING":
                        case "POLICY_OPEN_CRITICAL":
                        case "POLICY_CLOSE_WARNING":
                        case "POLICY_CLOSE_CRITICAL":
                        case "POLICY_UPGRADED":
                        case "POLICY_DOWNGRADED":
                        case "POLICY_CANCELED_WARNING":
                        case "POLICY_CANCELED_CRITICAL":
                        case "POLICY_CONTINUES_CRITICAL":
                        case "POLICY_CONTINUES_WARNING":
                            var eventsGroup_POLICY_ALL = eventsGroup.ToList().GroupBy(e => new { e.TriggeredEntityName, e.TierName });
                            foreach (var eventsGrouping in eventsGroup_POLICY_ALL)
                            {
                                eventsAllGrouped.Add(eventsGrouping.ToList());
                            }
                            break;

                        default:
                            eventsAllGrouped.Add(eventsGroup.ToList());
                            break;
                    }
                }

                // At this point we have the events partitioned just the way we want them
                // Each entry is guaranteed to have at least one item

                sheet.Cells[fromRow, 1].Value = "Type";
                sheet.Cells[fromRow, 2].Value = "SubType";
                sheet.Cells[fromRow, 3].Value = "Tier";
                sheet.Cells[fromRow, 4].Value = "BT";
                sheet.Cells[fromRow, 5].Value = "Trigger";

                fromRow++;
                for (int i = 0; i < eventsAllGrouped.Count; i++)
                {
                    int toRow = fromRow;

                    // Go through each hour range at a time
                    for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                    {
                        JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                        List<Event> eventsInThisTimeRangeList = eventsAllGrouped[i].Where(e => e.OccurredUtc >= jobTimeRange.From && e.OccurredUtc < jobTimeRange.To).ToList();

                        // Now we finally have all the events for this type in this hour. Output
                        int columnIndexTimeRangeStart = columnOffsetBegin + j * columnOffsetBetweenRanges + j * 60;
                        foreach (Event interestingEvent in eventsInThisTimeRangeList)
                        {
                            // Find Column
                            int columnInThisTimeRange = columnIndexTimeRangeStart + interestingEvent.OccurredUtc.Minute;
                            // Find Row
                            int rowToOutputThisEventTo = fromRow;
                            while (true)
                            {
                                if (sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Value == null && sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula == String.Empty)
                                {
                                    break;
                                }
                                else
                                {
                                    rowToOutputThisEventTo++;
                                }
                            }
                            if (rowToOutputThisEventTo > fromRow && rowToOutputThisEventTo > toRow)
                            {
                                toRow = rowToOutputThisEventTo;
                            }

                            int rowIndexOfThisEvent = eventsFilteredList.FindIndex(e => e.EventID == interestingEvent.EventID);

                            // Finally output the value
                            switch (interestingEvent.Severity)
                            {
                                case "INFO":
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""I"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "InfoEventLinkStyle";
                                    break;
                                case "WARN":
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""W"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "WarnEventLinkStyle";
                                    break;
                                case "ERROR":
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""E"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "ErrorEventLinkStyle";
                                    break;
                                default:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""?"")", REPORT_ENTITY_DETAILS_SHEET_EVENTS, getRangeEventDataTableThisEvent(tableEvents, rowIndexOfThisEvent));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "ErrorEventLinkStyle";
                                    break;
                            }

                            // Add tooltip
                            ExcelComment comment = sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].AddComment(interestingEvent.Summary, interestingEvent.EventID.ToString());
                            comment.AutoFit = true;

                            // Is there more than one event in this time range
                            if (rowToOutputThisEventTo > fromRow)
                            {
                                // Yes, then indicate that it has a few by underline
                                sheet.Cells[fromRow, columnInThisTimeRange].Style.Font.UnderLine = true;
                            }
                        }
                    }

                    // Output headings in the event heading columns columns
                    Event firstEvent = eventsAllGrouped[i][0];
                    for (int j = fromRow; j <= toRow; j++)
                    {
                        sheet.Cells[j, 1].Value = firstEvent.Type;
                        if (firstEvent.SubType != String.Empty) { sheet.Cells[j, 2].Value = firstEvent.SubType; }
                        if (firstEvent.TierName != String.Empty) { sheet.Cells[j, 3].Value = firstEvent.TierName; }
                        if (firstEvent.BTName != String.Empty) { sheet.Cells[j, 4].Value = firstEvent.BTName; }
                        if (firstEvent.TriggeredEntityName != String.Empty) { sheet.Cells[j, 5].Value = firstEvent.TriggeredEntityName; }
                        sheet.Cells[j, 1].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 2].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 3].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 4].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 5].StyleName = "EventHeadingStyle";
                        if (j == fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 1;
                        }
                        else if (j > fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 2;
                        }
                    }

                    fromRow = toRow;
                    fromRow++;
                }
            }
            int rowTableEnd = fromRow - 1;

            if (rowTableStart < rowTableEnd)
            {
                // Insert the table
                range = sheet.Cells[rowTableStart, 1, rowTableEnd, 5];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_EVENTS_IN_TIMELINE);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.None;
                //table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;
            }

            #endregion

            #region Output Snapshots

            fromRow++;
            rowTableStart = fromRow;

            if (snapshotsFilteredList != null)
            {
                // Group by Tier and BT to break list into manageable chunks
                //var snapshotsAllGroupedByType = snapshotsFilteredList.GroupBy(s => new { s.TierName, s.BTName });
                var snapshotsAllGroupedByType = snapshotsFilteredList.OrderBy(s => s.TierName).ThenBy(s => s.BTName).GroupBy(s => new { s.TierName, s.BTName });
                List<List<Snapshot>> snapshotsAllGrouped = new List<List<Snapshot>>();

                // Group by the user experience
                foreach (var snapshotsGroup in snapshotsAllGroupedByType)
                {
                    List<Snapshot> snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_NORMAL).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_SLOW).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_VERY_SLOW).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_STALL).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                    snapshotsList = snapshotsGroup.ToList().Where(s => s.UserExperience == SNAPSHOT_UX_ERROR).ToList();
                    if (snapshotsList.Count > 0) { snapshotsAllGrouped.Add(snapshotsList); }
                }

                // At this point we have the snapshots partitioned just the way we want them
                // Each entry is guaranteed to have at least one item

                sheet.Cells[fromRow, 1].Value = "Tier";
                sheet.Cells[fromRow, 2].Value = "BT";
                sheet.Cells[fromRow, 3].Value = " ";
                sheet.Cells[fromRow, 4].Value = "  ";
                sheet.Cells[fromRow, 5].Value = "Experience";

                fromRow++;
                for (int i = 0; i < snapshotsAllGrouped.Count; i++)
                {
                    int toRow = fromRow;

                    // Go through each hour range at a time
                    for (int j = 0; j < jobConfiguration.Input.HourlyTimeRanges.Count; j++)
                    {
                        JobTimeRange jobTimeRange = jobConfiguration.Input.HourlyTimeRanges[j];

                        List<Snapshot> snapshotsInThisTimeRangeList = snapshotsAllGrouped[i].Where(s => s.OccurredUtc >= jobTimeRange.From && s.OccurredUtc < jobTimeRange.To).ToList();

                        // Now we finally have all the events for this type in this hour. Output
                        int columnIndexTimeRangeStart = columnOffsetBegin + j * columnOffsetBetweenRanges + j * 60;
                        foreach (Snapshot interestingSnapshot in snapshotsInThisTimeRangeList)
                        {
                            // Find Column
                            int columnInThisTimeRange = columnIndexTimeRangeStart + interestingSnapshot.OccurredUtc.Minute;
                            // Find Row
                            int rowToOutputThisEventTo = fromRow;
                            while (true)
                            {
                                if (sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Value == null && sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula == String.Empty)
                                {
                                    break;
                                }
                                else
                                {
                                    rowToOutputThisEventTo++;
                                }
                            }
                            if (rowToOutputThisEventTo > fromRow && rowToOutputThisEventTo > toRow)
                            {
                                toRow = rowToOutputThisEventTo;
                            }

                            // Finally output the value
                            int rowIndexOfThisSnapshot = snapshotsFilteredList.FindIndex(s => s.RequestID == interestingSnapshot.RequestID);
                            switch (interestingSnapshot.UserExperience)
                            {
                                case SNAPSHOT_UX_NORMAL:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""N"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "NormalSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_SLOW:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""S"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "SlowSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_VERY_SLOW:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""V"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "VerySlowSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_STALL:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""X"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "StallSnapshotLinkStyle";
                                    break;
                                case SNAPSHOT_UX_ERROR:
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].Formula = String.Format(@"=HYPERLINK(""#'{0}'!{1}"", ""E"")", REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS, getRangeEventDataTableThisEvent(tableSnapshots, rowIndexOfThisSnapshot));
                                    sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].StyleName = "ErrorSnapshotLinkStyle";
                                    break;
                                default:
                                    break;
                            }

                            // Add tooltip with core details
                            ExcelComment comment = sheet.Cells[rowToOutputThisEventTo, columnInThisTimeRange].AddComment(
                                String.Format("Duration: {0}\nURL: {1}\nSegments: {2}\nCall Graph: {3}\nCall Chain:\n{4}",
                                    interestingSnapshot.Duration,
                                    interestingSnapshot.URL,
                                    interestingSnapshot.NumSegments,
                                    interestingSnapshot.CallGraphType,
                                    interestingSnapshot.CallChains),
                                interestingSnapshot.RequestID);

                            if (interestingSnapshot.UserExperience == SNAPSHOT_UX_ERROR)
                            {
                                comment.Text = String.Format("{0}\n{1}", comment.Text, interestingSnapshot.TakenSummary);
                            }
                            
                            comment.AutoFit = true;

                            // Is there more than one event in this time range
                            if (rowToOutputThisEventTo > fromRow)
                            {
                                // Yes, then indicate that it has a few by underline
                                sheet.Cells[fromRow, columnInThisTimeRange].Style.Font.UnderLine = true;
                            }
                        }
                    }

                    // Output headings in the event heading columns columns
                    Snapshot firstSnapshot = snapshotsAllGrouped[i][0];
                    for (int j = fromRow; j <= toRow; j++)
                    {
                        sheet.Cells[j, 1].Value = firstSnapshot.TierName;
                        sheet.Cells[j, 2].Value = firstSnapshot.BTName;
                        sheet.Cells[j, 5].Value = firstSnapshot.UserExperience;
                        sheet.Cells[j, 1].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 2].StyleName = "EventHeadingStyle";
                        sheet.Cells[j, 5].StyleName = "EventHeadingStyle";
                        if (j == fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 1;
                        }
                        else if (j > fromRow)
                        {
                            sheet.Row(j).OutlineLevel = 2;
                        }
                    }

                    fromRow = toRow;
                    fromRow++;
                }
            }
            rowTableEnd = fromRow - 1;

            if (rowTableStart < rowTableEnd)
            {
                // Insert the table
                range = sheet.Cells[rowTableStart, 1, rowTableEnd, 5];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS_IN_TIMELINE);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.None;
                //table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;
            }

            sheet.OutLineSummaryBelow = false;
            sheet.OutLineSummaryRight = true;

            #endregion

            #endregion
        }

        private static bool finalizeAndSaveIndividualEntityMetricReport(ExcelPackage excelEntityDetail, string entityType, string reportFilePath)
        {
            logger.Info("Finalize Entity Metrics Report File {0}", reportFilePath);

            ExcelWorksheet sheet;
            ExcelRangeBase range;
            ExcelTable table;

            #region Summary sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SUMMARY];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_HOURLY];
                if (table != null)
                {
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;
                }
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL];
                if (table != null)
                {
                    table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_ENTITY_FULL];
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    adjustColumnsOfEntityRowTableInMetricReport(entityType, sheet, table);

                    // Remove DetailLink column because this document would be pointing to relative location from the overall metric reports, and the link would be invalid
                    sheet.DeleteColumn(table.Columns["DetailLink"].Position + 1);
                }
            }

            #endregion

            #region Timeline sheet

            // Move the last-created Timeline sheet to the earlier location
            excelEntityDetail.Workbook.Worksheets.MoveAfter(REPORT_ENTITY_DETAILS_SHEET_TIMELINE, REPORT_ENTITY_DETAILS_SHEET_SUMMARY);

            sheet.Column(1).Width = 12;
            sheet.Column(2).Width = 12;
            sheet.Column(3).Width = 12;
            sheet.Column(4).Width = 12;
            sheet.Column(5).Width = 12;

            #endregion

            #region Activity Flow sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_ACTIVITYGRID];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_ACTIVITY_GRID);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["CallType"].Position + 1).Width = 10;
                sheet.Column(table.Columns["FromName"].Position + 1).Width = 35;
                sheet.Column(table.Columns["ToName"].Position + 1).Width = 35;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
            }

            #endregion

            #region Events sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EVENTS];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_EVENTS];
                if (table != null)
                {
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["EventID"].Position + 1).Width = 25;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Summary"].Position + 1).Width = 35;
                    sheet.Column(table.Columns["Type"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["SubType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityType"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TriggeredEntityName"].Position + 1).Width = 20;

                    sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EVENTS_PIVOT];

                    range = (ExcelRangeBase)table.Address;

                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_ENTITY_DETAILS_PIVOT_EVENTS);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["Type"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["SubType"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["NodeName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["Severity"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["EventID"]);
                    fieldD.Function = DataFieldFunctions.Count;
                }
            }

            #endregion

            #region HR Violations sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_HEALTH_RULE_VIOLATION_EVENTS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["EventID"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["HealthRuleName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["EntityName"].Position + 1).Width = 20;

                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_HEALTH_RULE_VIOLATIONS_PIVOT];

                ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_ENTITY_DETAILS_PIVOT_HEALTH_RULE_VIOLATION_EVENTS);
                ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["Status"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["HealthRuleName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["EntityType"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["EntityName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["Severity"]);
                fieldC.Compact = false;
                fieldC.Outline = false;
                ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["EventID"]);
                fieldD.Function = DataFieldFunctions.Count;
            }

            #endregion

            #region Snapshots sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS];
            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                table = sheet.Tables[REPORT_ENTITY_DETAILS_TABLE_SNAPSHOTS];
                if (table != null)
                {
                    table.ShowHeader = true;
                    table.TableStyle = TableStyles.Medium2;
                    table.ShowFilter = true;
                    table.ShowTotal = false;

                    sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["UserExperience"].Position + 1).Width = 10;
                    sheet.Column(table.Columns["RequestID"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                    sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                    ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["UserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["UserExperience"].Position + 1);
                    var cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.White;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorGreenForNormalSnapshots;
                    cfUserExperience.Formula = @"=""NORMAL""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorYellowForSlowSnapshots;
                    cfUserExperience.Formula = @"=""SLOW""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForVerySlowSnapshots;
                    cfUserExperience.Formula = @"=""VERY_SLOW""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.White;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForStallSnapshots;
                    cfUserExperience.Formula = @"=""STALL""";

                    cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                    cfUserExperience.Style.Font.Color.Color = Color.Black;
                    cfUserExperience.Style.Fill.BackgroundColor.Color = colorRedForErrorSnapshots;
                    cfUserExperience.Formula = @"=""ERROR""";

                    ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                    var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                    cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                    cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                    cfDuration.MiddleValue.Value = 70;
                    cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                    cfDuration.HighValue.Color = colorRedFor3ColorScales;

                    ExcelAddress cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                    var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallGraphs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallGraphs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToBackends"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToTiers"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToApplications"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                    cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                    sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SNAPSHOTS_PIVOT];

                    range = (ExcelRangeBase)table.Address;

                    ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_ENTITY_DETAILS_PIVOT_SNAPSHOTS);
                    ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                    fieldR.Compact = false;
                    fieldR.Outline = false;
                    ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["UserExperience"]);
                    fieldC.Compact = false;
                    fieldC.Outline = false;
                    ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                    fieldD.Function = DataFieldFunctions.Count;
                }

            }

            #endregion

            #region Segments sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SEGMENTS];
            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_SEGMENTS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["UserExperience"].Position + 1).Width = 10;
                sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                sheet.Column(table.Columns["FromSegmentID"].Position + 1).Width = 15;
                sheet.Column(table.Columns["FromTierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                ExcelAddress cfAddressUserExperience = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["UserExperience"].Position + 1, sheet.Dimension.Rows, table.Columns["UserExperience"].Position + 1);
                var cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                cfUserExperience.Style.Font.Color.Color = Color.White;
                cfUserExperience.Style.Fill.BackgroundColor.Color = colorGreenForNormalSnapshots;
                cfUserExperience.Formula = @"=""NORMAL""";

                cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                cfUserExperience.Style.Font.Color.Color = Color.Black;
                cfUserExperience.Style.Fill.BackgroundColor.Color = colorYellowForSlowSnapshots;
                cfUserExperience.Formula = @"=""SLOW""";

                cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                cfUserExperience.Style.Font.Color.Color = Color.Black;
                cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForVerySlowSnapshots;
                cfUserExperience.Formula = @"=""VERY_SLOW""";

                cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                cfUserExperience.Style.Font.Color.Color = Color.White;
                cfUserExperience.Style.Fill.BackgroundColor.Color = colorOrangeForStallSnapshots;
                cfUserExperience.Formula = @"=""STALL""";

                cfUserExperience = sheet.ConditionalFormatting.AddEqual(cfAddressUserExperience);
                cfUserExperience.Style.Font.Color.Color = Color.Black;
                cfUserExperience.Style.Fill.BackgroundColor.Color = colorRedForErrorSnapshots;
                cfUserExperience.Formula = @"=""ERROR""";

                ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfDuration.MiddleValue.Value = 70;
                cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                cfDuration.HighValue.Color = colorRedFor3ColorScales;

                ExcelAddress cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumErrors"].Position + 1, sheet.Dimension.Rows, table.Columns["NumErrors"].Position + 1);
                var cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledBackends"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledTiers"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCalledApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCalledApplications"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToBackends"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToBackends"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToTiers"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToTiers"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumCallsToApplications"].Position + 1, sheet.Dimension.Rows, table.Columns["NumCallsToApplications"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumSEPs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumSEPs"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumHTTPDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumHTTPDCs"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                cfAddressNum = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["NumMIDCs"].Position + 1, sheet.Dimension.Rows, table.Columns["NumMIDCs"].Position + 1);
                cfNum = sheet.ConditionalFormatting.AddDatabar(cfAddressNum, colorLightBlueForDatabars);

                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SEGMENTS_PIVOT];

                ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_ENTITY_DETAILS_PIVOT_SEGMENTS);
                ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                ExcelPivotTableField fieldC = pivot.ColumnFields.Add(pivot.Fields["UserExperience"]);
                fieldC.Compact = false;
                fieldC.Outline = false;
                ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["SegmentID"]);
                fieldD.Function = DataFieldFunctions.Count;
            }

            #endregion

            #region Exit Calls sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_EXIT_CALLS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                sheet.Column(table.Columns["ToEntityName"].Position + 1).Width = 15;
                sheet.Column(table.Columns["ExitType"].Position + 1).Width = 10;
                sheet.Column(table.Columns["Detail"].Position + 1).Width = 20;
                sheet.Column(table.Columns["Method"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ToSegmentID"].Position + 1).Width = 15;
                sheet.Column(table.Columns["Occurred"].Position + 1).Width = 20;
                sheet.Column(table.Columns["OccurredUtc"].Position + 1).Width = 20;

                ExcelAddress cfAddressDuration = new ExcelAddress(REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT + 1, table.Columns["Duration"].Position + 1, sheet.Dimension.Rows, table.Columns["Duration"].Position + 1);
                var cfDuration = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressDuration);
                cfDuration.LowValue.Color = colorGreenFor3ColorScales;
                cfDuration.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfDuration.MiddleValue.Value = 70;
                cfDuration.MiddleValue.Color = colorYellowFor3ColorScales;
                cfDuration.HighValue.Color = colorRedFor3ColorScales;

                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_EXIT_CALLS_PIVOT];

                ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_ENTITY_DETAILS_PIVOT_EXIT_CALLS);
                ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["ExitType"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["Detail"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                fieldD.Function = DataFieldFunctions.Count;
                fieldD.Name = "Number of Items";
                fieldD = pivot.DataFields.Add(pivot.Fields["Duration"]);
                fieldD.Function = DataFieldFunctions.Average;
                fieldD.Name = "Average Duration";
                fieldD = pivot.DataFields.Add(pivot.Fields["Duration"]);
                fieldD.Function = DataFieldFunctions.Sum;
                fieldD.Name = "Total Duration";
            }

            #endregion

            #region Service Endpoint Calls sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_SERVICE_ENDPOINT_CALLS];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_SERVICE_ENDPOINT_CALLS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                sheet.Column(table.Columns["SepName"].Position + 1).Width = 20;
            }

            #endregion

            #region Errors sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_DETECTED_ERRORS);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                sheet.Column(table.Columns["ErrorName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorMessage"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorDetail"].Position + 1).Width = 20;

                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_DETECTED_ERRORS_PIVOT];

                ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_ENTITY_DETAILS_PIVOT_DETECTED_ERRORS);
                ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["ErrorMessage"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                fieldD.Function = DataFieldFunctions.Count;
            }

            #endregion

            #region Business Data sheet

            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA];

            if (sheet.Dimension.Rows > REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT)
            {
                range = sheet.Cells[REPORT_ENTITY_DETAILS_LIST_SHEET_START_TABLE_AT, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
                table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_BUSINESS_DATA);
                table.ShowHeader = true;
                table.TableStyle = TableStyles.Medium2;
                table.ShowFilter = true;
                table.ShowTotal = false;

                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["RequestID"].Position + 1).Width = 15;
                sheet.Column(table.Columns["SegmentID"].Position + 1).Width = 10;
                sheet.Column(table.Columns["DataName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["DataValue"].Position + 1).Width = 20;
                sheet.Column(table.Columns["DataType"].Position + 1).Width = 10;

                sheet = excelEntityDetail.Workbook.Worksheets[REPORT_ENTITY_DETAILS_SHEET_BUSINESS_DATA_PIVOT];

                ExcelPivotTable pivot = sheet.PivotTables.Add(sheet.Cells[REPORT_ENTITY_DETAILS_PIVOT_SHEET_START_PIVOT_AT, 1], range, REPORT_ENTITY_DETAILS_PIVOT_BUSINESS_DATA);
                ExcelPivotTableField fieldR = pivot.RowFields.Add(pivot.Fields["Controller"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["ApplicationName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["TierName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["BTName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["DataType"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                fieldR = pivot.RowFields.Add(pivot.Fields["DataName"]);
                fieldR.Compact = false;
                fieldR.Outline = false;
                ExcelPivotTableDataField fieldD = pivot.DataFields.Add(pivot.Fields["RequestID"]);
                fieldD.Function = DataFieldFunctions.Count;
            }

            #endregion

            #region TOC sheet

            // TOC sheet again
            sheet = excelEntityDetail.Workbook.Worksheets[REPORT_SHEET_TOC];
            sheet.Cells[1, 1].Value = "Sheet Name";
            sheet.Cells[1, 2].Value = "# Tables";
            sheet.Cells[1, 3].Value = "Link";
            int rowNum = 1;
            foreach (ExcelWorksheet s in excelEntityDetail.Workbook.Worksheets)
            {
                rowNum++;
                sheet.Cells[rowNum, 1].Value = s.Name;
                sheet.Cells[rowNum, 3].Formula = String.Format(@"=HYPERLINK(""#'{0}'!A1"", ""<Go>"")", s.Name);
                sheet.Cells[rowNum, 3].StyleName = "HyperLinkStyle";
                if (s.Tables.Count == 1)
                {
                    sheet.Cells[rowNum, 2].Value =  s.Tables[0].Address.Rows - 1;
                }
                else if (s.Tables.Count > 0)
                {
                    sheet.Cells[rowNum, 2].Value = String.Format("{0} tables", s.Tables.Count);
                }
            }
            range = sheet.Cells[1, 1, sheet.Dimension.Rows, sheet.Dimension.Columns];
            table = sheet.Tables.Add(range, REPORT_ENTITY_DETAILS_TABLE_TOC);
            table.ShowHeader = true;
            table.TableStyle = TableStyles.Medium2;
            table.ShowFilter = true;
            table.ShowTotal = false;

            sheet.Column(table.Columns["Sheet Name"].Position + 1).Width = 25;
            sheet.Column(table.Columns["# Tables"].Position + 1).Width = 25;

            #endregion
            
            #region Save file 

            // Report files
            logger.Info("Saving Excel report {0}", reportFilePath);
            //loggerConsole.Info("Saving Excel report {0}", reportFilePath);

            string folderPath = Path.GetDirectoryName(reportFilePath);
            if (Directory.Exists(folderPath) == false)
            {
                Directory.CreateDirectory(folderPath);
            }

            try
            {
                // Save full report Excel files
                excelEntityDetail.SaveAs(new FileInfo(reportFilePath));
            }
            catch (InvalidOperationException ex)
            {
                logger.Warn("Unable to save Excel file {0}", reportFilePath);
                logger.Warn(ex);
                loggerConsole.Warn("Unable to save Excel file {0}", reportFilePath);

                return false;
            }

            #endregion

            return true;
        }

        private static void adjustColumnsOfEntityRowTableInMetricReport(string entityType, ExcelWorksheet sheet, ExcelTable table)
        {
            if (entityType == APPLICATION_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == TIERS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == NODES_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["NodeName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["AgentType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == BACKENDS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BackendName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BackendType"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == BUSINESS_TRANSACTIONS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["BTType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == SERVICE_ENDPOINTS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["SEPType"].Position + 1).Width = 25;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == ERRORS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["TierName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ErrorName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
            else if (entityType == INFORMATION_POINTS_TYPE_SHORT)
            {
                sheet.Column(table.Columns["Controller"].Position + 1).Width = 20;
                sheet.Column(table.Columns["ApplicationName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["IPName"].Position + 1).Width = 20;
                sheet.Column(table.Columns["IPType"].Position + 1).Width = 20;
                sheet.Column(table.Columns["From"].Position + 1).Width = 25;
                sheet.Column(table.Columns["To"].Position + 1).Width = 25;
                sheet.Column(table.Columns["FromUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["ToUtc"].Position + 1).Width = 25;
                sheet.Column(table.Columns["DetailLink"].Position + 1).Width = 25;
            }
        }

        private static void addConditionalFormattingToTableInMetricReport(string entityType, ExcelWorksheet sheet, ExcelTable table)
        {
            if (entityType == APPLICATION_TYPE_SHORT ||
                entityType == TIERS_TYPE_SHORT ||
                entityType == NODES_TYPE_SHORT ||
                entityType == BACKENDS_TYPE_SHORT ||
                entityType == BUSINESS_TRANSACTIONS_TYPE_SHORT ||
                entityType == SERVICE_ENDPOINTS_TYPE_SHORT ||
                entityType == INFORMATION_POINTS_TYPE_SHORT)
            {
                ExcelAddress cfAddressErrorPercentage = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["ErrorsPercentage"].Position + 1, sheet.Dimension.Rows, table.Columns["ErrorsPercentage"].Position + 1);
                var cfErrorPercentage = sheet.ConditionalFormatting.AddDatabar(cfAddressErrorPercentage, colorRedForDatabars);
                cfErrorPercentage.LowValue.Type = eExcelConditionalFormattingValueObjectType.Num;
                cfErrorPercentage.LowValue.Value = 0;
                cfErrorPercentage.HighValue.Type = eExcelConditionalFormattingValueObjectType.Num;
                cfErrorPercentage.HighValue.Value = 100;

                ExcelAddress cfAddressART = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["ART"].Position + 1, sheet.Dimension.Rows, table.Columns["ART"].Position + 1);
                var cfART = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressART);
                cfART.LowValue.Color = colorGreenFor3ColorScales;
                cfART.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfART.MiddleValue.Value = 70;
                cfART.MiddleValue.Color = colorYellowFor3ColorScales;
                cfART.HighValue.Color = colorRedFor3ColorScales;

                ExcelAddress cfAddressCPM = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["CPM"].Position + 1, sheet.Dimension.Rows, table.Columns["CPM"].Position + 1);
                var cfCPM = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressCPM);
                cfCPM.LowValue.Color = colorGreenFor3ColorScales;
                cfCPM.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfCPM.MiddleValue.Value = 70;
                cfCPM.MiddleValue.Color = colorYellowFor3ColorScales;
                cfCPM.HighValue.Color = colorRedFor3ColorScales;

                ExcelAddress cfAddressEPM = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["EPM"].Position + 1, sheet.Dimension.Rows, table.Columns["EPM"].Position + 1);
                var cfEPM = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressEPM);
                cfEPM.LowValue.Color = colorGreenFor3ColorScales;
                cfEPM.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfEPM.MiddleValue.Value = 70;
                cfEPM.MiddleValue.Color = colorYellowFor3ColorScales;
                cfEPM.HighValue.Color = colorRedFor3ColorScales;
            }
            else if (entityType == ERRORS_TYPE_SHORT)
            {
                ExcelAddress cfAddressEPM = new ExcelAddress(REPORT_METRICS_ALL_ENTITIES_LIST_SHEET_START_TABLE_AT + 1, table.Columns["EPM"].Position + 1, sheet.Dimension.Rows, table.Columns["EPM"].Position + 1);
                var cfEPM = sheet.ConditionalFormatting.AddThreeColorScale(cfAddressEPM);
                cfEPM.LowValue.Color = colorGreenFor3ColorScales;
                cfEPM.MiddleValue.Type = eExcelConditionalFormattingValueObjectType.Percentile;
                cfEPM.MiddleValue.Value = 70;
                cfEPM.MiddleValue.Color = colorYellowFor3ColorScales;
                cfEPM.HighValue.Color = colorRedFor3ColorScales;
            }
        }

        private static int[,] getLocationsOfHourlyTimeRangesFromMetricValues(List<MetricValue> metricValues, List<JobTimeRange> jobTimeRanges)
        {
            // Element 0 of each row is index of time range Start
            // Element 1 of each row is index of time range End
            int[,] timeRangePartitionData = new int[jobTimeRanges.Count, 2];
            int fromIndexColumn = 0;
            int toIndexColumn = 1;
            int metricValuesCount = metricValues.Count;

            // First pass - scroll through and bucketize each our into invidual hour chunk
            int currentMetricValueRowIndex = 0;
            for (int i = 0; i < jobTimeRanges.Count; i++)
            {
                JobTimeRange jobTimeRange = jobTimeRanges[i];

                timeRangePartitionData[i, fromIndexColumn] = -1;
                timeRangePartitionData[i, toIndexColumn] = -1;

                while (currentMetricValueRowIndex < metricValuesCount)
                {
                    if (metricValues[currentMetricValueRowIndex].EventTimeStampUtc >= jobTimeRange.From &&
                        metricValues[currentMetricValueRowIndex].EventTimeStampUtc < jobTimeRange.To)
                    {
                        if (timeRangePartitionData[i, fromIndexColumn] == -1)
                        {
                            // Found From
                            timeRangePartitionData[i, fromIndexColumn] = currentMetricValueRowIndex;
                            timeRangePartitionData[i, toIndexColumn] = currentMetricValueRowIndex;
                        }
                        else
                        {
                            // Found potential To
                            timeRangePartitionData[i, toIndexColumn] = currentMetricValueRowIndex;
                        }
                        currentMetricValueRowIndex++;
                    }
                    else
                    {
                        break;
                    }
                }
            }

            // Second pass - adjust end times to overlap with the on-the-hour entries from subsequent ones because we're going to want those entries on the graphs
            // But don't adjust last entry 
            for (int i = 0; i < jobTimeRanges.Count - 1; i++)
            {
                JobTimeRange jobTimeRange = jobTimeRanges[i];

                if (timeRangePartitionData[i, fromIndexColumn] != -1 && 
                    timeRangePartitionData[i, toIndexColumn] != -1 &&
                    timeRangePartitionData[i + 1, fromIndexColumn] != -1 &&
                    timeRangePartitionData[i + 1, toIndexColumn] != -1)
                {
                    if (metricValues[timeRangePartitionData[i + 1, fromIndexColumn]].EventTimeStampUtc == jobTimeRange.To)
                    {
                        timeRangePartitionData[i, toIndexColumn] = timeRangePartitionData[i + 1, fromIndexColumn];
                    }
                }
            }

            return timeRangePartitionData;
        }

        private static ExcelRangeBase getRangeMetricDataTableForThisHourDateTimeSeries(ExcelTable table, int rowIndexStart, int rowIndexEnd)
        {
            // Find index of the important columns
            int columnIndexEventTime = table.Columns["EventTime"].Position;

            if (rowIndexStart != -1 && rowIndexEnd != -1)
            {
                return table.WorkSheet.Cells[
                    table.Address.Start.Row + rowIndexStart + 1,
                    table.Address.Start.Column + columnIndexEventTime,
                    table.Address.Start.Row + rowIndexEnd + 1,
                    table.Address.Start.Column + columnIndexEventTime];
            }

            return null;
        }

        private static ExcelRangeBase getRangeMetricDataTableForThisHourValueSeries(ExcelTable table, int rowIndexStart, int rowIndexEnd)
        {
            // Find index of the important columns
            int columnIndexEventTime = table.Columns["Value"].Position;

            if (rowIndexStart != -1 && rowIndexEnd != -1)
            {
                return table.WorkSheet.Cells[
                    table.Address.Start.Row + rowIndexStart + 1,
                    table.Address.Start.Column + columnIndexEventTime,
                    table.Address.Start.Row + rowIndexEnd + 1,
                    table.Address.Start.Column + columnIndexEventTime];
            }

            return null;
        }

        private static ExcelRangeBase getRangeEventDataTableThisEvent(ExcelTable table, int rowIndex)
        {
            return table.WorkSheet.Cells[
                table.Address.Start.Row + rowIndex + 1,
                table.Address.Start.Column,
                table.Address.Start.Row + rowIndex + 1,
                table.Address.End.Column];
        }

        #endregion


        #region Helper functions for reading CSV into Excel worksheet

        private static ExcelRangeBase readCSVFileIntoExcelRange(MemoryStream csvStream, int skipLinesFromBeginning, ExcelWorksheet sheet, int startRow, int startColumn)
        {
            logger.Trace("Reading CSV file from memory stream to Excel Worksheet {0} at (row {1}, column {2})", sheet.Name, startRow, startColumn);

            try
            {
                using (StreamReader sr = new StreamReader(csvStream))
                {
                    return readCSVIntoExcelRage(sr, skipLinesFromBeginning, sheet, startRow, startColumn);
                }
            }
            catch (Exception ex)
            {
                logger.Error("Unable to read CSV from memory stream");
                logger.Error(ex);
            }

            return null;
        }

        private static ExcelRangeBase readCSVFileIntoExcelRange(string csvFilePath, int skipLinesFromBeginning, ExcelWorksheet sheet, int startRow, int startColumn)
        {
            logger.Trace("Reading CSV file {0} to Excel Worksheet {1} at (row {2}, column {3})", csvFilePath, sheet.Name, startRow, startColumn);

            if (File.Exists(csvFilePath) == false)
            {
                logger.Warn("Unable to find file {0}", csvFilePath);

                return null;
            }

            try
            {
                using (StreamReader sr = File.OpenText(csvFilePath))
                {
                    return readCSVIntoExcelRage(sr, skipLinesFromBeginning, sheet, startRow, startColumn);
                }
            }
            catch (Exception ex)
            {
                logger.Error("Unable to read CSV from file {0}", csvFilePath);
                logger.Error(ex);
            }

            return null;
        }

        private static ExcelRangeBase readCSVIntoExcelRage(StreamReader sr, int skipLinesFromBeginning, ExcelWorksheet sheet, int startRow, int startColumn)
        {
            int csvRowIndex = -1;
            int numColumnsInCSV = 0;
            string[] headerRowValues = null;

            CsvParser csvParser = new CsvParser(sr);

            // Read all rows
            while (true)
            {
                string[] rowValues = csvParser.Read();
                if (rowValues == null)
                {
                    break;
                }
                csvRowIndex++;

                // Grab the headers
                if (csvRowIndex == 0)
                {
                    headerRowValues = rowValues;
                    numColumnsInCSV = headerRowValues.Length;
                }

                // Should we skip?
                if (csvRowIndex < skipLinesFromBeginning)
                {
                    // Skip this line
                    continue;
                }

                // Read row one field at a time
                int csvFieldIndex = 0;
                foreach (string fieldValue in rowValues)
                {
                    ExcelRange cell = sheet.Cells[csvRowIndex + startRow - skipLinesFromBeginning, csvFieldIndex + startColumn];
                    if (fieldValue.StartsWith("=") == true)
                    {
                        cell.Formula = fieldValue;

                        if (fieldValue.StartsWith("=HYPERLINK") == true)
                        {
                            cell.StyleName = "HyperLinkStyle";
                        }
                    }
                    else if (fieldValue.StartsWith("http://") == true || fieldValue.StartsWith("https://") == true)
                    {
                        // If it is in the column ending in Link, I want it to be hyperlinked and use the column name
                        if (headerRowValues[csvFieldIndex] == "Link")
                        {
                            // This is the ART summary table, those links are OK, there are not that many of them
                            cell.Hyperlink = new Uri(fieldValue);
                            cell.Value = "<Go>";
                            cell.StyleName = "HyperLinkStyle";
                        }
                        // Temporarily commenting out until I figure the large number of rows leading to hyperlink corruption thing
                        //else if (headerRowValues[csvFieldIndex].EndsWith("Link"))
                        //{
                        //    cell.Hyperlink = new Uri(fieldValue);
                        //    string linkName = String.Format("<{0}>", headerRowValues[csvFieldIndex].Replace("Link", ""));
                        //    if (linkName == "<>") linkName = "<Go>";
                        //    cell.Value = linkName;
                        //    cell.StyleName = "HyperLinkStyle";
                        //}
                        else
                        {
                            // Otherwise dump it as text
                            cell.Value = fieldValue;
                        }
                    }
                    else
                    {
                        Double numValue;
                        bool boolValue;
                        DateTime dateValue;

                        // Try some casting
                        if (Double.TryParse(fieldValue, NumberStyles.Any, NumberFormatInfo.InvariantInfo, out numValue) == true)
                        {
                            // Number
                            cell.Value = numValue;
                        }
                        else if (Boolean.TryParse(fieldValue, out boolValue) == true)
                        {
                            // Boolean
                            cell.Value = boolValue;
                        }
                        else if (DateTime.TryParse(fieldValue, out dateValue))
                        {
                            // DateTime
                            cell.Value = dateValue;
                            if (headerRowValues[csvFieldIndex] == "EventTime")
                            {
                                cell.Style.Numberformat.Format = "hh:mm";
                            }
                            else
                            {
                                cell.Style.Numberformat.Format = "mm/dd/yyyy hh:mm:ss";
                            }
                        }
                        else
                        {
                            // Something else, dump as is

                            // https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3
                            // Total number of characters that a cell can contain 32,767 characters
                            // Must cut off cell value if it is too big, or risk Excel complaining during sheet load

                            if (fieldValue.Length > 32000)
                            {
                                cell.Value = fieldValue.Substring(0, 32000);
                            }
                            else
                            {
                                cell.Value = fieldValue;
                            }
                        }
                    }
                    csvFieldIndex++;
                }
            }

            return sheet.Cells[startRow, startColumn, startRow + csvRowIndex, startColumn + numColumnsInCSV - 1];
        }

        #endregion

        #region Helper function for various entity naming

        private static string getShortenedEntityNameForFileSystem(string entityName, long entityID)
        {
            string originalEntityName = entityName;

            // First, strip out unsafe characters
            entityName = getFileSystemSafeString(entityName);

            // Second, shorten the string 
            if (entityName.Length > 12) entityName = entityName.Substring(0, 12);

            return String.Format("{0}.{1}", entityName, entityID);
        }

        private static string getFileSystemSafeString(string fileOrFolderNameToClear)
        {
            foreach (var c in Path.GetInvalidFileNameChars())
            {
                fileOrFolderNameToClear = fileOrFolderNameToClear.Replace(c, '-');
            }

            return fileOrFolderNameToClear;
        }

        private static string getShortenedEntityNameForExcelTable(string entityName, long entityID)
        {
            string originalEntityName = entityName;

            // First, strip out unsafe characters
            entityName = getExcelTableOrSheetSafeString(entityName);

            // Second, shorten the string 
            if (entityName.Length > 50) entityName = entityName.Substring(0, 50);

            return String.Format("{0}.{1}", entityName, entityID);
        }

        private static string getShortenedEntityNameForExcelSheet(string entityName, int entityID, int maxLength)
        {
            string originalEntityName = entityName;

            // First, strip out unsafe characters
            entityName = getExcelTableOrSheetSafeString(entityName);

            // Second, measure the unique ID length and shorten the name of string down
            maxLength = maxLength - 1 - entityID.ToString().Length;

            // Third, shorten the string 
            if (entityName.Length > maxLength) entityName = entityName.Substring(0, maxLength);

            return String.Format("{0}.{1}", entityName, entityID);
        }

        private static string getExcelTableOrSheetSafeString(string stringToClear)
        {
            char[] excelTableInvalidChars = { ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '=', ',', '/', '\\', '[', ']', ':', '?', '|', '"', '<', '>'};
            foreach (var c in excelTableInvalidChars)
            {
                stringToClear = stringToClear.Replace(c, '-');
            }

            return stringToClear;
        }

        #endregion

        #region Helper functions for Unix time handling

        /// <summary>
        /// Converts UNIX timestamp to DateTime
        /// </summary>
        /// <param name="timestamp"></param>
        /// <returns></returns>
        private static DateTime convertFromUnixTimestamp(long timestamp)
        {
            DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            return origin.AddMilliseconds(timestamp);
        }

        /// <summary>
        /// Converts DateTime to Unix timestamp
        /// </summary>
        /// <param name="date"></param>
        /// <returns></returns>
        private static long convertToUnixTimestamp(DateTime date)
        {
            DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
            TimeSpan diff = date.ToUniversalTime() - origin;
            return (long)Math.Floor(diff.TotalMilliseconds);
        }

        #endregion
    }
}